import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as D,c as t,a as s,b as n,d as l,f as c,e as p}from"./app-33675145.js";const r={},i={id:"不同的二叉搜索树-ii",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#不同的二叉搜索树-ii","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii/",target:"_blank",rel:"noopener noreferrer"},C=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("给定整数"),s("code",null,"n"),n("，求恰由"),s("code",null,"n"),n("个节点组成且节点值从"),s("code",null,"1"),n("到"),s("code",null,"n"),n("互不相同的二叉搜索树数量")])],-1),v={class:"hint-container details"},u=s("summary",null,"Solution",-1),m={href:"https://leetcode.cn/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"},E=s("p",null,[n("回溯时按照遍历根节点递归分左右子树的思路依旧：对于节点序列 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"1, \\cdots, n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" ，可以遍历取特定数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 作为根节点，则左右子树节点序列为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"1, \\cdots, (i-1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"(i+1),\\cdots,n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。")],-1),b=p(`<p>对于我来说此题较难的地方在于构建回溯的代码形式，回溯函数的返回值不应是一般的单个节点，而应是各子树的根节点列表，因为左右子树的笛卡尔积会导致即使单个值作为根节点，因为左右子树的结构不同，也常会实际构造多棵树。</p><p>由于回溯函数返回的是以某范围的值为根节点的所有种类的搜索树，故对于上一层来说，只需要模拟笛卡尔积的运算即可，也就是说对于特定的值，以其为根节点的所有种类的搜索树的构造就是，每次从返回的左右子搜索树列表中挑选一对有别于之前的，拼成一颗新搜索树再加到本级回溯函数的返回列表中即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">generateTrees</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (n == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, n);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">allTrees</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (left &gt; right) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">allTrees</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> allTrees;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = left; i &lt;= right; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">leftTrees</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(left, i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">rightTrees</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, right);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">leftNode</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> leftTrees) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rightNode</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> rightTrees) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">TreeNode</span><span style="color:#D4D4D4;">(i);</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = leftNode;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> = rightNode;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">allTrees</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(node);</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> allTrees;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h={id:"组合总和-ii",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#组合总和-ii","aria-hidden":"true"},"#",-1),B={href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定目标值和含重复数字的数组，找出数组中所有和为目标值的不同子集。数组中的每个数字在每个子集中只能使用一次，但重复数字可以一起使用</p></div><details class="hint-container details"><summary>Solution</summary><p>此题与基础的同一集合中求不同组合所不同的是可以含重复数字，因为不同的重复数字在回溯时不算同一个，但在最后求得组合结果时显然会因为数值相同算作重复，所以考虑先排序数组，将重复的数字并在一起在相邻的层进行连续处理。</p><p>鉴于重复的组合是因为同层遍历时用了个体不同但数值相同的数，所以具体实现的时候只需要在同层遍历时进行判断，限定相同的数只能在最开始的时候用一次即可。并且由于下一层不关注起始索引之前的路径，所以也并不会影响到寻找需要同时用到多个重复数的子集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">combinationSum2</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">candidates</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(candidates);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(candidates, target, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">candidates</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (target == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;(path));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = start; i &lt; </span><span style="color:#9CDCFE;">candidates</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (i &gt; start &amp;&amp; candidates[i] == candidates[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">continue</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (target &lt; candidates[i])</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(candidates[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(candidates, target - candidates[i], i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeLast</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),F={id:"递增子序列",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#递增子序列","aria-hidden":"true"},"#",-1),_={href:"https://leetcode.cn/problems/increasing-subsequences/",target:"_blank",rel:"noopener noreferrer"},k=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description")],-1),w={class:"hint-container details"},x=s("summary",null,"Solution",-1),L={href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},S=s("code",null,"if (i > start && (nums[i] == nums[i - 1] || nums[i] == nums[start]))",-1),q=s("code",null,"1, 2, 3, 1, 1",-1),N=p(`<p>所以引入另一套更为通用的模版思想，即一层仅考虑当前位置数字的选择与否，若不选则直接进入下一层递归，若选则按回溯规则在下一层递归前后进行处理和反处理。对于此题，递增子序列的合法性由仅把不小于路径末尾的值加入来保证，而导致重复序列的原因是原数组中可能存在不连续分布的重复值，鉴于选取的子序列也不一定在原数组中连续，故以上一个选取的数（路径末尾值）作为前一个数，与当前数进行选取与否的考虑。具体来说，导致重复的原因是选了前一个数没选当前数和没选前一个数选了当前数这两种情况实质上等效，所以需要加上限制条件禁止其中一种。鉴于存在连续多个重复值的情况，令限制条件为仅当前一个数与当前数不同时才考虑不选当前数（若相同则必选当前数，因为前一个数可能因为其再前一个数不同而没选）。因为此思路是一路做选择直到数据末尾，会自然涵盖所有情况，所以递归终止条件为递归到达数据末尾</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">findSubsequences</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;"> = nums;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MIN_VALUE</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">last</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cur == </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">() &gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;(path));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (last &lt;= nums[cur]) { </span><span style="color:#6A9955;">// choose</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(nums[cur]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(cur + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, nums[cur]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">remove</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">() - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (last != nums[cur]) </span><span style="color:#6A9955;">// not choose</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(cur + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, last);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T={id:"剑指-offer-38-字符串的排列",tabindex:"-1"},j=s("a",{class:"header-anchor",href:"#剑指-offer-38-字符串的排列","aria-hidden":"true"},"#",-1),I={href:"https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/",target:"_blank",rel:"noopener noreferrer"},K=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"求给定含重复字符的字符串所有字符的所有排列")],-1),M={class:"hint-container details"},J=s("summary",null,"Solution",-1),R={href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},z=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">StringBuilder</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">StringBuilder</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">used</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">permutation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		used = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toCharArray</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(str);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(str);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			result[i] = </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() == </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (used[i] || (i &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; str[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] == str[i] &amp;&amp; !used[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]))</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">continue</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			used[i] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">append</span><span style="color:#D4D4D4;">(str[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(str);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteCharAt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			used[i] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q={id:"全排列",tabindex:"-1"},U=s("a",{class:"header-anchor",href:"#全排列","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},P=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求给定不含重复元素的数组的全排列</p></div><details class="hint-container details"><summary>Solution</summary><p>此题不含重复元素，比含重复元素的要少排序和回溯判重步骤，用全排列的回溯模版也挺容易解，但还有另一种不需要标记数组的回溯解法。</p><p>在回溯全过程中维护动态变化的数组，该数组被一个标记索引分为两部分，左边为已经填入的元素，右边为待填入的元素，其本身所指为当前待填的位置。在选择元素加入全排列时，每次都从右边选一个，将标记索引指向的数与选中的数互换，如此来保证进入下一层时标记索引左侧的数都是已选择的，等回溯时再换回来撤销处理。</p><p>具体来说，标记索引初始时在最左边，每向下一层就向右移动一位；而在同一层中，另起一个索引变量用来遍历标记索引右侧所有元素，遍历过程中将标记索引与当前元素换位置，然后进入下一层，回溯时再换回来。当标记索引移动到最右边时就达成了一种全排列，将当前排列复制一份加入到答案中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">dynamic</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">permute</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> nums)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">dynamic</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(num);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(nums, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">div</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (div == </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;(dynamic));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = div; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">swap</span><span style="color:#D4D4D4;">(dynamic, i, div);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(nums, div + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">swap</span><span style="color:#D4D4D4;">(dynamic, i, div);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),O={id:"n-皇后",tabindex:"-1"},H=s("a",{class:"header-anchor",href:"#n-皇后","aria-hidden":"true"},"#",-1),G={href:"https://leetcode.cn/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"},W=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>将<code>n</code>个皇后放入<code>n*n</code>的棋盘中，要求一行、一列、一条斜线内都只能存在一个皇后</p></div><details class="hint-container details"><summary>Solution</summary><p>标准的回溯搜索题，就是一个一个格子往后试验，放置成功的话就进入下一层继续搜索，但此题有几个针对性的小技巧和几个需要注意的点。</p><p>每个到一个格子都需要进行放置的合法性检查，若每次都进行行、列和两种方向斜线（斜杠和反斜杠两种方向）的遍历查找肯定很慢，由题目条件可知每行、每列、每条斜线有且仅有一个皇后，所以应当存储并维护每行、每列、每条斜线的放置状态，这样对于每个格子都可快速判断能否放置，从而在大量的搜索中节约大量时间。</p><p>行和列很容易解决状态记录的编号问题，但两种方向的斜线就稍显麻烦。只需要把每行每列的索引写标出来再画出斜线，就会意识到很像坐标系中的一次函数，实际上，斜杠方向同一斜线上所有格子行和列相加为相同值，反斜杠方向同一斜线上所有格子行和列相减为相同值。所以我们可以将两种方向的斜线分开编号，以上述的特定值来区分各斜线。</p><p>对于各皇后具体放置位置的记录，实际上可以仅用一维数组存储（第<code>i</code>行的皇后在第<code>queens[i]</code>列），并且这样记录也恰好契合每层搜索基于行的形式，即同层仅进行列的遍历以寻找能放置的格子而不同层搜索不同行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">queens</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// column of each row</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">col</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// column has queen?</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">diag1</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// diag-1 has queen?</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">diag2</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// diag-2 has queen?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">solveNQueens</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        queens = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[n];</span></span>
<span class="line"><span style="color:#D4D4D4;">        col = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[n];</span></span>
<span class="line"><span style="color:#D4D4D4;">        diag1 = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        diag2 = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, n);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">row</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (row == n) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">getBoard</span><span style="color:#D4D4D4;">(n));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; c &lt; n; ++c) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">d1</span><span style="color:#D4D4D4;"> = row - c + n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">d2</span><span style="color:#D4D4D4;"> = row + c;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (col[c] || diag1[d1] || diag2[d2])</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">continue</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            col[c] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            diag1[d1] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            diag2[d2] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            queens[row] = c;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">backtrack</span><span style="color:#D4D4D4;">(row + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, n);</span></span>
<span class="line"><span style="color:#D4D4D4;">            col[c] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            diag1[d1] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            diag2[d2] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">getBoard</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">row</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[n];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; n; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">            row[i] = </span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; n; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            row[queens[i]] = </span><span style="color:#CE9178;">&#39;Q&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;">(row));</span></span>
<span class="line"><span style="color:#D4D4D4;">            row[queens[i]] = </span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),X={id:"解数独",tabindex:"-1"},Y=s("a",{class:"header-anchor",href:"#解数独","aria-hidden":"true"},"#",-1),Z={href:"https://leetcode.cn/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"},$=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>解<code>9*9</code>数独，要求每行、每列、每宫（<code>3*3</code>格子组成）都含数字<code>1~9</code>且无重复</p></div><details class="hint-container details"><summary>Solution</summary><p>标准的回溯搜索题，但有几个点。</p><p>回溯需要对大量的格子反复进行某数能否放置的检查，临时遍历每行、每列、每宫会耗费大量时间，故应存储并维护每行、每列、每宫内各数字是否已存在的状态以便快速查询，例如<code>row[i][k]</code>标识第<code>i</code>行中是否已存在数字<code>k</code>，<code>squ[i][j][k]</code>标识第<code>i</code>行的第<code>j</code>列个宫内是否已存在数字<code>k</code>。</p><p>可以在初始因维护上述状态而进行格子遍历时顺便将待填充的格子的位置记下来，以便后续能只对这些位置进行快速搜索而无需遍历其他已填充格子。还可以添加全局类型的是否完成标志，用于在完成全部填充之后快速结束程序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// 记录某行/列/宫是否已存在某数</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">row</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">col</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][][] </span><span style="color:#9CDCFE;">squ</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// 记录需填充坐标，节省遍历时间</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt; </span><span style="color:#9CDCFE;">empty</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">finished</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span><span style="color:#6A9955;">// 用于剪枝</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">solveSudoku</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">board</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">; j++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (board[i][j] == </span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">empty</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { i, j });</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;"> = board[i][j] - </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">					row[i][idx] = col[j][idx] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">					squ[i / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][j / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][idx] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(board, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">board</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (idx == </span><span style="color:#9CDCFE;">empty</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			finished = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">empty</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(idx)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">empty</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(idx)[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; !finished &amp;&amp; i &lt; </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!row[r][i] &amp;&amp; !col[c][i] &amp;&amp; !squ[r / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][c / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][i]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				board[r][c] = (</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">) (i + </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">				row[r][i] = col[c][i] = squ[r / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][c / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][i] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(board, idx + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">				row[r][i] = col[c][i] = squ[r / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][c / </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">][i] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),ss={id:"重新安排行程",tabindex:"-1"},ns=s("a",{class:"header-anchor",href:"#重新安排行程","aria-hidden":"true"},"#",-1),as={href:"https://leetcode.cn/problems/reconstruct-itinerary/",target:"_blank",rel:"noopener noreferrer"},ls=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定一组起点-终点对<code>tickets</code>，其中<code>tickets[i] = [from, to]</code>表示该段的起点和终点，在必须将每段行程都完成一遍且仅可完成一遍的条件下，规划出依次经过的点，求字典序最小的规划。要求规划的起始点必须是点<code>&quot;JFK&quot;</code>。给定数据保证至少存在一种合理规划</p></div><details class="hint-container details"><summary>Solution</summary><p>看题干是一道图论题，给出的条件构成一个连通有向图，且最多只存在一个节点的出度为零，题目要求的规划实际上是求该图的欧拉路径【从某节点出发沿有向边方向不重复地遍历图中所有的边】，并且求的是路径沿途节点名字典序最小的那条。</p><p>我们在搜索之前，可以将给定数据整理成拓扑排序那般的哈希表，以节点为键以其所有下游节点列表为值，考虑到题目要求字典序，那么向下游搜索的时候肯定优先选字典序小，故下游节点可用优先队列存储，每次出队的就是剩余下游节点中字典序最小的。其实用优先队列的话还要考虑向下搜索发现此路不通时回溯的操作，是否需要将出队的元素再添加回来，如果需要像普通回溯那样添加回来，那下次搜索出队的依旧是该节点，导致其他下游节点永不被进入搜索而死循环，所以加下来从整体考虑是否会有这个问题。</p><p>对于有向图的 DFS 来说，如果搜到了无下游节点的节点就会进行回溯。在本题条件下，从给定的起点开始按字典序优先进行 DFS，若不存在出度为零的节点则可以顺畅地按照字典序优先完成 DFS 得到规划，重点考虑存在导致搜索进入死胡同的节点，该点必须为规划的终点，即使此条件下路径的字典序不是最小的。在存在此类点的前提下，也分两种情况，一是按照字典序优先该点恰好排在最后，皆大欢喜，所以实际需要考虑的只有该点出现在搜索中间某处的情况。</p><p>仔细思考死胡同节点在 DFS 中间的过程，可以发现依次为向下深入到死胡同节点、回溯到有其他下游节点的节点、深入其他下游节点完成其他所有边的遍历这几个阶段，所以解决问题的关键其实将节点添加入规划的时机，不是在向下深入时而是在回溯时添加。在回溯时添加的话，可以发现顺序是死胡同节点向上到有其他下游节点的节点、其他能正常完成搜索的节点的逆序回溯，所以整个规划中节点添加的顺序恰好为字典序的逆序，最后只需将规划逆序即可，并且也不存在需要像普通回溯那般撤销处理的操作，也就不存在之前讨论的问题了</p><p>例如<code>tickets = [[&quot;JFK&quot;, &quot;NRT&quot;], [&quot;JFK&quot;, &quot;KUL&quot;], [&quot;NRT&quot;, &quot;JFK&quot;]]</code>，按照字典序 DFS 时就会先进入<code>&quot;KUL&quot;</code>这个死胡同节点，但是按照回溯时添加的解法，实际获得逆序规划的过程就是：</p><ol><li>JFK -&gt; KUL</li><li>path.add(KUL)</li><li>KUL return JFK</li><li>JFK -&gt; NRT</li><li>NRT -&gt; JFK</li><li>path.add(JFK)</li><li>JFK return NRT</li><li>path.add(NRT)</li><li>NRT return JFK</li><li>path.add(JFK)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">aim</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">findItinerary</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">tickets</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> tickets) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">aim</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">computeIfAbsent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), x </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;&gt;());</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;JFK&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reverse</span><span style="color:#D4D4D4;">(res);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">aim</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(cur);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (to != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isEmpty</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">to</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">poll</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(cur);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2);function ps(os,es){const a=e("ExternalLinkIcon");return D(),t("div",null,[s("h3",i,[y,n(),s("a",d,[n("不同的二叉搜索树 II"),l(a)])]),C,s("details",v,[u,s("p",null,[s("a",m,[n("不同的二叉搜索树"),l(a)]),n(" 只是要求统计不同搜索树的数量，但此题需要将所有树实际构造出来，故得用回溯方式。")]),E,b]),s("h3",h,[A,n(),s("a",B,[n("组合总和 II"),l(a)])]),g,s("h3",F,[f,n(),s("a",_,[n("递增子序列"),l(a)])]),k,s("details",w,[x,s("p",null,[n("乍一看能套用 "),s("a",L,[n("组合总和 II"),l(a)]),n(" 的模版，但由于此题求递增子序列要求元素相对位置不能变，所以无法通过排序将重复数字并到一块，即使通过改变同层遍历的重复判定条件为"),S,n("也只能滤掉起始索引为首个重复值的分块连续重复值情况（如"),q,n("）。而对于分块连续重复值的起始索引不是重复值的情况，若想完全去除同层重复，则需要确保当前遍历到的值与之前所有值都不同，因为路径也无法提供同层的帮助，故做到这点势必会导致增加额外的开销，要么每次遍历查找费时，要么用哈希表费空间（其实也能接受），所以此题再强行套用上述模版已不再是最优方案。")]),N]),s("h3",T,[j,n(),s("a",I,[n("剑指 Offer 38. 字符串的排列"),l(a)])]),K,s("details",M,[J,s("p",null,[n("类比之前 "),s("a",R,[n("组合总和 II"),l(a)]),n(" 中求组合的回溯模版，此题是求所有排列而非所有组合，即每个位置都是从本次排列所有还未使用的字符中挑选一个，所以在每层回溯函数中待选的字符并不需要从某个起始索引开始，而是从头开始选一个未使用的，所以需要标记数组来记录本次排列哪些字符已经用过。此外还有不同的重复字符多次排列的结果重复问题，因为原始集合中含重复值，故参考组合的处理方式，先将字符按字典序排序以把相同字符并到一起，在同层遍历时保证对于多个重复的字符，只会用还未使用的部分中最左边的那个")]),z]),s("h3",Q,[U,n(),s("a",V,[n("全排列"),l(a)])]),P,s("h3",O,[H,n(),s("a",G,[n("N 皇后"),l(a)])]),W,s("h3",X,[Y,n(),s("a",Z,[n("解数独"),l(a)])]),$,s("h3",ss,[ns,n(),s("a",as,[n("重新安排行程"),l(a)])]),ls,c(" ------------------------------------------------------- ")])}const cs=o(r,[["render",ps],["__file","backtrack.html.vue"]]);export{cs as default};
