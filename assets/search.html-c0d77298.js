import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as y,a as s,b as l,d as e,w as n,f as C,e as p}from"./app-33675145.js";const m={},d={id:"_01-矩阵",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#_01-矩阵","aria-hidden":"true"},"#",-1),v={href:"https://leetcode-cn.com/problems/01-matrix/",target:"_blank",rel:"noopener noreferrer"},E=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"矩阵值为 0 或 1，找出各 1 最近的 0")],-1),b={class:"hint-container details"},h=s("summary",null,"Solution",-1),B=s("p",null,"以所有 0 为整体向外 BFS。即首先将所有 0 入队，再常规 BFS",-1),A=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#DCDCAA"}},"updateMatrix"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"mat"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"dr"),s("span",{style:{color:"#D4D4D4"}}," = { "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", -"),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"dc"),s("span",{style:{color:"#D4D4D4"}}," = { -"),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," };")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"m"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"mat"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},", n = mat["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"]."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"dist"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[m][n];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"visited"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}},"[m][n];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"Queue"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[]> "),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"LinkedList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// add all zero")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < m; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; j < n; ++j)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (mat[i][j] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"offer"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] { i, j });")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					visited[i][j] = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// bfs")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (!"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"isEmpty"),s("span",{style:{color:"#D4D4D4"}},"()) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"cur"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"poll"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; k < "),s("span",{style:{color:"#B5CEA8"}},"4"),s("span",{style:{color:"#D4D4D4"}},"; ++k) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"row"),s("span",{style:{color:"#D4D4D4"}}," = cur["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"] + dr[k];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"col"),s("span",{style:{color:"#D4D4D4"}}," = cur["),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] + dc[k];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (row >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && row < m && col >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && col < n && !visited[row][col]) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[row][col] = dist[cur["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"]][cur["),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"]] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					visited[row][col] = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"offer"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] { row, col });")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," dist;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=s("p",null,"从某个 0 开始分别往左上和右下 DP",-1),F=s("p",null,[l("设 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"f(i,j)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")")])])]),l(" 为该格子到最近 0 的距离，则：")],-1),f=s("p",null,[l("往左上："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"min"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"{"),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"}"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"f(i, j)=\\min \\{f(i+1, j),\\ f(i, j+1)\\}+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop"},"min"),s("span",{class:"mopen"},"{"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")}"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])],-1),_=s("p",null,[l("往右下："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"min"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"{"),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"j"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"}"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"f(i, j)=\\min \\{f(i-1, j),\\ f(i, j-1)\\}+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop"},"min"),s("span",{class:"mopen"},"{"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")}"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])],-1),j=s("p",null,"具体实现时，由于左上和右下方向都是遍历整个矩阵，所以可以覆盖掉左下和右上方向距离的搜索",-1),w=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}},"{")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#DCDCAA"}},"updateMatrix"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"mat"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"m"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"mat"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},", n = mat["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"]."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"dist"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[m][n];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"dist"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"Arrays"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"fill"),s("span",{style:{color:"#D4D4D4"}},"(dist[i], "),s("span",{style:{color:"#9CDCFE"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"MAX_VALUE"),s("span",{style:{color:"#D4D4D4"}}," >> "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// all zero")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < m; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; j < n; ++j)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (mat[i][j] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[i][j] = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// right down")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < m; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; j < n; ++j) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[i][j] = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"min"),s("span",{style:{color:"#D4D4D4"}},"(dist[i][j], dist[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"][j] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (j - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[i][j] = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"min"),s("span",{style:{color:"#D4D4D4"}},"(dist[i][j], dist[i][j - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// left up")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = m - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; --i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = n - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; j >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; --j) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," < m)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[i][j] = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"min"),s("span",{style:{color:"#D4D4D4"}},"(dist[i][j], dist[i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"][j] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (j + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," < n)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dist[i][j] = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"min"),s("span",{style:{color:"#D4D4D4"}},"(dist[i][j], dist[i][j + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," dist;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),x={id:"打开转盘锁",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#打开转盘锁","aria-hidden":"true"},"#",-1),S={href:"https://leetcode-cn.com/problems/open-the-lock/",target:"_blank",rel:"noopener noreferrer"},q=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>四位转盘锁初始为<code>0000</code>，每个转盘可转转为<code>0 ~ 9</code>（<code>0</code>与<code>9</code>相邻），但每次只能转一个转盘的相邻数字</p><p>另外给定若干转盘数位组合，在转至正确组合过程中不可遇到，问在此限制下解开锁的最少转动次数（无法解开则次数为-1）</p></div><details class="hint-container details"><summary>Solution</summary><p>不可简单地通过判断各位是否从两种方向转至正确位数是否都被限制来直接断定，因为某些位被限制的同时只需要至少其他一位不同即可绕过</p><p>故还是得通过搜索来判断，因为求最少转动次数，故用 BFS。对于每种组合，不同转动结果有 8 种，过程类似于图搜索，将搜索过的组合缓存标记（可以直接并在给定的限制组合集中）</p><p>值得一提的是在实现时，需要判断若<code>0000</code>本身就在限制组合中，则直接返回，否则需要将所有组合都搜一遍，达到极端最坏情况</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">openLock</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">deadends</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashSet</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> deadends)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(s);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Queue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;0000&quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">offer</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;0000&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isEmpty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (size-- &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">poll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">equals</span><span style="color:#D4D4D4;">(cur))</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> count;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(cur)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(cur);</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">changeOne</span><span style="color:#D4D4D4;">(cur))</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(s))</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(s);</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">			++count;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">changeOne</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toCharArray</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;"> = data[i] - </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			data[i] = (</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">) (</span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + ((cur + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) % </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;">(data));</span></span>
<span class="line"><span style="color:#D4D4D4;">			data[i] = (</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">) (</span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + ((cur + </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">) % </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;">(data));</span></span>
<span class="line"><span style="color:#D4D4D4;">			data[i] = (</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">) (</span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;"> + cur);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),L={id:"太平洋大西洋水流问题",tabindex:"-1"},M=s("a",{class:"header-anchor",href:"#太平洋大西洋水流问题","aria-hidden":"true"},"#",-1),z={href:"https://leetcode-cn.com/problems/pacific-atlantic-water-flow/",target:"_blank",rel:"noopener noreferrer"},I=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>设矩阵左和上边界为太平洋，右和下边界为大西洋，矩阵元素表示海拔，其位置上的水可向四周等高或更低位置流，求所有能使水流向两个大洋的位置</p></div><details class="hint-container details"><summary>Solution</summary><p>若从各位置往边界搜固然可达，但在回溯过程中途径的位置复用性极差，故应从边界的各位置开始往高的地势搜同时记录位置向该大洋的可达性，最后遍历各位置收集可达两洋的位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dirs</span><span style="color:#D4D4D4;"> = { { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> } };</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">paci</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">atla</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">pacificAtlantic</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;"> = heights;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = heights[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">paci</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[m][n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">atla</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[m][n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; m; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(i, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, paci);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(i, n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, atla);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; n; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, i, paci);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(m - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, i, atla);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; m; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (paci[i][j] &amp;&amp; atla[i][j])</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">asList</span><span style="color:#D4D4D4;">(i, j));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">row</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">col</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">ocean</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		ocean[row][col] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dirs) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = row + d[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = col + d[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; r &lt; m &amp;&amp; c &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; c &lt; n &amp;&amp; heights[r][c] &gt;= heights[row][col] &amp;&amp; !ocean[r][c])</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(r, c, ocean);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),V={id:"二进制矩阵中的最短路径",tabindex:"-1"},N=s("a",{class:"header-anchor",href:"#二进制矩阵中的最短路径","aria-hidden":"true"},"#",-1),O={href:"https://leetcode-cn.com/problems/shortest-path-in-binary-matrix/",target:"_blank",rel:"noopener noreferrer"},P=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求总左上角沿全 0 路径到右下角的最短路径长度（可以斜着走）</p></div><details class="hint-container details"><summary>Solution</summary><p>求最短路径用 BFS</p><p>搜索时用另一矩阵记录当前位置是否被访问过。之所以 BFS 也能像 DFS 回溯那般用矩阵记录，是因为若即将遍历的位置已经被访问过，则说明存在不长于当前路径的另一更优路径，当前路径再经过已经访问过的位置也无意义</p><p>值得注意的是实现时需确保位置入队同时标记为已访问，不可在出队寻找相邻下一位置时再标记，因为即使同一批入队，因为相邻位置的相邻位置可以是同一个，很可能会造成同一位置重复入队情况</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">shortestPathBinaryMatrix</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (grid[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (n == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">visited</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">[n][n];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dirs</span><span style="color:#D4D4D4;"> = { { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">					{ </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> } };</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Queue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt; </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">offer</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> });</span></span>
<span class="line"><span style="color:#D4D4D4;">			visited[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isEmpty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (size-- &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">poll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dirs) {</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = cur[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] + d[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = cur[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + d[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; r &lt; n &amp;&amp; c &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; c &lt; n &amp;&amp; grid[r][c] == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; !visited[r][c]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r == n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &amp;&amp; c == n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">								</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">							visited[r][c] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">que</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">offer</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { r, c });</span></span>
<span class="line"><span style="color:#D4D4D4;">						}</span></span>
<span class="line"><span style="color:#D4D4D4;">					}</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">				++res;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Q={id:"判断二分图",tabindex:"-1"},T=s("a",{class:"header-anchor",href:"#判断二分图","aria-hidden":"true"},"#",-1),H={href:"https://leetcode-cn.com/problems/is-graph-bipartite/",target:"_blank",rel:"noopener noreferrer"},U=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[l("给定无向图和连接情况数组（二维数组"),s("code",null,"graph[u]"),l("中为邻接的不同节点），但不保证图连通（可能存在节点之间无连通路径的情况），判断该图是否为二分图")]),s("p",null,"二分图：所有节点分为两个独立集合，每条边连接的俩节点都属于不同集合")],-1),X={class:"hint-container details"},G=s("summary",null,"Solution",-1),J=s("p",null,"按照相邻节点颜色不同的限制对节点染色，若能成功染色所有节点则是二分图",-1),K=s("p",null,"此为 DFS 实现，注意剪枝。而且由于图可能不连通，所以主要函数中得确保所有节点都有机会进行染色",-1),R=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"part"),s("span",{style:{color:"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955"}},"// 0, 1, 2")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"valid"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"isBipartite"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}}," = graph;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		part = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[i] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				part[i] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"(i);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," valid;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"cur"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," graph[cur]) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[n] == part[cur]) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				valid = "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[n] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				part[n] = part[cur] == "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"?"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"(n);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (!valid) "),s("span",{style:{color:"#6A9955"}},"// 剪枝")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#6A9955"}},"// 颜色正好不同则正好不管")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),W=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"isBipartite"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[][] "),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"part"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"Queue"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"LinkedList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"graph"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[i] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				part[i] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"offer"),s("span",{style:{color:"#D4D4D4"}},"(i);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (!"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"isEmpty"),s("span",{style:{color:"#D4D4D4"}},"()) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"cur"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"poll"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," graph[cur])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"						"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[n] == part[cur])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"							"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"						"),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (part[n] == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"							part[n] = part[cur] == "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"?"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"							"),s("span",{style:{color:"#9CDCFE"}},"que"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"offer"),s("span",{style:{color:"#D4D4D4"}},"(n);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"						}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1);function Y(Z,$){const t=c("ExternalLinkIcon"),D=c("Tabs");return i(),y("div",null,[s("h3",d,[u,l(),s("a",v,[l("01 矩阵"),e(t)])]),E,s("details",b,[h,e(D,{id:"9",data:[{id:"联合 BFS"},{id:"分部 DP"}]},{title0:n(({value:a,isActive:o})=>[l("联合 BFS")]),title1:n(({value:a,isActive:o})=>[l("分部 DP")]),tab0:n(({value:a,isActive:o})=>[B,A]),tab1:n(({value:a,isActive:o})=>[g,F,f,_,j,w]),_:1})]),s("h3",x,[k,l(),s("a",S,[l("打开转盘锁"),e(t)])]),q,s("h3",L,[M,l(),s("a",z,[l("太平洋大西洋水流问题"),e(t)])]),I,s("h3",V,[N,l(),s("a",O,[l("二进制矩阵中的最短路径"),e(t)])]),P,s("h3",Q,[T,l(),s("a",H,[l("判断二分图"),e(t)])]),U,s("details",X,[G,e(D,{id:"105",data:[{id:"DFS"},{id:"BFS"}]},{title0:n(({value:a,isActive:o})=>[l("DFS")]),title1:n(({value:a,isActive:o})=>[l("BFS")]),tab0:n(({value:a,isActive:o})=>[J,K,R]),tab1:n(({value:a,isActive:o})=>[W]),_:1})]),C(" -------------------------- ")])}const ns=r(m,[["render",Y],["__file","search.html.vue"]]);export{ns as default};
