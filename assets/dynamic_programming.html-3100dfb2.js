import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as D,o as i,c as y,a as s,b as n,d as l,w as e,f as d,e as o}from"./app-f880015c.js";const m={},C=s("h2",{id:"基本类型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基本类型","aria-hidden":"true"},"#"),n(" 基本类型")],-1),u={id:"不同的二叉搜索树",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#不同的二叉搜索树","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.cn/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"},E=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("给定整数"),s("code",null,"n"),n("，求恰由"),s("code",null,"n"),n("个节点组成且节点值从"),s("code",null,"1"),n("到"),s("code",null,"n"),n("互不相同的二叉搜索树数量")])],-1),b=s("details",{class:"hint-container details"},[s("summary",null,"Solution"),s("p",null,[n("对于节点序列 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"1, \\cdots, n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" ，可以遍历取特定数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 作为根节点，则左右子树节点序列为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"1, \\cdots, (i-1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"(i+1),\\cdots,n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。由于原问题可以分解为俩规模较小的子问题，且子问题的解可复用，故考虑用动态规划求解，定义：")]),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"G(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 代表序列长度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 的不同搜索树数量")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"F(i,n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 代表以 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 为根节点且长度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 的不同搜索树数量")])]),s("p",null,[n("显然有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mrow",null,[s("mi",null,"F"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])]),s("annotation",{encoding:"application/x-tex"},"G(n)=\\sum\\limits^n_{i=1}{F(i,n)}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.3291em","vertical-align":"-0.9777em"}}),s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3514em"}},[s("span",{style:{top:"-2.1223em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",null,[s("span",{class:"mop op-symbol small-op"},"∑")])]),s("span",{style:{top:"-3.95em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9777em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])]),n(" ，且边界条件 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mn",null,"0"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"G(0)=G(1)=1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 。而对于以 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 为根节点的搜索树来说，其不同子树结构数量为左右子树节点集合的笛卡尔积，即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"F"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{separator:"true"},","),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"⋅"),s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mi",null,"i"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"F(i,n)=G(i-1)\\cdot G(n-i)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"F"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},")")])])]),n(" ，故最终得到 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"⋅"),s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mi",null,"i"),s("mo",{stretchy:"false"},")")])]),s("annotation",{encoding:"application/x-tex"},"G(n)=\\sum\\limits^n_{i=1}{G(i-1)\\cdot G(n-i)}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.3291em","vertical-align":"-0.9777em"}}),s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3514em"}},[s("span",{style:{top:"-2.1223em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",null,[s("span",{class:"mop op-symbol small-op"},"∑")])]),s("span",{style:{top:"-3.95em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9777em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},")")])])])]),n(" ，计算答案时只需从小到大计算 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"G(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(" 即可")]),s("p",null,[n("实际上上述推导的函数为卡塔兰数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"C_n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n("，其简便计算的定义为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mn",null,"2"),s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"2")])]),s("msub",null,[s("mi",null,"C"),s("mi",null,"n")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"C"),s("mn",null,"0")]),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"C_{n+1}=\\frac{2(2n+1)}{n+2}C_n,\\ C_0=1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4133em","vertical-align":"-0.4033em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.01em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.485em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mtight"},"2"),s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1"),s("span",{class:"mclose mtight"},")")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4033em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"numTrees"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[n + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		res["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"] = res["),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},"; k <= n; ++k)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i <= k; ++i)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				res[k] += res[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] * res[k - i];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res[n];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])],-1),g={id:"打家劫舍-ii",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#打家劫舍-ii","aria-hidden":"true"},"#",-1),B={href:"https://leetcode.cn/problems/house-robber-ii/",target:"_blank",rel:"noopener noreferrer"},_=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定代表每个房屋存放金额的非负整数数组，房屋首尾相连成环，在每间房仅可偷一次且不偷相连的房屋前提下，求能够偷窃到的最高金额</p></div><details class="hint-container details"><summary>Solution</summary><p>因为成环且不能抢相邻的，所以抢第一间和最后一间就不能都抢，实际上可以拆成俩子问题，即在<code>[0, n-2]</code>和<code>[1, n-1]</code>范围内分别计算抢的最大金额，再取较大者作为最终答案。</p><p>对于单个子问题，就是经典的范围动态规划，令<code>dp[i]</code>为遍历到<code>i</code>时获得的最大金额（不管抢不抢<code>i</code>），则有<code>dp[i] = max(dp[i-1], dp[i-2]+nums[i])</code>，即取抢和不抢的较大者。但这涉及到前俩的初始化值，即使将 dp 数组降维压缩也稍显麻烦。</p><p>较简单的形式是仅基于上一间房屋的俩状态来思考抢还是不抢当前房屋，先将抢的最大收益算出来存着，再基于上一房屋的状态更新不抢的最大收益，最后用缓存更新抢的收益。如此遍历到最后一间，最大收益即为抢和不抢俩状态的较大者，代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rob</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> nums[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">rob</span><span style="color:#D4D4D4;">(nums, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">), </span><span style="color:#DCDCAA;">rob</span><span style="color:#D4D4D4;">(nums, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rob</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rob</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;	</span><span style="color:#6A9955;">// maximum money can get if rob current house</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">unrob</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;	</span><span style="color:#6A9955;">// maximum money can get if unrob current house</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = left; i &lt;= right; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">curRob</span><span style="color:#D4D4D4;"> = unrob + nums[i];	</span><span style="color:#6A9955;">// rob current house, means unrob previous one</span></span>
<span class="line"><span style="color:#D4D4D4;">			unrob = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(unrob, rob);	</span><span style="color:#6A9955;">// unrob current house, take maximum of rob and unrob previous one</span></span>
<span class="line"><span style="color:#D4D4D4;">			rob = curRob;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(rob, unrob);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),k={id:"打家劫舍-iii",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#打家劫舍-iii","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.cn/problems/house-robber-iii/",target:"_blank",rel:"noopener noreferrer"},F=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定代表每个房屋存放金额的非负节点值二叉树，从根节点开始往下抢，在每间房仅可偷一次且不偷直接相连的房屋前提下，求能够偷窃到的最高金额</p></div><details class="hint-container details"><summary>Solution</summary><p>对于树自然想到 DFS 自底向上返回遍历，可令 DFS 函数返回值为含俩元素的数组，元素分别代表以当前节点为根的树，抢与不抢根节点的最大收益。对于函数内部返回值的计算：</p><ul><li>抢当前节点，则不可抢其左右子节点，最大收益为当前节点值、不抢左子节点作为根节点的最大收益、不抢右子节点作为根节点的最大收益这三者之和</li><li>不抢当前节点，则子节点抢不抢都行，最大收益为以左子节点为根节点的最大收益与以右子节点为根节点的最大收益这二者之和</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rob</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(root);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(res[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], res[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">TreeNode</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (node == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rob</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> + left[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + right[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">unrob</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(left[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], left[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) + </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(right[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], right[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { rob, unrob };</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),j={id:"整数拆分",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#整数拆分","aria-hidden":"true"},"#",-1),M={href:"https://leetcode.cn/problems/integer-break/",target:"_blank",rel:"noopener noreferrer"},S=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定一个大于 1 的正整数，将其拆分为两个及以上正整数之和，求拆分出的正整数之积的最大值</p></div><details class="hint-container details"><summary>Solution</summary><p>给定正整数拆为俩数之和，可以打住直接求俩数之积，也可将俩数继续往下拆分。因正整数对应的最大乘积取决于比其小的正整数对应的最大乘积，故用动态规划来做，令<code>dp[i]</code>表示将正整数<code>i</code>拆分成至少两个正整数的和所对应的最大乘积，0 和 1 都不可拆，故初始条件<code>dp[0] = dp[1] = 0</code>。当<code>i &gt; 1</code>时，设其拆成<code>j</code>和<code>i-j</code>，其中<code>1 &lt;= j &lt; i</code>：</p><ul><li>若<code>i-j</code>继续拆分，则<code>dp[i] = j*dp[i-j]</code></li><li>若<code>i-j</code>打住不继续拆，则<code>dp[i] = j*(i-j)</code></li></ul><p>故此种拆分情况下有<code>dp[i] = max⁡(j*(i−j), j*dp[i−j])</code>，所以对于<code>i</code>的拆分的最大乘积为遍历所有<code>j</code>的最大值，最终答案为<code>dp[n]</code>。</p><p>此题有利用数学证明的极简算法，详见官方题解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">integerBreak</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[n + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">; i &lt;= n; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt; i; j++)</span></span>
<span class="line"><span style="color:#D4D4D4;">				dp[i] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(dp[i], </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(j * (i - j), j * dp[i - j]));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[n];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),z={id:"最长递增子序列",tabindex:"-1"},G=s("a",{class:"header-anchor",href:"#最长递增子序列","aria-hidden":"true"},"#",-1),I={href:"https://leetcode.cn/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},N=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"求给定整数数组中最长严格递增子序列（可以不连续）的长度")],-1),L={class:"hint-container details"},P=s("summary",null,"Solution",-1),V=s("p",null,[n("动态规划，令"),s("code",null,"dp[i]"),n("表示到索引"),s("code",null,"i"),n("元素为止的最长严格递增子序列长度，对于索引为"),s("code",null,"i"),n("的元素来说，只要在它之前的元素比它小，那么就可以将其加入该元素所在的子序列中且保持严格递增，所以对于每个固定的索引"),s("code",null,"i"),n("元素，都应遍历其之前的所有元素，将所有小于其的元素都用来更新"),s("code",null,"dp[i]"),n("。由上所述显然应提前将 dp 数组每个元素都赋值为 1，以保证状态转移时的长度符合要求。可以边遍历边记录最大长度，最后直接返回")],-1),T=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"otherMethod"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"dp"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#9CDCFE"}},"Arrays"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"fill"),s("span",{style:{color:"#D4D4D4"}},"(dp, "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"dp"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; j < i; j++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (nums[j] < nums[i])")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					dp[i] = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"max"),s("span",{style:{color:"#D4D4D4"}},"(dp[i], dp[j] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			res = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"max"),s("span",{style:{color:"#D4D4D4"}},"(dp[i], res);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),q=s("p",null,[n("在遍历原数组时维护一个数组"),s("code",null,"tails"),n("，其中"),s("code",null,"tails[i]"),n("表示长度为"),s("code",null,"i+1"),n("的最长子序列的最后一个元素，对于遍历的每个元素：")],-1),W=s("ul",null,[s("li",null,[n("若某元素大于所有"),s("code",null,"tails"),n("元素，则表明该数可对所有之前长度的子序列生效，将其添加至"),s("code",null,"tails"),n("最后，令"),s("code",null,"tails"),n("长度加一")]),s("li",null,[n("若"),s("code",null,"tails[len-1] < num <= tails[len]"),n("，则替换"),s("code",null,"tails"),n("的最后元素")])],-1),R=s("p",null,[n("实际上，"),s("code",null,"tails"),n("的生成方式决定了其是递增的，可以在其中对遍历到的值进行变形的二分搜索，得到不小于其的元素索引并替换掉该值，这就包含了上述第二种情况，并且在更前的地方替换也是符合"),s("code",null,"tails"),n("含义的。特别地，当搜到的索引为当前"),s("code",null,"tails"),n("的最后时，对应上述第一种情况")],-1),U=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"lengthOfLIS"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"tails"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"size"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"x"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", j = size;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (i != j) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"m"),s("span",{style:{color:"#D4D4D4"}}," = (i + j) / "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (tails[m] < x)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					i = m + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"else")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					j = m;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			tails[i] = x;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (i == size) ++size;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," size;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O={id:"环形子数组的最大和",tabindex:"-1"},X=s("a",{class:"header-anchor",href:"#环形子数组的最大和","aria-hidden":"true"},"#",-1),H={href:"https://leetcode.cn/problems/maximum-sum-circular-subarray/",target:"_blank",rel:"noopener noreferrer"},J=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"求给定环形整数数组的最大子数组和")],-1),K={class:"hint-container details"},Q=s("summary",null,"Solution",-1),Y={href:"https://leetcode.cn/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"},Z=o(`<ul><li>最大和子数组不跨越原数组首尾，这就退化为普通数组求最大子数组和</li><li>最大和子数组跨越原数组首尾，这种情况则说明与之相对的最小和子数组不跨越原数组首尾，即变成求普通数组的最小子数组和的问题，最后用原数组总和减去最小和即为最大和</li></ul><p>所以貌似只需要同时求出不成环的原数组的最大和与最小和，最终答案为<code>max(maxSum, sum - minSum)</code>，但实际上若数组全为负数就会导致此法失效，所以最后应进行此情况的判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxSubarraySumCircular</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, preMax = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, preMin = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">maxSum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MIN_VALUE</span><span style="color:#D4D4D4;">, minSum = </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MAX_VALUE</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> nums) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			sum += num;</span></span>
<span class="line"><span style="color:#D4D4D4;">			preMax = num + </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, preMax);</span></span>
<span class="line"><span style="color:#D4D4D4;">			maxSum = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(maxSum, preMax);</span></span>
<span class="line"><span style="color:#D4D4D4;">			preMin = num + </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, preMin);</span></span>
<span class="line"><span style="color:#D4D4D4;">			minSum = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(minSum, preMin);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> sum == minSum </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> maxSum </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(maxSum, sum - minSum);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),$={id:"鸡蛋掉落",tabindex:"-1"},ss=s("a",{class:"header-anchor",href:"#鸡蛋掉落","aria-hidden":"true"},"#",-1),ns={href:"https://leetcode.cn/problems/super-egg-drop/",target:"_blank",rel:"noopener noreferrer"},ls=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>有<code>k</code>枚鸡蛋和<code>n</code>层高的楼，且存在属于<code>[0, n]</code>区间的楼层<code>f</code>使得使得鸡蛋只有从高于<code>f</code>的楼层扔下才会碎，每次操作可以取一枚未碎的鸡蛋并把它从<code>[1, n]</code>楼层区间扔下，仅可重复使用未碎的鸡蛋，求一定能确定出具体楼层<code>f</code>的最小操作次数</p></div><details class="hint-container details"><summary>Solution</summary><p>换个角度思考，若允许进行<code>t</code>次操作且有<code>k</code>个鸡蛋，那一定能确定出具体楼层<code>f</code>的楼高<code>n</code>最高可以是多少？令<code>dp[t][k]</code>为允许进行<code>t</code>次操作且有<code>k</code>个鸡蛋的条件下楼高<code>n</code>的最大值，则只需在所有<code>dp</code>值中找出满足不小于<code>n</code>所对应的最小<code>t</code>值。</p><p>考虑转移方程，在任意层高扔鸡蛋，一定消耗一次操作次数，但分鸡蛋有没有碎两种情况：</p><ul><li>鸡蛋碎了，则待确定楼层在此次扔鸡蛋的下方，且对应<code>dp[t-1][k-1]</code>，即转移到的子问题为“允许<code>t-1</code>次操作且有<code>k-1</code>枚鸡蛋”，故允许下方有<code>dp[t-1][k-1]</code>层</li><li>鸡蛋没碎，同理可得允许上方有<code>dp[t-1][k]</code>层</li></ul><p>故总转移方程为<code>dp[t][k] = 1 + dp[t-1][k] + dp[t-1][k-1]</code>，边界条件为：<code>t &gt;= 1</code>时有<code>dp[t][1] = t</code>，<code>k &gt;= 1</code>时有<code>dp[1][k] = 1</code>。</p><p>显然最大操作次数不会大于楼高，故只需求出<code>dp[n][k]</code>内的所有值，在求取过程中直接返回最先满足允许楼高不小于给定值的操作次数即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">superEggDrop</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (n == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[n + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][k + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= k; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">            dp[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">; i &lt;= n; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt;= k; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">                dp[i][j] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> + dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j] + dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (dp[i][k] &gt;= n)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> i;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="字符串问题" tabindex="-1"><a class="header-anchor" href="#字符串问题" aria-hidden="true">#</a> 字符串问题</h2>`,3),as={id:"两个字符串的删除操作",tabindex:"-1"},os=s("a",{class:"header-anchor",href:"#两个字符串的删除操作","aria-hidden":"true"},"#",-1),es={href:"https://leetcode.cn/problems/delete-operation-for-two-strings/",target:"_blank",rel:"noopener noreferrer"},ps=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定两个单词，每次都可删除其中一个单词的任意一个字符，求使两单词相同的最小操作次数</p></div><details class="hint-container details"><summary>Solution</summary><p>目标是通过删除导致两单词不同的字符来使其相同，若从删除的反面——留存字符思考，实际上就是求两字符串的最长相同子串，并且由于每次删除的字符位置可任选，所以最长相同子串的字符可不在原字符串中连续。可通过二维动态规划来解决，令<code>dp[i][j]</code>为前一单词的前<code>i</code>个字符与后一单词的前<code>j</code>个字符中的最长公共子序列的长度，转移状态方程需考虑俩字符串各自遍历到的字符是否相同，若相同则公共子序列加一，若不同则从上一状态（有两种）取最大转移而来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">minDistance</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">M</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(), N = </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[M + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][N + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= M; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt;= N; j++)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) == </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j], dp[i][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> M + N - </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * dp[M][N];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),ts={id:"编辑距离",tabindex:"-1"},cs=s("a",{class:"header-anchor",href:"#编辑距离","aria-hidden":"true"},"#",-1),Ds={href:"https://leetcode.cn/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"},rs=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定两个单词，每次编辑可对一个单词进行单个字符的插入或删除或替换，求将一单词转换成另一单词的最少编辑次数</p></div><details class="hint-container details"><summary>Solution</summary><p>用动态规划解决，令<code>dp[i][j]</code>为<code>word1</code>前<code>i</code>个字符与<code>word2</code>前<code>j</code>个字符之间的编辑距离，相对于其来说，若<code>word1[i] != word2[j]</code>，则：</p><ul><li>由<code>dp[i-1][j-1]</code>转换而来表示在<code>word1</code>前<code>i-1</code>个字符与<code>word2</code>前<code>j-1</code>个字符完成编辑的基础上，对<code>word1[i]</code>进行替换操作使<code>word1[i] == word2[j]</code></li><li>由<code>dp[i][j-1]</code>转换而来表示在<code>word1</code>前<code>i</code>个字符与<code>word2</code>前<code>j-1</code>个字符完成编辑的基础上，对<code>word2[j]</code>进行插入操作使<code>word1[i] == word2[j]</code></li><li>由<code>dp[i-1][j]</code>转换而来表示在<code>word1</code>前<code>i-1</code>个字符与<code>word2</code>前<code>j</code>个字符完成编辑的基础上，对<code>word1[i]</code>进行删除操作使<code>word1[i] == word2[j]</code></li></ul><p>显然此时最短编辑距离为<code>dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])</code>。</p><p>当<code>word1[i] == word2[j]</code>时，有<code>dp[i][j] = min(dp[i - 1][j - 1], 1 + min(dp[i - 1][j], dp[i][j - 1]))</code>，考虑编辑距离的实际意义，显然两仅相差一个字符的单词的编辑距离至多为一，即有<code>dp[i-1][j-1] &lt;= 1 + dp[i-1][j]</code>且<code>dp[i-1][j-1] &lt;= 1 + dp[i][j-1]</code>，故最终有<code>dp[i][j] = dp[i-1][j-1]</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">minDistance</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">M</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(), N = </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (M * N == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> N + M;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[M + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][N + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= M; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">			dp[i][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= N; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">			dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= M; i++)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt;= N; j++)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">word1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) == </span><span style="color:#9CDCFE;">word2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(dp[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j], dp[i][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[M][N];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),is={id:"不同的子序列",tabindex:"-1"},ys=s("a",{class:"header-anchor",href:"#不同的子序列","aria-hidden":"true"},"#",-1),ds={href:"https://leetcode.cn/problems/distinct-subsequences/",target:"_blank",rel:"noopener noreferrer"},ms=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定字符串<code>s</code>和<code>t</code>，求<code>t</code>在<code>s</code>的子序列（可不连续）中的出现次数</p></div><details class="hint-container details"><summary>Solution</summary><p>令<code>dp[i+1][j+1]</code>表示<code>t</code>的前<code>i</code>个字符在<code>s</code>的前<code>j</code>个字符的子序列中出现的次数。有边缘条件：</p><ul><li><code>dp[0][j] = 1, 0 &lt;= j &lt;= s.length()</code>: 空串是任意串的子序列，且仅出现一次</li><li><code>dp[i][0] = 0, 0 &lt; i &lt;= t.length()</code>: 任意非空串都不是空串的子序列</li></ul><p>处理每一行时，即对于固定的<code>t</code>的前<code>i</code>个字符来说，考虑<code>s</code>的前<code>j</code>个字符：</p><ul><li>若<code>t[i] != s[j]</code>，则含新增字符<code>s[j]</code>的<code>s</code>前<code>j</code>个字符的子序列中不可能恰出现<code>t</code>的前<code>i</code>个字符，故次数应延用<code>s</code>前<code>j-1</code>个字符的次数，即<code>dp[i+1][j+1] = dp[i+1][j]</code></li><li>若<code>t[i] == s[j]</code>，则显然可分为子序列中是否含<code>s[j]</code>两种情况，不含的话同上，含的话就相当于<code>s</code>的前<code>j-1</code>个字符和<code>t</code>的前<code>i-1</code>个字符的所有子序列都新增一个相同字符，其出现次数不变，故综合起来<code>dp[i+1][j+1] = dp[i+1][j] + dp[i][j]</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">numDistinct</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() * </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() &lt; </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i) == </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(j))</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j] + dp[i][j];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()][</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Cs={id:"最长回文子序列",tabindex:"-1"},us=s("a",{class:"header-anchor",href:"#最长回文子序列","aria-hidden":"true"},"#",-1),hs={href:"https://leetcode.cn/problems/longest-palindromic-subsequence/",target:"_blank",rel:"noopener noreferrer"},vs=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定字符串中最长回文子序列的长度</p></div><details class="hint-container details"><summary>Solution</summary><p>令<code>dp[i][j]</code>表示字符串<code>s</code>中以<code>s[i]</code>和<code>s[j]</code>为左右边界（含）的最长回文子序列长度，由于子序列中的字符可以不在原串中连续，故虽然枚举的是两端，但应该考虑充分利用已计算的数据：</p><ul><li>当<code>s[i] == s[j]</code>时，此新边界必都可以用来扩展原来其内部的最长回文子序列，故有<code>dp[i][j] = dp[i+1][j-1] + 2</code></li><li>当<code>s[i] != s[j]</code>时，此两字符必不能同时用于扩展其内部的最长回文子序列，故应延用某侧较短边界内含最长回文子序列的较大值，即<code>dp[i][j] = max(dp[i+1][j], dp[i][j-1])</code></li></ul><p>由上述转移方程结合实际语义来看，为确保能够成功转移，在更新二维 dp 数组的某个值时，应确保其正下方、左侧、左下方的值已经是有效的，故整体的循环应从下至上、从左至右，再考虑枚举边界不应重复，故只能枚举整个二维数组的右上三角区域，并且每次大循环开始前需确保对角线上的值已初始化（按语义应为 1），如此也可避免枚举左下三角的边缘条件的不便。</p><p>此题还有另一种思考方式，即逆序拷贝原字符串，则回文问题就变成了求两字符串的最长公共子序列问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">longestPalindromeSubseq</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[n][n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; --i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			dp[i][i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt; n; ++j) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i) == </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(j))</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[i][j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(dp[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j], dp[i][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="股票问题" tabindex="-1"><a class="header-anchor" href="#股票问题" aria-hidden="true">#</a> 股票问题</h2>`,3),Es={id:"买卖股票的最佳时机-ii",tabindex:"-1"},bs=s("a",{class:"header-anchor",href:"#买卖股票的最佳时机-ii","aria-hidden":"true"},"#",-1),gs={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"},As=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定表示每天股价的数组<code>prices</code>，其中<code>prices[i]</code>表示某支股票第<code>i</code>天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，求能获得的最大利润</p></div><details class="hint-container details"><summary>Solution</summary><p>令<code>sell[i]</code>和<code>keep[i]</code>分别表示第<code>i</code>天交易完后未持有和持有股票的最大利润，则：</p><ul><li>对于<code>sell</code>状态，可以是原本就未持有，也可以是通过将持有股票卖掉从<code>keep</code>转换而来，故<code>sell[i] = max(sell[i-1], keep[i-1] + prices[i])</code></li><li>对于<code>keep</code>状态，可以是原本就持有，也可以是通过买入股票从<code>sell</code>转换而来，故<code>keep[i] = max(keep[i-1], sell[i-1] - prices[i])</code></li></ul><p>边缘状态是第 0 天的利润，显然<code>sell[0] = 0</code>，而持有状态则表示以第 0 天价格购入了股票，故利润<code>keep[0] = -prices[0]</code>。最后一天卖掉股票一定比持有股票的利润更大，故答案为<code>sell[n-1]</code>。由于转移方程仅与上一天状态相关，故可将数组压缩为单一变量，并且在每天更新时无需将先更新的值用临时变量暂存，比如先更新了<code>keep[i]</code>，则后续更新<code>sell[i]</code>时转移方程中就会从<code>keep[i]</code>转移而非之前的<code>keep[i-1]</code>，但这并没影响，因为按照实际意义来看，从<code>keep[i]</code>转移代表从当天的持有到卖出，显然利润为零</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sell</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, keep = -prices[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			keep = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(keep, sell - prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			sell = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(sell, keep + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> sell;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Bs={id:"买卖股票的最佳时机-iii",tabindex:"-1"},_s=s("a",{class:"header-anchor",href:"#买卖股票的最佳时机-iii","aria-hidden":"true"},"#",-1),ks={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/",target:"_blank",rel:"noopener noreferrer"},xs=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("给定表示每天股价的数组"),s("code",null,"prices"),n("，其中"),s("code",null,"prices[i]"),n("表示某支股票第"),s("code",null,"i"),n("天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成两笔交易，求能获得的最大利润")])],-1),fs={class:"hint-container details"},Fs=s("summary",null,"Solution",-1),js={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"},ws=o(`<ul><li>第一笔买入的<code>keep1</code>只能是由原有<code>keep1</code>保持或者当天买入转移而来，故<code>keep1[i] = max(keep1[i-1], - prices[i])</code></li><li>第一次卖出但未进行第二次买入的<code>sell1</code>只能是由原有<code>sell1</code>保持或者由当天卖出转移而来，故<code>sell1[i] = max(sell1[i-1], keep1[i-1] + prices[i])</code></li><li>已第一次卖出且第二次买入的<code>keep2</code>只能是由原有<code>keep2</code>保持或者当天买入由<code>sell1[i-1]</code>转移而来，故<code>keep2[i] = max(keep2[i-1], sell1[i-1] - prices[i])</code></li><li>第二笔卖出的<code>sell2</code>只能是由原有<code>sell2</code>保持或者当天卖出转移而来，故<code>sell2[i] = max(sell2[i-1], keep2[i-1] + prices[i])</code></li></ul><p>最后利润最大的显然是<code>sell2[n-1]</code>，再进行空间压缩可得代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">k1</span><span style="color:#D4D4D4;"> = -prices[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], k2 = -prices[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s1</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, s2 = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			k1 = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(k1, -prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			s1 = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(s1, k1 + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			k2 = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(k2, s1 - prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			s2 = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(s2, k2 + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> s2;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Ms={id:"买卖股票的最佳时机-iv",tabindex:"-1"},Ss=s("a",{class:"header-anchor",href:"#买卖股票的最佳时机-iv","aria-hidden":"true"},"#",-1),zs={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/",target:"_blank",rel:"noopener noreferrer"},Gs=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("给定表示每天股价的数组"),s("code",null,"prices"),n("，其中"),s("code",null,"prices[i]"),n("表示某支股票第"),s("code",null,"i"),n("天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成"),s("code",null,"k"),n("笔交易，求能获得的最大利润")])],-1),Is={class:"hint-container details"},Ns=s("summary",null,"Solution",-1),Ls={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/",target:"_blank",rel:"noopener noreferrer"},Ps=s("code",null,"k",-1),Vs=s("code",null,"keep[i][j]",-1),Ts=s("code",null,"i",-1),qs=s("code",null,"j",-1),Ws=s("code",null,"sell[i][j]",-1),Rs=s("code",null,"i",-1),Us=s("code",null,"j",-1),Os=o(`<ul><li>第<code>i</code>天第<code>j</code>笔持有的<code>keep[i][j]</code>只能是由原有保持或者当天由上一笔未持有状态买入转移而来，故<code>keep[i][j] = max(keep[i-1][j], sell[i-1][j-1] - prices[i])</code></li><li>第<code>i</code>天第<code>j</code>笔未持有的<code>sell[i][j]</code>只能是由原有保持或者当天由本笔交易卖出转移而来，故<code>sell[i][j] = max(sell[i-1][j], keep[i-1][j] + prices[i])</code></li></ul><p>除了常规的空间压缩之外，还有些细节需要注意：</p><ul><li>一笔交易产生实质买卖利润至少需要两天，即买卖若在同一天则无意义，故应最多只需要进行<code>min(k, prices.length / 2)</code>笔交易即可确保获得最大利润 <ul><li>注意由此运算导致的特殊测试用例错误，如<code>prices.length == 1</code></li></ul></li><li>每天开始处理各笔交易前都需要将第 0 笔交易初始化，且初始化需联合考虑前一天处理过后的利润</li><li>基于上一条，在开始处理每天的各笔交易前，需将每笔的持有利润都设为<code>- prices[0]</code>，而不能仅设置第 0 笔交易后状态为持有的利润，否则最后计算出的总利润可能会超出实际能获得的，因为对交易次数进行优化之后实际上强制每天都进行模拟买卖，若亏损则再强制等效于未进行买卖，故对于每一笔交易来说都有可能强制将本为负的买卖利润强行拉至 0（数组初始化的值）导致利润虚高，进而向后累积</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (k * </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		k = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(k, </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">sell</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[k];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">keep</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[k];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fill</span><span style="color:#D4D4D4;">(keep, -prices[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			keep[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(keep[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], -prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			sell[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(sell[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], keep[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt; k; ++j) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				keep[j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(keep[j], sell[j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] - prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">				sell[j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(sell[j], keep[j] + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> sell[k - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Xs={id:"最佳买卖股票时机含冷冻期",tabindex:"-1"},Hs=s("a",{class:"header-anchor",href:"#最佳买卖股票时机含冷冻期","aria-hidden":"true"},"#",-1),Js={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/",target:"_blank",rel:"noopener noreferrer"},Ks=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("给定表示每天股价的数组"),s("code",null,"prices"),n("，其中"),s("code",null,"prices[i]"),n("表示某支股票第"),s("code",null,"i"),n("天的价格。在任何时候最多只能持有一股股票，不限制交易次数但不可在卖出股票的下一天买入，求能获得的最大利润")])],-1),Qs={class:"hint-container details"},Ys=s("summary",null,"Solution",-1),Zs={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/",target:"_blank",rel:"noopener noreferrer"},$s={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"},sn=o(`<p>利用状态机模型归纳后考虑设置三种状态：持有股票<code>keep</code>、未持有但在冷静期<code>cool</code>、未持有且不在冷静期<code>wait</code>，则第<code>i</code>天能获得的最大利润为：</p><ul><li><code>keep</code>可由原有保持或前一天买入转移而来，故<code>keep[i] = max(keep[i-1], wait[i-1] - prices[i])</code></li><li><code>wait</code>可由原有保持或由冷静期转移而来，故<code>wait[i] = max(wait[i-1], cool[i-1])</code></li><li><code>cool</code>必由前一天出售股票转移而来，故<code>cool[i] = keep[i-1] + prices[i]</code></li></ul><p>显然能进行空间压缩，需注意的是压缩之后每天的仨变量都是相互依赖的，故必须得先缓存至少一个变量的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">keep</span><span style="color:#D4D4D4;"> = -prices[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span><span style="color:#6A9955;">// 持有股票</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cool</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span><span style="color:#6A9955;">// 未持有，但在冷静期</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">wait</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span><span style="color:#6A9955;">// 未持有，且不在冷静期</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">newWait</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(cool, wait);</span></span>
<span class="line"><span style="color:#D4D4D4;">			cool = keep + prices[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">			keep = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(keep, wait - prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			wait = newWait;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(cool, wait);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),nn=s("h2",{id:"背包问题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#背包问题","aria-hidden":"true"},"#"),n(" 背包问题")],-1),ln={id:"组合总和-iv",tabindex:"-1"},an=s("a",{class:"header-anchor",href:"#组合总和-iv","aria-hidden":"true"},"#",-1),on={href:"https://leetcode.cn/problems/combination-sum-iv/",target:"_blank",rel:"noopener noreferrer"},en=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定目标值和元素各异的数组，求出数组中总和为目标值的组合的个数（元素可重复使用）</p></div><details class="hint-container details"><summary>Solution</summary><p>此类问题可以用回溯把每种组合模拟出来统计，但大可不必，因为只需求出数量，故可看作与顺序相关的完全背包问题，直接套用模版</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">combinationSum4</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[target + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt;= target; j++) </span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> nums) </span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (j &gt;= num)</span></span>
<span class="line"><span style="color:#D4D4D4;">					dp[j] = dp[j] + dp[j - num];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[target];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),pn={id:"目标和",tabindex:"-1"},tn=s("a",{class:"header-anchor",href:"#目标和","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/target-sum/",target:"_blank",rel:"noopener noreferrer"},Dn=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"给定非负整数数组和目标值，向数组中的每个元素前添加正负号，求添加完后数组和为目标值的添加方法数")],-1),rn={class:"hint-container details"},yn=s("summary",null,"Solution",-1),dn=s("p",null,"直接遍历所有组合求出组合数。递归时需注意分正负求得的组合数需相加",-1),mn=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"findTargetSumWays"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"target"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"backtracking"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", nums, target);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"backtracking"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"idx"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"target"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (idx == "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," target == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"?"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"backtracking"),s("span",{style:{color:"#D4D4D4"}},"(idx + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", nums, target + nums[idx]) + "),s("span",{style:{color:"#DCDCAA"}},"backtracking"),s("span",{style:{color:"#D4D4D4"}},"(idx + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", nums, target - nums[idx]);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cn=s("p",null,[n("实际上添加正负号就是将原数组的所有元素分为两个子集，令正号子集为和负号子集分别为"),s("code",null,"P"),n("和"),s("code",null,"N"),n("，有"),s("code",null,"P + N = sum"),n("且"),s("code",null,"P - N = tar"),n("，其中"),s("code",null,"sum"),n("为原数组总和，"),s("code",null,"tar"),n("为给定目标值，故有"),s("code",null,"P = (sum + tar) / 2"),n("，问题转化为原数组中取部分数字且和为"),s("code",null,"(sum + tar) / 2"),n("的种数，转化为类似容量固定的 01 背包问题，等效为重量与价值相同的物体，求选取恰好装满背包的组合数，故令"),s("code",null,"dp[i]"),n("为重量恰为"),s("code",null,"i"),n("的选取组合数，在转移的时候显然应将选与不选物品的组合数相加，边缘条件"),s("code",null,"dp[0] = 1"),n("（都不选以令选取重量为 0）")],-1),un=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"otherMethod"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"target"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"sum"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"num"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			sum += num;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ((sum + target) % "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}}," != "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," || target > sum)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"p"),s("span",{style:{color:"#D4D4D4"}}," = (sum + target) / "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"dp"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[p + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		dp["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"num"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"j"),s("span",{style:{color:"#D4D4D4"}}," = p; j >= num; --j)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				dp[j] = dp[j] + dp[j - num];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," dp[p];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),hn={id:"零钱兑换",tabindex:"-1"},vn=s("a",{class:"header-anchor",href:"#零钱兑换","aria-hidden":"true"},"#",-1),En={href:"https://leetcode.cn/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},bn=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定代表硬币面额的整数数组与目标值，求恰凑成总金额所需的最少的硬币个数。每种硬币数量无限，若无法凑成则返回-1</p></div><details class="hint-container details"><summary>详情</summary><p>令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令<code>dp[i]</code>为恰凑成总金额<code>i</code>的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为<code>dp[i] = min(dp[i], dp[i - coin] + 1)</code>，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为<code>dp[0] = 0</code>，最后只需检查目标值的硬币数是否变为了小于预设值的数即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">coinChange</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">coins</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">amount</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (amount == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[amount + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fill</span><span style="color:#D4D4D4;">(dp, amount + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">coin</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> coins)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = coin; j &lt;= amount; j++)</span></span>
<span class="line"><span style="color:#D4D4D4;">				dp[j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(dp[j], dp[j - coin] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[amount] &gt; amount </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dp[amount];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),gn={id:"完全平方数",tabindex:"-1"},An=s("a",{class:"header-anchor",href:"#完全平方数","aria-hidden":"true"},"#",-1),Bn={href:"https://leetcode.cn/problems/perfect-squares/",target:"_blank",rel:"noopener noreferrer"},_n=o(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求和为给定整数的完全平方数的最少数量</p></div><details class="hint-container details"><summary>详情</summary><p>令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令<code>dp[i]</code>为恰凑成总金额<code>i</code>的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为<code>dp[i] = min(dp[i], dp[i - coin] + 1)</code>，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为<code>dp[0] = 0</code>，最后只需检查目标值的硬币数是否变为了小于预设值的数即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">coinChange</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">coins</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">amount</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (amount == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[amount + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fill</span><span style="color:#D4D4D4;">(dp, amount + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		dp[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">coin</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> coins)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = coin; j &lt;= amount; j++)</span></span>
<span class="line"><span style="color:#D4D4D4;">				dp[j] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(dp[j], dp[j - coin] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dp[amount] &gt; amount </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dp[amount];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2);function kn(xn,fn){const a=D("ExternalLinkIcon"),c=D("Tabs");return i(),y("div",null,[C,s("h3",u,[h,n(),s("a",v,[n("不同的二叉搜索树"),l(a)])]),E,b,s("h3",g,[A,n(),s("a",B,[n("打家劫舍 II"),l(a)])]),_,s("h3",k,[x,n(),s("a",f,[n("打家劫舍 III"),l(a)])]),F,s("h3",j,[w,n(),s("a",M,[n("整数拆分"),l(a)])]),S,s("h3",z,[G,n(),s("a",I,[n("最长递增子序列"),l(a)])]),N,s("details",L,[P,l(c,{id:"122",data:[{id:"DP"},{id:"贪心 + 二分查找"}]},{title0:e(({value:p,isActive:t})=>[n("DP")]),title1:e(({value:p,isActive:t})=>[n("贪心 + 二分查找")]),tab0:e(({value:p,isActive:t})=>[V,T]),tab1:e(({value:p,isActive:t})=>[q,W,R,U]),_:1})]),s("h3",O,[X,n(),s("a",H,[n("环形子数组的最大和"),l(a)])]),J,s("details",K,[Q,s("p",null,[n("很容易联想到普通数组求 "),s("a",Y,[n("最大子数组和"),l(a)]),n(" 的题目，所以自然需要考虑分割问题进行套用。整个数组的总和固定，当将环分割为两个子数组后，若一个子数组的和恰为最大，那另一子数组的和自然为最小。回到环形数组中，实际上也就只有两种情况：")]),Z]),s("h3",$,[ss,n(),s("a",ns,[n("鸡蛋掉落"),l(a)])]),ls,s("h3",as,[os,n(),s("a",es,[n("两个字符串的删除操作"),l(a)])]),ps,s("h3",ts,[cs,n(),s("a",Ds,[n("编辑距离"),l(a)])]),rs,s("h3",is,[ys,n(),s("a",ds,[n("不同的子序列"),l(a)])]),ms,s("h3",Cs,[us,n(),s("a",hs,[n("最长回文子序列"),l(a)])]),vs,s("h3",Es,[bs,n(),s("a",gs,[n("买卖股票的最佳时机 II"),l(a)])]),As,s("h3",Bs,[_s,n(),s("a",ks,[n("买卖股票的最佳时机 III"),l(a)])]),xs,s("details",fs,[Fs,s("p",null,[n("主要框架与 "),s("a",js,[n("买卖股票的最佳时机 II"),l(a)]),n(" 类似，但由于能进行多笔交易且限制了交易上限，故应对每次交易单独进行 dp，且多笔交易之间的买卖关系需联合考虑：")]),ws]),s("h3",Ms,[Ss,n(),s("a",zs,[n("买卖股票的最佳时机 IV"),l(a)])]),Gs,s("details",Is,[Ns,s("p",null,[n("主要思想与 "),s("a",Ls,[n("买卖股票的最佳时机 III"),l(a)]),n(" 类似，只是将交易上限定为"),Ps,n("，只需联合考虑各笔交易即可：令"),Vs,n("表示第"),Ts,n("天第"),qs,n("笔交易完成后持有股票的最大利润，令"),Ws,n("表示第"),Rs,n("天第"),Us,n("笔交易完成后未持有股票的最大利润，则：")]),Os]),s("h3",Xs,[Hs,n(),s("a",Js,[n("最佳买卖股票时机含冷冻期"),l(a)])]),Ks,s("details",Qs,[Ys,s("p",null,[n("此题看似与 "),s("a",Zs,[n("买卖股票的最佳时机 IV"),l(a)]),n(" 相似，都能完成多笔交易，但由于存在冷冻期，所以无法像那题一样在一天内完成无数笔交易，故实际上可以将每笔交易都割裂开来计算，也无需为多笔交易单独设置变量维度，此题应视作 "),s("a",$s,[n("买卖股票的最佳时机 II"),l(a)]),n(" 变化而来的，只需在其基础上增加一状态变量即可。")]),sn]),nn,s("h3",ln,[an,n(),s("a",on,[n("组合总和 IV"),l(a)])]),en,s("h3",pn,[tn,n(),s("a",cn,[n("目标和"),l(a)])]),Dn,s("details",rn,[yn,l(c,{id:"530",data:[{id:"回溯"},{id:"DP"}]},{title0:e(({value:p,isActive:t})=>[n("回溯")]),title1:e(({value:p,isActive:t})=>[n("DP")]),tab0:e(({value:p,isActive:t})=>[dn,mn]),tab1:e(({value:p,isActive:t})=>[Cn,un]),_:1})]),s("h3",hn,[vn,n(),s("a",En,[n("零钱兑换"),l(a)])]),bn,s("h3",gn,[An,n(),s("a",Bn,[n("完全平方数"),l(a)])]),_n,d(" ------------------------------------------------------- ")])}const wn=r(m,[["render",kn],["__file","dynamic_programming.html.vue"]]);export{wn as default};
