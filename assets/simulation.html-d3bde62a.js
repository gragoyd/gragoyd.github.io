import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as y,c as C,a as s,b as l,d as n,w as a,f as d,e as p}from"./app-33675145.js";const m={},u={id:"对角线遍历",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#对角线遍历","aria-hidden":"true"},"#",-1),h={href:"https://leetcode-cn.com/problems/diagonal-traverse/",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>按对角线遍历矩阵，如：</p><p>input: <code>mat = [[1,2,3],[4,5,6],[7,8,9]]</code></p><p>output: <code>[1,2,4,7,5,3,6,8,9]</code></p></div><details class="hint-container details"><summary>Solution</summary><p>先假设每条斜线都从右上至左下遍历，再依据奇偶按需逆序</p><p>可进一步实时遍历判断方向与斜线收尾的方法，未记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">findDiagonalOrder</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">mat</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">mat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, n = mat[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[m * n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cnt</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; k &lt; m + n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; ++k) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clear</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = k &lt; n </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> k - n + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = k &lt; n </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> k </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (r &lt; m &amp;&amp; c &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(mat[r++][c--]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (k % </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reverse</span><span style="color:#D4D4D4;">(temp);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> temp)</span></span>
<span class="line"><span style="color:#D4D4D4;">				res[cnt++] = num;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),b={id:"最长回文子串",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#最长回文子串","aria-hidden":"true"},"#",-1),A={href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},B=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>找出给定字符串中最长的回文子串</p></div><details class="hint-container details"><summary>Solution</summary><p>枚举每个字符，在保持回文前提下，以其为中心向两端扩展，扩展期间维护最大回文串位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">longestPalindrome</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, end = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// 考虑初始回文串为 1 和 2 字符的边界情况</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">expand</span><span style="color:#D4D4D4;">(s, i, i), </span><span style="color:#DCDCAA;">expand</span><span style="color:#D4D4D4;">(s, i, i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (len &gt; end - start) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#6A9955;">// 当回文串由 2 字符拓展而来时，i-len/2 会导致左边界多减一</span></span>
<span class="line"><span style="color:#D4D4D4;">				start = i - (len - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				end = i + len / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(start, end + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">expand</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (left &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; right &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() &amp;&amp; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(left) == </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(right)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			--left;</span></span>
<span class="line"><span style="color:#D4D4D4;">			++right;</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#6A9955;">// 此时的俩边界为多拓展了一次的，故返回时将长度 -2</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> right - left - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),_={id:"两数之和-ii-输入有序数组",tabindex:"-1"},F=s("a",{class:"header-anchor",href:"#两数之和-ii-输入有序数组","aria-hidden":"true"},"#",-1),f={href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},k=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"找出非递减数组中和为给定值的两个数的下标"),s("p",null,[l("要求空间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1),x=p(`<details class="hint-container details"><summary>Solution</summary><p>因为数组有序，故可以用双指针由两端逐渐逼近</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">twoSum</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">numbers</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, right = </span><span style="color:#9CDCFE;">numbers</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (left &lt; right) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> = numbers[left] + numbers[right];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (sum &lt; target)</span></span>
<span class="line"><span style="color:#D4D4D4;">				++left;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (sum &gt; target)</span></span>
<span class="line"><span style="color:#D4D4D4;">				--right;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { left + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, right + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1),w={id:"翻转单词顺序",tabindex:"-1"},S=s("a",{class:"header-anchor",href:"#翻转单词顺序","aria-hidden":"true"},"#",-1),j={href:"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/",target:"_blank",rel:"noopener noreferrer"},M=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"将给定英文句子字符串的单词逆序（需除掉一切多余空格），如："),s("p",null,[l("input: "),s("code",null,'" hello world! "')]),s("p",null,[l("output: "),s("code",null,'"world! hello"')])],-1),L={class:"hint-container details"},I=s("summary",null,"Solution",-1),z=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#6A9955"}},"// 先反转各词，再整体翻转")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"reverseWords"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (s == "),s("span",{style:{color:"#569CD6"}},"null"),s("span",{style:{color:"#D4D4D4"}}," || "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#CE9178"}},'""'),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"temp"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"front"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"cur"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; cur < "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"(); cur = front + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (cur < "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() && "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"charAt"),s("span",{style:{color:"#D4D4D4"}},"(cur) == "),s("span",{style:{color:"#CE9178"}},"' '"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++cur;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (cur == "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"())")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"break"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			front = cur + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (front < "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() && "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"charAt"),s("span",{style:{color:"#D4D4D4"}},"(front) != "),s("span",{style:{color:"#CE9178"}},"' '"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++front;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"temp"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"delete"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#9CDCFE"}},"temp"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"());")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"temp"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"append"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"substring"),s("span",{style:{color:"#D4D4D4"}},"(cur, front));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"temp"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"append"),s("span",{style:{color:"#D4D4D4"}},"(temp + "),s("span",{style:{color:"#CE9178"}},'" "'),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"deleteCharAt"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"()."),s("span",{style:{color:"#DCDCAA"}},"toString"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),N=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"reverseWords"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#6A9955"}},"// 除掉首尾空格后正则匹配连续的空白字符作为分隔符分割")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"wordList"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"Arrays"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"asList"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"trim"),s("span",{style:{color:"#D4D4D4"}},"()."),s("span",{style:{color:"#DCDCAA"}},"split"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#CE9178"}},'"'),s("span",{style:{color:"#D7BA7D"}},"\\\\"),s("span",{style:{color:"#CE9178"}},'s+"'),s("span",{style:{color:"#D4D4D4"}},"));")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#9CDCFE"}},"Collections"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"(wordList);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"String"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"join"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#CE9178"}},'" "'),s("span",{style:{color:"#D4D4D4"}},", wordList);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),T=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#6A9955"}},"// 逆序拷贝各单词，期间除掉多余空格")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"reverseWords"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		s = "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"trim"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"sb"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"StringBuilder"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"());")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"left"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"length"),s("span",{style:{color:"#D4D4D4"}},"() - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", right = left; left >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; right = left) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (left >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"charAt"),s("span",{style:{color:"#D4D4D4"}},"(left) != "),s("span",{style:{color:"#CE9178"}},"' '"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				--left;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"sb"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"append"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"substring"),s("span",{style:{color:"#D4D4D4"}},"(left + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", right + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},") + "),s("span",{style:{color:"#CE9178"}},'" "'),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (left >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && "),s("span",{style:{color:"#9CDCFE"}},"s"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"charAt"),s("span",{style:{color:"#D4D4D4"}},"(left) == "),s("span",{style:{color:"#CE9178"}},"' '"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				--left;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"sb"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"toString"),s("span",{style:{color:"#D4D4D4"}},"()."),s("span",{style:{color:"#DCDCAA"}},"trim"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O={id:"求众数-ii",tabindex:"-1"},P=s("a",{class:"header-anchor",href:"#求众数-ii","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/majority-element-ii/",target:"_blank",rel:"noopener noreferrer"},W=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"求非空数组中所有出现次数大于数组长度三分之一的元素")],-1),q=s("details",{class:"hint-container details"},[s("summary",null,"Solution"),s("p",null,"此类求多数元素的问题考虑用摩尔投票法，其实质就是不同元素对拼消耗，最后多数元素肯定会相应剩下。"),s("p",null,[l("例如 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),l(" 个元素中求出现次数大于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mo",null,"÷"),s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"N\\div k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"÷"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),l(" 的元素，故先拟定 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"k-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),l(" 个可能存在的候选多数元素【符合条件的最多只可能有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"k-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),l(" 个】，每次取 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"k-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),l(" 个不同元素进行抵消，最后若有剩下的候选元素，则对每种进行计数核查是否符合要求。")]),s("p",null,"具体实现是设若干候选变量及其相应计数变量，在遍历数组的每个元素时，若当前元素与某个剩余的变量相同（且相应计数非零），则将其计数加一；若与各候选变量都不同，则伺机选取坑位占据，以备接下来的一组抵消，若此时发现无坑位，则说明已凑够一组不同元素，立即进行抵消。遍历完之后若有剩余候选变量，再到原数组中统计其次数是否达标，最终确认答案"),s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#DCDCAA"}},"majorityElement"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"r1"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", c1 = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", r2 = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", c2 = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"num"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (c1 > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && num == r1)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++c1;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (c2 > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && num == r2)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++c2;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (c1 == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				r1 = num;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++c1;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (c2 == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				r2 = num;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++c2;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				--c1;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				--c2;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ArrayList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (c1 > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," || c2 > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n1"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", n2 = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"num"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (num == r1)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					++n1;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (num == r2)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					++n2;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (n1 > "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," / "),s("span",{style:{color:"#B5CEA8"}},"3"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(r1);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (n2 > "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," / "),s("span",{style:{color:"#B5CEA8"}},"3"),s("span",{style:{color:"#D4D4D4"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(r2);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])],-1),Q={id:"根据身高重建队列",tabindex:"-1"},G=s("a",{class:"header-anchor",href:"#根据身高重建队列","aria-hidden":"true"},"#",-1),H={href:"https://leetcode.cn/problems/queue-reconstruction-by-height/",target:"_blank",rel:"noopener noreferrer"},J=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[l("给定一群人的乱序的属性数组，其中各元素 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("msub",null,[s("mi",null,"h"),s("mi",null,"i")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"k"),s("mi",null,"i")]),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[h_i, k_i]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0315em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"]")])])]),l(" 表示第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),l(" 个人的身高为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"h"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"h_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l(" 且前面恰有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"k"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"k_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0315em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l(" 个人的身高不低于 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"h"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"h_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l(" ，将属性数组重建为有序的并返回")]),s("p",null,[l("input: "),s("code",null,"[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]")]),s("p",null,[l("output: "),s("code",null,"[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]")])],-1),K=p(`<details class="hint-container details"><summary>Solution</summary><p>分为两个部分来考虑，以什么顺序从原数组中抽出来人，还有将抽出来的人怎么插入新建的队列中去。实际上新建的队列只需对各人的第二属性负责即可，那么显然如果将人从高到低逐渐插入新队列，就不会对已插入的人的第二属性产生影响，并且当前插入者的第二属性恰好就是插入新队列的索引位置，由此可得从原数组中抽人的第一顺序应当是其第一属性（身高），当身高相同时考虑第二属性，因为其表示的是前面有多少个的问题，所以只需稍加试验即可得应按照升序进行抽取</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#DCDCAA;">reconstructQueue</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">people</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(people, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Comparator</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt;() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">compare</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">o1</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">o2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> o1[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] == o2[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> o1[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] - o2[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> o2[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] - o1[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		});</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> people)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(p[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], p);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toArray</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()][]);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1),R={id:"分发糖果",tabindex:"-1"},U=s("a",{class:"header-anchor",href:"#分发糖果","aria-hidden":"true"},"#",-1),X={href:"https://leetcode.cn/problems/candy/",target:"_blank",rel:"noopener noreferrer"},Y=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"若干人站成一排，给定代表各位评分的整数数组，依据评分给每人发糖果，要求每人至少发一个，并且相邻两人评分更高的分给更多糖果，求满足要求的最少糖果数")],-1),Z={class:"hint-container details"},$=s("summary",null,"Solution",-1),ss=s("p",null,"实际上“相邻两人评分更高的分给更多糖果”可以拆分为两个不同方向遍历时的单侧规则：若当前的评分高于上一个，则当前的糖果数比上一个的多一个，否则当前只给一个糖果（合理利用规则减少糖果数）。所以只需进行两次反向遍历，得到每人在两次遍历时最少需分得的糖果数，取其更大者即可",-1),ls=s("p",null,"具体实现时，第一次遍历的糖果数需要数组暂存，但第二次只需要用单个变量进行记录当前位置的糖果数并同时计算答案即可",-1),ns=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"candy"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"left"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		left["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (ratings[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] < ratings[i])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				left[i] = left[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"else")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				left[i] = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = left["),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," - "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},", right = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i >= "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; --i) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (ratings[i] > ratings[i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++right;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"else")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				right = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			res += "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"max"),s("span",{style:{color:"#D4D4D4"}},"(left[i], right);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),as=s("p",null,[l("从左到右遍历，记前一个分得的糖果数量为"),s("code",null,"pre"),l("，当前递减序列的长度为"),s("code",null,"down"),l("、最近的递增序列的长度为"),s("code",null,"up"),l("，进行判断：若当前比上一个评分高，说明正在最近的递增序列中，直接分配给该同学"),s("code",null,"pre + 1"),l("个糖果即可；否则视作在一个递减序列中，直接分配给当前一个糖果，并为其所在的递减序列中所有人再多分配一个糖果，以保证糖果数量还是满足条件。实际上并不需要显式地额外分配糖果，因为需要额外分配的糖果数量即为"),s("code",null,"down"),l("；同时需要注意当"),s("code",null,"down == up"),l("时，需要把最近的递增序列的最后一个同学也并进递减序列中，因为其糖果数得同时满足两侧需求（参照解法一）")],-1),os=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"candy"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"total"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", up = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},", down = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", pre = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"ratings"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (ratings[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] <= ratings[i]) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				down = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				pre = ratings[i - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] == ratings[i] "),s("span",{style:{color:"#C586C0"}},"?"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," pre + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				total += pre;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				up = pre;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++down;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (down == up)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					++down;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				total += down;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				pre = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," total;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),es={id:"非递减数列",tabindex:"-1"},ts=s("a",{class:"header-anchor",href:"#非递减数列","aria-hidden":"true"},"#",-1),ps={href:"https://leetcode.cn/problems/non-decreasing-array/",target:"_blank",rel:"noopener noreferrer"},Ds=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>判断给定数组是否能在最多改变一个元素条件下成为非递减的</p></div><details class="hint-container details"><summary>Solution</summary><p>能变成非递减数组的话，原数组最多只能有一次递减发生。考虑发生递减的连续的三个元素<code>a, b, c</code>，其中<code>a &lt;= b</code>且<code>b &gt; c</code>，实际上只有两种情况：</p><ul><li><code>a &lt;= c</code>：既可将<code>b</code>降至<code>c</code>，也可将<code>c</code>升至<code>b</code>。但应尽可能使紧接着<code>c</code>的元素满足非递减，所以应将<code>b</code>降至<code>c</code></li><li><code>a &gt; c</code>: 只有将<code>c</code>升至<code>a</code>一种方式</li></ul><p>在遍历检查时记录是否已有一次递减发生，若已发生则直接返回。基于此可知，在检测到可能存在的第二次递减时，一定用不到第一次递减的<code>b</code>元素，故上述第一种情况下无需实际地改变<code>b</code>的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">checkPossibility</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">one</span><span style="color:#D4D4D4;"> = nums[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] &gt; nums[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (nums[i] &gt; nums[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (one)</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				one = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (nums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] &gt; nums[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">					nums[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = nums[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),cs={id:"回文子串",tabindex:"-1"},rs=s("a",{class:"header-anchor",href:"#回文子串","aria-hidden":"true"},"#",-1),is={href:"https://leetcode.cn/problems/palindromic-substrings/",target:"_blank",rel:"noopener noreferrer"},ys=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求给定字符串所有回文子串的数量</p></div><details class="hint-container details"><summary>Solution</summary><p>枚举所有可能的回文子串中心，将各中心向两侧尽可能延伸，以此枚举所有回文子串，时间复杂度比直接枚举子串两端再判断是否回文要低。</p><p>回文子串的中心有单字符和双字符两种，需要分开讨论扩展。枚举所有中心时有个小技巧：对于每个字符作为中心左端，中心右端要么是其本身，要么是右侧的下一个字符，故索引呈现强烈的奇偶规律性，可以将中心的左右端点并在一个循环中进行枚举，归纳可得共需枚举<code>2*n-1</code>次，左端点为<code>i/2</code>再取整，右端点为<code>i/2 + i%2</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">countSubstrings</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;"> = i &gt;&gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, r = (i &gt;&gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) + (i &amp; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (l &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; r &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() &amp;&amp; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(l) == </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(r)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				--l;</span></span>
<span class="line"><span style="color:#D4D4D4;">				++r;</span></span>
<span class="line"><span style="color:#D4D4D4;">				++res;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Cs={id:"找出游戏的获胜者",tabindex:"-1"},ds=s("a",{class:"header-anchor",href:"#找出游戏的获胜者","aria-hidden":"true"},"#",-1),ms={href:"https://leetcode.cn/problems/find-the-winner-of-the-circular-game/",target:"_blank",rel:"noopener noreferrer"},us=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[s("code",null,"n"),l("个人围成一圈，顺时针编号"),s("code",null,"1 ~ n"),l("，从 1 号开始（含 1 号）往后数第"),s("code",null,"k"),l("个淘汰，再从淘汰位置的下一个开始数，求如此淘汰到只剩最后一人的编号")])],-1),vs={class:"hint-container details"},hs=s("summary",null,"Solution",-1),Es=s("p",null,[l("实际用数组模拟出每次的淘汰直至获得最后一人的编号。考虑到需常从数组中间删除元素，数组采用"),s("code",null,"LinkedList"),l("实现")],-1),bs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"findTheWinner"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"LinkedList"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"people"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"LinkedList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; i <= n; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#9CDCFE"}},"people"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(i);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"idx"),s("span",{style:{color:"#D4D4D4"}}," = (k - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},") % n; n > "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"; idx = (idx + k - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},") % --n)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#9CDCFE"}},"people"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"remove"),s("span",{style:{color:"#D4D4D4"}},"(idx);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"people"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"get"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gs=s("code",null,"f(n, k)",-1),As=s("code",null,"n",-1),Bs=s("code",null,"k",-1),_s=s("code",null,"f(n, k) = [f(n-1, k) + k] % n",-1),Fs=s("code",null,"f(1, k) = 0",-1),fs={href:"https://leetcode.cn/problems/find-the-winner-of-the-circular-game/solution/by-fuxuemingzhu-laof/",target:"_blank",rel:"noopener noreferrer"},ks=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"findTheWinner"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},"; i <= n; ++i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            res = (res + k) % i;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xs={id:"盛最多水的容器",tabindex:"-1"},ws=s("a",{class:"header-anchor",href:"#盛最多水的容器","aria-hidden":"true"},"#",-1),Ss={href:"https://leetcode.cn/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"},js=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定表示每个位置高度的整型数组，仅可选其中两条线与地面构成容器，求存储水的最大量</p></div><details class="hint-container details"><summary>Solution</summary><p>用双指针从两端相向逼近并维护最大储水量。指针如何移动？因为指针是相向移动的，故每次移动横向距离减小，而储水量的高取决于二者高度的较小值，故移动较高的指针必不可能获得更大的储水量，移动高度低的指针才有可能。</p><p>当二者一样高时可以同时移动两个指针，因为若只移动一个的话，不管新位置高度如何，横向距离变小且最小高度不会变大，储水量必变小。更进一步，移动的那个指针即使一直移到紧挨另一个，也不可能会获得更大的储水量，必须一个移动后另一个也移动才可能，故合并为两指针同时相向移动</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxArea</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, right = </span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (left &lt; right) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            res = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(res, (right - left) * </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(height[left], height[right]));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (height[left] &lt; height[right])</span></span>
<span class="line"><span style="color:#D4D4D4;">                ++left;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (height[left] &gt; height[right])</span></span>
<span class="line"><span style="color:#D4D4D4;">                --right;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">                ++left;</span></span>
<span class="line"><span style="color:#D4D4D4;">                --right;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Ms={id:"计算右侧小于当前元素的个数",tabindex:"-1"},Ls=s("a",{class:"header-anchor",href:"#计算右侧小于当前元素的个数","aria-hidden":"true"},"#",-1),Is={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self/",target:"_blank",rel:"noopener noreferrer"},zs=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定整型数组<code>nums</code>，要求计算新数组<code>counts</code>，其中<code>counts[i]</code>的值是<code>nums[i]</code>右侧小于<code>nums[i]</code>的元素的数量</p></div><details class="hint-container details"><summary>详情</summary><p>可以转化为单点更新、区间查询型的离散化树状数组的应用。将原数组去重再排序并由此建立树状数组，从右至左遍历原数组的同时维护树状数组，并查询小于当前遍历值的所有数的数量和（因为是从右向左遍历的原数组，故树状数组中各值的数量即为当前遍历值右侧的数据）</p><p>还有基于归并排序变种的解法，见官方题解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">countSmaller</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TreeSet</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> nums)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(n);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> set)</span></span>
<span class="line"><span style="color:#D4D4D4;">            a[idx++] = n;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; --i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            idx = </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">binarySearch</span><span style="color:#D4D4D4;">(a, nums[i]) + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = idx - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j -= j &amp; -j)</span></span>
<span class="line"><span style="color:#D4D4D4;">                sum += c[j];</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(sum);</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (; idx &lt; </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; idx += idx &amp; -idx)</span></span>
<span class="line"><span style="color:#D4D4D4;">                c[idx] += </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reverse</span><span style="color:#D4D4D4;">(res);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Ns={id:"翻转对",tabindex:"-1"},Ts=s("a",{class:"header-anchor",href:"#翻转对","aria-hidden":"true"},"#",-1),Os={href:"https://leetcode.cn/problems/reverse-pairs/",target:"_blank",rel:"noopener noreferrer"},Ps=p(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求给定数组<code>nums</code>所含翻转对的数量，其中翻转对指满足<code>i &lt; j &amp;&amp; nums[i] &gt; 2*nums[j]</code>的索引对</p></div><details class="hint-container details"><summary>Solution</summary><p>求翻转对与归并排序过程十分契合，不断合并已排序子数组的过程中，可以顺便求出索引恰分别在左右子数组中的翻转对数量，而索引分布在同一子数组范围内的翻转对则在前一轮排序时已求出，故可借助整个归并排序过程逐渐求出所有翻转对。</p><p>在归并排序中合并两已升序排序的子数组过程中，设分别处于左右子数组的索引分别为<code>i</code>和<code>j</code>，本次待归并的总范围为<code>[left, right]</code>且<code>2*len == right-left+1</code>，右子数组起始索引为<code>left+len</code>，对于固定的<code>nums[i]</code>，在右侧维护最大的区间<code>[left+len, end)</code>，使得<code>end</code>处的元素为区间向右扩展遇到的首个不满足与<code>nums[i]</code>组成翻转对的元素，则对于<code>i</code>作为翻转对的左元素的情况来说，归并范围内本次需新增的数量为<code>end - (left + len)</code>，遍历左子数组中所有元素即可累加出所有新增翻转对数量，并且考虑到左右子数组的有序性，<code>end</code>在全过程随<code>i</code>单调不减。</p><p>本题还可用树状数组配合离散化来解，官方题解不好，可参考民间题解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">reversePairs</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cnt</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">tmp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; len &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; len &lt;&lt;= </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; left &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - len; left += len &lt;&lt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, left + (len &lt;&lt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = left; i &lt;= right; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">                    tmp[i] = nums[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;"> = left, r = left + len;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> = r; </span><span style="color:#6A9955;">// [r, end)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = l; i &lt; r; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (end &lt;= right &amp;&amp; (</span><span style="color:#4EC9B0;">long</span><span style="color:#D4D4D4;">) tmp[i] &gt; (</span><span style="color:#4EC9B0;">long</span><span style="color:#D4D4D4;">) tmp[end] &lt;&lt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                        ++end; </span><span style="color:#6A9955;">// end 随 i 单调不减</span></span>
<span class="line"><span style="color:#D4D4D4;">                    cnt += end - r; </span><span style="color:#6A9955;">// end 最大是 right+1，恰表示开区间个数</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = left; i &lt;= right; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (l == left + len)</span></span>
<span class="line"><span style="color:#D4D4D4;">                        nums[i] = tmp[r++];</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r &gt; right || tmp[l] &lt;= tmp[r])</span></span>
<span class="line"><span style="color:#D4D4D4;">                        nums[i] = tmp[l++];</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">                        nums[i] = tmp[r++];</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> cnt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Vs={id:"旋转数组",tabindex:"-1"},Ws=s("a",{class:"header-anchor",href:"#旋转数组","aria-hidden":"true"},"#",-1),qs={href:"https://leetcode.cn/problems/rotate-array/",target:"_blank",rel:"noopener noreferrer"},Qs=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[l("将给定数组向右轮转"),s("code",null,"k"),l("个位置")])],-1),Gs={class:"hint-container details"},Hs=s("summary",null,"Solution",-1),Js=s("p",null,[l("设"),s("code",null,"n"),l("为数组长度，轮转"),s("code",null,"k"),l("次后数组右侧的"),s("code",null,"k % n"),l("个元素会移至左侧，而原本的其余元素会向右移动"),s("code",null,"k % n"),l("个位置。故先翻转整个数组，使右侧的"),s("code",null,"k % n"),l("个元素移到左侧，原左侧的其余元素移到右侧，但各自都是逆序的，再将两部分元素分别逆序即可")],-1),Ks=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"rotate"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        k %= "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (k != "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"(nums, "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"(nums, "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},", k - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"(nums, k, "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"reverse"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"left"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"right"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," (; left < right; ++left, --right) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"t"),s("span",{style:{color:"#D4D4D4"}}," = nums[left];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            nums[left] = nums[right];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            nums[right] = t;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=s("p",null,"题解见官方，补充解释见其评论",-1),Us=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"rotate"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        k %= "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#DCDCAA"}},"gcd"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},", k);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"start"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; start < count; ++start) {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"curIdx"),s("span",{style:{color:"#D4D4D4"}}," = start;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"pre"),s("span",{style:{color:"#D4D4D4"}}," = nums[start];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"do"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"nextIdx"),s("span",{style:{color:"#D4D4D4"}}," = (curIdx + k) % "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"tmp"),s("span",{style:{color:"#D4D4D4"}}," = nums[nextIdx];")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                nums[nextIdx] = pre;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                pre = tmp;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                curIdx = nextIdx;")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            } "),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (curIdx != start);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"gcd"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"x"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"y"),s("span",{style:{color:"#D4D4D4"}},") {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," y == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},"?"),s("span",{style:{color:"#D4D4D4"}}," x "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"gcd"),s("span",{style:{color:"#D4D4D4"}},"(y, x % y);")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1);function Xs(Ys,Zs){const t=c("ExternalLinkIcon"),r=c("CodeTabs"),D=c("Tabs");return y(),C("div",null,[s("h3",u,[v,l(),s("a",h,[l("对角线遍历"),n(t)])]),E,s("h3",b,[g,l(),s("a",A,[l("最长回文子串"),n(t)])]),B,s("h3",_,[F,l(),s("a",f,[l("两数之和 II - 输入有序数组"),n(t)])]),k,x,s("h3",w,[S,l(),s("a",j,[l("翻转单词顺序"),n(t)])]),M,s("details",L,[I,n(r,{id:"69",data:[{id:"模拟"},{id:"API"},{id:"copy"}]},{title0:a(({value:o,isActive:e})=>[l("模拟")]),title1:a(({value:o,isActive:e})=>[l("API")]),title2:a(({value:o,isActive:e})=>[l("copy")]),tab0:a(({value:o,isActive:e})=>[z]),tab1:a(({value:o,isActive:e})=>[N]),tab2:a(({value:o,isActive:e})=>[T]),_:1})]),s("h3",O,[P,l(),s("a",V,[l("求众数 II"),n(t)])]),W,q,s("h3",Q,[G,l(),s("a",H,[l("根据身高重建队列"),n(t)])]),J,K,s("h3",R,[U,l(),s("a",X,[l("分发糖果"),n(t)])]),Y,s("details",Z,[$,n(D,{id:"130",data:[{id:"模拟"},{id:"优化"}]},{title0:a(({value:o,isActive:e})=>[l("模拟")]),title1:a(({value:o,isActive:e})=>[l("优化")]),tab0:a(({value:o,isActive:e})=>[ss,ls,ns]),tab1:a(({value:o,isActive:e})=>[as,os]),_:1})]),s("h3",es,[ts,l(),s("a",ps,[l("非递减数列"),n(t)])]),Ds,s("h3",cs,[rs,l(),s("a",is,[l("回文子串"),n(t)])]),ys,s("h3",Cs,[ds,l(),s("a",ms,[l("找出游戏的获胜者"),n(t)])]),us,s("details",vs,[hs,n(D,{id:"203",data:[{id:"模拟"},{id:"约瑟夫环"}]},{title0:a(({value:o,isActive:e})=>[l("模拟")]),title1:a(({value:o,isActive:e})=>[l("约瑟夫环")]),tab0:a(({value:o,isActive:e})=>[Es,bs]),tab1:a(({value:o,isActive:e})=>[s("p",null,[l("典型的约瑟夫环问题，令"),gs,l("表示"),As,l("个人每次数第"),Bs,l("个淘汰最终剩下的编号，在编号从 0 开始时，有递推关系"),_s,l("，且"),Fs,l("。"),s("a",fs,[l("【详细解释】"),n(t)])]),ks]),_:1})]),s("h3",xs,[ws,l(),s("a",Ss,[l("盛最多水的容器"),n(t)])]),js,s("h3",Ms,[Ls,l(),s("a",Is,[l("计算右侧小于当前元素的个数"),n(t)])]),zs,s("h3",Ns,[Ts,l(),s("a",Os,[l("翻转对"),n(t)])]),Ps,s("h3",Vs,[Ws,l(),s("a",qs,[l("旋转数组"),n(t)])]),Qs,s("details",Gs,[Hs,n(D,{id:"281",data:[{id:"多重翻转"},{id:"环状替换"}]},{title0:a(({value:o,isActive:e})=>[l("多重翻转")]),title1:a(({value:o,isActive:e})=>[l("环状替换")]),tab0:a(({value:o,isActive:e})=>[Js,Ks]),tab1:a(({value:o,isActive:e})=>[Rs,Us]),_:1})]),d(" ------------------------------------------------------- ")])}const ll=i(m,[["render",Xs],["__file","simulation.html.vue"]]);export{ll as default};
