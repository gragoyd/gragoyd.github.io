import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as y,a as s,b as n,d as p,w as l,f as C,e as D}from"./app-8be229fe.js";const d={},u=s("h2",{id:"二进制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二进制","aria-hidden":"true"},"#"),n(" 二进制")],-1),v={id:"只出现一次的数字-iii",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#只出现一次的数字-iii","aria-hidden":"true"},"#",-1),E={href:"https://leetcode.cn/problems/single-number-iii/",target:"_blank",rel:"noopener noreferrer"},b=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"给定整型数组，其中有两个数只出现一次，其余数都出现两次，找出两个只出现一次的数")],-1),A=s("details",{class:"hint-container details"},[s("summary",null,"详情"),s("p",null,"首先考虑简化版的问题，若只有一个数只出现一次，则只需要对整个数组进行异或操作，所得即为该数，因为其他数都两两异或为 0 了，而任何数与 0 异或都为其本身。"),s("p",null,"所以只需要将原数组分为类似上述简化问题的两组再进行组内异或即可，具体来说分组需要确保两个只出现一次的数分到不同组，且其余数的两次出现都分到同一组。为达此目的，首先对原始数组进行全体异或，结果等同于两个只出现一次的数的异或，则任取一位为 1 的二进制位，表示在该位上两数是不同的，以该位的值来对所有数进行分组，可以确保两数被分到不同组，且其他数的两次出现都分到同一组。"),s("p",null,[n("为方便起见，上述作为分组标准的数取全体异或的结果的最低位的 1。在大多情况下，结合补码知识，取最低有效位的方式为"),s("code",null,"x & -x"),n("，但有一个特殊情况，当"),s("code",null,"x"),n("为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("msup",null,[s("mn",null,"2"),s("mn",null,"3")]),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"-2^31")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])]),s("span",{class:"mord"},"1")])])]),n(" 时，取负操作会导致溢出，考虑到其补码表示为“负零”，故其最低有效为为其本身")]),s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#DCDCAA"}},"singleNumber"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"x"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            x ^= n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (x != "),s("span",{style:{color:"#9CDCFE"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"MIN_VALUE"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            x &= -x;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"["),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},"];")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#C586C0"}},":"),s("span",{style:{color:"#D4D4D4"}}," nums)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ((n & x) == "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                res["),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"] ^= n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"else")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                res["),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] ^= n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])],-1),h=s("h2",{id:"哈希",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#哈希","aria-hidden":"true"},"#"),n(" 哈希")],-1),B={id:"字母异位词分组",tabindex:"-1"},F=s("a",{class:"header-anchor",href:"#字母异位词分组","aria-hidden":"true"},"#",-1),g={href:"https://leetcode-cn.com/problems/group-anagrams/",target:"_blank",rel:"noopener noreferrer"},f=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p><code>字母异位词</code>是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次</p><p>将字符串数组中的<code>字母异位词</code>组合在一起，如：</p><p>input: <code>strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code></p><p>output: <code>[[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</code></p></div><details class="hint-container details"><summary>Solution</summary><p>同种异位词字母排序后一致，可作为键来收集同种异位词</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">groupAnagrams</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">strs</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> strs) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toCharArray</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(s);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">(s);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getOrDefault</span><span style="color:#D4D4D4;">(string, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;());</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(str);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(string, list);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt;(</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">values</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),x={id:"存在重复元素-ii",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#存在重复元素-ii","aria-hidden":"true"},"#",-1),_={href:"https://leetcode-cn.com/problems/contains-duplicate-ii/",target:"_blank",rel:"noopener noreferrer"},w=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("对于整数数组 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mi",null,"u"),s("mi",null,"m"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"nums")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"s")])])]),n(" 和整数 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),n(" ，判断数组中是否存在："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",{mathvariant:"normal"},"≠"),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mtext",null," "),s("mo",null,"&"),s("mtext",null," "),s("mo",{stretchy:"false"},"{"),s("mi",null,"n"),s("mi",null,"u"),s("mi",null,"m"),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",{stretchy:"false"},"]"),s("mo",null,"="),s("mi",null,"n"),s("mi",null,"u"),s("mi",null,"m"),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"j"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"}"),s("mtext",null," "),s("mo",null,"&"),s("mtext",null," "),s("mo",{stretchy:"false"},"["),s("mi",null,"a"),s("mi",null,"b"),s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mi",null,"j"),s("mo",{stretchy:"false"},")"),s("mo",null,"≤"),s("mi",null,"k"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"(i\\neq j)\\ \\And\\ \\{nums[i] = nums[j]\\}\\ \\And\\ [abs(i - j) \\le k]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},[s("span",{class:"mrel"},[s("span",{class:"mord vbox"},[s("span",{class:"thinbox"},[s("span",{class:"rlap"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"inner"},[s("span",{class:"mord"},[s("span",{class:"mrel"},"")])]),s("span",{class:"fix"})])])])]),s("span",{class:"mrel"},"=")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"&"),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},"]}"),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"&"),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"ab"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mclose"},"]")])])])])],-1),z={class:"hint-container details"},q=s("summary",null,"Solution",-1),j=s("p",null,[n("维护大小为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),n(" 的滑动窗口，判断其中是否出现相同值")],-1),S=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"containsNearbyDuplicate"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"Set"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"set"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"HashSet"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (i > k)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"set"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"remove"),s("span",{style:{color:"#D4D4D4"}},"(nums[i - k - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"]);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (!"),s("span",{style:{color:"#9CDCFE"}},"set"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(nums[i]))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=s("p",null,"用哈希表存各值最后出现的角标，下次出现相同值时取出判断",-1),I=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"containsNearbyDuplicate"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"k"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"Map"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"map"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"HashMap"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#9CDCFE"}},"map"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"containsKey"),s("span",{style:{color:"#D4D4D4"}},"(nums[i]) && i - "),s("span",{style:{color:"#9CDCFE"}},"map"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"get"),s("span",{style:{color:"#D4D4D4"}},"(nums[i]) <= k)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"map"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"put"),s("span",{style:{color:"#D4D4D4"}},"(nums[i], i);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),M={id:"寻找重复的子树",tabindex:"-1"},R=s("a",{class:"header-anchor",href:"#寻找重复的子树","aria-hidden":"true"},"#",-1),N={href:"https://leetcode-cn.com/problems/find-duplicate-subtrees/",target:"_blank",rel:"noopener noreferrer"},T=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"找出二叉树中所有重复的子树（同种重复子树找任一棵的根节点即可）")],-1),O={class:"hint-container details"},H=s("summary",null,"Solution1",-1),P=s("p",null,"DFS 时序列化当前树，并用哈希表保存以备后续查重",-1),V=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Map"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"HashMap"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ArrayList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#DCDCAA"}},"findDuplicateSubtrees"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"(root);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (root == "),s("span",{style:{color:"#569CD6"}},"null"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#CE9178"}},'"#"'),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"serial"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"val"),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#CE9178"}},'","'),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"left"),s("span",{style:{color:"#D4D4D4"}},") + "),s("span",{style:{color:"#CE9178"}},'","'),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"right"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"put"),s("span",{style:{color:"#D4D4D4"}},"(serial, "),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"getOrDefault"),s("span",{style:{color:"#D4D4D4"}},"(serial, "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"get"),s("span",{style:{color:"#D4D4D4"}},"(serial) == "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},")		"),s("span",{style:{color:"#6A9955"}},"// only pick one of duplicate")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(root);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," serial;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Q=s("p",null,[n("优化上一方法，用三元组 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"v"),s("mi",null,"a"),s("mi",null,"l"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"u"),s("mi",null,"i"),s("mi",null,"d"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"f"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"u"),s("mi",null,"i"),s("mi",null,"d"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"f"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[val,\\ uid(left),\\ uid(left)]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace"}," "),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")]")])])]),n(" 替代序列化来标识各子树")],-1),J=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"idCnt"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Map"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"trees"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"HashMap"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Map"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"HashMap"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ArrayList"),s("span",{style:{color:"#D4D4D4"}},"<>();")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"List"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#DCDCAA"}},"findDuplicateSubtrees"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"(root);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," res;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"TreeNode"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (root == "),s("span",{style:{color:"#569CD6"}},"null"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"serial"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"val"),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#CE9178"}},'","'),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"left"),s("span",{style:{color:"#D4D4D4"}},") + "),s("span",{style:{color:"#CE9178"}},'","'),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#DCDCAA"}},"dfs"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#9CDCFE"}},"root"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"right"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#6A9955"}},"// same serial get same uid, otherwise get increasing uid")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"uid"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"trees"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"computeIfAbsent"),s("span",{style:{color:"#D4D4D4"}},"(serial, x "),s("span",{style:{color:"#569CD6"}},"->"),s("span",{style:{color:"#D4D4D4"}}," idCnt++);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"put"),s("span",{style:{color:"#D4D4D4"}},"(uid, "),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"getOrDefault"),s("span",{style:{color:"#D4D4D4"}},"(uid, "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},") + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#9CDCFE"}},"count"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"get"),s("span",{style:{color:"#D4D4D4"}},"(uid) == "),s("span",{style:{color:"#B5CEA8"}},"2"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"res"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"add"),s("span",{style:{color:"#D4D4D4"}},"(root);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," uid;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),U={id:"最长连续序列",tabindex:"-1"},X=s("a",{class:"header-anchor",href:"#最长连续序列","aria-hidden":"true"},"#",-1),Y={href:"https://leetcode-cn.com/problems/longest-consecutive-sequence/",target:"_blank",rel:"noopener noreferrer"},K=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"求无序数组中最长数字连续子序列（不要求序列数字在原数组中也连续）的长度"),s("p",null,[n("要求时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])])],-1),W=D(`<details class="hint-container details"><summary>Solution</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">longestConsecutive</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">maxLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashSet</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> nums)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(num);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> set) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(num - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">curLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;"> = num;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(cur + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">						++curLen;</span></span>
<span class="line"><span style="color:#D4D4D4;">						++cur;</span></span>
<span class="line"><span style="color:#D4D4D4;">					}</span></span>
<span class="line"><span style="color:#D4D4D4;">					maxLen = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(maxLen, curLen);</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> maxLen;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,1),G={id:"缺失的第一个正数",tabindex:"-1"},Z=s("a",{class:"header-anchor",href:"#缺失的第一个正数","aria-hidden":"true"},"#",-1),$={href:"https://leetcode-cn/problems/first-missing-positive/",target:"_blank",rel:"noopener noreferrer"},ss=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,[n("找出给定的无序整形数组中缺失的最小正整数，要求时间复杂度为"),s("code",null,"O(n)"),n("且空间复杂度为"),s("code",null,"O(1)")])],-1),ns=s("p",null,[n("设数组长度为"),s("code",null,"N"),n("，若数组恰完整包含"),s("code",null,"1 ~ N"),n("则缺失的最小正整数为"),s("code",null,"N+1"),n("，否则缺失的最小正整数在"),s("code",null,"[1, N]"),n("中，故所求必在"),s("code",null,"[1, N+1]"),n("中，结合数组长度恰为"),s("code",null,"N"),n("，可以将数组复用为哈希表，将数组索引"),s("code",null,"0 ~ N-1"),n("映射为数字"),s("code",null,"1 ~ N"),n("是否在数组中出现，鉴于关注的数字范围已确定，可先将所有不在"),s("code",null,"[1, N]"),n("范围内的数都先置为大于"),s("code",null,"N"),n("的数，则数组元素全为正，可以将某位置的数添加负号来表示其对应的正整数已出现过，故遍历数组时对每个元素取绝对值，若在"),s("code",null,"[1, N]"),n("范围内则检查相应位置的数，若还为正则添加负号，遍历完成后再次遍历，第一个正数出现的位置对应的数即为缺失的正整数，若全为负则缺失的为"),s("code",null,"N+1"),n(" 测试数字 1 我")],-1),ls=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"firstMissingPositive"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (nums[i] < "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}}," || nums[i] > n)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                nums[i] = n + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"t"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"abs"),s("span",{style:{color:"#D4D4D4"}},"(nums[i]);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (t > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && t <= n)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                nums[t - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] = -"),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"abs"),s("span",{style:{color:"#D4D4D4"}},"(nums[t - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"]);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (nums[i] > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," n + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),as=s("p",null,[n("基于数字"),s("code",null,"1 ~ N"),n("对应索引"),s("code",null,"0 ~ N-1"),n("的思想，若将数组中在"),s("code",null,"[1, N]"),n("中的数都置于对应的位置，则首个与数不符的位置所对应的数即为所求。为放置数字而遍历数组"),s("code",null,"nums"),n("，对于位置"),s("code",null,"i"),n("，若"),s("code",null,"nums[i]"),n("在"),s("code",null,"[1, N]"),n("中，则将其与"),s("code",null,"nums[nums[i]-1]"),n("的值交换，使原"),s("code",null,"nums[i]"),n("的值处于正确的"),s("code",null,"i-1"),n("位置，而新的"),s("code",null,"nums[i]"),n("值需要再次放置直到不在"),s("code",null,"[1, N]"),n("中或其与"),s("code",null,"nums[nums[i]-1]"),n("值相同")],-1),os=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Solution"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"firstMissingPositive"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}},"[] "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (nums[i] > "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}}," && nums[i] <= "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," && nums[i] != nums[nums[i] - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"]) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"t"),s("span",{style:{color:"#D4D4D4"}}," = nums[nums[i] - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"];      "),s("span",{style:{color:"#6A9955"}},"// 交换时只能先暂存和改动 nums[nums[i]-1]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                nums[nums[i] - "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},"] = nums[i];    "),s("span",{style:{color:"#6A9955"}},"// 否则它用到的 nums[i] 的值会变动")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                nums[i] = t;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}},"; ++i)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"            "),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (nums[i] != i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"                "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," i + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"nums"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"length"),s("span",{style:{color:"#D4D4D4"}}," + "),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ps=s("h2",{id:"多线程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#多线程","aria-hidden":"true"},"#"),n(" 多线程")],-1),es={id:"交替打印-foobar",tabindex:"-1"},Ds=s("a",{class:"header-anchor",href:"#交替打印-foobar","aria-hidden":"true"},"#",-1),ts={href:"https://leetcode-cn.com/problems/print-foobar-alternately/",target:"_blank",rel:"noopener noreferrer"},cs=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Description"),s("p",null,"确保在多线程调用下，俩函数交替执行打印")],-1),rs={class:"hint-container details"},is=s("summary",null,"Solution",-1),ys=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"BlockingQueue"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"LinkedBlockingDeque"),s("span",{style:{color:"#D4D4D4"}},"<>("),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"BlockingQueue"),s("span",{style:{color:"#D4D4D4"}},"<"),s("span",{style:{color:"#4EC9B0"}},"Integer"),s("span",{style:{color:"#D4D4D4"}},"> "),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"LinkedBlockingDeque"),s("span",{style:{color:"#D4D4D4"}},"<>("),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"put"),s("span",{style:{color:"#D4D4D4"}},"(i);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"put"),s("span",{style:{color:"#D4D4D4"}},"(i);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"take"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"take"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"volatile"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n;) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (foo) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++i; "),s("span",{style:{color:"#6A9955"}},"// 注意变量得在真正 print 之后再增加")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"Thread"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"yield"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n;) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"if"),s("span",{style:{color:"#D4D4D4"}}," (!foo) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				++i;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"else")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"Thread"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"yield"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ds=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ReentrantLock"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"ReentrantLock"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"final"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Condition"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"condition"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"newCondition"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"volatile"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"try"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (!foo)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"condition"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"await"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"condition"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"signal"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"finally"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"unlock"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#C586C0"}},"try"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (foo)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"condition"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"await"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"condition"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"signal"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			} "),s("span",{style:{color:"#C586C0"}},"finally"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"lock"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"unlock"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"volatile"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"boolean"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"final"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Object"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"monitor"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"Object"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; ++i) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#569CD6"}},"synchronized"),s("span",{style:{color:"#D4D4D4"}}," (monitor) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (!foo)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"monitor"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"wait"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"false"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"monitor"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"notify"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#569CD6"}},"synchronized"),s("span",{style:{color:"#D4D4D4"}}," (monitor) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#C586C0"}},"while"),s("span",{style:{color:"#D4D4D4"}}," (foo)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"					"),s("span",{style:{color:"#9CDCFE"}},"monitor"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"wait"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				foo = "),s("span",{style:{color:"#569CD6"}},"true"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"				"),s("span",{style:{color:"#9CDCFE"}},"monitor"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"notify"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vs=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Semaphore"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"Semaphore"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#B5CEA8"}},"1"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Semaphore"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#C586C0"}},"new"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"Semaphore"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"private"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"FooBar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#569CD6"}},"this"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE"}},"n"),s("span",{style:{color:"#D4D4D4"}}," = n;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"acquire"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"printFoo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"release"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	"),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"void"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"Runnable"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},") "),s("span",{style:{color:"#569CD6"}},"throws"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"InterruptedException"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		"),s("span",{style:{color:"#C586C0"}},"for"),s("span",{style:{color:"#D4D4D4"}}," ("),s("span",{style:{color:"#4EC9B0"}},"int"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"i"),s("span",{style:{color:"#D4D4D4"}}," = "),s("span",{style:{color:"#B5CEA8"}},"0"),s("span",{style:{color:"#D4D4D4"}},"; i < n; i++) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"bar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"acquire"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"printBar"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"run"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"			"),s("span",{style:{color:"#9CDCFE"}},"foo"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"release"),s("span",{style:{color:"#D4D4D4"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"		}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"	}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ms={id:"交替打印字符串",tabindex:"-1"},Es=s("a",{class:"header-anchor",href:"#交替打印字符串","aria-hidden":"true"},"#",-1),bs={href:"https://leetcode-cn.com/problems/fizz-buzz-multithreaded/description/",target:"_blank",rel:"noopener noreferrer"},As=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>实现多线程版本从 1 ~ n 输出代表相应数字的字符串的程序，依据以下规则调用相应函数进行输出：</p><ul><li>若可被 3 整除，调用<code>fizz()</code>输出<code>fizz</code></li><li>若可被 5 整除，调用<code>buzz()</code>输出<code>buzz</code></li><li>若可同时被 3 和 5 整除，调用<code>fizzbuzz()</code>输出<code>fizzbuzz</code></li><li>其他情况调用<code>number()</code>输出该数</li></ul><p>比如当<code>n = 15</code>时输出<code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code></p></div><details class="hint-container details"><summary>Solution</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">FizzBuzz</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ReentrantLock</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ReentrantLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Condition</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">newCondition</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">volatile</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cur</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">FizzBuzz</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = n;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// printFizz.run() outputs &quot;fizz&quot;.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fizz</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">printFizz</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (cur &lt;= n) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cur % </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; cur % </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">printFizz</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">					++cur;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">signalAll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">await</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// printBuzz.run() outputs &quot;buzz&quot;.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">buzz</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">printBuzz</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (cur &lt;= n) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cur % </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; cur % </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">printBuzz</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">					++cur;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">signalAll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">await</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fizzbuzz</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">printFizzBuzz</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (cur &lt;= n) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cur % </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; cur % </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">printFizzBuzz</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">					++cur;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">signalAll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">await</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">number</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IntConsumer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">printNumber</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (cur &lt;= n) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cur % </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; cur % </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> != </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">printNumber</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">accept</span><span style="color:#D4D4D4;">(cur);</span></span>
<span class="line"><span style="color:#D4D4D4;">					++cur;</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">signalAll</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">con</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">await</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// for local debug</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">FizzBuzz</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">fb</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">FizzBuzz</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// number</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Thread</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">fb</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">number</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IntConsumer</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">						@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">accept</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(value);</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">Thread</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">currentThread</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">						}</span></span>
<span class="line"><span style="color:#D4D4D4;">					});</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}).</span><span style="color:#DCDCAA;">start</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// fizzbuzz</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Thread</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">fb</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fizzbuzz</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">						@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;fizzbuzz&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">Thread</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">currentThread</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">						}</span></span>
<span class="line"><span style="color:#D4D4D4;">					});</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}).</span><span style="color:#DCDCAA;">start</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// fizz</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Thread</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">fb</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fizz</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">						@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;fizz&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">Thread</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">currentThread</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">						}</span></span>
<span class="line"><span style="color:#D4D4D4;">					});</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}).</span><span style="color:#DCDCAA;">start</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// buzz</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Thread</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">fb</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">buzz</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Runnable</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">						@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;buzz&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">							</span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">Thread</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">currentThread</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">						}</span></span>
<span class="line"><span style="color:#D4D4D4;">					});</span></span>
<span class="line"><span style="color:#D4D4D4;">				} </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}).</span><span style="color:#DCDCAA;">start</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),hs={id:"哲学家进餐",tabindex:"-1"},Bs=s("a",{class:"header-anchor",href:"#哲学家进餐","aria-hidden":"true"},"#",-1),Fs={href:"https://leetcode-cn.com/problems/the-dining-philosophers/description/",target:"_blank",rel:"noopener noreferrer"},gs=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>5 个哲学家围坐在圆桌前，每人面前一盘意面，两哲学家之间都有一把叉子，哲学家只会在思考和进餐两种行为间交替</p><p>哲学家只有同时拿到左边和右边的叉子才能吃面，而同一根叉子在同一时间只能被一个哲学家使用，哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子</p><p>利用多线程实现进餐规则，使得每个哲学家都能在不知道别人什么时候想吃东西或思考的情况下，在吃饭和思考之间一直交替下去</p><p>哲学家从 0 ~ 4 编号，请实现函数<code>void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)</code>，其中：</p><ul><li><code>philosopher</code> 哲学家的编号</li><li><code>pickLeftFork</code> 和 <code>pickRightFork</code> 表示拿起左边或右边的叉子</li><li><code>eat</code> 表示吃面</li><li><code>putLeftFork</code> 和 <code>putRightFork</code> 表示放下左边或右边的叉子</li><li>由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调</li></ul><p>给 5 个线程代表 5 个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数</p></div><details class="hint-container details"><summary>Solution</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DiningPhilosophers</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// 每个叉子相当于锁</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ReentrantLock</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">fork</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ReentrantLock</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// 同时进餐人数上限【五人同时拿叉子会死锁】</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Semaphore</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">eatLimit</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Semaphore</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DiningPhilosophers</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			fork[i] = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ReentrantLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// call the run() method of any runnable to execute its code</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">wantsToEat</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">philosopher</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">pickLeftFork</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">pickRightFork</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">eat</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">putLeftFork</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">putRightFork</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InterruptedException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">eatLimit</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">acquire</span><span style="color:#D4D4D4;">();</span><span style="color:#6A9955;">// 申请就餐名额</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">leftFork</span><span style="color:#D4D4D4;"> = philosopher;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rightFork</span><span style="color:#D4D4D4;"> = (philosopher + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) % </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		fork[leftFork].</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span><span style="color:#6A9955;">// 占据叉子</span></span>
<span class="line"><span style="color:#D4D4D4;">		fork[rightFork].</span><span style="color:#DCDCAA;">lock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">pickLeftFork</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span><span style="color:#6A9955;">// 拿起叉子</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">pickRightFork</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">eat</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">putLeftFork</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span><span style="color:#6A9955;">// 放下叉子</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">putRightFork</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		fork[leftFork].</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span><span style="color:#6A9955;">// 释放叉子</span></span>
<span class="line"><span style="color:#D4D4D4;">		fork[rightFork].</span><span style="color:#DCDCAA;">unlock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">eatLimit</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">release</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h2>`,3),fs={id:"冗余连接",tabindex:"-1"},xs=s("a",{class:"header-anchor",href:"#冗余连接","aria-hidden":"true"},"#",-1),ks={href:"https://leetcode-cn.com/problems/redundant-connection/",target:"_blank",rel:"noopener noreferrer"},_s=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定无环连通无向图的所有边和一条冗余的边，找出那条冗余边</p><p>设所有节点为<code>1 ~ n</code>，边的信息由长度为<code>n</code>的二维数组<code>edges</code>给出：<code>edges[i] = [ai, bi]</code>表示节点<code>ai</code>和<code>bi</code>之间存在一条边</p></div><details class="hint-container details"><summary>Solution</summary><p>无环连通无向图若有<code>n</code>个节点，则必有且仅有<code>n-1</code>条边，故有且仅有唯一一条冗余边，该边令图出现了环</p><p>使用并查集随着遍历边的信息逐渐联合各节点，当某条边的两节点都已经在联合集中则说明该边冗余</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">findRedundantConnection</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">edges</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">edges</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[n + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= n; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">edge</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> edges) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(parent, edge[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(parent, edge[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (rx == ry)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> edge;</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[rx] = ry;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != x)</span></span>
<span class="line"><span style="color:#D4D4D4;">			x = parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> x;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),ws={id:"除法求值",tabindex:"-1"},zs=s("a",{class:"header-anchor",href:"#除法求值","aria-hidden":"true"},"#",-1),qs={href:"https://leetcode-cn.com/problems/evaluate-division/",target:"_blank",rel:"noopener noreferrer"},js=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>&#39;[[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]&#39; 给定字符串变量对数组<code>equations</code>和一个实数值数组<code>values</code>作为已知条件，即<code>equations[i] = [Ai, Bi]</code>和<code>values[i]</code>共同表示条件<code>Ai / Bi = values[i]</code></p><p>另有一些以数组<code>queries</code>表示的问题，其中第<code>j</code>个问题<code>queries[j] = [Cj, Dj]</code>表示问题<code>Cj / Dj = ?</code>，根据已知条件推出结果</p><p>若存在无法推出的答案则用<code>-1.0</code>表示，保证输入有效（不存在除 0）且不存在矛盾</p></div><details class="hint-container details"><summary>Solution</summary><p>此类存在许多传递关系并需要记录的需求适合用并查集，<code>A / B = x</code>可看作<code>A -&gt; B</code>的传递关系，其倍数关系用额外的权重数组记录，存在传递关系的若干变量视作在同一集合中，通过并查集的链式传递效果可以消去若干已知中间变量而求出问题的答案，在不断联合新变量的过程中就同时进行类似重量并查集的路径压缩，迭代压缩时累乘更新起始节点到各中间父节点的权重值，表示消去链式条件的中间变量，如此构建的并查集的所有节点都直接连接于根节点，其权重都更新到除以根节点变量的结果，即把问题中对零散变量相除求值转化为除相同额外变量，确保后续查询的效率</p><p>具体实现时，先给字符串变量编号以便并查集处理，在并查集中用<code>parent[A]=B</code>表示<code>A/B</code>的链式关系，其结果（传递关系权重）用<code>weight[A]</code>表示。合并节点时的权重更新参考平行四边形四条边的关系，如把<code>X</code>所在集合向<code>Y</code>所在集合联合，设<code>X/Y=v</code>，<code>X</code>根节点为<code>rx</code>，<code>Y</code>根节点为<code>ry</code>，则显然有<code>weight[rx] = v * weight[Y] / weight[X]</code>。查询时可以仅考虑所有节点直接相连于同一根节点，因为即使最后一次联合之后可能有节点不直接与根节点相连，但实际查询时会先进行带路径压缩操作的搜索，故查得结果时必所有节点都已直接相连与根节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 用于给各变量编号，语法要求不能为局部变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">calcEquation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">values</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">queries</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">UnionFind</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">uf</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">UnionFind</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * </span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * </span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">computeIfAbsent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), x </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> id++);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">computeIfAbsent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">equations</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">), x </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> id++);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">uf</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(i1, i2, values[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">queries</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">queries</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">queries</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">queries</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (i1 == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> || i2 == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				res[i] = -</span><span style="color:#B5CEA8;">1.0d</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">				res[i] = </span><span style="color:#9CDCFE;">uf</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">query</span><span style="color:#D4D4D4;">(i1, i2);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UnionFind</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">weight</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">UnionFind</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[size];</span></span>
<span class="line"><span style="color:#D4D4D4;">			weight = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;">[size];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; size; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">				weight[i] = </span><span style="color:#B5CEA8;">1.0d</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">query</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x) == </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y))</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> weight[x] / weight[y];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1.0d</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (rx != ry) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				parent[rx] = ry;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#6A9955;">// 仅需考虑节点高不大于 2 的情况，因为 find() 时已压缩</span></span>
<span class="line"><span style="color:#D4D4D4;">				weight[rx] = value * weight[y] / weight[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				weight[x] *= weight[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">				parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Ss={id:"最小体力消耗路径",tabindex:"-1"},Ls=s("a",{class:"header-anchor",href:"#最小体力消耗路径","aria-hidden":"true"},"#",-1),Is={href:"https://leetcode-cn.com/problems/path-with-minimum-effort/",target:"_blank",rel:"noopener noreferrer"},Ms=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>求从给定矩阵的左上角到右下角的所有连通路径中路径差值的最小值</p><p>路径差值：路径可上下左右四方向连通，某一路径上所有两两相邻元素差值（绝对值）的最大值为该路径的差值</p></div><details class="hint-container details"><summary>Solution</summary><p>将所有相邻元素差值当作节点的边长进行排序，按从小到大拿边连接节点，当某条边连接后左上角和右下角变为连通，则该边即为所求，因为边是从小到大启用的，所以该边是当前连通路径的最大边，且对于全局来说最先连通的路径一定是差值最小的</p><p>因为要反复判断某两点是否连通，故采用并查集实现，矩阵格子编号采用顺序计数方式，边的记录形式需同时包含两节点的编号和边长（差值）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">minimumEffortPath</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">heights</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, n = heights[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[m * n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; m * n; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt; </span><span style="color:#9CDCFE;">edges</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> * m * n - m - n);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; m; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = i * n + j;</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (i &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">edges</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { id - n, id, </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">abs</span><span style="color:#D4D4D4;">(heights[i][j] - heights[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j]) });</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (j &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">edges</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] { id - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, id, </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">abs</span><span style="color:#D4D4D4;">(heights[i][j] - heights[i][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) });</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(edges, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Comparator</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[]&gt;() {</span></span>
<span class="line"><span style="color:#D4D4D4;">			@</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">compare</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">o1</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">o2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> o1[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] - o2[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		});</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">edge</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> edges) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(edge[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], edge[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], edge[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) == </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(m * n - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				res = edge[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">delta</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (rx != ry)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[rx] = ry;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]])</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Rs={id:"水位上升的泳池中游泳",tabindex:"-1"},Ns=s("a",{class:"header-anchor",href:"#水位上升的泳池中游泳","aria-hidden":"true"},"#",-1),Ts={href:"https://leetcode.cn/problems/swim-in-rising-water/",target:"_blank",rel:"noopener noreferrer"},Os=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定方形矩阵<code>grid</code>表示泳池，其中<code>grid[i][j]</code>表示位置<code>(i, j)</code>的池底高度。由于注水，在时间为<code>t</code>时，水池中的水位为<code>t</code>。当某块池底不高于泳池水位时认为其可达，可从周围可达的上下左右连通块游向该块。求何时泳池左上角到右下角才是连通的</p><p>注意：此题数据集各池底高度各不相同，且在<code>[0, n*n)</code>中</p></div><details class="hint-container details"><summary>Solution</summary><p>这题与 [最小体力消耗路径](#最小体力消耗路径 09) 十分相似，都是按照一定条件将网格内的格子逐渐分别连通，同时每次检查给定端点是否变为连通</p><p>考虑到数据集的特殊性，可以首先将索引与高度关系反转存储以备查询，随后每次时间增长时，都聚焦于高度数值等同于时刻的块，根据实际语义可以将其与四周不高于它的块连通，直到某时刻的操作令两角变得连通即为所求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">swimInWater</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = n * n;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dirs</span><span style="color:#D4D4D4;"> = { { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> } };</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[size];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; size; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[size];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; n; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">				index[grid[i][j]] = i * n + j;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; size; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">row</span><span style="color:#D4D4D4;"> = index[i] / n;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">col</span><span style="color:#D4D4D4;"> = index[i] % n;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dirs) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = row + d[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = col + d[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; r &lt; n &amp;&amp; c &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; c &lt; n &amp;&amp; grid[r][c] &lt;= grid[row][col])</span></span>
<span class="line"><span style="color:#D4D4D4;">					parent[</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(r * n + c)] = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(index[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) == </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(size - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]])</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Hs={id:"交换字符串中的元素",tabindex:"-1"},Ps=s("a",{class:"header-anchor",href:"#交换字符串中的元素","aria-hidden":"true"},"#",-1),Vs={href:"https://leetcode-cn.com/problems/smallest-string-with-swaps/",target:"_blank",rel:"noopener noreferrer"},Qs=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定字符串和其中若干索引对的数组<code>pairs</code>，其中<code>pairs[i] = [a, b]</code>表示字符串中的两个索引，可以任意多次交换索引对中任意一对索引处的字符，求在经过若干次交换后字符串能达到的按字典序最小的字符串</p></div><details class="hint-container details"><summary>Solution</summary><p>索引对实质上是连通两索引，所有索引对即表示某些索引连通成若干集合，不在索引对中的位置表示不可调换。所以先由并查集将所有索引对的信息翻译成字符串中的若干连通位置的集合，同一集合内的字符可以任意调换（直接按字典序排列），考虑到字符的可重复性，显然可以用字符对象的优先队列直接一步到位，各集合间用根节点位置来区分，所以用哈希表存各优先队列。最后拼成结果字符串时，各个位置都从其连通集合（即根节点对应的优先队列）中按已排好的顺序取出拼接即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">smallestStringWithSwaps</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">pairs</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">pair</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> pairs)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">pair</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">pair</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Character</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">sets</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// 此处必须用 find(i)，因为还有一节点未直接与根节点相连</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">sets</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">computeIfAbsent</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(i), x </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PriorityQueue</span><span style="color:#D4D4D4;">&lt;&gt;()).</span><span style="color:#DCDCAA;">offer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i));</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">char</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			res[i] = </span><span style="color:#9CDCFE;">sets</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(parent[i]).</span><span style="color:#DCDCAA;">poll</span><span style="color:#D4D4D4;">();	</span><span style="color:#6A9955;">// 此处可直接用 parent 索引</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;">(res);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]])</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (rx != ry)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[rx] = ry;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Js={id:"合并账户",tabindex:"-1"},Us=s("a",{class:"header-anchor",href:"#合并账户","aria-hidden":"true"},"#",-1),Xs={href:"https://leetcode-cn.com/problems/accounts-merge/",target:"_blank",rel:"noopener noreferrer"},Ys=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定一个列表<code>accounts</code>，其中的<code>accounts[i]</code>是字符串列表，其中第一个元素<code>accounts[i][0]</code>为人名（账户），后续元素为账户下的若干邮箱。</p><p>一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。现在按实际的人来合并这些账户：若两个账户含相同邮箱地址，则认为两账户属于同一个人。但是即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。</p><p>合并账户后的返回格式：不同账户间顺序随意，每个账户内的第一个元素是名称，其余元素是按字典序排列的邮箱地址</p><p>input:<code>accounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]</code> output:<code>[[&quot;John&quot;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]</code></p></div><details class="hint-container details"><summary>Solution</summary><p>针对不同账户（列表）间的合并，可以将<code>accounts[i]</code>视为独立区域，针对所有索引建立并查集，在遍历过程中若发现某邮箱已经遍历过，则将此时正遍历的账户与已存在邮箱所对应的账户进行合并，由此可见遍历时需要存储各邮箱对应的账户，又考虑到账户可能同名，故采用索引来避免直接使用人名，即遍历时用哈希表存<code>邮箱 - 索引</code>对，遍历完之后实际上完成了邮箱的去重和合并主体标记。</p><p>接下来就是实际上的合并，此时暂且还是用索引当作合并标识，遍历上一步构建的哈希表，将所有邮箱按合并标识进行合并。考虑到邮箱第一次出现的账户索引可能不是合并的主体标识，所以得到邮箱对应的索引后还需要经过并查集找到可以作为合并标识的根。由于题目要求账户内邮箱需要排序，容器使用<code>TreeSet</code>。完成之后只需要将答案整理成要求的返回格式即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">accountsMerge</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">()];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// all mails -&gt; index, and union accounts[i]</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">accs</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(i);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt; </span><span style="color:#9CDCFE;">accs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">(); ++j) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">containsKey</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">accs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(j)))</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(i, </span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">accs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(j)));</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">accs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(j), i);</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// merge accounts to index(person) with sort</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">TreeSet</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">idxMail</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">mail</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keySet</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">idx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mailToIdx</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(mail));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">idxMail</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">computeIfAbsent</span><span style="color:#D4D4D4;">(idx, k </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TreeSet</span><span style="color:#D4D4D4;">&lt;&gt;()).</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(mail);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// just convert result</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Entry</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">TreeSet</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">entry</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">idxMail</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">entrySet</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">accounts</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">entry</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getKey</span><span style="color:#D4D4D4;">()).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addAll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">entry</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getValue</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(person);</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]])</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent[</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x)] = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y);</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2),Ks={id:"打砖块",tabindex:"-1"},Ws=s("a",{class:"header-anchor",href:"#打砖块","aria-hidden":"true"},"#",-1),Gs={href:"https://leetcode-cn.com/problems/bricks-falling-when-hit/",target:"_blank",rel:"noopener noreferrer"},Zs=D(`<div class="hint-container info"><p class="hint-container-title">Description</p><p>给定二维网格，其值为<code>1</code>表示砖块，<code>0</code>表示空白，某砖块稳定（不会掉落）是指其直接或间接（上下左右）与网格顶部相连，再给定若干表示依次消除的位置，若消除的位置本就无砖块则无事发生，否则指定位置砖块消失，从而导致相邻位置的砖块可能不再与网格顶部直接或间接相连而不稳定（掉落），砖块掉落就立即从网格内消失而不会落到其他砖块上。求因每次的消除而掉落的砖块数量</p></div><details class="hint-container details"><summary>Solution</summary><p>这实际上是一个求不断断开某些节点后连通量的问题，需要逆向思维，每次因消除而减少的连通数量，等效于逆序填补时增加的连通数量，由此利用并查集实现</p><p>具体实现时，并查集位置使用<code>i*m+j</code>规则编号，再额外多一个<code>m*n</code>编号表示顶部。由于需要时刻查询连通集合内节点数量，故需要维护各根节点的节点数量。开始时需将网格数据复制一份，保留原有数据，留备每次填充时先查询，若原本该位置就无砖块则填充后连通数量也必无变化。首先将所有消除一并执行，再将剩余的砖块连通成若干集合（分为与顶部相连的稳定集合与其他集合）。连通时由于是从左上往右下进行遍历，故每次只需考虑向左上的连通。完成之后就开始按消除顺序的逆序进行填充，每次填充前先记录稳定集合的砖块数量，再进行填充后的四周连通，此时需注意考虑填充位置与顶部的特殊连通，完成后再次获取此时稳定集合的砖块数量，则变化量减一（剪掉消除/填充的那块）即为正向消除的本次掉落数量，又因为变化量有减一的操作，考虑变化量为零的情况，需要进行保护性修正。最后别忘了在网格中实际地将其标为砖块</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Solution</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">weight</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">hitBricks</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">hits</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dirs</span><span style="color:#D4D4D4;"> = { { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> }, { </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> }, { -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> } };</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, n = grid[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = m * n;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// init union find set, with [size] as ceiling</span></span>
<span class="line"><span style="color:#D4D4D4;">		parent = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[size + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		weight = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[size + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt;= size; ++i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[i] = i;</span></span>
<span class="line"><span style="color:#D4D4D4;">			weight[i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// copy grid, because grid is useful later</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">copy</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[m][n];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; m; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">				copy[i][j] = grid[i][j];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// hit all</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">hit</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> hits)</span></span>
<span class="line"><span style="color:#D4D4D4;">			copy[hit[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]][hit[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]] = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// union ceiling</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (copy[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][j] == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(j, size);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// union other sets, from left-up to right-down</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; m; ++i)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; n; ++j)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (copy[i][j] == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (copy[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][j] == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(i * n + j, (i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) * n + j);</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (j &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; copy[i][j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">						</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(i * n + j, i * n + j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">				}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// fill with reverse order</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">hits</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">hits</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; --i) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> = hits[i][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], y = hits[i][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (grid[x][y] == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// no meaning</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">continue</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// connect count to ceiling before filling</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">origin</span><span style="color:#D4D4D4;"> = weight[</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(size)];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// union the hit position to ceiling if its row == 0</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (x == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(y, size);</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// fill and union it arround</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> dirs) {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = x + d[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], c = y + d[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (r &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; r &lt; m &amp;&amp; c &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; c &lt; n &amp;&amp; copy[r][c] == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">					</span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(x * n + y, r * n + c);</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// connect count to ceiling after filling</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">filled</span><span style="color:#D4D4D4;"> = weight[</span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(size)];</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// delta count minus one is answer, but consider delta == 0</span></span>
<span class="line"><span style="color:#D4D4D4;">			res[i] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, filled - origin - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">			copy[x][y] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (parent[x] != parent[parent[x]])</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[x] = parent[parent[x]];</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> parent[x];</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">union</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">rx</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(x);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">find</span><span style="color:#D4D4D4;">(y);</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (rx != ry) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			parent[rx] = ry;</span></span>
<span class="line"><span style="color:#D4D4D4;">			weight[ry] += weight[rx];</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,2);function $s(sn,nn){const e=c("ExternalLinkIcon"),t=c("Tabs");return i(),y("div",null,[u,s("h3",v,[m,n(),s("a",E,[n("只出现一次的数字 III"),p(e)])]),b,A,h,s("h3",B,[F,n(),s("a",g,[n("字母异位词分组"),p(e)])]),f,s("h3",x,[k,n(),s("a",_,[n("存在重复元素 II"),p(e)])]),w,s("details",z,[q,p(t,{id:"58",data:[{id:"滑动窗口"},{id:"哈希表"}]},{title0:l(({value:a,isActive:o})=>[n("滑动窗口")]),title1:l(({value:a,isActive:o})=>[n("哈希表")]),tab0:l(({value:a,isActive:o})=>[j,S]),tab1:l(({value:a,isActive:o})=>[L,I]),_:1})]),s("h3",M,[R,n(),s("a",N,[n("寻找重复的子树"),p(e)])]),T,s("details",O,[H,p(t,{id:"82",data:[{id:"DFS + 序列化"},{id:"优化"}],active:1},{title0:l(({value:a,isActive:o})=>[n("DFS + 序列化")]),title1:l(({value:a,isActive:o})=>[n("优化")]),tab0:l(({value:a,isActive:o})=>[P,V]),tab1:l(({value:a,isActive:o})=>[Q,J]),_:1})]),s("h3",U,[X,n(),s("a",Y,[n("最长连续序列"),p(e)])]),K,W,s("h3",G,[Z,n(),s("a",$,[n("缺失的第一个正数"),p(e)])]),ss,p(t,{id:"119",data:[{id:"哈希表"},{id:"置换"}]},{title0:l(({value:a,isActive:o})=>[n("哈希表")]),title1:l(({value:a,isActive:o})=>[n("置换")]),tab0:l(({value:a,isActive:o})=>[ns,ls]),tab1:l(({value:a,isActive:o})=>[as,os]),_:1}),ps,s("h3",es,[Ds,n(),s("a",ts,[n("交替打印 FooBar"),p(e)])]),cs,s("details",rs,[is,p(t,{id:"145",data:[{id:"BlockingQueue"},{id:"yield"},{id:"ReentrantLock"},{id:"synchronized"},{id:"Semaphore"}]},{title0:l(({value:a,isActive:o})=>[n("BlockingQueue")]),title1:l(({value:a,isActive:o})=>[n("yield")]),title2:l(({value:a,isActive:o})=>[n("ReentrantLock")]),title3:l(({value:a,isActive:o})=>[n("synchronized")]),title4:l(({value:a,isActive:o})=>[n("Semaphore")]),tab0:l(({value:a,isActive:o})=>[ys]),tab1:l(({value:a,isActive:o})=>[Cs]),tab2:l(({value:a,isActive:o})=>[ds]),tab3:l(({value:a,isActive:o})=>[us]),tab4:l(({value:a,isActive:o})=>[vs]),_:1})]),s("h3",ms,[Es,n(),s("a",bs,[n("交替打印字符串"),p(e)])]),As,s("h3",hs,[Bs,n(),s("a",Fs,[n("哲学家进餐"),p(e)])]),gs,s("h3",fs,[xs,n(),s("a",ks,[n("冗余连接"),p(e)])]),_s,s("h3",ws,[zs,n(),s("a",qs,[n("除法求值"),p(e)])]),js,s("h3",Ss,[Ls,n(),s("a",Is,[n("最小体力消耗路径"),p(e)])]),Ms,s("h3",Rs,[Ns,n(),s("a",Ts,[n("水位上升的泳池中游泳"),p(e)])]),Os,s("h3",Hs,[Ps,n(),s("a",Vs,[n("交换字符串中的元素"),p(e)])]),Qs,s("h3",Js,[Us,n(),s("a",Xs,[n("合并账户"),p(e)])]),Ys,s("h3",Ks,[Ws,n(),s("a",Gs,[n("打砖块"),p(e)])]),Zs,C(" ------------------------------------------------------- ")])}const on=r(d,[["render",$s],["__file","multi.html.vue"]]);export{on as default};
