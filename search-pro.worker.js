const it="ENTRIES",R="KEYS",q="VALUES",_="";class S{constructor(t,s){const n=t._tree,i=Array.from(n.keys());this.set=t,this._type=s,this._path=i.length>0?[{node:n,keys:i}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=x(this._path);if(x(s)===_)return{done:!1,value:this.result()};const n=t.get(x(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=x(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>x(t)).filter(t=>t!==_).join("")}value(){return x(this._path).node.get(_)}result(){switch(this._type){case q:return this.value();case R:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const x=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const i=t.length+1,u=i+s,o=new Uint8Array(u*i).fill(s+1);for(let r=0;r<i;++r)o[r]=r;for(let r=1;r<u;++r)o[r*i]=r;return P(e,t,s,n,o,1,i,""),n},P=(e,t,s,n,i,u,o,r)=>{const a=u*o;t:for(const c of e.keys())if(c===_){const d=i[a-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const m=c[l],F=o*d,f=F-o;let h=i[F];const g=Math.max(0,d-s-1),A=Math.min(o-1,d+s);for(let C=g;C<A;++C){const B=m!==t[C],b=i[f+C]+ +B,z=i[f+C+1]+1,D=i[F+C]+1,W=i[F+C+1]=Math.min(b,z,D);W<h&&(h=W)}if(h>s)continue t}P(e.get(c),t,s,n,i,d,o,r+c)}};let N=class v{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[i,u]=V(n);for(const o of i.keys())if(o!==_&&o.startsWith(u)){const r=new Map;return r.set(o.slice(u.length),i.get(o)),new v(r,t)}}return new v(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,it)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=j(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=j(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new S(this,R)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,L(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=L(this._tree,t);let i=n.get(_);return i===void 0&&n.set(_,i=s()),i}values(){return new S(this,q)}[Symbol.iterator](){return this.entries()}static from(t){const s=new v;for(const[n,i]of t)s.set(n,i);return s}static fromObject(t){return v.from(Object.entries(t))}};const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},j=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return j(e.get(s),t.slice(s.length))},L=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const o=Math.min(s-n,u.length);let r=1;for(;r<o&&t[n+r]===u[r];)++r;const a=e.get(u);if(r===u.length)e=a;else{const c=new Map;c.set(u.slice(r),a),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const i=new Map;return e.set(t.slice(n),i),i}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)G(n);else if(s.size===1){const[i,u]=s.entries().next().value;J(n,i,u)}}},G=e=>{if(e.length===0)return;const[t,s]=V(e);if(t.delete(s),t.size===0)G(e.slice(0,-1));else if(t.size===1){const[n,i]=t.entries().next().value;n!==_&&J(e.slice(0,-1),n,i)}},J=(e,t,s)=>{if(e.length===0)return;const[n,i]=V(e);n.set(i+t,s),n.delete(i)},V=e=>e[e.length-1],rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,T="or",U="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},H=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},ht=({score:e},{score:t})=>t-e,dt=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},K=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,at={[T]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:i,terms:u,match:o}=t.get(s);n.score=n.score+i,n.match=Object.assign(n.match,o),H(n.terms,u)}}return e},[U]:(e,t)=>{const s=new Map;for(const n of t.keys()){const i=e.get(n);if(i==null)continue;const{score:u,terms:o,match:r}=t.get(n);H(i.terms,o),s.set(n,{score:i.score+u,terms:i.terms,match:Object.assign(i.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},ft=(e,t,s,n,i,u)=>{const{k:o,b:r,d:a}=u;return Math.log(1+(s-t+.5)/(t+.5))*(a+e*(o+1)/(e+o*(1-r+r*n/i)))},Ft=e=>(t,s,n)=>{const i=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:i,prefix:u}},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},X={combineWith:T,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:U,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y};class At{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...X,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new N,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const i={};for(const[u,o]of n)i[u]=Object.fromEntries(o);t.push([s,i])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const Q=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},Z=(e,t,s,n)=>{for(const i of Object.keys(e._fieldIds))if(e._fieldIds[i]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${i}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},Ct=(e,t,s,n)=>{if(!e._index.has(n)){Z(e,s,t,n);return}const i=e._index.fetch(n,dt),u=i.get(t);u==null||u.get(s)==null?Z(e,s,t,n):u.get(s)<=1?u.size<=1?i.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},tt=(e,t=T)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(at[s])||new Map},$=(e,t,s,n,i,u,o,r,a=new Map)=>{if(i==null)return a;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],m=i.get(l);if(m==null)continue;let F=m.size;const f=e._avgFieldLength[l];for(const h of m.keys()){if(!e._documentIds.has(h)){Ct(e,l,h,s),F-=1;continue}const g=o?o(e._documentIds.get(h),s,e._storedFields.get(h)):1;if(!g)continue;const A=m.get(h),C=e._fieldLength.get(h)[l],B=ft(A,F,e._documentCount,C,f,r),b=n*d*g*B,z=a.get(h);if(z){z.score+=b,lt(z.terms,t);const D=K(z.match,s);D?D.push(c):z.match[s]=[c]}else a.set(h,{score:b,terms:[t],match:{[s]:[c]}})}}return a},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},i=(n.fields||e._options.fields).reduce((h,g)=>({...h,[g]:K(n.boost,g)||1}),{}),{boostDocument:u,weights:o,maxFuzzy:r,bm25:a}=n,{fuzzy:c,prefix:d}={...X.weights,...o},l=e._index.get(t.term),m=$(e,t.term,t.term,1,l,i,u,a);let F,f;if(t.prefix&&(F=e._index.atPrefix(t.term)),t.fuzzy){const h=t.fuzzy===!0?.2:t.fuzzy,g=h<1?Math.min(r,Math.round(t.term.length*h)):h;g&&(f=e._index.fuzzyGet(t.term,g))}if(F)for(const[h,g]of F){const A=h.length-t.term.length;if(!A)continue;f==null||f.delete(h);const C=d*h.length/(h.length+.3*A);$(e,t.term,h,C,g,i,u,a,m)}if(f)for(const h of f.keys()){const[g,A]=f.get(h);if(!A)continue;const C=c*h.length/(h.length+A);$(e,t.term,h,C,g,i,u,a,m)}return m},et=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(m=>et(e,m,d));return tt(l,d.combineWith)}const{tokenize:n,processTerm:i,searchOptions:u}=e._options,o={tokenize:n,processTerm:i,...u,...s},{tokenize:r,processTerm:a}=o,c=r(t).flatMap(d=>a(d)).filter(d=>!!d).map(Ft(o)).map(d=>zt(e,d,o));return tt(c,o.combineWith)},xt=(e,t,s={})=>{const n=et(e,t,s),i=[];for(const[u,{score:o,terms:r,match:a}]of n){const c=r.length,d={id:e._documentIds.get(u),score:o*c,terms:Object.keys(a),match:a};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&i.push(d)}return i.sort(ht),i},Et=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:i,fieldLength:u,averageFieldLength:o,storedFields:r,dirtCount:a,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new At(d);l._documentCount=t,l._nextId=s,l._documentIds=O(n),l._idToShortId=new Map,l._fieldIds=i,l._fieldLength=O(u),l._avgFieldLength=o,l._storedFields=O(r),l._dirtCount=a||0,l._index=new N;for(const[m,F]of l._documentIds)l._idToShortId.set(F,m);for(const[m,F]of e){const f=new Map;for(const h of Object.keys(F)){let g=F[h];c===1&&(g=g.ds),f.set(parseInt(h,10),O(g))}l._index.set(m,f)}return l},st=Object.entries,wt=Object.fromEntries,E=100,w=20,M=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),i=[];let u=0,o=0;const r=(c,d=!1)=>{let l="";o===0?l=c.length>w?`… ${c.slice(-w)}`:c:d?l=c.length+o>E?`${c.slice(0,E-o)}… `:c:l=c.length>w?`${c.slice(0,w)} … ${c.slice(-w)}`:c,l&&i.push(l),o+=l.length,d||(i.push(["mark",t]),o+=t.length,o>=E&&i.push(" …"))};let a=s.indexOf(n,u);if(a===-1)return null;for(;a>=0;){const c=a+n.length;if(r(e.slice(u,a)),u=c,o>E)break;a=s.indexOf(n,u)}return o<E&&r(e.slice(u),!0),i};var p=(e=>(e.heading="h",e.anchor="a",e.text="t",e.customFields="c",e))(p||{}),k=(e=>(e.title="t",e.heading="h",e.text="p",e.custom="c",e))(k||{}),y=(e=>(e.type="t",e.key="k",e.anchor="a",e.header="h",e.index="i",e.display="d",e))(y||{});const nt=/[\u4e00-\u9fa5]/g,kt=(e,t,s={})=>{const n={};return xt(t,e,{fuzzy:.2,prefix:!0,boost:{[p.heading]:2,[p.text]:1,[p.customFields]:4},processTerm:i=>{const u=i.match(nt)||[],o=i.replace(nt,"").toLowerCase();return o?[o,...u]:[...u]},...s}).forEach(i=>{const{id:u,terms:o,score:r}=i,a=u.includes("/"),c=!a&&u.includes("#"),d=u.includes("@"),[l,m]=u.split(/[#@]/),{contents:F}=n[l]??={title:"",contents:[]};if(c)F.push([{[y.type]:k.heading,[y.key]:l,[y.anchor]:i[p.anchor],[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r]);else if(a){const[f]=m.split("/"),{[p.heading]:h="",[p.anchor]:g=""}=Q(t,`${l}#${f}`)||{};F.push([{[y.type]:k.text,[y.key]:l,[y.header]:h,[y.anchor]:g,[y.display]:o.map(A=>M(i[p.text],A)).filter(A=>A!==null)},r])}else d?F.push([{[y.type]:k.custom,[y.key]:l,[y.index]:m,[y.display]:o.map(f=>i[p.customFields].map(h=>M(h,f))).flat().filter(f=>f!==null)},r]):F.push([{[y.type]:k.title,[y.key]:l,[y.display]:o.map(f=>M(i[p.heading],f)).filter(f=>f!==null)},r])}),st(n).sort(([,i],[,u])=>u.contents.reduce((o,[,r])=>o+r,0)-i.contents.reduce((o,[,r])=>o+r,0)).map(([i,{title:u,contents:o}])=>{if(!u){const r=Q(t,i);r&&(u=r[p.heading])}return{title:u,contents:o.map(([r])=>r)}})},vt=wt(st(JSON.parse("{\"/\":{\"documentCount\":1105,\"nextId\":1105,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#0/0\",\"2\":\"v-8daa1a0e#0/1\",\"3\":\"v-8daa1a0e#0/2\",\"4\":\"v-8daa1a0e#0/3\",\"5\":\"v-8daa1a0e#1\",\"6\":\"v-8daa1a0e#1/0\",\"7\":\"v-8daa1a0e#1/1\",\"8\":\"v-8daa1a0e#1/2\",\"9\":\"v-8daa1a0e#1/3\",\"10\":\"v-8daa1a0e#1/4\",\"11\":\"v-8daa1a0e#1/5\",\"12\":\"v-8daa1a0e#1/6\",\"13\":\"v-4a2605fe\",\"14\":\"v-4a2605fe#1\",\"15\":\"v-4a2605fe#1/0\",\"16\":\"v-4a2605fe#2\",\"17\":\"v-4a2605fe#3\",\"18\":\"v-4a2605fe#4\",\"19\":\"v-4a2605fe#4/0\",\"20\":\"v-4a2605fe#4/1\",\"21\":\"v-4a2605fe#5\",\"22\":\"v-4a2605fe#5/0\",\"23\":\"v-4a2605fe#6\",\"24\":\"v-4a2605fe#7\",\"25\":\"v-4a2605fe#7/0\",\"26\":\"v-4a2605fe#8\",\"27\":\"v-4a2605fe#8/0\",\"28\":\"v-4a2605fe#8/1\",\"29\":\"v-7d42e7fb\",\"30\":\"v-7d42e7fb#0/0\",\"31\":\"v-7971eb74\",\"32\":\"v-479edf49\",\"33\":\"v-479edf49#0/0\",\"34\":\"v-9caf75e6\",\"35\":\"v-9caf75e6#1\",\"36\":\"v-9caf75e6#1/0\",\"37\":\"v-5f474719\",\"38\":\"v-5f474719#1\",\"39\":\"v-5f474719#1/0\",\"40\":\"v-5f474719#1/1\",\"41\":\"v-5f474719#1/2\",\"42\":\"v-5f474719#1/3\",\"43\":\"v-5f474719#1/4\",\"44\":\"v-9ad09bde\",\"45\":\"v-9ad09bde#0/0\",\"46\":\"v-9ad09bde#0/1\",\"47\":\"v-2efce1da\",\"48\":\"v-2efce1da#1\",\"49\":\"v-2efce1da#1/0\",\"50\":\"v-2efce1da#1/1\",\"51\":\"v-2efce1da#1/2\",\"52\":\"v-2efce1da#1/3\",\"53\":\"v-2efce1da#1/4\",\"54\":\"v-2efce1da#1/5\",\"55\":\"v-2efce1da#1/6\",\"56\":\"v-2efce1da#1/7\",\"57\":\"v-2efce1da#1/8\",\"58\":\"v-2efce1da#1/9\",\"59\":\"v-2efce1da#1/10\",\"60\":\"v-2efce1da#2\",\"61\":\"v-2efce1da#2/0\",\"62\":\"v-2efce1da#2/1\",\"63\":\"v-2efce1da#2/2\",\"64\":\"v-2efce1da#3\",\"65\":\"v-2efce1da#4\",\"66\":\"v-2efce1da#4/0\",\"67\":\"v-2efce1da#4/1\",\"68\":\"v-2efce1da#4/2\",\"69\":\"v-2efce1da#5\",\"70\":\"v-2efce1da#5/0\",\"71\":\"v-2efce1da#5/1\",\"72\":\"v-2efce1da#5/2\",\"73\":\"v-2efce1da#5/3\",\"74\":\"v-2efce1da#5/4\",\"75\":\"v-2efce1da#5/5\",\"76\":\"v-2efce1da#5/6\",\"77\":\"v-2efce1da#5/7\",\"78\":\"v-2efce1da#5/8\",\"79\":\"v-2efce1da#5/9\",\"80\":\"v-2efce1da#5/10\",\"81\":\"v-2efce1da#6\",\"82\":\"v-2efce1da#6/0\",\"83\":\"v-2efce1da#7\",\"84\":\"v-2efce1da#7/0\",\"85\":\"v-2efce1da#7/1\",\"86\":\"v-2efce1da#7/2\",\"87\":\"v-2efce1da#7/3\",\"88\":\"v-2efce1da#7/4\",\"89\":\"v-2efce1da#7/5\",\"90\":\"v-2efce1da#7/6\",\"91\":\"v-2efce1da#7/7\",\"92\":\"v-2efce1da#7/8\",\"93\":\"v-2efce1da#7/9\",\"94\":\"v-2efce1da#7/10\",\"95\":\"v-2efce1da#7/11\",\"96\":\"v-2efce1da#7/12\",\"97\":\"v-2efce1da#7/13\",\"98\":\"v-2efce1da#7/14\",\"99\":\"v-2efce1da#7/15\",\"100\":\"v-2efce1da#7/16\",\"101\":\"v-2efce1da#7/17\",\"102\":\"v-2efce1da#7/18\",\"103\":\"v-2efce1da#7/19\",\"104\":\"v-2efce1da#8\",\"105\":\"v-2efce1da#8/0\",\"106\":\"v-2efce1da#8/1\",\"107\":\"v-2efce1da#8/2\",\"108\":\"v-2efce1da#8/3\",\"109\":\"v-2efce1da#9\",\"110\":\"v-2efce1da#9/0\",\"111\":\"v-2efce1da#9/1\",\"112\":\"v-2efce1da#9/2\",\"113\":\"v-2efce1da#9/3\",\"114\":\"v-2efce1da#10\",\"115\":\"v-2efce1da#10/0\",\"116\":\"v-2efce1da#10/1\",\"117\":\"v-2efce1da#10/2\",\"118\":\"v-2efce1da#10/3\",\"119\":\"v-2efce1da#10/4\",\"120\":\"v-2efce1da#10/5\",\"121\":\"v-2efce1da#10/6\",\"122\":\"v-2efce1da#10/7\",\"123\":\"v-534edd30\",\"124\":\"v-534edd30#1\",\"125\":\"v-534edd30#1/0\",\"126\":\"v-534edd30#1/1\",\"127\":\"v-534edd30#1/2\",\"128\":\"v-534edd30#1/3\",\"129\":\"v-534edd30#1/4\",\"130\":\"v-534edd30#1/5\",\"131\":\"v-534edd30#1/6\",\"132\":\"v-534edd30#1/7\",\"133\":\"v-534edd30#2\",\"134\":\"v-534edd30#2/8\",\"135\":\"v-534edd30#2/9\",\"136\":\"v-534edd30#2/10\",\"137\":\"v-534edd30#2/11\",\"138\":\"v-534edd30#2/12\",\"139\":\"v-534edd30#2/13\",\"140\":\"v-534edd30#3\",\"141\":\"v-534edd30#3/14\",\"142\":\"v-534edd30#3/15\",\"143\":\"v-534edd30#3/16\",\"144\":\"v-534edd30#3/17\",\"145\":\"v-534edd30#3/18\",\"146\":\"v-534edd30#4\",\"147\":\"v-534edd30#4/19\",\"148\":\"v-534edd30#4/20\",\"149\":\"v-534edd30#4/21\",\"150\":\"v-534edd30#4/22\",\"151\":\"v-534edd30#4/23\",\"152\":\"v-534edd30#5\",\"153\":\"v-534edd30#5/24\",\"154\":\"v-534edd30#5/25\",\"155\":\"v-534edd30#5/26\",\"156\":\"v-534edd30#5/27\",\"157\":\"v-534edd30#5/28\",\"158\":\"v-534edd30#5/29\",\"159\":\"v-534edd30#5/30\",\"160\":\"v-534edd30#6\",\"161\":\"v-534edd30#6/31\",\"162\":\"v-534edd30#6/32\",\"163\":\"v-534edd30#6/33\",\"164\":\"v-534edd30#6/34\",\"165\":\"v-534edd30#6/35\",\"166\":\"v-534edd30#6/36\",\"167\":\"v-534edd30#6/37\",\"168\":\"v-534edd30#6/38\",\"169\":\"v-534edd30#7\",\"170\":\"v-534edd30#7/39\",\"171\":\"v-534edd30#7/40\",\"172\":\"v-534edd30#7/41\",\"173\":\"v-534edd30#7/42\",\"174\":\"v-534edd30#7/43\",\"175\":\"v-534edd30#7/44\",\"176\":\"v-534edd30#7/45\",\"177\":\"v-534edd30#8\",\"178\":\"v-534edd30#8/46\",\"179\":\"v-534edd30#8/47\",\"180\":\"v-534edd30#8/48\",\"181\":\"v-534edd30#8/49\",\"182\":\"v-534edd30#8/50\",\"183\":\"v-534edd30#8/51\",\"184\":\"v-534edd30#8/52\",\"185\":\"v-534edd30#8/53\",\"186\":\"v-534edd30#8/54\",\"187\":\"v-534edd30#8/55\",\"188\":\"v-534edd30#8/56\",\"189\":\"v-534edd30#8/57\",\"190\":\"v-534edd30#8/58\",\"191\":\"v-534edd30#8/59\",\"192\":\"v-534edd30#8/60\",\"193\":\"v-534edd30#8/61\",\"194\":\"v-534edd30#8/62\",\"195\":\"v-534edd30#8/63\",\"196\":\"v-534edd30#8/64\",\"197\":\"v-d843ef0a\",\"198\":\"v-d843ef0a#1\",\"199\":\"v-d843ef0a#2\",\"200\":\"v-d843ef0a#2/0\",\"201\":\"v-d843ef0a#2/1\",\"202\":\"v-d843ef0a#2/2\",\"203\":\"v-d843ef0a#2/3\",\"204\":\"v-d843ef0a#2/4\",\"205\":\"v-d843ef0a#2/5\",\"206\":\"v-d843ef0a#2/6\",\"207\":\"v-d843ef0a#2/7\",\"208\":\"v-d843ef0a#2/8\",\"209\":\"v-d843ef0a#3\",\"210\":\"v-d843ef0a#3/9\",\"211\":\"v-d843ef0a#3/10\",\"212\":\"v-d843ef0a#3/11\",\"213\":\"v-d843ef0a#3/12\",\"214\":\"v-d843ef0a#3/13\",\"215\":\"v-d843ef0a#3/14\",\"216\":\"v-d843ef0a#3/15\",\"217\":\"v-d843ef0a#4\",\"218\":\"v-d843ef0a#4/16\",\"219\":\"v-d843ef0a#4/17\",\"220\":\"v-d843ef0a#4/18\",\"221\":\"v-d843ef0a#4/19\",\"222\":\"v-d843ef0a#4/20\",\"223\":\"v-d843ef0a#4/21\",\"224\":\"v-d843ef0a#4/22\",\"225\":\"v-d843ef0a#5\",\"226\":\"v-d843ef0a#5/23\",\"227\":\"v-d843ef0a#5/24\",\"228\":\"v-d843ef0a#5/25\",\"229\":\"v-d843ef0a#5/26\",\"230\":\"v-d843ef0a#5/27\",\"231\":\"v-d843ef0a#5/28\",\"232\":\"v-d843ef0a#5/29\",\"233\":\"v-d843ef0a#5/30\",\"234\":\"v-d843ef0a#5/31\",\"235\":\"v-d843ef0a#6\",\"236\":\"v-d843ef0a#6/32\",\"237\":\"v-d843ef0a#6/33\",\"238\":\"v-d843ef0a#6/34\",\"239\":\"v-d843ef0a#7\",\"240\":\"v-d843ef0a#7/0\",\"241\":\"v-d843ef0a#7/1\",\"242\":\"v-d843ef0a#7/2\",\"243\":\"v-d843ef0a#7/3\",\"244\":\"v-d843ef0a#7/4\",\"245\":\"v-d843ef0a#7/5\",\"246\":\"v-d843ef0a#7/6\",\"247\":\"v-d843ef0a#7/7\",\"248\":\"v-d843ef0a#8\",\"249\":\"v-d843ef0a#8/8\",\"250\":\"v-d843ef0a#8/9\",\"251\":\"v-d843ef0a#8/10\",\"252\":\"v-d843ef0a#8/11\",\"253\":\"v-d843ef0a#8/12\",\"254\":\"v-d843ef0a#8/13\",\"255\":\"v-d843ef0a#8/14\",\"256\":\"v-d843ef0a#8/15\",\"257\":\"v-d843ef0a#8/16\",\"258\":\"v-d843ef0a#8/17\",\"259\":\"v-d843ef0a#9\",\"260\":\"v-d843ef0a#10\",\"261\":\"v-d843ef0a#10/18\",\"262\":\"v-d843ef0a#10/19\",\"263\":\"v-d843ef0a#10/20\",\"264\":\"v-d843ef0a#10/21\",\"265\":\"v-d843ef0a#10/22\",\"266\":\"v-d843ef0a#11\",\"267\":\"v-d843ef0a#11/23\",\"268\":\"v-d843ef0a#11/24\",\"269\":\"v-d843ef0a#11/25\",\"270\":\"v-d843ef0a#11/26\",\"271\":\"v-d843ef0a#11/27\",\"272\":\"v-d843ef0a#11/28\",\"273\":\"v-d843ef0a#11/29\",\"274\":\"v-d843ef0a#11/30\",\"275\":\"v-d843ef0a#11/31\",\"276\":\"v-d843ef0a#11/32\",\"277\":\"v-d843ef0a#12\",\"278\":\"v-d843ef0a#12/33\",\"279\":\"v-d843ef0a#12/34\",\"280\":\"v-d843ef0a#12/35\",\"281\":\"v-d843ef0a#12/36\",\"282\":\"v-d843ef0a#12/37\",\"283\":\"v-d843ef0a#12/38\",\"284\":\"v-d843ef0a#12/39\",\"285\":\"v-d843ef0a#12/40\",\"286\":\"v-d843ef0a#12/41\",\"287\":\"v-d843ef0a#12/42\",\"288\":\"v-d843ef0a#13\",\"289\":\"v-d843ef0a#13/43\",\"290\":\"v-d843ef0a#13/44\",\"291\":\"v-d843ef0a#13/45\",\"292\":\"v-d843ef0a#13/46\",\"293\":\"v-d843ef0a#13/47\",\"294\":\"v-d843ef0a#13/48\",\"295\":\"v-d843ef0a#13/49\",\"296\":\"v-d843ef0a#13/50\",\"297\":\"v-d843ef0a#13/51\",\"298\":\"v-d843ef0a#14\",\"299\":\"v-d843ef0a#15\",\"300\":\"v-d843ef0a#15/52\",\"301\":\"v-d843ef0a#15/53\",\"302\":\"v-d843ef0a#15/54\",\"303\":\"v-d843ef0a#15/55\",\"304\":\"v-d843ef0a#15/56\",\"305\":\"v-d843ef0a#15/57\",\"306\":\"v-d843ef0a#15/58\",\"307\":\"v-d843ef0a#15/59\",\"308\":\"v-d843ef0a#16\",\"309\":\"v-d843ef0a#16/60\",\"310\":\"v-d843ef0a#16/61\",\"311\":\"v-d843ef0a#16/62\",\"312\":\"v-d843ef0a#16/63\",\"313\":\"v-d843ef0a#16/64\",\"314\":\"v-d843ef0a#16/65\",\"315\":\"v-d843ef0a#16/66\",\"316\":\"v-d843ef0a#16/67\",\"317\":\"v-d843ef0a#16/68\",\"318\":\"v-d843ef0a#16/69\",\"319\":\"v-d843ef0a#17\",\"320\":\"v-d843ef0a#17/70\",\"321\":\"v-d843ef0a#17/71\",\"322\":\"v-d843ef0a#17/72\",\"323\":\"v-d843ef0a#17/73\",\"324\":\"v-d843ef0a#17/74\",\"325\":\"v-d843ef0a#17/75\",\"326\":\"v-d843ef0a#17/76\",\"327\":\"v-d843ef0a#17/77\",\"328\":\"v-d843ef0a#17/78\",\"329\":\"v-d843ef0a#17/79\",\"330\":\"v-d843ef0a#17/80\",\"331\":\"v-d843ef0a#17/81\",\"332\":\"v-d843ef0a#18\",\"333\":\"v-d843ef0a#18/82\",\"334\":\"v-d843ef0a#18/83\",\"335\":\"v-d843ef0a#18/84\",\"336\":\"v-d843ef0a#18/85\",\"337\":\"v-d843ef0a#18/86\",\"338\":\"v-d843ef0a#18/87\",\"339\":\"v-d843ef0a#18/88\",\"340\":\"v-d843ef0a#18/89\",\"341\":\"v-d843ef0a#18/90\",\"342\":\"v-d843ef0a#18/91\",\"343\":\"v-d843ef0a#19\",\"344\":\"v-d843ef0a#20\",\"345\":\"v-d843ef0a#20/92\",\"346\":\"v-d843ef0a#20/93\",\"347\":\"v-d843ef0a#20/94\",\"348\":\"v-d843ef0a#20/95\",\"349\":\"v-d843ef0a#20/96\",\"350\":\"v-d843ef0a#21\",\"351\":\"v-d843ef0a#21/97\",\"352\":\"v-d843ef0a#21/98\",\"353\":\"v-d843ef0a#21/99\",\"354\":\"v-d843ef0a#22\",\"355\":\"v-d843ef0a#22/0\",\"356\":\"v-d843ef0a#22/1\",\"357\":\"v-d843ef0a#22/2\",\"358\":\"v-d843ef0a#22/3\",\"359\":\"v-d843ef0a#22/4\",\"360\":\"v-d843ef0a#23\",\"361\":\"v-d843ef0a#23/5\",\"362\":\"v-d843ef0a#23/6\",\"363\":\"v-d843ef0a#23/7\",\"364\":\"v-d843ef0a#23/8\",\"365\":\"v-d843ef0a#23/9\",\"366\":\"v-36d6919b\",\"367\":\"v-36d6919b#1\",\"368\":\"v-36d6919b#1/0\",\"369\":\"v-36d6919b#1/1\",\"370\":\"v-36d6919b#1/2\",\"371\":\"v-36d6919b#2\",\"372\":\"v-36d6919b#2/0\",\"373\":\"v-36d6919b#2/1\",\"374\":\"v-36d6919b#2/2\",\"375\":\"v-36d6919b#2/3\",\"376\":\"v-36d6919b#2/4\",\"377\":\"v-36d6919b#2/5\",\"378\":\"v-36d6919b#3\",\"379\":\"v-36d6919b#3/6\",\"380\":\"v-36d6919b#3/7\",\"381\":\"v-36d6919b#3/8\",\"382\":\"v-36d6919b#3/9\",\"383\":\"v-36d6919b#3/10\",\"384\":\"v-36d6919b#3/11\",\"385\":\"v-36d6919b#3/12\",\"386\":\"v-36d6919b#3/13\",\"387\":\"v-36d6919b#3/14\",\"388\":\"v-36d6919b#3/15\",\"389\":\"v-36d6919b#3/16\",\"390\":\"v-36d6919b#3/17\",\"391\":\"v-36d6919b#4\",\"392\":\"v-36d6919b#4/18\",\"393\":\"v-36d6919b#4/19\",\"394\":\"v-36d6919b#4/20\",\"395\":\"v-36d6919b#4/21\",\"396\":\"v-36d6919b#4/22\",\"397\":\"v-36d6919b#5\",\"398\":\"v-36d6919b#5/23\",\"399\":\"v-36d6919b#5/24\",\"400\":\"v-36d6919b#5/25\",\"401\":\"v-36d6919b#5/26\",\"402\":\"v-36d6919b#5/27\",\"403\":\"v-36d6919b#6\",\"404\":\"v-36d6919b#6/0\",\"405\":\"v-36d6919b#6/1\",\"406\":\"v-36d6919b#6/2\",\"407\":\"v-36d6919b#6/3\",\"408\":\"v-36d6919b#6/4\",\"409\":\"v-36d6919b#6/5\",\"410\":\"v-36d6919b#7\",\"411\":\"v-36d6919b#7/6\",\"412\":\"v-36d6919b#7/7\",\"413\":\"v-36d6919b#7/8\",\"414\":\"v-36d6919b#7/9\",\"415\":\"v-36d6919b#7/10\",\"416\":\"v-e1eec494\",\"417\":\"v-e1eec494#1\",\"418\":\"v-e1eec494#2\",\"419\":\"v-e1eec494#3\",\"420\":\"v-e1eec494#3/0\",\"421\":\"v-e1eec494#3/1\",\"422\":\"v-e1eec494#4\",\"423\":\"v-e1eec494#5\",\"424\":\"v-e1eec494#6\",\"425\":\"v-e1eec494#6/2\",\"426\":\"v-e1eec494#6/3\",\"427\":\"v-e1eec494#6/4\",\"428\":\"v-e1eec494#7\",\"429\":\"v-e1eec494#7/5\",\"430\":\"v-e1eec494#7/6\",\"431\":\"v-e1eec494#7/7\",\"432\":\"v-e1eec494#7/8\",\"433\":\"v-e1eec494#7/9\",\"434\":\"v-e1eec494#7/10\",\"435\":\"v-e1eec494#7/11\",\"436\":\"v-e1eec494#8\",\"437\":\"v-e1eec494#8/0\",\"438\":\"v-e1eec494#8/1\",\"439\":\"v-e1eec494#9\",\"440\":\"v-e1eec494#9/2\",\"441\":\"v-e1eec494#10\",\"442\":\"v-e1eec494#10/3\",\"443\":\"v-e1eec494#10/4\",\"444\":\"v-e1eec494#10/5\",\"445\":\"v-e1eec494#11\",\"446\":\"v-e1eec494#11/0\",\"447\":\"v-e1eec494#11/1\",\"448\":\"v-e1eec494#11/2\",\"449\":\"v-e1eec494#11/3\",\"450\":\"v-e1eec494#11/4\",\"451\":\"v-e1eec494#12\",\"452\":\"v-e1eec494#13\",\"453\":\"v-e1eec494#14\",\"454\":\"v-e1eec494#14/0\",\"455\":\"v-e1eec494#14/1\",\"456\":\"v-e1eec494#14/2\",\"457\":\"v-e1eec494#14/3\",\"458\":\"v-e1eec494#14/4\",\"459\":\"v-e1eec494#15\",\"460\":\"v-e1eec494#16\",\"461\":\"v-e1eec494#16/0\",\"462\":\"v-e1eec494#16/1\",\"463\":\"v-e1eec494#16/2\",\"464\":\"v-e1eec494#16/3\",\"465\":\"v-e1eec494#16/4\",\"466\":\"v-e1eec494#16/5\",\"467\":\"v-e1eec494#16/6\",\"468\":\"v-e1eec494#16/7\",\"469\":\"v-e1eec494#16/8\",\"470\":\"v-e1eec494#16/9\",\"471\":\"v-e1eec494#16/10\",\"472\":\"v-e1eec494#17\",\"473\":\"v-e1eec494#18\",\"474\":\"v-e1eec494#18/0\",\"475\":\"v-e1eec494#18/1\",\"476\":\"v-e1eec494#18/2\",\"477\":\"v-e1eec494#18/3\",\"478\":\"v-e1eec494#18/4\",\"479\":\"v-e1eec494#18/5\",\"480\":\"v-e1eec494#18/6\",\"481\":\"v-e1eec494#18/7\",\"482\":\"v-e1eec494#19\",\"483\":\"v-e1eec494#20\",\"484\":\"v-e1eec494#20/0\",\"485\":\"v-e1eec494#20/1\",\"486\":\"v-e1eec494#20/2\",\"487\":\"v-e1eec494#20/3\",\"488\":\"v-e1eec494#21\",\"489\":\"v-e1eec494#22\",\"490\":\"v-e1eec494#23\",\"491\":\"v-e1eec494#23/4\",\"492\":\"v-e1eec494#23/5\",\"493\":\"v-e1eec494#24\",\"494\":\"v-e1eec494#24/6\",\"495\":\"v-e1eec494#24/7\",\"496\":\"v-e1eec494#24/8\",\"497\":\"v-e1eec494#25\",\"498\":\"v-e1eec494#25/9\",\"499\":\"v-e1eec494#26\",\"500\":\"v-e1eec494#26/10\",\"501\":\"v-e1eec494#27\",\"502\":\"v-e1eec494#27/11\",\"503\":\"v-e1eec494#27/12\",\"504\":\"v-e1eec494#27/13\",\"505\":\"v-e1eec494#27/14\",\"506\":\"v-e1eec494#27/15\",\"507\":\"v-e1eec494#27/16\",\"508\":\"v-e1eec494#27/17\",\"509\":\"v-e1eec494#27/18\",\"510\":\"v-e1eec494#27/19\",\"511\":\"v-e1eec494#27/20\",\"512\":\"v-e1eec494#27/21\",\"513\":\"v-e1eec494#27/22\",\"514\":\"v-b2eb194a\",\"515\":\"v-b2eb194a#1\",\"516\":\"v-b2eb194a#2\",\"517\":\"v-b2eb194a#2/0\",\"518\":\"v-b2eb194a#2/1\",\"519\":\"v-b2eb194a#2/2\",\"520\":\"v-b2eb194a#2/3\",\"521\":\"v-b2eb194a#2/4\",\"522\":\"v-b2eb194a#2/5\",\"523\":\"v-b2eb194a#2/6\",\"524\":\"v-b2eb194a#3\",\"525\":\"v-b2eb194a#4\",\"526\":\"v-b2eb194a#4/7\",\"527\":\"v-b2eb194a#4/8\",\"528\":\"v-b2eb194a#4/9\",\"529\":\"v-b2eb194a#4/10\",\"530\":\"v-b2eb194a#4/11\",\"531\":\"v-b2eb194a#4/12\",\"532\":\"v-b2eb194a#4/13\",\"533\":\"v-b2eb194a#4/14\",\"534\":\"v-b2eb194a#5\",\"535\":\"v-b2eb194a#5/15\",\"536\":\"v-b2eb194a#5/16\",\"537\":\"v-b2eb194a#5/17\",\"538\":\"v-b2eb194a#6\",\"539\":\"v-b2eb194a#6/0\",\"540\":\"v-b2eb194a#6/1\",\"541\":\"v-b2eb194a#6/2\",\"542\":\"v-b2eb194a#7\",\"543\":\"v-b2eb194a#7/0\",\"544\":\"v-b2eb194a#7/1\",\"545\":\"v-b2eb194a#7/2\",\"546\":\"v-b2eb194a#7/3\",\"547\":\"v-b2eb194a#7/4\",\"548\":\"v-b2eb194a#8\",\"549\":\"v-b2eb194a#8/5\",\"550\":\"v-b2eb194a#8/6\",\"551\":\"v-b2eb194a#9\",\"552\":\"v-b2eb194a#10\",\"553\":\"v-b2eb194a#10/0\",\"554\":\"v-b2eb194a#10/1\",\"555\":\"v-b2eb194a#10/2\",\"556\":\"v-b2eb194a#11\",\"557\":\"v-b2eb194a#11/0\",\"558\":\"v-b2eb194a#11/1\",\"559\":\"v-b2eb194a#11/2\",\"560\":\"v-b2eb194a#11/3\",\"561\":\"v-b2eb194a#11/4\",\"562\":\"v-b2eb194a#11/5\",\"563\":\"v-b2eb194a#11/6\",\"564\":\"v-b2eb194a#11/7\",\"565\":\"v-b2eb194a#11/8\",\"566\":\"v-b2eb194a#12\",\"567\":\"v-b2eb194a#12/9\",\"568\":\"v-b2eb194a#12/10\",\"569\":\"v-b2eb194a#12/11\",\"570\":\"v-b2eb194a#12/12\",\"571\":\"v-b2eb194a#12/13\",\"572\":\"v-b2eb194a#12/14\",\"573\":\"v-b2eb194a#12/15\",\"574\":\"v-b2eb194a#12/16\",\"575\":\"v-b2eb194a#12/17\",\"576\":\"v-b2eb194a#12/18\",\"577\":\"v-b2eb194a#12/19\",\"578\":\"v-b2eb194a#12/20\",\"579\":\"v-b2eb194a#12/21\",\"580\":\"v-b2eb194a#13\",\"581\":\"v-b2eb194a#14\",\"582\":\"v-b2eb194a#14/22\",\"583\":\"v-b2eb194a#14/23\",\"584\":\"v-b2eb194a#14/24\",\"585\":\"v-b2eb194a#14/25\",\"586\":\"v-b2eb194a#14/26\",\"587\":\"v-b2eb194a#14/27\",\"588\":\"v-b2eb194a#14/28\",\"589\":\"v-b2eb194a#15\",\"590\":\"v-b2eb194a#15/29\",\"591\":\"v-b2eb194a#15/30\",\"592\":\"v-b2eb194a#15/31\",\"593\":\"v-b2eb194a#15/32\",\"594\":\"v-b2eb194a#15/33\",\"595\":\"v-b2eb194a#15/34\",\"596\":\"v-b2eb194a#15/35\",\"597\":\"v-b2eb194a#15/36\",\"598\":\"v-b2eb194a#16\",\"599\":\"v-b2eb194a#16/37\",\"600\":\"v-b2eb194a#16/38\",\"601\":\"v-b2eb194a#16/39\",\"602\":\"v-b2eb194a#16/40\",\"603\":\"v-b2eb194a#16/41\",\"604\":\"v-b2eb194a#16/42\",\"605\":\"v-b2eb194a#16/43\",\"606\":\"v-b2eb194a#17\",\"607\":\"v-b2eb194a#17/44\",\"608\":\"v-b2eb194a#17/45\",\"609\":\"v-b2eb194a#17/46\",\"610\":\"v-b2eb194a#17/47\",\"611\":\"v-b2eb194a#17/48\",\"612\":\"v-b2eb194a#17/49\",\"613\":\"v-b2eb194a#17/50\",\"614\":\"v-b2eb194a#18\",\"615\":\"v-b2eb194a#18/51\",\"616\":\"v-b2eb194a#18/52\",\"617\":\"v-b2eb194a#18/53\",\"618\":\"v-b2eb194a#18/54\",\"619\":\"v-b2eb194a#18/55\",\"620\":\"v-b2eb194a#19\",\"621\":\"v-b2eb194a#19/56\",\"622\":\"v-b2eb194a#19/57\",\"623\":\"v-b2eb194a#19/58\",\"624\":\"v-b2eb194a#19/59\",\"625\":\"v-b2eb194a#19/60\",\"626\":\"v-b2eb194a#19/61\",\"627\":\"v-b2eb194a#19/62\",\"628\":\"v-b2eb194a#19/63\",\"629\":\"v-b2eb194a#19/64\",\"630\":\"v-b2eb194a#20\",\"631\":\"v-b2eb194a#20/65\",\"632\":\"v-b2eb194a#20/66\",\"633\":\"v-b2eb194a#20/67\",\"634\":\"v-b2eb194a#20/68\",\"635\":\"v-b2eb194a#20/69\",\"636\":\"v-b2eb194a#20/70\",\"637\":\"v-5732fb76\",\"638\":\"v-5732fb76#1\",\"639\":\"v-5732fb76#1/0\",\"640\":\"v-5732fb76#1/1\",\"641\":\"v-5732fb76#1/2\",\"642\":\"v-5732fb76#2\",\"643\":\"v-5732fb76#2/0\",\"644\":\"v-5732fb76#2/1\",\"645\":\"v-5732fb76#2/2\",\"646\":\"v-5732fb76#2/3\",\"647\":\"v-5732fb76#2/4\",\"648\":\"v-5732fb76#2/5\",\"649\":\"v-5732fb76#2/6\",\"650\":\"v-5732fb76#2/7\",\"651\":\"v-5732fb76#3\",\"652\":\"v-5732fb76#3/8\",\"653\":\"v-5732fb76#3/9\",\"654\":\"v-5732fb76#3/10\",\"655\":\"v-5732fb76#3/11\",\"656\":\"v-5732fb76#3/12\",\"657\":\"v-5732fb76#4\",\"658\":\"v-5732fb76#4/13\",\"659\":\"v-5732fb76#4/14\",\"660\":\"v-5732fb76#4/15\",\"661\":\"v-5732fb76#4/16\",\"662\":\"v-5732fb76#4/17\",\"663\":\"v-5732fb76#4/18\",\"664\":\"v-5732fb76#4/19\",\"665\":\"v-5732fb76#5\",\"666\":\"v-5732fb76#5/20\",\"667\":\"v-5732fb76#5/21\",\"668\":\"v-5732fb76#5/22\",\"669\":\"v-5732fb76#5/23\",\"670\":\"v-eded1812\",\"671\":\"v-eded1812#1\",\"672\":\"v-eded1812#1/0\",\"673\":\"v-eded1812#1/1\",\"674\":\"v-eded1812#1/2\",\"675\":\"v-eded1812#1/3\",\"676\":\"v-eded1812#1/4\",\"677\":\"v-eded1812#1/5\",\"678\":\"v-eded1812#1/6\",\"679\":\"v-eded1812#1/7\",\"680\":\"v-eded1812#2\",\"681\":\"v-eded1812#2/8\",\"682\":\"v-eded1812#2/9\",\"683\":\"v-eded1812#2/10\",\"684\":\"v-eded1812#2/11\",\"685\":\"v-eded1812#2/12\",\"686\":\"v-eded1812#3\",\"687\":\"v-eded1812#3/13\",\"688\":\"v-eded1812#3/14\",\"689\":\"v-eded1812#3/15\",\"690\":\"v-eded1812#3/16\",\"691\":\"v-eded1812#3/17\",\"692\":\"v-eded1812#3/18\",\"693\":\"v-eded1812#4\",\"694\":\"v-eded1812#4/19\",\"695\":\"v-eded1812#4/20\",\"696\":\"v-eded1812#4/21\",\"697\":\"v-eded1812#4/22\",\"698\":\"v-eded1812#4/23\",\"699\":\"v-eded1812#5\",\"700\":\"v-eded1812#5/0\",\"701\":\"v-eded1812#5/1\",\"702\":\"v-eded1812#5/2\",\"703\":\"v-eded1812#5/3\",\"704\":\"v-eded1812#5/4\",\"705\":\"v-eded1812#5/5\",\"706\":\"v-eded1812#5/6\",\"707\":\"v-eded1812#6\",\"708\":\"v-eded1812#6/7\",\"709\":\"v-eded1812#6/8\",\"710\":\"v-eded1812#6/9\",\"711\":\"v-eded1812#6/10\",\"712\":\"v-eded1812#6/11\",\"713\":\"v-eded1812#6/12\",\"714\":\"v-eded1812#6/13\",\"715\":\"v-eded1812#7\",\"716\":\"v-eded1812#7/14\",\"717\":\"v-eded1812#7/15\",\"718\":\"v-eded1812#7/16\",\"719\":\"v-eded1812#8\",\"720\":\"v-eded1812#8/0\",\"721\":\"v-eded1812#8/1\",\"722\":\"v-eded1812#8/2\",\"723\":\"v-eded1812#8/3\",\"724\":\"v-eded1812#8/4\",\"725\":\"v-eded1812#8/5\",\"726\":\"v-eded1812#8/6\",\"727\":\"v-eded1812#8/7\",\"728\":\"v-eded1812#9\",\"729\":\"v-eded1812#9/8\",\"730\":\"v-eded1812#9/9\",\"731\":\"v-eded1812#9/10\",\"732\":\"v-eded1812#9/11\",\"733\":\"v-eded1812#9/12\",\"734\":\"v-eded1812#9/13\",\"735\":\"v-eded1812#10\",\"736\":\"v-eded1812#10/14\",\"737\":\"v-eded1812#10/15\",\"738\":\"v-eded1812#10/16\",\"739\":\"v-eded1812#11\",\"740\":\"v-eded1812#11/0\",\"741\":\"v-eded1812#11/1\",\"742\":\"v-eded1812#11/2\",\"743\":\"v-eded1812#11/3\",\"744\":\"v-eded1812#11/4\",\"745\":\"v-eded1812#11/5\",\"746\":\"v-eded1812#12\",\"747\":\"v-eded1812#12/6\",\"748\":\"v-eded1812#12/7\",\"749\":\"v-eded1812#12/8\",\"750\":\"v-eded1812#12/9\",\"751\":\"v-eded1812#12/10\",\"752\":\"v-eded1812#12/11\",\"753\":\"v-eded1812#13\",\"754\":\"v-eded1812#13/12\",\"755\":\"v-eded1812#13/13\",\"756\":\"v-eded1812#13/14\",\"757\":\"v-eded1812#13/15\",\"758\":\"v-eded1812#13/16\",\"759\":\"v-eded1812#13/17\",\"760\":\"v-eded1812#13/18\",\"761\":\"v-eded1812#14\",\"762\":\"v-eded1812#14/19\",\"763\":\"v-eded1812#14/20\",\"764\":\"v-eded1812#14/21\",\"765\":\"v-662f0bba\",\"766\":\"v-662f0bba#1\",\"767\":\"v-662f0bba#1/0\",\"768\":\"v-e9c246a2\",\"769\":\"v-e9c246a2#1\",\"770\":\"v-e9c246a2#1/0\",\"771\":\"v-e9c246a2#1/1\",\"772\":\"v-e9c246a2#1/2\",\"773\":\"v-e9c246a2#1/3\",\"774\":\"v-e9c246a2#1/4\",\"775\":\"v-e9c246a2#1/5\",\"776\":\"v-e9c246a2#1/6\",\"777\":\"v-e9c246a2#1/7\",\"778\":\"v-e9c246a2#1/8\",\"779\":\"v-e9c246a2#1/9\",\"780\":\"v-e9c246a2#1/10\",\"781\":\"v-e9c246a2#1/11\",\"782\":\"v-e9c246a2#1/12\",\"783\":\"v-e9c246a2#1/13\",\"784\":\"v-e9c246a2#1/14\",\"785\":\"v-e9c246a2#1/15\",\"786\":\"v-e9c246a2#1/16\",\"787\":\"v-e9c246a2#1/17\",\"788\":\"v-e9c246a2#1/18\",\"789\":\"v-e9c246a2#1/19\",\"790\":\"v-e9c246a2#1/20\",\"791\":\"v-e9c246a2#1/21\",\"792\":\"v-e9c246a2#1/22\",\"793\":\"v-e9c246a2#1/23\",\"794\":\"v-e9c246a2#1/24\",\"795\":\"v-e9c246a2#1/25\",\"796\":\"v-e9c246a2#1/26\",\"797\":\"v-e9c246a2#1/27\",\"798\":\"v-e9c246a2#1/28\",\"799\":\"v-e9c246a2#1/29\",\"800\":\"v-e9c246a2#2\",\"801\":\"v-e9c246a2#2/0\",\"802\":\"v-e9c246a2#2/1\",\"803\":\"v-e9c246a2#2/2\",\"804\":\"v-e9c246a2#2/3\",\"805\":\"v-e9c246a2#2/4\",\"806\":\"v-e9c246a2#3\",\"807\":\"v-42325358\",\"808\":\"v-42325358#0/0\",\"809\":\"v-42325358#1\",\"810\":\"v-42325358#1/0\",\"811\":\"v-42325358#1/1\",\"812\":\"v-42325358#1/2\",\"813\":\"v-42325358#1/3\",\"814\":\"v-42325358#1/4\",\"815\":\"v-42325358#1/5\",\"816\":\"v-42325358#1/6\",\"817\":\"v-42325358#1/7\",\"818\":\"v-42325358#1/8\",\"819\":\"v-42325358#1/9\",\"820\":\"v-42325358#1/10\",\"821\":\"v-42325358#1/11\",\"822\":\"v-42325358#1/12\",\"823\":\"v-42325358#1/13\",\"824\":\"v-42325358#1/14\",\"825\":\"v-42325358#2\",\"826\":\"v-42325358#2/0\",\"827\":\"v-42325358#2/1\",\"828\":\"v-42325358#2/2\",\"829\":\"v-42325358#3\",\"830\":\"v-42325358#3/0\",\"831\":\"v-42325358#3/1\",\"832\":\"v-42325358#3/2\",\"833\":\"v-42325358#3/3\",\"834\":\"v-42325358#3/4\",\"835\":\"v-42325358#3/5\",\"836\":\"v-42325358#3/6\",\"837\":\"v-b89ed4ea\",\"838\":\"v-b89ed4ea#1\",\"839\":\"v-b89ed4ea#2\",\"840\":\"v-b89ed4ea#2/0\",\"841\":\"v-b89ed4ea#2/1\",\"842\":\"v-b89ed4ea#2/2\",\"843\":\"v-b89ed4ea#2/3\",\"844\":\"v-b89ed4ea#2/4\",\"845\":\"v-b89ed4ea#2/5\",\"846\":\"v-b89ed4ea#2/6\",\"847\":\"v-b89ed4ea#2/7\",\"848\":\"v-b89ed4ea#2/8\",\"849\":\"v-b89ed4ea#2/9\",\"850\":\"v-b89ed4ea#2/10\",\"851\":\"v-b89ed4ea#2/11\",\"852\":\"v-b89ed4ea#2/12\",\"853\":\"v-b89ed4ea#2/13\",\"854\":\"v-b89ed4ea#2/14\",\"855\":\"v-b89ed4ea#2/15\",\"856\":\"v-b89ed4ea#2/16\",\"857\":\"v-b89ed4ea#2/17\",\"858\":\"v-b89ed4ea#2/18\",\"859\":\"v-b89ed4ea#2/19\",\"860\":\"v-b89ed4ea#2/20\",\"861\":\"v-b89ed4ea#2/21\",\"862\":\"v-b89ed4ea#2/22\",\"863\":\"v-b89ed4ea#2/23\",\"864\":\"v-b89ed4ea#2/24\",\"865\":\"v-b89ed4ea#2/25\",\"866\":\"v-b89ed4ea#2/26\",\"867\":\"v-b89ed4ea#2/27\",\"868\":\"v-b89ed4ea#2/28\",\"869\":\"v-b89ed4ea#2/29\",\"870\":\"v-b89ed4ea#2/30\",\"871\":\"v-b89ed4ea#2/31\",\"872\":\"v-b89ed4ea#2/32\",\"873\":\"v-b89ed4ea#2/33\",\"874\":\"v-b89ed4ea#2/34\",\"875\":\"v-b89ed4ea#2/35\",\"876\":\"v-b89ed4ea#2/36\",\"877\":\"v-b89ed4ea#2/37\",\"878\":\"v-b89ed4ea#2/38\",\"879\":\"v-b89ed4ea#2/39\",\"880\":\"v-b89ed4ea#2/40\",\"881\":\"v-b89ed4ea#2/41\",\"882\":\"v-b89ed4ea#2/42\",\"883\":\"v-b89ed4ea#2/43\",\"884\":\"v-b89ed4ea#2/44\",\"885\":\"v-b89ed4ea#2/45\",\"886\":\"v-b89ed4ea#2/46\",\"887\":\"v-b89ed4ea#2/47\",\"888\":\"v-b89ed4ea#2/48\",\"889\":\"v-b89ed4ea#2/49\",\"890\":\"v-b89ed4ea#2/50\",\"891\":\"v-b89ed4ea#2/51\",\"892\":\"v-b89ed4ea#2/52\",\"893\":\"v-b89ed4ea#2/53\",\"894\":\"v-b89ed4ea#2/54\",\"895\":\"v-b89ed4ea#3\",\"896\":\"v-b89ed4ea#3/55\",\"897\":\"v-b89ed4ea#3/56\",\"898\":\"v-b89ed4ea#3/57\",\"899\":\"v-b89ed4ea#3/58\",\"900\":\"v-b89ed4ea#3/59\",\"901\":\"v-b89ed4ea#3/60\",\"902\":\"v-b89ed4ea#3/61\",\"903\":\"v-b89ed4ea#3/62\",\"904\":\"v-b89ed4ea#3/63\",\"905\":\"v-b89ed4ea#3/64\",\"906\":\"v-b89ed4ea#3/65\",\"907\":\"v-b89ed4ea#3/66\",\"908\":\"v-b89ed4ea#3/67\",\"909\":\"v-b89ed4ea#3/68\",\"910\":\"v-b89ed4ea#3/69\",\"911\":\"v-b89ed4ea#3/70\",\"912\":\"v-b89ed4ea#3/71\",\"913\":\"v-b89ed4ea#3/72\",\"914\":\"v-b89ed4ea#3/73\",\"915\":\"v-b89ed4ea#3/74\",\"916\":\"v-b89ed4ea#3/75\",\"917\":\"v-b89ed4ea#3/76\",\"918\":\"v-b89ed4ea#3/77\",\"919\":\"v-b89ed4ea#3/78\",\"920\":\"v-b89ed4ea#3/79\",\"921\":\"v-b89ed4ea#3/80\",\"922\":\"v-b89ed4ea#3/81\",\"923\":\"v-b89ed4ea#3/82\",\"924\":\"v-b89ed4ea#3/83\",\"925\":\"v-b89ed4ea#3/84\",\"926\":\"v-b89ed4ea#3/85\",\"927\":\"v-b89ed4ea#3/86\",\"928\":\"v-b89ed4ea#3/87\",\"929\":\"v-b89ed4ea#3/88\",\"930\":\"v-b89ed4ea#3/89\",\"931\":\"v-b89ed4ea#3/90\",\"932\":\"v-b89ed4ea#3/91\",\"933\":\"v-b89ed4ea#3/92\",\"934\":\"v-b89ed4ea#3/93\",\"935\":\"v-b89ed4ea#3/94\",\"936\":\"v-b89ed4ea#3/95\",\"937\":\"v-b89ed4ea#3/96\",\"938\":\"v-b89ed4ea#3/97\",\"939\":\"v-b89ed4ea#3/98\",\"940\":\"v-b89ed4ea#3/99\",\"941\":\"v-b89ed4ea#3/100\",\"942\":\"v-b89ed4ea#4\",\"943\":\"v-b89ed4ea#4/101\",\"944\":\"v-b89ed4ea#4/102\",\"945\":\"v-b89ed4ea#4/103\",\"946\":\"v-b89ed4ea#4/104\",\"947\":\"v-b89ed4ea#4/105\",\"948\":\"v-b89ed4ea#4/106\",\"949\":\"v-b89ed4ea#4/107\",\"950\":\"v-b89ed4ea#5\",\"951\":\"v-b89ed4ea#5/0\",\"952\":\"v-b89ed4ea#5/1\",\"953\":\"v-b89ed4ea#5/2\",\"954\":\"v-b89ed4ea#6\",\"955\":\"v-b89ed4ea#6/3\",\"956\":\"v-b89ed4ea#6/4\",\"957\":\"v-b89ed4ea#6/5\",\"958\":\"v-b89ed4ea#6/6\",\"959\":\"v-b89ed4ea#6/7\",\"960\":\"v-b89ed4ea#6/8\",\"961\":\"v-b89ed4ea#6/9\",\"962\":\"v-b89ed4ea#7\",\"963\":\"v-b89ed4ea#7/10\",\"964\":\"v-b89ed4ea#7/11\",\"965\":\"v-b89ed4ea#7/12\",\"966\":\"v-b89ed4ea#7/13\",\"967\":\"v-b89ed4ea#7/14\",\"968\":\"v-b89ed4ea#7/15\",\"969\":\"v-b89ed4ea#7/16\",\"970\":\"v-b89ed4ea#7/17\",\"971\":\"v-b89ed4ea#7/18\",\"972\":\"v-b89ed4ea#7/19\",\"973\":\"v-b89ed4ea#8\",\"974\":\"v-b89ed4ea#9\",\"975\":\"v-b89ed4ea#9/20\",\"976\":\"v-b89ed4ea#9/21\",\"977\":\"v-b89ed4ea#9/22\",\"978\":\"v-b89ed4ea#9/23\",\"979\":\"v-b89ed4ea#9/24\",\"980\":\"v-b89ed4ea#9/25\",\"981\":\"v-b89ed4ea#9/26\",\"982\":\"v-b89ed4ea#10\",\"983\":\"v-b89ed4ea#10/0\",\"984\":\"v-b89ed4ea#10/1\",\"985\":\"v-b89ed4ea#10/2\",\"986\":\"v-b89ed4ea#11\",\"987\":\"v-b89ed4ea#11/3\",\"988\":\"v-b89ed4ea#11/4\",\"989\":\"v-b89ed4ea#11/5\",\"990\":\"v-b89ed4ea#11/6\",\"991\":\"v-b89ed4ea#11/7\",\"992\":\"v-b89ed4ea#11/8\",\"993\":\"v-b89ed4ea#11/9\",\"994\":\"v-b89ed4ea#11/10\",\"995\":\"v-b89ed4ea#11/11\",\"996\":\"v-b89ed4ea#11/12\",\"997\":\"v-b89ed4ea#11/13\",\"998\":\"v-b89ed4ea#11/14\",\"999\":\"v-b89ed4ea#11/15\",\"1000\":\"v-b89ed4ea#11/16\",\"1001\":\"v-b89ed4ea#11/17\",\"1002\":\"v-b89ed4ea#11/18\",\"1003\":\"v-b89ed4ea#11/19\",\"1004\":\"v-b89ed4ea#11/20\",\"1005\":\"v-b89ed4ea#11/21\",\"1006\":\"v-b89ed4ea#11/22\",\"1007\":\"v-b89ed4ea#11/23\",\"1008\":\"v-b89ed4ea#11/24\",\"1009\":\"v-b89ed4ea#11/25\",\"1010\":\"v-b89ed4ea#11/26\",\"1011\":\"v-b89ed4ea#11/27\",\"1012\":\"v-b89ed4ea#11/28\",\"1013\":\"v-b89ed4ea#11/29\",\"1014\":\"v-b89ed4ea#11/30\",\"1015\":\"v-b89ed4ea#11/31\",\"1016\":\"v-b89ed4ea#11/32\",\"1017\":\"v-b89ed4ea#11/33\",\"1018\":\"v-b89ed4ea#11/34\",\"1019\":\"v-b89ed4ea#11/35\",\"1020\":\"v-b89ed4ea#11/36\",\"1021\":\"v-b89ed4ea#11/37\",\"1022\":\"v-b89ed4ea#11/38\",\"1023\":\"v-b89ed4ea#11/39\",\"1024\":\"v-b89ed4ea#11/40\",\"1025\":\"v-b89ed4ea#11/41\",\"1026\":\"v-b89ed4ea#11/42\",\"1027\":\"v-b89ed4ea#11/43\",\"1028\":\"v-b89ed4ea#11/44\",\"1029\":\"v-b89ed4ea#11/45\",\"1030\":\"v-b89ed4ea#11/46\",\"1031\":\"v-b89ed4ea#11/47\",\"1032\":\"v-b89ed4ea#12\",\"1033\":\"v-b89ed4ea#12/48\",\"1034\":\"v-b89ed4ea#12/49\",\"1035\":\"v-b89ed4ea#12/50\",\"1036\":\"v-b89ed4ea#12/51\",\"1037\":\"v-b89ed4ea#12/52\",\"1038\":\"v-b89ed4ea#12/53\",\"1039\":\"v-b89ed4ea#12/54\",\"1040\":\"v-b89ed4ea#12/55\",\"1041\":\"v-b89ed4ea#12/56\",\"1042\":\"v-b89ed4ea#12/57\",\"1043\":\"v-b89ed4ea#12/58\",\"1044\":\"v-b89ed4ea#12/59\",\"1045\":\"v-b89ed4ea#12/60\",\"1046\":\"v-b89ed4ea#13\",\"1047\":\"v-b89ed4ea#13/61\",\"1048\":\"v-b89ed4ea#13/62\",\"1049\":\"v-b89ed4ea#13/63\",\"1050\":\"v-b89ed4ea#13/64\",\"1051\":\"v-b89ed4ea#13/65\",\"1052\":\"v-b89ed4ea#13/66\",\"1053\":\"v-b89ed4ea#13/67\",\"1054\":\"v-b89ed4ea#13/68\",\"1055\":\"v-b89ed4ea#14\",\"1056\":\"v-b89ed4ea#14/69\",\"1057\":\"v-b89ed4ea#14/70\",\"1058\":\"v-b89ed4ea#14/71\",\"1059\":\"v-b89ed4ea#14/72\",\"1060\":\"v-b89ed4ea#14/73\",\"1061\":\"v-b89ed4ea#14/74\",\"1062\":\"v-b89ed4ea#14/75\",\"1063\":\"v-b89ed4ea#14/76\",\"1064\":\"v-b89ed4ea#14/77\",\"1065\":\"v-b89ed4ea#14/78\",\"1066\":\"v-b89ed4ea#14/79\",\"1067\":\"v-b89ed4ea#15\",\"1068\":\"v-b89ed4ea#16\",\"1069\":\"v-b89ed4ea#16/80\",\"1070\":\"v-b89ed4ea#16/81\",\"1071\":\"v-b89ed4ea#16/82\",\"1072\":\"v-b89ed4ea#16/83\",\"1073\":\"v-b89ed4ea#16/84\",\"1074\":\"v-b89ed4ea#16/85\",\"1075\":\"v-b89ed4ea#17\",\"1076\":\"v-b89ed4ea#17/0\",\"1077\":\"v-b89ed4ea#17/1\",\"1078\":\"v-b89ed4ea#17/2\",\"1079\":\"v-b89ed4ea#17/3\",\"1080\":\"v-b89ed4ea#17/4\",\"1081\":\"v-b89ed4ea#17/5\",\"1082\":\"v-b89ed4ea#17/6\",\"1083\":\"v-b89ed4ea#17/7\",\"1084\":\"v-b89ed4ea#17/8\",\"1085\":\"v-b89ed4ea#17/9\",\"1086\":\"v-b89ed4ea#17/10\",\"1087\":\"v-b89ed4ea#17/11\",\"1088\":\"v-b89ed4ea#17/12\",\"1089\":\"v-b89ed4ea#17/13\",\"1090\":\"v-b89ed4ea#17/14\",\"1091\":\"v-b89ed4ea#17/15\",\"1092\":\"v-b89ed4ea#17/16\",\"1093\":\"v-b89ed4ea#18\",\"1094\":\"v-b89ed4ea#18/17\",\"1095\":\"v-b89ed4ea#18/18\",\"1096\":\"v-b89ed4ea#18/19\",\"1097\":\"v-b89ed4ea#18/20\",\"1098\":\"v-b89ed4ea#18/21\",\"1099\":\"v-b89ed4ea#18/22\",\"1100\":\"v-b89ed4ea#18/23\",\"1101\":\"v-b89ed4ea#18/24\",\"1102\":\"v-b89ed4ea#18/25\",\"1103\":\"v-147825fb\",\"1104\":\"v-eda1fc4a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,1],\"2\":[null,3],\"3\":[null,3],\"4\":[null,2],\"5\":[1],\"6\":[null,5],\"7\":[null,4],\"8\":[null,2],\"9\":[null,10],\"10\":[null,3],\"11\":[null,5],\"12\":[null,8],\"13\":[1],\"14\":[1],\"15\":[null,1],\"16\":[1],\"17\":[1],\"18\":[1],\"19\":[null,7],\"20\":[null,4],\"21\":[1],\"22\":[null,3],\"23\":[1],\"24\":[1],\"25\":[null,1],\"26\":[1],\"27\":[null,6],\"28\":[null,13],\"29\":[1],\"30\":[null,140],\"31\":[1],\"32\":[1],\"33\":[null,1],\"34\":[1],\"35\":[1],\"36\":[null,1],\"37\":[1],\"38\":[1],\"39\":[null,9],\"40\":[null,4],\"41\":[null,9],\"42\":[null,20],\"43\":[null,2],\"44\":[1],\"45\":[null,3],\"46\":[null,39],\"47\":[1],\"48\":[1],\"49\":[null,6],\"50\":[null,4],\"51\":[null,17],\"52\":[null,7],\"53\":[null,7],\"54\":[null,1],\"55\":[null,1],\"56\":[null,1],\"57\":[null,4],\"58\":[null,1],\"59\":[null,5],\"60\":[1],\"61\":[null,15],\"62\":[null,10],\"63\":[null,7],\"64\":[3],\"65\":[4],\"66\":[null,9],\"67\":[null,3],\"68\":[null,3],\"69\":[1],\"70\":[null,13],\"71\":[null,7],\"72\":[null,4],\"73\":[null,10],\"74\":[null,13],\"75\":[null,7],\"76\":[null,3],\"77\":[null,12],\"78\":[null,14],\"79\":[null,14],\"80\":[null,9],\"81\":[2],\"82\":[null,11],\"83\":[2],\"84\":[null,2],\"85\":[null,4],\"86\":[null,2],\"87\":[null,4],\"88\":[null,4],\"89\":[null,4],\"90\":[null,7],\"91\":[null,4],\"92\":[null,2],\"93\":[null,2],\"94\":[null,5],\"95\":[null,1],\"96\":[null,9],\"97\":[null,12],\"98\":[null,3],\"99\":[null,7],\"100\":[null,9],\"101\":[null,4],\"102\":[null,4],\"103\":[null,1],\"104\":[2],\"105\":[null,7],\"106\":[null,23],\"107\":[null,2],\"108\":[null,7],\"109\":[4],\"110\":[null,4],\"111\":[null,2],\"112\":[null,2],\"113\":[null,1],\"114\":[1],\"115\":[null,6],\"116\":[null,16],\"117\":[null,28],\"118\":[null,11],\"119\":[null,7],\"120\":[null,2],\"121\":[null,3],\"122\":[null,9],\"123\":[1],\"124\":[2],\"125\":[null,1],\"126\":[null,2],\"127\":[null,1],\"128\":[null,5],\"129\":[null,15],\"130\":[null,7],\"131\":[null,7],\"132\":[null,35],\"133\":[2],\"134\":[null,1],\"135\":[null,4],\"136\":[null,1],\"137\":[null,6],\"138\":[null,5],\"139\":[null,38],\"140\":[1],\"141\":[null,1],\"142\":[null,1],\"143\":[null,28],\"144\":[null,22],\"145\":[null,37],\"146\":[4],\"147\":[null,1],\"148\":[null,1],\"149\":[null,1],\"150\":[null,15],\"151\":[null,47],\"152\":[1],\"153\":[null,1],\"154\":[null,1],\"155\":[null,1],\"156\":[null,5],\"157\":[null,11],\"158\":[null,10],\"159\":[null,33],\"160\":[2],\"161\":[null,1],\"162\":[null,5],\"163\":[null,1],\"164\":[null,5],\"165\":[null,13],\"166\":[null,10],\"167\":[null,7],\"168\":[null,54],\"169\":[1],\"170\":[null,1],\"171\":[null,8],\"172\":[null,1],\"173\":[null,3],\"174\":[null,14],\"175\":[null,4],\"176\":[null,52],\"177\":[1],\"178\":[null,1],\"179\":[null,14],\"180\":[null,1],\"181\":[null,7],\"182\":[null,14],\"183\":[null,17],\"184\":[null,15],\"185\":[null,12],\"186\":[null,3],\"187\":[null,4],\"188\":[null,3],\"189\":[null,3],\"190\":[null,3],\"191\":[null,4],\"192\":[null,3],\"193\":[null,4],\"194\":[null,3],\"195\":[null,4],\"196\":[null,42],\"197\":[1],\"198\":[1],\"199\":[1],\"200\":[null,1],\"201\":[null,2],\"202\":[null,1],\"203\":[null,18],\"204\":[null,4],\"205\":[null,6],\"206\":[null,22],\"207\":[null,7],\"208\":[null,22],\"209\":[2],\"210\":[null,1],\"211\":[null,4],\"212\":[null,1],\"213\":[null,12],\"214\":[null,18],\"215\":[null,7],\"216\":[null,39],\"217\":[2],\"218\":[null,1],\"219\":[null,4],\"220\":[null,1],\"221\":[null,9],\"222\":[null,5],\"223\":[null,3],\"224\":[null,28],\"225\":[1],\"226\":[null,1],\"227\":[null,5],\"228\":[null,1],\"229\":[null,24],\"230\":[null,8],\"231\":[null,7],\"232\":[null,11],\"233\":[null,2],\"234\":[null,23],\"235\":[1],\"236\":[null,1],\"237\":[null,3],\"238\":[null,1],\"239\":[1],\"240\":[null,1],\"241\":[null,1],\"242\":[null,1],\"243\":[null,11],\"244\":[null,2],\"245\":[null,4],\"246\":[null,7],\"247\":[null,27],\"248\":[1],\"249\":[null,1],\"250\":[null,10],\"251\":[null,1],\"252\":[null,9],\"253\":[null,5],\"254\":[null,12],\"255\":[null,6],\"256\":[null,11],\"257\":[null,6],\"258\":[null,24],\"259\":[1],\"260\":[1],\"261\":[null,1],\"262\":[null,3],\"263\":[null,1],\"264\":[null,16],\"265\":[null,31],\"266\":[1],\"267\":[null,1],\"268\":[null,3],\"269\":[null,1],\"270\":[null,11],\"271\":[null,12],\"272\":[null,11],\"273\":[null,11],\"274\":[null,9],\"275\":[null,19],\"276\":[null,31],\"277\":[1],\"278\":[null,1],\"279\":[null,4],\"280\":[null,1],\"281\":[null,6],\"282\":[null,10],\"283\":[null,9],\"284\":[null,4],\"285\":[null,14],\"286\":[null,19],\"287\":[null,27],\"288\":[1],\"289\":[null,1],\"290\":[null,1],\"291\":[null,1],\"292\":[null,12],\"293\":[null,14],\"294\":[null,14],\"295\":[null,17],\"296\":[null,3],\"297\":[null,30],\"298\":[1],\"299\":[2],\"300\":[null,1],\"301\":[null,8],\"302\":[null,1],\"303\":[null,6],\"304\":[null,13],\"305\":[null,12],\"306\":[null,26],\"307\":[null,21],\"308\":[2],\"309\":[null,1],\"310\":[null,9],\"311\":[null,1],\"312\":[null,9],\"313\":[null,9],\"314\":[null,11],\"315\":[null,11],\"316\":[null,11],\"317\":[null,4],\"318\":[null,23],\"319\":[2],\"320\":[null,1],\"321\":[null,9],\"322\":[null,1],\"323\":[null,14],\"324\":[null,12],\"325\":[null,13],\"326\":[null,3],\"327\":[null,9],\"328\":[null,5],\"329\":[null,4],\"330\":[null,14],\"331\":[null,32],\"332\":[1],\"333\":[null,1],\"334\":[null,7],\"335\":[null,1],\"336\":[null,14],\"337\":[null,6],\"338\":[null,10],\"339\":[null,9],\"340\":[null,9],\"341\":[null,3],\"342\":[null,27],\"343\":[1],\"344\":[2],\"345\":[null,1],\"346\":[null,4],\"347\":[null,1],\"348\":[null,5],\"349\":[null,22],\"350\":[1],\"351\":[null,1],\"352\":[null,3],\"353\":[null,1],\"354\":[1],\"355\":[null,1],\"356\":[null,5],\"357\":[null,1],\"358\":[null,22],\"359\":[null,27],\"360\":[1],\"361\":[null,1],\"362\":[null,1],\"363\":[null,1],\"364\":[null,22],\"365\":[null,27],\"366\":[1],\"367\":[1],\"368\":[null,1],\"369\":[null,4],\"370\":[null,1],\"371\":[2],\"372\":[null,1],\"373\":[null,5],\"374\":[null,1],\"375\":[null,14],\"376\":[null,4],\"377\":[null,25],\"378\":[1],\"379\":[null,1],\"380\":[null,7],\"381\":[null,6],\"382\":[null,1],\"383\":[null,9],\"384\":[null,6],\"385\":[null,10],\"386\":[null,6],\"387\":[null,8],\"388\":[null,7],\"389\":[null,4],\"390\":[null,24],\"391\":[1],\"392\":[null,1],\"393\":[null,4],\"394\":[null,1],\"395\":[null,11],\"396\":[null,33],\"397\":[1],\"398\":[null,1],\"399\":[null,2],\"400\":[null,3],\"401\":[null,2],\"402\":[null,1],\"403\":[1],\"404\":[null,1],\"405\":[null,11],\"406\":[null,1],\"407\":[null,7],\"408\":[null,6],\"409\":[null,29],\"410\":[1],\"411\":[null,1],\"412\":[null,9],\"413\":[null,1],\"414\":[null,6],\"415\":[null,27],\"416\":[1],\"417\":[1],\"418\":[1],\"419\":[1],\"420\":[null,1],\"421\":[null,39],\"422\":[1],\"423\":[1],\"424\":[1],\"425\":[null,3],\"426\":[null,3],\"427\":[null,21],\"428\":[1],\"429\":[null,3],\"430\":[null,10],\"431\":[null,10],\"432\":[null,14],\"433\":[null,1],\"434\":[null,2],\"435\":[null,3],\"436\":[2],\"437\":[null,10],\"438\":[null,41],\"439\":[3],\"440\":[null,42],\"441\":[1],\"442\":[null,23],\"443\":[null,14],\"444\":[null,5],\"445\":[1],\"446\":[null,3],\"447\":[null,5],\"448\":[null,4],\"449\":[null,7],\"450\":[null,7],\"451\":[1],\"452\":[1],\"453\":[1],\"454\":[null,2],\"455\":[null,2],\"456\":[null,2],\"457\":[null,2],\"458\":[null,4],\"459\":[1],\"460\":[1],\"461\":[null,3],\"462\":[null,2],\"463\":[null,2],\"464\":[null,2],\"465\":[null,2],\"466\":[null,3],\"467\":[null,2],\"468\":[null,2],\"469\":[null,2],\"470\":[null,7],\"471\":[null,3],\"472\":[1],\"473\":[1],\"474\":[null,3],\"475\":[null,3],\"476\":[null,4],\"477\":[null,2],\"478\":[null,1],\"479\":[null,4],\"480\":[null,5],\"481\":[null,6],\"482\":[1],\"483\":[1],\"484\":[null,9],\"485\":[null,4],\"486\":[null,3],\"487\":[null,9],\"488\":[1],\"489\":[3],\"490\":[1],\"491\":[null,42],\"492\":[null,31],\"493\":[1],\"494\":[null,8],\"495\":[null,14],\"496\":[null,13],\"497\":[1],\"498\":[null,19],\"499\":[1],\"500\":[null,12],\"501\":[1],\"502\":[null,5],\"503\":[null,5],\"504\":[null,3],\"505\":[null,7],\"506\":[null,7],\"507\":[null,5],\"508\":[null,7],\"509\":[null,3],\"510\":[null,4],\"511\":[null,5],\"512\":[null,1],\"513\":[null,3],\"514\":[4],\"515\":[1],\"516\":[2],\"517\":[null,1],\"518\":[null,4],\"519\":[null,1],\"520\":[null,10],\"521\":[null,14],\"522\":[null,15],\"523\":[null,24],\"524\":[1],\"525\":[1],\"526\":[null,1],\"527\":[null,2],\"528\":[null,3],\"529\":[null,10],\"530\":[null,8],\"531\":[null,1],\"532\":[null,2],\"533\":[null,31],\"534\":[2],\"535\":[null,1],\"536\":[null,13],\"537\":[null,1],\"538\":[1],\"539\":[null,1],\"540\":[null,3],\"541\":[null,1],\"542\":[1],\"543\":[null,1],\"544\":[null,3],\"545\":[null,4],\"546\":[null,1],\"547\":[null,30],\"548\":[1],\"549\":[null,1],\"550\":[null,6],\"551\":[1],\"552\":[2],\"553\":[null,1],\"554\":[null,2],\"555\":[null,1],\"556\":[1],\"557\":[null,1],\"558\":[null,7],\"559\":[null,5],\"560\":[null,5],\"561\":[null,7],\"562\":[null,2],\"563\":[null,13],\"564\":[null,1],\"565\":[null,77],\"566\":[1],\"567\":[null,1],\"568\":[null,5],\"569\":[null,5],\"570\":[null,3],\"571\":[null,15],\"572\":[null,2],\"573\":[null,4],\"574\":[null,2],\"575\":[null,4],\"576\":[null,2],\"577\":[null,7],\"578\":[null,1],\"579\":[null,57],\"580\":[1],\"581\":[1],\"582\":[null,1],\"583\":[null,2],\"584\":[null,10],\"585\":[null,1],\"586\":[null,5],\"587\":[null,2],\"588\":[null,30],\"589\":[1],\"590\":[null,1],\"591\":[null,15],\"592\":[null,8],\"593\":[null,7],\"594\":[null,1],\"595\":[null,17],\"596\":[null,27],\"597\":[null,62],\"598\":[1],\"599\":[null,1],\"600\":[null,1],\"601\":[null,5],\"602\":[null,1],\"603\":[null,7],\"604\":[null,6],\"605\":[null,54],\"606\":[1],\"607\":[null,1],\"608\":[null,12],\"609\":[null,6],\"610\":[null,1],\"611\":[null,6],\"612\":[null,6],\"613\":[null,38],\"614\":[1],\"615\":[null,1],\"616\":[null,9],\"617\":[null,1],\"618\":[null,14],\"619\":[null,51],\"620\":[1],\"621\":[null,1],\"622\":[null,10],\"623\":[null,9],\"624\":[null,4],\"625\":[null,15],\"626\":[null,1],\"627\":[null,16],\"628\":[null,9],\"629\":[null,72],\"630\":[1],\"631\":[null,1],\"632\":[null,15],\"633\":[null,1],\"634\":[null,5],\"635\":[null,29],\"636\":[null,94],\"637\":[1],\"638\":[2],\"639\":[null,1],\"640\":[null,6],\"641\":[null,1],\"642\":[1],\"643\":[null,1],\"644\":[null,6],\"645\":[null,6],\"646\":[null,1],\"647\":[null,2],\"648\":[null,12],\"649\":[null,5],\"650\":[null,53],\"651\":[1],\"652\":[null,1],\"653\":[null,5],\"654\":[null,1],\"655\":[null,4],\"656\":[null,45],\"657\":[1],\"658\":[null,1],\"659\":[null,5],\"660\":[null,1],\"661\":[null,2],\"662\":[null,9],\"663\":[null,5],\"664\":[null,39],\"665\":[1],\"666\":[null,1],\"667\":[null,7],\"668\":[null,3],\"669\":[null,1],\"670\":[1],\"671\":[1],\"672\":[null,1],\"673\":[null,3],\"674\":[null,13],\"675\":[null,11],\"676\":[null,1],\"677\":[null,2],\"678\":[null,2],\"679\":[null,39],\"680\":[1],\"681\":[null,1],\"682\":[null,1],\"683\":[null,1],\"684\":[null,4],\"685\":[null,44],\"686\":[3],\"687\":[null,1],\"688\":[null,1],\"689\":[null,4],\"690\":[null,1],\"691\":[null,2],\"692\":[null,24],\"693\":[1],\"694\":[null,1],\"695\":[null,4],\"696\":[null,4],\"697\":[null,4],\"698\":[null,1],\"699\":[2],\"700\":[null,1],\"701\":[null,1],\"702\":[null,1],\"703\":[null,4],\"704\":[null,15],\"705\":[null,14],\"706\":[null,34],\"707\":[1],\"708\":[null,1],\"709\":[null,10],\"710\":[null,9],\"711\":[null,9],\"712\":[null,1],\"713\":[null,12],\"714\":[null,29],\"715\":[1],\"716\":[null,1],\"717\":[null,6],\"718\":[null,1],\"719\":[1],\"720\":[null,1],\"721\":[null,1],\"722\":[null,1],\"723\":[null,11],\"724\":[null,7],\"725\":[null,4],\"726\":[null,6],\"727\":[null,24],\"728\":[1],\"729\":[null,1],\"730\":[null,1],\"731\":[null,1],\"732\":[null,5],\"733\":[null,17],\"734\":[null,29],\"735\":[1],\"736\":[null,1],\"737\":[null,12],\"738\":[null,1],\"739\":[1],\"740\":[null,1],\"741\":[null,3],\"742\":[null,1],\"743\":[null,8],\"744\":[null,10],\"745\":[null,24],\"746\":[1],\"747\":[null,1],\"748\":[null,7],\"749\":[null,1],\"750\":[null,8],\"751\":[null,2],\"752\":[null,39],\"753\":[1],\"754\":[null,1],\"755\":[null,9],\"756\":[null,1],\"757\":[null,6],\"758\":[null,24],\"759\":[null,3],\"760\":[null,47],\"761\":[1],\"762\":[null,1],\"763\":[null,1],\"764\":[null,1],\"765\":[1],\"766\":[1],\"767\":[null,1],\"768\":[2],\"769\":[1],\"770\":[null,1],\"771\":[null,3],\"772\":[null,7],\"773\":[null,2],\"774\":[null,2],\"775\":[null,1],\"776\":[null,2],\"777\":[null,7],\"778\":[null,8],\"779\":[null,4],\"780\":[null,2],\"781\":[null,1],\"782\":[null,3],\"783\":[null,2],\"784\":[null,9],\"785\":[null,2],\"786\":[null,1],\"787\":[null,3],\"788\":[null,4],\"789\":[null,4],\"790\":[null,3],\"791\":[null,6],\"792\":[null,2],\"793\":[null,3],\"794\":[null,1],\"795\":[null,2],\"796\":[null,1],\"797\":[null,2],\"798\":[null,2],\"799\":[null,2],\"800\":[3],\"801\":[null,6],\"802\":[null,3],\"803\":[null,4],\"804\":[null,9],\"805\":[null,11],\"806\":[1],\"807\":[2],\"808\":[null,7],\"809\":[1],\"810\":[null,49],\"811\":[null,2],\"812\":[null,6],\"813\":[null,2],\"814\":[null,7],\"815\":[null,2],\"816\":[null,5],\"817\":[null,10],\"818\":[null,3],\"819\":[null,3],\"820\":[null,3],\"821\":[null,7],\"822\":[null,4],\"823\":[null,1],\"824\":[null,2],\"825\":[1],\"826\":[null,3],\"827\":[null,1],\"828\":[null,2],\"829\":[1],\"830\":[null,1],\"831\":[null,4],\"832\":[null,2],\"833\":[null,5],\"834\":[null,3],\"835\":[null,5],\"836\":[null,2],\"837\":[2],\"838\":[2],\"839\":[1],\"840\":[null,3],\"841\":[null,4],\"842\":[null,3],\"843\":[null,4],\"844\":[null,3],\"845\":[null,3],\"846\":[null,8],\"847\":[null,6],\"848\":[null,8],\"849\":[null,6],\"850\":[null,8],\"851\":[null,6],\"852\":[null,9],\"853\":[null,7],\"854\":[null,7],\"855\":[null,7],\"856\":[null,8],\"857\":[null,6],\"858\":[null,8],\"859\":[null,5],\"860\":[null,8],\"861\":[null,4],\"862\":[null,4],\"863\":[null,6],\"864\":[null,6],\"865\":[null,7],\"866\":[null,7],\"867\":[null,6],\"868\":[null,6],\"869\":[null,7],\"870\":[null,7],\"871\":[null,5],\"872\":[null,6],\"873\":[null,6],\"874\":[null,6],\"875\":[null,4],\"876\":[null,4],\"877\":[null,7],\"878\":[null,6],\"879\":[null,5],\"880\":[null,6],\"881\":[null,5],\"882\":[null,5],\"883\":[null,6],\"884\":[null,5],\"885\":[null,5],\"886\":[null,5],\"887\":[null,4],\"888\":[null,5],\"889\":[null,4],\"890\":[null,11],\"891\":[null,7],\"892\":[null,9],\"893\":[null,8],\"894\":[null,3],\"895\":[1],\"896\":[null,5],\"897\":[null,12],\"898\":[null,2],\"899\":[null,9],\"900\":[null,4],\"901\":[null,2],\"902\":[null,4],\"903\":[null,3],\"904\":[null,8],\"905\":[null,3],\"906\":[null,3],\"907\":[null,8],\"908\":[null,4],\"909\":[null,8],\"910\":[null,8],\"911\":[null,4],\"912\":[null,8],\"913\":[null,5],\"914\":[null,4],\"915\":[null,4],\"916\":[null,4],\"917\":[null,3],\"918\":[null,5],\"919\":[null,7],\"920\":[null,7],\"921\":[null,5],\"922\":[null,2],\"923\":[null,2],\"924\":[null,2],\"925\":[null,5],\"926\":[null,5],\"927\":[null,5],\"928\":[null,6],\"929\":[null,4],\"930\":[null,5],\"931\":[null,10],\"932\":[null,4],\"933\":[null,5],\"934\":[null,6],\"935\":[null,9],\"936\":[null,4],\"937\":[null,5],\"938\":[null,4],\"939\":[null,4],\"940\":[null,6],\"941\":[null,6],\"942\":[3],\"943\":[null,6],\"944\":[null,6],\"945\":[null,9],\"946\":[null,8],\"947\":[null,12],\"948\":[null,12],\"949\":[null,9],\"950\":[3],\"951\":[null,7],\"952\":[null,7],\"953\":[null,7],\"954\":[2],\"955\":[null,4],\"956\":[null,4],\"957\":[null,6],\"958\":[null,3],\"959\":[null,12],\"960\":[null,13],\"961\":[null,14],\"962\":[3],\"963\":[null,4],\"964\":[null,6],\"965\":[null,4],\"966\":[null,4],\"967\":[null,5],\"968\":[null,13],\"969\":[null,15],\"970\":[null,5],\"971\":[null,4],\"972\":[null,4],\"973\":[1],\"974\":[3],\"975\":[null,7],\"976\":[null,7],\"977\":[null,11],\"978\":[null,9],\"979\":[null,15],\"980\":[null,4],\"981\":[null,6],\"982\":[3],\"983\":[null,4],\"984\":[null,5],\"985\":[null,10],\"986\":[3],\"987\":[null,9],\"988\":[null,10],\"989\":[null,7],\"990\":[null,7],\"991\":[null,9],\"992\":[null,7],\"993\":[null,6],\"994\":[null,6],\"995\":[null,6],\"996\":[null,6],\"997\":[null,8],\"998\":[null,8],\"999\":[null,6],\"1000\":[null,7],\"1001\":[null,10],\"1002\":[null,14],\"1003\":[null,7],\"1004\":[null,3],\"1005\":[null,3],\"1006\":[null,5],\"1007\":[null,5],\"1008\":[null,6],\"1009\":[null,6],\"1010\":[null,26],\"1011\":[null,19],\"1012\":[null,7],\"1013\":[null,4],\"1014\":[null,4],\"1015\":[null,4],\"1016\":[null,6],\"1017\":[null,5],\"1018\":[null,12],\"1019\":[null,5],\"1020\":[null,6],\"1021\":[null,2],\"1022\":[null,13],\"1023\":[null,14],\"1024\":[null,11],\"1025\":[null,14],\"1026\":[null,13],\"1027\":[null,4],\"1028\":[null,2],\"1029\":[null,8],\"1030\":[null,5],\"1031\":[null,10],\"1032\":[3],\"1033\":[null,6],\"1034\":[null,6],\"1035\":[null,3],\"1036\":[null,6],\"1037\":[null,6],\"1038\":[null,3],\"1039\":[null,10],\"1040\":[null,6],\"1041\":[null,10],\"1042\":[null,7],\"1043\":[null,6],\"1044\":[null,6],\"1045\":[null,7],\"1046\":[5],\"1047\":[null,6],\"1048\":[null,4],\"1049\":[null,3],\"1050\":[null,6],\"1051\":[null,3],\"1052\":[null,6],\"1053\":[null,9],\"1054\":[null,14],\"1055\":[2],\"1056\":[null,4],\"1057\":[null,5],\"1058\":[null,3],\"1059\":[null,3],\"1060\":[null,7],\"1061\":[null,4],\"1062\":[null,6],\"1063\":[null,6],\"1064\":[null,6],\"1065\":[null,6],\"1066\":[null,8],\"1067\":[2],\"1068\":[2],\"1069\":[null,4],\"1070\":[null,10],\"1071\":[null,7],\"1072\":[null,5],\"1073\":[null,12],\"1074\":[null,16],\"1075\":[2],\"1076\":[null,4],\"1077\":[null,9],\"1078\":[null,5],\"1079\":[null,6],\"1080\":[null,8],\"1081\":[null,5],\"1082\":[null,5],\"1083\":[null,6],\"1084\":[null,8],\"1085\":[null,5],\"1086\":[null,6],\"1087\":[null,3],\"1088\":[null,4],\"1089\":[null,3],\"1090\":[null,4],\"1091\":[null,4],\"1092\":[null,17],\"1093\":[2],\"1094\":[null,10],\"1095\":[null,5],\"1096\":[null,14],\"1097\":[null,7],\"1098\":[null,11],\"1099\":[null,7],\"1100\":[null,8],\"1101\":[null,8],\"1102\":[null,10],\"1103\":[1],\"1104\":[1]},\"averageFieldLength\":[1.2007056803882354,8.033049369837414],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"t\":\"网站框架\"},\"2\":{\"t\":\"vuepress-theme-hope\"},\"3\":{\"t\":\"框架 Markdown 增强说明\"},\"4\":{\"t\":\"iconfont 关键词精选图标\"},\"5\":{\"h\":\"本站开发命令记录\",\"a\":\"本站开发命令记录\"},\"6\":{\"t\":\"编写时开本地服务器实时查看修改效果：pnpm run docs:dev\"},\"7\":{\"t\":\"编译时报错参考 issue 中最后给出的解决链接，按指示更新即可\"},\"8\":{\"t\":\"发布：\"},\"9\":{\"t\":\"GitHub：用 Action + Pages 功能，在 push 之后自动编译并部署 \"},\"10\":{\"t\":\"记得给仓库的 workflow 添加写的权限\"},\"11\":{\"t\":\"仓库的 Pages 功能中网站基于的分支得改成 yml 中设定的部署分支\"},\"12\":{\"t\":\"服务器：先pnpm run docs:build在src/.vuepress/dist目录下生成静态网页文件，再部署到服务器上\"},\"13\":{\"h\":\"写作参考\"},\"14\":{\"h\":\"说明\",\"a\":\"说明\"},\"15\":{\"t\":\"此目录下的文章为写作语法参考\"},\"16\":{\"h\":\"图表\",\"a\":\"图表\"},\"17\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"18\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"19\":{\"t\":\"类型：info, note, tip, warning, danger, details\"},\"20\":{\"t\":\"正常使用时用:::标记开头与结尾，嵌套时用::::标记外层的\"},\"21\":{\"h\":\"对齐\",\"a\":\"对齐\"},\"22\":{\"t\":\"::: center, ::: right\"},\"23\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"24\":{\"h\":\"图片\",\"a\":\"图片\"},\"25\":{\"t\":\"图标描述\"},\"26\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"27\":{\"t\":\"可在.vuepress/config.ts中配置pagePatterns避免 MD 文件被渲染成页面\"},\"28\":{\"t\":\"// 启用的主题色 $theme-colors: #c0392b, #d35400, #f39c12, #27ae60, #16a085, #2980b9, #8e44ad, #2c3e50, #7f8c8d;\"},\"29\":{\"h\":\"边栏目录样例\"},\"30\":{\"t\":\"import { defineSidebarConfig } from \\\"vuepress-theme-hope\\\"; export const zhSidebarConfig = defineSidebarConfig({ \\\"/zh/\\\": [ \\\"\\\", { text: \\\"指南\\\", icon: \\\"creative\\\", prefix: \\\"guide/\\\", children: [ \\\"get-started/\\\", \\\"interface/\\\", \\\"layout/\\\", \\\"markdown/\\\", \\\"feature/\\\", \\\"blog/\\\", \\\"advanced/\\\", ], }, { text: \\\"配置\\\", icon: \\\"config\\\", prefix: \\\"config/\\\", children: [ \\\"intro\\\", \\\"i18n\\\", \\\"theme/\\\", \\\"plugins/\\\", \\\"frontmatter/\\\", \\\"style\\\", ], }, { text: \\\"教程\\\", icon: \\\"guide\\\", prefix: \\\"cookbook/\\\", children: [\\\"tutorial/\\\", \\\"markdown/\\\", \\\"vuepress/\\\", \\\"advanced/\\\"], }, { text: \\\"迁移\\\", icon: \\\"change\\\", prefix: \\\"migration/\\\", children: [\\\"config\\\", \\\"page\\\", \\\"style\\\"], }, { text: \\\"常见问题\\\", icon: \\\"question\\\", prefix: \\\"faq/\\\", children: [\\\"\\\", \\\"troubleshooting\\\", \\\"common-error\\\", \\\"vite\\\", \\\"safari\\\"], }, \\\"demo\\\", \\\"changelog\\\", \\\"contribution\\\", ], \\\"/zh/guide/\\\": [ { text: \\\"快速上手\\\", icon: \\\"creative\\\", prefix: \\\"get-started/\\\", collapsable: true, children: [\\\"intro\\\", \\\"install\\\", \\\"markdown\\\"], }, { text: \\\"界面\\\", icon: \\\"palette\\\", prefix: \\\"interface/\\\", collapsable: true, children: [ \\\"darkmode\\\", \\\"theme-color\\\", \\\"icon\\\", \\\"code-theme\\\", \\\"accessibility\\\", \\\"pure\\\", \\\"others\\\", ], }, { text: \\\"布局\\\", icon: \\\"layout\\\", prefix: \\\"layout/\\\", collapsable: true, children: [ \\\"navbar\\\", \\\"sidebar\\\", \\\"page\\\", \\\"breadcrumb\\\", \\\"footer\\\", \\\"home\\\", \\\"slides\\\", ], }, { text: \\\"Markdown 增强\\\", icon: \\\"markdown\\\", prefix: \\\"markdown/\\\", collapsable: true, children: [ \\\"intro\\\", \\\"container\\\", \\\"components\\\", \\\"code-group\\\", \\\"align\\\", \\\"sup-sub\\\", \\\"footnote\\\", \\\"mark\\\", \\\"tasklist\\\", \\\"tex\\\", \\\"flowchart\\\", \\\"mermaid\\\", \\\"demo\\\", \\\"presentation\\\", \\\"others\\\", \\\"external\\\", ], }, { text: \\\"功能\\\", icon: \\\"discover\\\", prefix: \\\"feature/\\\", collapsable: true, children: [ \\\"page-info\\\", \\\"comment\\\", \\\"copy-code\\\", \\\"photo-swipe\\\", \\\"meta\\\", \\\"search\\\", \\\"copyright\\\", \\\"encrypt\\\", ], }, { text: \\\"博客\\\", icon: \\\"blog\\\", prefix: \\\"blog/\\\", collapsable: true, children: [ \\\"intro\\\", \\\"blogger\\\", \\\"article\\\", \\\"category-and-tags\\\", \\\"timeline\\\", \\\"home\\\", ], }, { text: \\\"高级功能\\\", icon: \\\"advance\\\", prefix: \\\"advanced/\\\", collapsable: true, children: [\\\"pwa\\\", \\\"feed\\\", \\\"seo\\\", \\\"sitemap\\\"], }, ], \\\"/zh/config/\\\": [ \\\"intro\\\", \\\"i18n\\\", { text: \\\"主题配置\\\", icon: \\\"config\\\", prefix: \\\"theme/\\\", children: [\\\"\\\", \\\"basic\\\", \\\"feature\\\", \\\"layout\\\", \\\"apperance\\\"], }, { text: \\\"插件配置\\\", icon: \\\"plugin\\\", prefix: \\\"plugins/\\\", children: [ \\\"intro\\\", \\\"blog\\\", \\\"comment\\\", \\\"feed\\\", \\\"md-enhance\\\", \\\"pwa\\\", \\\"others\\\", ], }, { text: \\\"Frontmatter 配置\\\", icon: \\\"page\\\", prefix: \\\"frontmatter/\\\", children: [\\\"info\\\", \\\"layout\\\", \\\"plugins\\\"], }, \\\"style\\\", ], \\\"/zh/cookbook/\\\": [ { text: \\\"教程\\\", icon: \\\"guide\\\", prefix: \\\"tutorial/\\\", children: [ \\\"env\\\", \\\"create\\\", \\\"command\\\", \\\"content\\\", \\\"config\\\", \\\"structure\\\", \\\"deploy\\\", ], }, { text: \\\"Markdown\\\", icon: \\\"markdown\\\", prefix: \\\"markdown/\\\", collapsable: true, children: [ \\\"\\\", \\\"demo\\\", { text: \\\"Emoji\\\", icon: \\\"emoji\\\", link: \\\"emoji/\\\", prefix: \\\"emoji/\\\", collapsable: true, children: [\\\"people\\\", \\\"nature\\\", \\\"object\\\", \\\"place\\\", \\\"symbol\\\"], }, ], }, { text: \\\"VuePress\\\", icon: \\\"vue\\\", prefix: \\\"vuepress/\\\", collapsable: true, children: [\\\"\\\", \\\"file\\\", \\\"markdown\\\", \\\"config\\\", \\\"plugin\\\", \\\"theme\\\"], }, { text: \\\"高级\\\", icon: \\\"advance\\\", prefix: \\\"advanced/\\\", collapsable: true, children: [\\\"component\\\", \\\"style\\\", \\\"replace\\\", \\\"extend\\\"], }, ], }); \"},\"31\":{\"h\":\"幻灯片页\"},\"32\":{\"h\":\"测试\"},\"33\":{\"t\":\"test\"},\"34\":{\"h\":\"说明\"},\"35\":{\"h\":\"说明\",\"a\":\"说明\"},\"36\":{\"t\":\"此目录下的文章是一些随笔\"},\"37\":{\"h\":\"假随机数组词造句\"},\"38\":{\"h\":\"假随机数组词造句\",\"a\":\"假随机数组词造句\"},\"39\":{\"t\":\"在网上看到的，利用伪随机算法，通过设置特定的随机种子使生成的一系列特定数字，将数字对应的字符连起来可组成正常语义的词句。种子获取采用暴力搜索方法，一个一个数字试，看哪个数字生成的数字序列符合要求（自定义截止数字）\"},\"40\":{\"t\":\"首先要控制随机数生成的区间，越大的区间随机到想要的数字的概率越低，符合要求的种子越难找，甚至有可能不存在\"},\"41\":{\"t\":\"因为种子参数类型为long，故搜寻空间为Long.MIN_VALUE ~ Long.MAX_VALUE，再考虑到越短的数字看起来越简洁，故按照绝对值从小到大进行搜索\"},\"42\":{\"t\":\"若待生成的词句为纯英文小写，则可利用 ASCII 码进行映射（a ~ z <--> 97 ~ 123），再考虑截止数字与区间的连续性，可取为 96。若待生成的词句为汉字则得用 Unicode 编码映射，但由于字符区间过长，很有可能找不到特定种子，不予实现\"},\"43\":{\"t\":\"在进行稍长的查找时就会明显过长，后续可以考虑将区间分段用多线程分别同时查找\"},\"44\":{\"h\":\"图片隐写\"},\"45\":{\"t\":\"利用隐写技术，将对小熊的生日祝福嵌入图片中，图中为其出生之日的月相\"},\"46\":{\"t\":\"from blind_watermark import WaterMark def embed(): bwm1.read_img('moon.jpg') bwm1.read_wm(content, mode='str') bwm1.embed('embedded.jpg') return len(bwm1.wm_bit) def extract(): extract = bwm1.extract(filename='embedded.jpg', wm_shape=wm_len, mode='str') print(extract) if __name__ == '__main__': bwm1 = WaterMark(password_wm=1999, password_img=925) content = '月亮照回湖心，野鹤奔向闲云，我步入你、n\\\\t 熊宝生日快乐！！！' wm_len = embed() extract() \"},\"47\":{\"h\":\"日常小问题的解决\"},\"48\":{\"h\":\"歌单转移\",\"a\":\"歌单转移\"},\"49\":{\"t\":\"记录将网易云音乐或 QQ 音乐的歌单转移到 Apple Music 中的步骤\"},\"50\":{\"t\":\"以链接形式分享歌单，从链接中得到 ID \"},\"51\":{\"t\":\"如链接为 https://i.y.qq.com/n2/m/share/details/taoge.html?id=1736483147，则 ID 为 1736483147\"},\"52\":{\"t\":\"凭借 ID 在此 项目 的 网站 中将歌单转为文字形式\"},\"53\":{\"t\":\"在 TuneMyMusic 中将文字形式的歌单导入至 Apple Music 中 \"},\"54\":{\"t\":\"选择来源为从文本\"},\"55\":{\"t\":\"粘贴刚刚复制的内容到文本框中\"},\"56\":{\"t\":\"耐心等待歌单转换完成\"},\"57\":{\"t\":\"选择 Apple Music 作为目的地并开始迁移\"},\"58\":{\"t\":\"等待最终移动结果\"},\"59\":{\"t\":\"移动完成后可下载迁移失败的歌曲信息【网络原因下载 CSV 文件较慢】\"},\"60\":{\"h\":\"macOS\",\"a\":\"macos\"},\"61\":{\"t\":\"macOS 13 (Ventura) 内置的 OpenSSH 版本认为 RSA 默认采用的 SHA-1 算法已经不再安全，所以会阻止此类签名算法验证的登陆行为。这篇文章 建议采用目前性能最好且最安全的EdDSA算法。 \"},\"62\":{\"t\":\"生成密钥对：ssh-keygen -t ed25519 -C \\\"my_key_name\\\"\"},\"63\":{\"t\":\"查看密钥对指纹：ssh-keygen -lf my_key_name\"},\"64\":{\"h\":\"macOS + Latex\",\"a\":\"macos-latex\"},\"65\":{\"h\":\"Latex 源码与 PDF 之间相互跳转\",\"a\":\"latex-源码与-pdf-之间相互跳转\"},\"66\":{\"t\":\"在安装 LaTeX Workshop 插件且 PDF 在 VSCode 内置标签页浏览条件下：\"},\"67\":{\"t\":\"源码跳 PDF：option+command+j\"},\"68\":{\"t\":\"PDF 跳源码：command+单击\"},\"69\":{\"h\":\"格式化问题\",\"a\":\"格式化问题\"},\"70\":{\"t\":\"这是 VSCode + Latex 写作环境配置问题，.tex 文件无法通过 latexindent 格式化（LaTex Workshop 插件）\"},\"71\":{\"t\":\"Mac 自带 perl 和 cpan，还需要装有 CommandLineTools\"},\"72\":{\"t\":\"设置 perl 模块路径： \"},\"73\":{\"t\":\"终端执行 PERL_MM_OPT=\\\"INSTALL_BASE=$HOME/.perl5\\\" cpan local::lib\"},\"74\":{\"t\":\"在 .zshrc 中添加 eval \\\"$(perl -I$HOME/.perl5/lib/perl5 -Mlocal::lib=$HOME/.perl5)\\\" 并 source\"},\"75\":{\"t\":\"用 cpanm 安装 latexindent 依赖的包，终端执行： \"},\"76\":{\"t\":\"brew install cpanm\"},\"77\":{\"t\":\"cpanm --local-lib=~/.perl5 local::lib && eval $(perl -I ~/.perl5/lib/perl5/ -Mlocal::lib)\"},\"78\":{\"t\":\"sudo cpanm -l $HOME/.perl5 Log::Log4perl Log::Dispatch::File YAML::Tiny File::HomeDir Unicode::GCString\"},\"79\":{\"t\":\"-l 参数是为了将包指定安装在 perl 所设置的模块路径中，如此 perl 才能使用这些模块；若缺少此参数，则 cpanm 会将模块安装在新建的 $HOME/perl5 路径中\"},\"80\":{\"t\":\"安装时会夹杂 ! Finding XXX on cpanmetadb failed. 提示，这种不用管，只需确认最终提示模块安装成功即可\"},\"81\":{\"h\":\"找不到 STHeiti\",\"a\":\"找不到-stheiti\"},\"82\":{\"t\":\"STHeiti实际上就是华文黑体，但 macOS 上自带的字体文件缺少能被 Latex 所选用的字体宏包所识别的特定样式，故得在网上下载STHeiti.ttf文件再次安装。安装会提示已存在一种样式，选择保留两者即可。\"},\"83\":{\"h\":\"Apache2 服务器\",\"a\":\"apache2-服务器\"},\"84\":{\"t\":\"【参考教程】\"},\"85\":{\"t\":\"【配置 HTTPS 访问教程】\"},\"86\":{\"t\":\"操作服务器 \"},\"87\":{\"t\":\"sudo apachectl -k start\"},\"88\":{\"t\":\"sudo apachectl -k restart\"},\"89\":{\"t\":\"sudo apachectl -k stop\"},\"90\":{\"t\":\"主要配置文件【目录：/etc/apache2/httpd.conf】 \"},\"91\":{\"t\":\"DocumentRoot: /Library/WebServer/Documents\"},\"92\":{\"t\":\"文件根目录，修改时需同时变动两行\"},\"93\":{\"t\":\"这是默认路径，虚拟主机会将其覆盖\"},\"94\":{\"t\":\"ServerName: 127.0.0.1:80\"},\"95\":{\"t\":\"主机域名设置\"},\"96\":{\"t\":\"有时使用 Zerotier 虚拟内网访问时 80 端口不可用，在 Listen 周围添加新的侦听端口 Listen 9999\"},\"97\":{\"t\":\"启用虚拟目录功能：将 #Include /private/etc/apache2/extra/httpd-vhosts.conf 取消注释，再配置虚拟主机配置文件\"},\"98\":{\"t\":\"文件最后配置允许使用 PHP \"},\"99\":{\"t\":\"由于 PHP 是自己用 brew 装的，所以一开始会有签名问题，搜一下报错信息就能找到教程解决\"},\"100\":{\"t\":\"虚拟主机配置文件【目录：/etc/apache2/extra/httpd-vhosts.conf】 \"},\"101\":{\"t\":\"DocumentRoot: /Library/WebServer/Sites\"},\"102\":{\"t\":\"覆盖了 http.conf 中的文件根目录\"},\"103\":{\"t\":\"修改时记得同时改两行\"},\"104\":{\"h\":\"Linux 相关\",\"a\":\"linux-相关\"},\"105\":{\"t\":\"sudo 执行时会自动重置系统变量【如环境路径等变量】，所以 sudo python 跟 python 用的很可能不是同一个解释器\"},\"106\":{\"t\":\"wget下载举例：wget -c http://download.cs.stanford.edu/orion/partnet_dataset/sem_seg_h5.zip -e use_proxy=yes -e http_proxy=192.168.0.107:20172\"},\"107\":{\"t\":\"添加-c参数以实现断点续传\"},\"108\":{\"t\":\"-e use_proxy=yes -e http_proxy=$proxy_ip$用来指定网络代理\"},\"109\":{\"h\":\"OpenCV + OpenCV_contrib 编译\",\"a\":\"opencv-opencv-contrib-编译\"},\"110\":{\"t\":\"主要问题是实际编译后某些 contrib 的扩展库文件需要手动拷贝到安装路径中去，否则使用时无法导入\"},\"111\":{\"t\":\"参考博客 1\"},\"112\":{\"t\":\"参考博客 2\"},\"113\":{\"t\":\"问题解决博客\"},\"114\":{\"h\":\"网络连接问题\",\"a\":\"网络连接问题\"},\"115\":{\"t\":\"教研室用 Zerotier 组的虚拟内网，但用移动的垃圾宽带会连不上，可能有几种问题：\"},\"116\":{\"t\":\"学校宿舍校园移动宽带连不上，因为移动劫持了，在系统设置里换个 DNS 服务器即可解决，用前先测速，一般用阿里云的223.6.6.6，也不必费心设啥国外的 DNS，因为虽然国内所有 DNS 都有域名审查与拦截，但即使设成国外 DNS 也能拦下来再回个假的，详见此 论文。\"},\"117\":{\"t\":\"老家也是移动宽带连不上，师弟给我科普，是因为移动是个大内网，下属一个片区用一个公网 IP，入户宽带仅是内网地址，路由器是二阶内网，其下的子网才是主机，再加上教研室也是移动网，于是俩主机之间经过了无数层，并且移动会屏蔽端口，导致俩主机之间无法通信。现状是移动光猫 H2-3 搭配 TP-LINK 路由器，采用光猫软路由搭配路由器自动获取地址方式上网，解决方案就是利用 DMZ 把主机暴露出去，但实测保持软路由并直接在光猫上启用 DMZ 并不可行，所以只能采用光猫桥接搭配路由器拨号上网的方式，步骤如下： \"},\"118\":{\"t\":\"先利用超级管理帐密登陆光猫管理界面，关闭 QOS，开 UPNP，开 DMZ 并将 DMZ 指向本机，最后将上网模式由软路由改为桥接，重启光猫。 \"},\"119\":{\"t\":\"改桥接之前先记录软路由方式中的宽带帐密（检查密码框元素把 type=\\\"password\\\"中的 password 删掉会车即可看到密码）\"},\"120\":{\"t\":\"上述开关并不在同一处，需要到处找\"},\"121\":{\"t\":\"登陆路由器管理界面，将上网方式改为宽带拨号上网并填入宽带帐密，等待连接成功\"},\"122\":{\"t\":\"在路由器的 DMZ 主机应用中开启 DMZ 并指向本机 IP（可以顺便绑定下 IP 和 MAC）\"},\"123\":{\"h\":\"回溯\"},\"124\":{\"h\":\"不同的二叉搜索树 II\",\"a\":\"不同的二叉搜索树-ii\"},\"125\":{\"t\":\"Description\"},\"126\":{\"t\":\"给定整数n，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\"},\"127\":{\"t\":\"Solution\"},\"128\":{\"t\":\"不同的二叉搜索树 只是要求统计不同搜索树的数量，但此题需要将所有树实际构造出来，故得用回溯方式。\"},\"129\":{\"t\":\"回溯时按照遍历根节点递归分左右子树的思路依旧：对于节点序列 1,⋯,n ，可以遍历取特定数 i 作为根节点，则左右子树节点序列为 1,⋯,(i−1) 和 (i+1),⋯,n ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。\"},\"130\":{\"t\":\"对于我来说此题较难的地方在于构建回溯的代码形式，回溯函数的返回值不应是一般的单个节点，而应是各子树的根节点列表，因为左右子树的笛卡尔积会导致即使单个值作为根节点，因为左右子树的结构不同，也常会实际构造多棵树。\"},\"131\":{\"t\":\"由于回溯函数返回的是以某范围的值为根节点的所有种类的搜索树，故对于上一层来说，只需要模拟笛卡尔积的运算即可，也就是说对于特定的值，以其为根节点的所有种类的搜索树的构造就是，每次从返回的左右子搜索树列表中挑选一对有别于之前的，拼成一颗新搜索树再加到本级回溯函数的返回列表中即可\"},\"132\":{\"t\":\"class Solution { public List<TreeNode> generateTrees(int n) { if (n == 0) return new ArrayList<>(); return build(1, n); } private List<TreeNode> build(int left, int right) { List<TreeNode> allTrees = new ArrayList<>(); if (left > right) { allTrees.add(null); return allTrees; } for (int i = left; i <= right; ++i) { List<TreeNode> leftTrees = build(left, i - 1); List<TreeNode> rightTrees = build(i + 1, right); for (TreeNode leftNode : leftTrees) { for (TreeNode rightNode : rightTrees) { TreeNode node = new TreeNode(i); node.left = leftNode; node.right = rightNode; allTrees.add(node); } } } return allTrees; } } \"},\"133\":{\"h\":\"组合总和 II\",\"a\":\"组合总和-ii\"},\"134\":{\"t\":\"Description\"},\"135\":{\"t\":\"给定目标值和含重复数字的数组，找出数组中所有和为目标值的不同子集。数组中的每个数字在每个子集中只能使用一次，但重复数字可以一起使用\"},\"136\":{\"t\":\"Solution\"},\"137\":{\"t\":\"此题与基础的同一集合中求不同组合所不同的是可以含重复数字，因为不同的重复数字在回溯时不算同一个，但在最后求得组合结果时显然会因为数值相同算作重复，所以考虑先排序数组，将重复的数字并在一起在相邻的层进行连续处理。\"},\"138\":{\"t\":\"鉴于重复的组合是因为同层遍历时用了个体不同但数值相同的数，所以具体实现的时候只需要在同层遍历时进行判断，限定相同的数只能在最开始的时候用一次即可。并且由于下一层不关注起始索引之前的路径，所以也并不会影响到寻找需要同时用到多个重复数的子集\"},\"139\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private LinkedList<Integer> path = new LinkedList<>(); public List<List<Integer>> combinationSum2(int[] candidates, int target) { Arrays.sort(candidates); dfs(candidates, target, 0); return res; } private void dfs(int[] candidates, int target, int start) { if (target == 0) { res.add(new ArrayList<>(path)); return; } for (int i = start; i < candidates.length; ++i) { if (i > start && candidates[i] == candidates[i - 1]) continue; if (target < candidates[i]) break; path.add(candidates[i]); dfs(candidates, target - candidates[i], i + 1); path.removeLast(); } } } \"},\"140\":{\"h\":\"递增子序列\",\"a\":\"递增子序列\"},\"141\":{\"t\":\"Description\"},\"142\":{\"t\":\"Solution\"},\"143\":{\"t\":\"乍一看能套用 组合总和 II 的模版，但由于此题求递增子序列要求元素相对位置不能变，所以无法通过排序将重复数字并到一块，即使通过改变同层遍历的重复判定条件为if (i > start && (nums[i] == nums[i - 1] || nums[i] == nums[start]))也只能滤掉起始索引为首个重复值的分块连续重复值情况（如1, 2, 3, 1, 1）。而对于分块连续重复值的起始索引不是重复值的情况，若想完全去除同层重复，则需要确保当前遍历到的值与之前所有值都不同，因为路径也无法提供同层的帮助，故做到这点势必会导致增加额外的开销，要么每次遍历查找费时，要么用哈希表费空间（其实也能接受），所以此题再强行套用上述模版已不再是最优方案。\"},\"144\":{\"t\":\"所以引入另一套更为通用的模版思想，即一层仅考虑当前位置数字的选择与否，若不选则直接进入下一层递归，若选则按回溯规则在下一层递归前后进行处理和反处理。对于此题，递增子序列的合法性由仅把不小于路径末尾的值加入来保证，而导致重复序列的原因是原数组中可能存在不连续分布的重复值，鉴于选取的子序列也不一定在原数组中连续，故以上一个选取的数（路径末尾值）作为前一个数，与当前数进行选取与否的考虑。具体来说，导致重复的原因是选了前一个数没选当前数和没选前一个数选了当前数这两种情况实质上等效，所以需要加上限制条件禁止其中一种。鉴于存在连续多个重复值的情况，令限制条件为仅当前一个数与当前数不同时才考虑不选当前数（若相同则必选当前数，因为前一个数可能因为其再前一个数不同而没选）。因为此思路是一路做选择直到数据末尾，会自然涵盖所有情况，所以递归终止条件为递归到达数据末尾\"},\"145\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private List<Integer> path = new ArrayList<>(); private int[] nums; public List<List<Integer>> findSubsequences(int[] nums) { this.nums = nums; dfs(0, Integer.MIN_VALUE); return res; } private void dfs(int cur, int last) { if (cur == nums.length) { if (path.size() > 1) res.add(new ArrayList<>(path)); return; } if (last <= nums[cur]) { // choose path.add(nums[cur]); dfs(cur + 1, nums[cur]); path.remove(path.size() - 1); } if (last != nums[cur]) // not choose dfs(cur + 1, last); } } \"},\"146\":{\"h\":\"剑指 Offer 38. 字符串的排列\",\"a\":\"剑指-offer-38-字符串的排列\"},\"147\":{\"t\":\"Description\"},\"148\":{\"t\":\"求给定含重复字符的字符串所有字符的所有排列\"},\"149\":{\"t\":\"Solution\"},\"150\":{\"t\":\"类比之前 组合总和 II 中求组合的回溯模版，此题是求所有排列而非所有组合，即每个位置都是从本次排列所有还未使用的字符中挑选一个，所以在每层回溯函数中待选的字符并不需要从某个起始索引开始，而是从头开始选一个未使用的，所以需要标记数组来记录本次排列哪些字符已经用过。此外还有不同的重复字符多次排列的结果重复问题，因为原始集合中含重复值，故参考组合的处理方式，先将字符按字典序排序以把相同字符并到一起，在同层遍历时保证对于多个重复的字符，只会用还未使用的部分中最左边的那个\"},\"151\":{\"t\":\"class Solution { private List<String> res = new ArrayList<>(); private StringBuilder path = new StringBuilder(); private boolean[] used; public String[] permutation(String s) { used = new boolean[s.length()]; char[] str = s.toCharArray(); Arrays.sort(str); dfs(str); String[] result = new String[res.size()]; for (int i = 0; i < res.size(); ++i) result[i] = res.get(i); return result; } private void dfs(char[] str) { if (path.length() == str.length) { res.add(path.toString()); return; } for (int i = 0; i < str.length; ++i) { if (used[i] || (i > 0 && str[i - 1] == str[i] && !used[i - 1])) continue; used[i] = true; path.append(str[i]); dfs(str); path.deleteCharAt(path.length() - 1); used[i] = false; } } } \"},\"152\":{\"h\":\"全排列\",\"a\":\"全排列\"},\"153\":{\"t\":\"Description\"},\"154\":{\"t\":\"求给定不含重复元素的数组的全排列\"},\"155\":{\"t\":\"Solution\"},\"156\":{\"t\":\"此题不含重复元素，比含重复元素的要少排序和回溯判重步骤，用全排列的回溯模版也挺容易解，但还有另一种不需要标记数组的回溯解法。\"},\"157\":{\"t\":\"在回溯全过程中维护动态变化的数组，该数组被一个标记索引分为两部分，左边为已经填入的元素，右边为待填入的元素，其本身所指为当前待填的位置。在选择元素加入全排列时，每次都从右边选一个，将标记索引指向的数与选中的数互换，如此来保证进入下一层时标记索引左侧的数都是已选择的，等回溯时再换回来撤销处理。\"},\"158\":{\"t\":\"具体来说，标记索引初始时在最左边，每向下一层就向右移动一位；而在同一层中，另起一个索引变量用来遍历标记索引右侧所有元素，遍历过程中将标记索引与当前元素换位置，然后进入下一层，回溯时再换回来。当标记索引移动到最右边时就达成了一种全排列，将当前排列复制一份加入到答案中\"},\"159\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private List<Integer> dynamic = new ArrayList<>(); public List<List<Integer>> permute(int[] nums) { for (int num : nums) dynamic.add(num); backtrack(nums, 0); return res; } private void backtrack(int[] nums, int div) { if (div == nums.length) res.add(new ArrayList<>(dynamic)); for (int i = div; i < nums.length; ++i) { Collections.swap(dynamic, i, div); backtrack(nums, div + 1); Collections.swap(dynamic, i, div); } } } \"},\"160\":{\"h\":\"N 皇后\",\"a\":\"n-皇后\"},\"161\":{\"t\":\"Description\"},\"162\":{\"t\":\"将n个皇后放入n*n的棋盘中，要求一行、一列、一条斜线内都只能存在一个皇后\"},\"163\":{\"t\":\"Solution\"},\"164\":{\"t\":\"标准的回溯搜索题，就是一个一个格子往后试验，放置成功的话就进入下一层继续搜索，但此题有几个针对性的小技巧和几个需要注意的点。\"},\"165\":{\"t\":\"每个到一个格子都需要进行放置的合法性检查，若每次都进行行、列和两种方向斜线（斜杠和反斜杠两种方向）的遍历查找肯定很慢，由题目条件可知每行、每列、每条斜线有且仅有一个皇后，所以应当存储并维护每行、每列、每条斜线的放置状态，这样对于每个格子都可快速判断能否放置，从而在大量的搜索中节约大量时间。\"},\"166\":{\"t\":\"行和列很容易解决状态记录的编号问题，但两种方向的斜线就稍显麻烦。只需要把每行每列的索引写标出来再画出斜线，就会意识到很像坐标系中的一次函数，实际上，斜杠方向同一斜线上所有格子行和列相加为相同值，反斜杠方向同一斜线上所有格子行和列相减为相同值。所以我们可以将两种方向的斜线分开编号，以上述的特定值来区分各斜线。\"},\"167\":{\"t\":\"对于各皇后具体放置位置的记录，实际上可以仅用一维数组存储（第i行的皇后在第queens[i]列），并且这样记录也恰好契合每层搜索基于行的形式，即同层仅进行列的遍历以寻找能放置的格子而不同层搜索不同行\"},\"168\":{\"t\":\"class Solution { private List<List<String>> result = new ArrayList<>(); private int[] queens; // column of each row private boolean[] col; // column has queen? private boolean[] diag1; // diag-1 has queen? private boolean[] diag2; // diag-2 has queen? public List<List<String>> solveNQueens(int n) { queens = new int[n]; col = new boolean[n]; diag1 = new boolean[2 * n - 1]; diag2 = new boolean[2 * n - 1]; backtrack(0, n); return result; } private void backtrack(int row, int n) { if (row == n) { result.add(getBoard(n)); return; } for (int c = 0; c < n; ++c) { int d1 = row - c + n - 1; int d2 = row + c; if (col[c] || diag1[d1] || diag2[d2]) continue; col[c] = true; diag1[d1] = true; diag2[d2] = true; queens[row] = c; backtrack(row + 1, n); col[c] = false; diag1[d1] = false; diag2[d2] = false; } } private List<String> getBoard(int n) { List<String> res = new ArrayList<>(); char[] row = new char[n]; for (int i = 0; i < n; ++i) row[i] = '.'; for (int i = 0; i < n; ++i) { row[queens[i]] = 'Q'; res.add(String.valueOf(row)); row[queens[i]] = '.'; } return res; } } \"},\"169\":{\"h\":\"解数独\",\"a\":\"解数独\"},\"170\":{\"t\":\"Description\"},\"171\":{\"t\":\"解9*9数独，要求每行、每列、每宫（3*3格子组成）都含数字1~9且无重复\"},\"172\":{\"t\":\"Solution\"},\"173\":{\"t\":\"标准的回溯搜索题，但有几个点。\"},\"174\":{\"t\":\"回溯需要对大量的格子反复进行某数能否放置的检查，临时遍历每行、每列、每宫会耗费大量时间，故应存储并维护每行、每列、每宫内各数字是否已存在的状态以便快速查询，例如row[i][k]标识第i行中是否已存在数字k，squ[i][j][k]标识第i行的第j列个宫内是否已存在数字k。\"},\"175\":{\"t\":\"可以在初始因维护上述状态而进行格子遍历时顺便将待填充的格子的位置记下来，以便后续能只对这些位置进行快速搜索而无需遍历其他已填充格子。还可以添加全局类型的是否完成标志，用于在完成全部填充之后快速结束程序\"},\"176\":{\"t\":\"class Solution { // 记录某行/列/宫是否已存在某数 private boolean[][] row = new boolean[9][9]; private boolean[][] col = new boolean[9][9]; private boolean[][][] squ = new boolean[3][3][9]; // 记录需填充坐标，节省遍历时间 private List<int[]> empty = new ArrayList<>(); private boolean finished = false;// 用于剪枝 public void solveSudoku(char[][] board) { for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (board[i][j] == '.') empty.add(new int[] { i, j }); else { int idx = board[i][j] - '0' - 1; row[i][idx] = col[j][idx] = true; squ[i / 3][j / 3][idx] = true; } } } dfs(board, 0); } private void dfs(char[][] board, int idx) { if (idx == empty.size()) { finished = true; return; } int r = empty.get(idx)[0]; int c = empty.get(idx)[1]; for (int i = 0; !finished && i < 9; ++i) { if (!row[r][i] && !col[c][i] && !squ[r / 3][c / 3][i]) { board[r][c] = (char) (i + '0' + 1); row[r][i] = col[c][i] = squ[r / 3][c / 3][i] = true; dfs(board, idx + 1); row[r][i] = col[c][i] = squ[r / 3][c / 3][i] = false; } } } } \"},\"177\":{\"h\":\"重新安排行程\",\"a\":\"重新安排行程\"},\"178\":{\"t\":\"Description\"},\"179\":{\"t\":\"给定一组起点-终点对tickets，其中tickets[i] = [from, to]表示该段的起点和终点，在必须将每段行程都完成一遍且仅可完成一遍的条件下，规划出依次经过的点，求字典序最小的规划。要求规划的起始点必须是点\\\"JFK\\\"。给定数据保证至少存在一种合理规划\"},\"180\":{\"t\":\"Solution\"},\"181\":{\"t\":\"看题干是一道图论题，给出的条件构成一个连通有向图，且最多只存在一个节点的出度为零，题目要求的规划实际上是求该图的欧拉路径【从某节点出发沿有向边方向不重复地遍历图中所有的边】，并且求的是路径沿途节点名字典序最小的那条。\"},\"182\":{\"t\":\"我们在搜索之前，可以将给定数据整理成拓扑排序那般的哈希表，以节点为键以其所有下游节点列表为值，考虑到题目要求字典序，那么向下游搜索的时候肯定优先选字典序小，故下游节点可用优先队列存储，每次出队的就是剩余下游节点中字典序最小的。其实用优先队列的话还要考虑向下搜索发现此路不通时回溯的操作，是否需要将出队的元素再添加回来，如果需要像普通回溯那样添加回来，那下次搜索出队的依旧是该节点，导致其他下游节点永不被进入搜索而死循环，所以加下来从整体考虑是否会有这个问题。\"},\"183\":{\"t\":\"对于有向图的 DFS 来说，如果搜到了无下游节点的节点就会进行回溯。在本题条件下，从给定的起点开始按字典序优先进行 DFS，若不存在出度为零的节点则可以顺畅地按照字典序优先完成 DFS 得到规划，重点考虑存在导致搜索进入死胡同的节点，该点必须为规划的终点，即使此条件下路径的字典序不是最小的。在存在此类点的前提下，也分两种情况，一是按照字典序优先该点恰好排在最后，皆大欢喜，所以实际需要考虑的只有该点出现在搜索中间某处的情况。\"},\"184\":{\"t\":\"仔细思考死胡同节点在 DFS 中间的过程，可以发现依次为向下深入到死胡同节点、回溯到有其他下游节点的节点、深入其他下游节点完成其他所有边的遍历这几个阶段，所以解决问题的关键其实将节点添加入规划的时机，不是在向下深入时而是在回溯时添加。在回溯时添加的话，可以发现顺序是死胡同节点向上到有其他下游节点的节点、其他能正常完成搜索的节点的逆序回溯，所以整个规划中节点添加的顺序恰好为字典序的逆序，最后只需将规划逆序即可，并且也不存在需要像普通回溯那般撤销处理的操作，也就不存在之前讨论的问题了\"},\"185\":{\"t\":\"例如tickets = [[\\\"JFK\\\", \\\"NRT\\\"], [\\\"JFK\\\", \\\"KUL\\\"], [\\\"NRT\\\", \\\"JFK\\\"]]，按照字典序 DFS 时就会先进入\\\"KUL\\\"这个死胡同节点，但是按照回溯时添加的解法，实际获得逆序规划的过程就是：\"},\"186\":{\"t\":\"JFK -> KUL\"},\"187\":{\"t\":\"path.add(KUL)\"},\"188\":{\"t\":\"KUL return JFK\"},\"189\":{\"t\":\"JFK -> NRT\"},\"190\":{\"t\":\"NRT -> JFK\"},\"191\":{\"t\":\"path.add(JFK)\"},\"192\":{\"t\":\"JFK return NRT\"},\"193\":{\"t\":\"path.add(NRT)\"},\"194\":{\"t\":\"NRT return JFK\"},\"195\":{\"t\":\"path.add(JFK)\"},\"196\":{\"t\":\"class Solution { private Map<String, PriorityQueue<String>> aim = new HashMap<>(); private List<String> res = new ArrayList<>(); public List<String> findItinerary(List<List<String>> tickets) { for (List<String> t : tickets) { PriorityQueue<String> to = aim.computeIfAbsent(t.get(0), x -> new PriorityQueue<>()); to.add(t.get(1)); } dfs(\\\"JFK\\\"); Collections.reverse(res); return res; } private void dfs(String cur) { PriorityQueue<String> to = aim.get(cur); if (to != null) while (!to.isEmpty()) dfs(to.poll()); res.add(cur); } } \"},\"197\":{\"h\":\"动态规划\"},\"198\":{\"h\":\"基本类型\",\"a\":\"基本类型\"},\"199\":{\"h\":\"不同的二叉搜索树\",\"a\":\"不同的二叉搜索树\"},\"200\":{\"t\":\"Description\"},\"201\":{\"t\":\"给定整数n，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\"},\"202\":{\"t\":\"Solution\"},\"203\":{\"t\":\"对于节点序列 1,⋯,n ，可以遍历取特定数 i 作为根节点，则左右子树节点序列为 1,⋯,(i−1) 和 (i+1),⋯,n ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。由于原问题可以分解为俩规模较小的子问题，且子问题的解可复用，故考虑用动态规划求解，定义：\"},\"204\":{\"t\":\"G(n) 代表序列长度为 n 的不同搜索树数量\"},\"205\":{\"t\":\"F(i,n) 代表以 i 为根节点且长度为 n 的不同搜索树数量\"},\"206\":{\"t\":\"显然有 G(n)=i=1∑n​F(i,n) ，且边界条件 G(0)=G(1)=1 。而对于以 i 为根节点的搜索树来说，其不同子树结构数量为左右子树节点集合的笛卡尔积，即 F(i,n)=G(i−1)⋅G(n−i) ，故最终得到 G(n)=i=1∑n​G(i−1)⋅G(n−i) ，计算答案时只需从小到大计算 G(n) 即可\"},\"207\":{\"t\":\"实际上上述推导的函数为卡塔兰数 Cn​，其简便计算的定义为 Cn+1​=n+22(2n+1)​Cn​,C0​=1\"},\"208\":{\"t\":\"class Solution { public int numTrees(int n) { int[] res = new int[n + 1]; res[0] = res[1] = 1; for (int k = 2; k <= n; ++k) for (int i = 1; i <= k; ++i) res[k] += res[i - 1] * res[k - i]; return res[n]; } } \"},\"209\":{\"h\":\"打家劫舍 II\",\"a\":\"打家劫舍-ii\"},\"210\":{\"t\":\"Description\"},\"211\":{\"t\":\"给定代表每个房屋存放金额的非负整数数组，房屋首尾相连成环，在每间房仅可偷一次且不偷相连的房屋前提下，求能够偷窃到的最高金额\"},\"212\":{\"t\":\"Solution\"},\"213\":{\"t\":\"因为成环且不能抢相邻的，所以抢第一间和最后一间就不能都抢，实际上可以拆成俩子问题，即在[0, n-2]和[1, n-1]范围内分别计算抢的最大金额，再取较大者作为最终答案。\"},\"214\":{\"t\":\"对于单个子问题，就是经典的范围动态规划，令dp[i]为遍历到i时获得的最大金额（不管抢不抢i），则有dp[i] = max(dp[i-1], dp[i-2]+nums[i])，即取抢和不抢的较大者。但这涉及到前俩的初始化值，即使将 dp 数组降维压缩也稍显麻烦。\"},\"215\":{\"t\":\"较简单的形式是仅基于上一间房屋的俩状态来思考抢还是不抢当前房屋，先将抢的最大收益算出来存着，再基于上一房屋的状态更新不抢的最大收益，最后用缓存更新抢的收益。如此遍历到最后一间，最大收益即为抢和不抢俩状态的较大者，代码如下\"},\"216\":{\"t\":\"class Solution { public int rob(int[] nums) { if (nums.length == 1) return nums[0]; return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1)); } private int rob(int[] nums, int left, int right) { int rob = 0; // maximum money can get if rob current house int unrob = 0; // maximum money can get if unrob current house for (int i = left; i <= right; ++i) { int curRob = unrob + nums[i]; // rob current house, means unrob previous one unrob = Math.max(unrob, rob); // unrob current house, take maximum of rob and unrob previous one rob = curRob; } return Math.max(rob, unrob); } } \"},\"217\":{\"h\":\"打家劫舍 III\",\"a\":\"打家劫舍-iii\"},\"218\":{\"t\":\"Description\"},\"219\":{\"t\":\"给定代表每个房屋存放金额的非负节点值二叉树，从根节点开始往下抢，在每间房仅可偷一次且不偷直接相连的房屋前提下，求能够偷窃到的最高金额\"},\"220\":{\"t\":\"Solution\"},\"221\":{\"t\":\"对于树自然想到 DFS 自底向上返回遍历，可令 DFS 函数返回值为含俩元素的数组，元素分别代表以当前节点为根的树，抢与不抢根节点的最大收益。对于函数内部返回值的计算：\"},\"222\":{\"t\":\"抢当前节点，则不可抢其左右子节点，最大收益为当前节点值、不抢左子节点作为根节点的最大收益、不抢右子节点作为根节点的最大收益这三者之和\"},\"223\":{\"t\":\"不抢当前节点，则子节点抢不抢都行，最大收益为以左子节点为根节点的最大收益与以右子节点为根节点的最大收益这二者之和\"},\"224\":{\"t\":\"class Solution { public int rob(TreeNode root) { int[] res = dfs(root); return Math.max(res[0], res[1]); } private int[] dfs(TreeNode node) { if (node == null) return new int[2]; int[] left = dfs(node.left); int[] right = dfs(node.right); int rob = node.val + left[1] + right[1]; int unrob = Math.max(left[0], left[1]) + Math.max(right[0], right[1]); return new int[] { rob, unrob }; } } \"},\"225\":{\"h\":\"整数拆分\",\"a\":\"整数拆分\"},\"226\":{\"t\":\"Description\"},\"227\":{\"t\":\"给定一个大于 1 的正整数，将其拆分为两个及以上正整数之和，求拆分出的正整数之积的最大值\"},\"228\":{\"t\":\"Solution\"},\"229\":{\"t\":\"给定正整数拆为俩数之和，可以打住直接求俩数之积，也可将俩数继续往下拆分。因正整数对应的最大乘积取决于比其小的正整数对应的最大乘积，故用动态规划来做，令dp[i]表示将正整数i拆分成至少两个正整数的和所对应的最大乘积，0 和 1 都不可拆，故初始条件dp[0] = dp[1] = 0。当i > 1时，设其拆成j和i-j，其中1 <= j < i：\"},\"230\":{\"t\":\"若i-j继续拆分，则dp[i] = j*dp[i-j]\"},\"231\":{\"t\":\"若i-j打住不继续拆，则dp[i] = j*(i-j)\"},\"232\":{\"t\":\"故此种拆分情况下有dp[i] = max⁡(j*(i−j), j*dp[i−j])，所以对于i的拆分的最大乘积为遍历所有j的最大值，最终答案为dp[n]。\"},\"233\":{\"t\":\"此题有利用数学证明的极简算法，详见官方题解\"},\"234\":{\"t\":\"class Solution { public int integerBreak(int n) { int[] dp = new int[n + 1]; for (int i = 2; i <= n; i++) for (int j = 1; j < i; j++) dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j])); return dp[n]; } } \"},\"235\":{\"h\":\"最长递增子序列\",\"a\":\"最长递增子序列\"},\"236\":{\"t\":\"Description\"},\"237\":{\"t\":\"求给定整数数组中最长严格递增子序列（可以不连续）的长度\"},\"238\":{\"t\":\"Solution\"},\"239\":{\"h\":\"环形子数组的最大和\",\"a\":\"环形子数组的最大和\"},\"240\":{\"t\":\"Description\"},\"241\":{\"t\":\"求给定环形整数数组的最大子数组和\"},\"242\":{\"t\":\"Solution\"},\"243\":{\"t\":\"很容易联想到普通数组求 最大子数组和 的题目，所以自然需要考虑分割问题进行套用。整个数组的总和固定，当将环分割为两个子数组后，若一个子数组的和恰为最大，那另一子数组的和自然为最小。回到环形数组中，实际上也就只有两种情况：\"},\"244\":{\"t\":\"最大和子数组不跨越原数组首尾，这就退化为普通数组求最大子数组和\"},\"245\":{\"t\":\"最大和子数组跨越原数组首尾，这种情况则说明与之相对的最小和子数组不跨越原数组首尾，即变成求普通数组的最小子数组和的问题，最后用原数组总和减去最小和即为最大和\"},\"246\":{\"t\":\"所以貌似只需要同时求出不成环的原数组的最大和与最小和，最终答案为max(maxSum, sum - minSum)，但实际上若数组全为负数就会导致此法失效，所以最后应进行此情况的判断\"},\"247\":{\"t\":\"class Solution { public int maxSubarraySumCircular(int[] nums) { int sum = 0, preMax = 0, preMin = 0; int maxSum = Integer.MIN_VALUE, minSum = Integer.MAX_VALUE; for (int num : nums) { sum += num; preMax = num + Math.max(0, preMax); maxSum = Math.max(maxSum, preMax); preMin = num + Math.min(0, preMin); minSum = Math.min(minSum, preMin); } return sum == minSum ? maxSum : Math.max(maxSum, sum - minSum); } } \"},\"248\":{\"h\":\"鸡蛋掉落\",\"a\":\"鸡蛋掉落\"},\"249\":{\"t\":\"Description\"},\"250\":{\"t\":\"有k枚鸡蛋和n层高的楼，且存在属于[0, n]区间的楼层f使得使得鸡蛋只有从高于f的楼层扔下才会碎，每次操作可以取一枚未碎的鸡蛋并把它从[1, n]楼层区间扔下，仅可重复使用未碎的鸡蛋，求一定能确定出具体楼层f的最小操作次数\"},\"251\":{\"t\":\"Solution\"},\"252\":{\"t\":\"换个角度思考，若允许进行t次操作且有k个鸡蛋，那一定能确定出具体楼层f的楼高n最高可以是多少？令dp[t][k]为允许进行t次操作且有k个鸡蛋的条件下楼高n的最大值，则只需在所有dp值中找出满足不小于n所对应的最小t值。\"},\"253\":{\"t\":\"考虑转移方程，在任意层高扔鸡蛋，一定消耗一次操作次数，但分鸡蛋有没有碎两种情况：\"},\"254\":{\"t\":\"鸡蛋碎了，则待确定楼层在此次扔鸡蛋的下方，且对应dp[t-1][k-1]，即转移到的子问题为“允许t-1次操作且有k-1枚鸡蛋”，故允许下方有dp[t-1][k-1]层\"},\"255\":{\"t\":\"鸡蛋没碎，同理可得允许上方有dp[t-1][k]层\"},\"256\":{\"t\":\"故总转移方程为dp[t][k] = 1 + dp[t-1][k] + dp[t-1][k-1]，边界条件为：t >= 1时有dp[t][1] = t，k >= 1时有dp[1][k] = 1。\"},\"257\":{\"t\":\"显然最大操作次数不会大于楼高，故只需求出dp[n][k]内的所有值，在求取过程中直接返回最先满足允许楼高不小于给定值的操作次数即可\"},\"258\":{\"t\":\"class Solution { public int superEggDrop(int k, int n) { if (n == 1) return 1; int[][] dp = new int[n + 1][k + 1]; for (int i = 1; i <= k; ++i) dp[1][i] = 1; for (int i = 2; i <= n; ++i) { for (int j = 1; j <= k; ++j) dp[i][j] = 1 + dp[i - 1][j] + dp[i - 1][j - 1]; if (dp[i][k] >= n) return i; } return -1; } } \"},\"259\":{\"h\":\"字符串问题\",\"a\":\"字符串问题\"},\"260\":{\"h\":\"两个字符串的删除操作\",\"a\":\"两个字符串的删除操作\"},\"261\":{\"t\":\"Description\"},\"262\":{\"t\":\"给定两个单词，每次都可删除其中一个单词的任意一个字符，求使两单词相同的最小操作次数\"},\"263\":{\"t\":\"Solution\"},\"264\":{\"t\":\"目标是通过删除导致两单词不同的字符来使其相同，若从删除的反面——留存字符思考，实际上就是求两字符串的最长相同子串，并且由于每次删除的字符位置可任选，所以最长相同子串的字符可不在原字符串中连续。可通过二维动态规划来解决，令dp[i][j]为前一单词的前i个字符与后一单词的前j个字符中的最长公共子序列的长度，转移状态方程需考虑俩字符串各自遍历到的字符是否相同，若相同则公共子序列加一，若不同则从上一状态（有两种）取最大转移而来\"},\"265\":{\"t\":\"class Solution { public int minDistance(String word1, String word2) { int M = word1.length(), N = word2.length(); int[][] dp = new int[M + 1][N + 1]; for (int i = 1; i <= M; i++) for (int j = 1; j <= N; j++) if (word1.charAt(i - 1) == word2.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1] + 1; else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); return M + N - 2 * dp[M][N]; } } \"},\"266\":{\"h\":\"编辑距离\",\"a\":\"编辑距离\"},\"267\":{\"t\":\"Description\"},\"268\":{\"t\":\"给定两个单词，每次编辑可对一个单词进行单个字符的插入或删除或替换，求将一单词转换成另一单词的最少编辑次数\"},\"269\":{\"t\":\"Solution\"},\"270\":{\"t\":\"用动态规划解决，令dp[i][j]为word1前i个字符与word2前j个字符之间的编辑距离，相对于其来说，若word1[i] != word2[j]，则：\"},\"271\":{\"t\":\"由dp[i-1][j-1]转换而来表示在word1前i-1个字符与word2前j-1个字符完成编辑的基础上，对word1[i]进行替换操作使word1[i] == word2[j]\"},\"272\":{\"t\":\"由dp[i][j-1]转换而来表示在word1前i个字符与word2前j-1个字符完成编辑的基础上，对word2[j]进行插入操作使word1[i] == word2[j]\"},\"273\":{\"t\":\"由dp[i-1][j]转换而来表示在word1前i-1个字符与word2前j个字符完成编辑的基础上，对word1[i]进行删除操作使word1[i] == word2[j]\"},\"274\":{\"t\":\"显然此时最短编辑距离为dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])。\"},\"275\":{\"t\":\"当word1[i] == word2[j]时，有dp[i][j] = min(dp[i - 1][j - 1], 1 + min(dp[i - 1][j], dp[i][j - 1]))，考虑编辑距离的实际意义，显然两仅相差一个字符的单词的编辑距离至多为一，即有dp[i-1][j-1] <= 1 + dp[i-1][j]且dp[i-1][j-1] <= 1 + dp[i][j-1]，故最终有dp[i][j] = dp[i-1][j-1]\"},\"276\":{\"t\":\"class Solution { public int minDistance(String word1, String word2) { int M = word1.length(), N = word2.length(); if (M * N == 0) return N + M; int[][] dp = new int[M + 1][N + 1]; for (int i = 1; i <= M; i++) dp[i][0] = i; for (int i = 1; i <= N; i++) dp[0][i] = i; for (int i = 1; i <= M; i++) for (int j = 1; j <= N; j++) if (word1.charAt(i - 1) == word2.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1]; else dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])); return dp[M][N]; } } \"},\"277\":{\"h\":\"不同的子序列\",\"a\":\"不同的子序列\"},\"278\":{\"t\":\"Description\"},\"279\":{\"t\":\"给定字符串s和t，求t在s的子序列（可不连续）中的出现次数\"},\"280\":{\"t\":\"Solution\"},\"281\":{\"t\":\"令dp[i+1][j+1]表示t的前i个字符在s的前j个字符的子序列中出现的次数。有边缘条件：\"},\"282\":{\"t\":\"dp[0][j] = 1, 0 <= j <= s.length(): 空串是任意串的子序列，且仅出现一次\"},\"283\":{\"t\":\"dp[i][0] = 0, 0 < i <= t.length(): 任意非空串都不是空串的子序列\"},\"284\":{\"t\":\"处理每一行时，即对于固定的t的前i个字符来说，考虑s的前j个字符：\"},\"285\":{\"t\":\"若t[i] != s[j]，则含新增字符s[j]的s前j个字符的子序列中不可能恰出现t的前i个字符，故次数应延用s前j-1个字符的次数，即dp[i+1][j+1] = dp[i+1][j]\"},\"286\":{\"t\":\"若t[i] == s[j]，则显然可分为子序列中是否含s[j]两种情况，不含的话同上，含的话就相当于s的前j-1个字符和t的前i-1个字符的所有子序列都新增一个相同字符，其出现次数不变，故综合起来dp[i+1][j+1] = dp[i+1][j] + dp[i][j]\"},\"287\":{\"t\":\"class Solution { public int numDistinct(String s, String t) { if (s.length() * t.length() == 0) return 0; if (s.length() < t.length()) return 0; int[][] dp = new int[t.length() + 1][s.length() + 1]; for (int i = 0; i < s.length(); ++i) dp[0][i] = 1; for (int i = 0; i < t.length(); ++i) for (int j = 0; j < s.length(); ++j) if (t.charAt(i) == s.charAt(j)) dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j]; else dp[i + 1][j + 1] = dp[i + 1][j]; return dp[t.length()][s.length()]; } } \"},\"288\":{\"h\":\"最长回文子序列\",\"a\":\"最长回文子序列\"},\"289\":{\"t\":\"Description\"},\"290\":{\"t\":\"给定字符串中最长回文子序列的长度\"},\"291\":{\"t\":\"Solution\"},\"292\":{\"t\":\"令dp[i][j]表示字符串s中以s[i]和s[j]为左右边界（含）的最长回文子序列长度，由于子序列中的字符可以不在原串中连续，故虽然枚举的是两端，但应该考虑充分利用已计算的数据：\"},\"293\":{\"t\":\"当s[i] == s[j]时，此新边界必都可以用来扩展原来其内部的最长回文子序列，故有dp[i][j] = dp[i+1][j-1] + 2\"},\"294\":{\"t\":\"当s[i] != s[j]时，此两字符必不能同时用于扩展其内部的最长回文子序列，故应延用某侧较短边界内含最长回文子序列的较大值，即dp[i][j] = max(dp[i+1][j], dp[i][j-1])\"},\"295\":{\"t\":\"由上述转移方程结合实际语义来看，为确保能够成功转移，在更新二维 dp 数组的某个值时，应确保其正下方、左侧、左下方的值已经是有效的，故整体的循环应从下至上、从左至右，再考虑枚举边界不应重复，故只能枚举整个二维数组的右上三角区域，并且每次大循环开始前需确保对角线上的值已初始化（按语义应为 1），如此也可避免枚举左下三角的边缘条件的不便。\"},\"296\":{\"t\":\"此题还有另一种思考方式，即逆序拷贝原字符串，则回文问题就变成了求两字符串的最长公共子序列问题\"},\"297\":{\"t\":\"class Solution { public int longestPalindromeSubseq(String s) { int n = s.length(); int[][] dp = new int[n][n]; for (int i = n - 1; i >= 0; --i) { dp[i][i] = 1; for (int j = i + 1; j < n; ++j) { if (s.charAt(i) == s.charAt(j)) dp[i][j] = dp[i + 1][j - 1] + 2; else dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]); } } return dp[0][n - 1]; } } \"},\"298\":{\"h\":\"股票问题\",\"a\":\"股票问题\"},\"299\":{\"h\":\"买卖股票的最佳时机 II\",\"a\":\"买卖股票的最佳时机-ii\"},\"300\":{\"t\":\"Description\"},\"301\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，求能获得的最大利润\"},\"302\":{\"t\":\"Solution\"},\"303\":{\"t\":\"令sell[i]和keep[i]分别表示第i天交易完后未持有和持有股票的最大利润，则：\"},\"304\":{\"t\":\"对于sell状态，可以是原本就未持有，也可以是通过将持有股票卖掉从keep转换而来，故sell[i] = max(sell[i-1], keep[i-1] + prices[i])\"},\"305\":{\"t\":\"对于keep状态，可以是原本就持有，也可以是通过买入股票从sell转换而来，故keep[i] = max(keep[i-1], sell[i-1] - prices[i])\"},\"306\":{\"t\":\"边缘状态是第 0 天的利润，显然sell[0] = 0，而持有状态则表示以第 0 天价格购入了股票，故利润keep[0] = -prices[0]。最后一天卖掉股票一定比持有股票的利润更大，故答案为sell[n-1]。由于转移方程仅与上一天状态相关，故可将数组压缩为单一变量，并且在每天更新时无需将先更新的值用临时变量暂存，比如先更新了keep[i]，则后续更新sell[i]时转移方程中就会从keep[i]转移而非之前的keep[i-1]，但这并没影响，因为按照实际意义来看，从keep[i]转移代表从当天的持有到卖出，显然利润为零\"},\"307\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int sell = 0, keep = -prices[0]; for (int i = 1; i < prices.length; ++i) { keep = Math.max(keep, sell - prices[i]); sell = Math.max(sell, keep + prices[i]); } return sell; } } \"},\"308\":{\"h\":\"买卖股票的最佳时机 III\",\"a\":\"买卖股票的最佳时机-iii\"},\"309\":{\"t\":\"Description\"},\"310\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成两笔交易，求能获得的最大利润\"},\"311\":{\"t\":\"Solution\"},\"312\":{\"t\":\"主要框架与 买卖股票的最佳时机 II 类似，但由于能进行多笔交易且限制了交易上限，故应对每次交易单独进行 dp，且多笔交易之间的买卖关系需联合考虑：\"},\"313\":{\"t\":\"第一笔买入的keep1只能是由原有keep1保持或者当天买入转移而来，故keep1[i] = max(keep1[i-1], - prices[i])\"},\"314\":{\"t\":\"第一次卖出但未进行第二次买入的sell1只能是由原有sell1保持或者由当天卖出转移而来，故sell1[i] = max(sell1[i-1], keep1[i-1] + prices[i])\"},\"315\":{\"t\":\"已第一次卖出且第二次买入的keep2只能是由原有keep2保持或者当天买入由sell1[i-1]转移而来，故keep2[i] = max(keep2[i-1], sell1[i-1] - prices[i])\"},\"316\":{\"t\":\"第二笔卖出的sell2只能是由原有sell2保持或者当天卖出转移而来，故sell2[i] = max(sell2[i-1], keep2[i-1] + prices[i])\"},\"317\":{\"t\":\"最后利润最大的显然是sell2[n-1]，再进行空间压缩可得代码\"},\"318\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int k1 = -prices[0], k2 = -prices[0]; int s1 = 0, s2 = 0; for (int i = 1; i < prices.length; i++) { k1 = Math.max(k1, -prices[i]); s1 = Math.max(s1, k1 + prices[i]); k2 = Math.max(k2, s1 - prices[i]); s2 = Math.max(s2, k2 + prices[i]); } return s2; } } \"},\"319\":{\"h\":\"买卖股票的最佳时机 IV\",\"a\":\"买卖股票的最佳时机-iv\"},\"320\":{\"t\":\"Description\"},\"321\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成k笔交易，求能获得的最大利润\"},\"322\":{\"t\":\"Solution\"},\"323\":{\"t\":\"主要思想与 买卖股票的最佳时机 III 类似，只是将交易上限定为k，只需联合考虑各笔交易即可：令keep[i][j]表示第i天第j笔交易完成后持有股票的最大利润，令sell[i][j]表示第i天第j笔交易完成后未持有股票的最大利润，则：\"},\"324\":{\"t\":\"第i天第j笔持有的keep[i][j]只能是由原有保持或者当天由上一笔未持有状态买入转移而来，故keep[i][j] = max(keep[i-1][j], sell[i-1][j-1] - prices[i])\"},\"325\":{\"t\":\"第i天第j笔未持有的sell[i][j]只能是由原有保持或者当天由本笔交易卖出转移而来，故sell[i][j] = max(sell[i-1][j], keep[i-1][j] + prices[i])\"},\"326\":{\"t\":\"除了常规的空间压缩之外，还有些细节需要注意：\"},\"327\":{\"t\":\"一笔交易产生实质买卖利润至少需要两天，即买卖若在同一天则无意义，故应最多只需要进行min(k, prices.length / 2)笔交易即可确保获得最大利润 \"},\"328\":{\"t\":\"注意由此运算导致的特殊测试用例错误，如prices.length == 1\"},\"329\":{\"t\":\"每天开始处理各笔交易前都需要将第 0 笔交易初始化，且初始化需联合考虑前一天处理过后的利润\"},\"330\":{\"t\":\"基于上一条，在开始处理每天的各笔交易前，需将每笔的持有利润都设为- prices[0]，而不能仅设置第 0 笔交易后状态为持有的利润，否则最后计算出的总利润可能会超出实际能获得的，因为对交易次数进行优化之后实际上强制每天都进行模拟买卖，若亏损则再强制等效于未进行买卖，故对于每一笔交易来说都有可能强制将本为负的买卖利润强行拉至 0（数组初始化的值）导致利润虚高，进而向后累积\"},\"331\":{\"t\":\"class Solution { public int maxProfit(int k, int[] prices) { if (k * prices.length == 0 || prices.length == 1) return 0; k = Math.min(k, prices.length / 2); int[] sell = new int[k]; int[] keep = new int[k]; Arrays.fill(keep, -prices[0]); for (int i = 1; i < prices.length; ++i) { keep[0] = Math.max(keep[0], -prices[i]); sell[0] = Math.max(sell[0], keep[0] + prices[i]); for (int j = 1; j < k; ++j) { keep[j] = Math.max(keep[j], sell[j - 1] - prices[i]); sell[j] = Math.max(sell[j], keep[j] + prices[i]); } } return sell[k - 1]; } } \"},\"332\":{\"h\":\"最佳买卖股票时机含冷冻期\",\"a\":\"最佳买卖股票时机含冷冻期\"},\"333\":{\"t\":\"Description\"},\"334\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。在任何时候最多只能持有一股股票，不限制交易次数但不可在卖出股票的下一天买入，求能获得的最大利润\"},\"335\":{\"t\":\"Solution\"},\"336\":{\"t\":\"此题看似与 买卖股票的最佳时机 IV 相似，都能完成多笔交易，但由于存在冷冻期，所以无法像那题一样在一天内完成无数笔交易，故实际上可以将每笔交易都割裂开来计算，也无需为多笔交易单独设置变量维度，此题应视作 买卖股票的最佳时机 II 变化而来的，只需在其基础上增加一状态变量即可。\"},\"337\":{\"t\":\"利用状态机模型归纳后考虑设置三种状态：持有股票keep、未持有但在冷静期cool、未持有且不在冷静期wait，则第i天能获得的最大利润为：\"},\"338\":{\"t\":\"keep可由原有保持或前一天买入转移而来，故keep[i] = max(keep[i-1], wait[i-1] - prices[i])\"},\"339\":{\"t\":\"wait可由原有保持或由冷静期转移而来，故wait[i] = max(wait[i-1], cool[i-1])\"},\"340\":{\"t\":\"cool必由前一天出售股票转移而来，故cool[i] = keep[i-1] + prices[i]\"},\"341\":{\"t\":\"显然能进行空间压缩，需注意的是压缩之后每天的仨变量都是相互依赖的，故必须得先缓存至少一个变量的值\"},\"342\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int keep = -prices[0];// 持有股票 int cool = 0;// 未持有，但在冷静期 int wait = 0;// 未持有，且不在冷静期 for (int i = 1; i < prices.length; i++) { int newWait = Math.max(cool, wait); cool = keep + prices[i]; keep = Math.max(keep, wait - prices[i]); wait = newWait; } return Math.max(cool, wait); } } \"},\"343\":{\"h\":\"背包问题\",\"a\":\"背包问题\"},\"344\":{\"h\":\"组合总和 IV\",\"a\":\"组合总和-iv\"},\"345\":{\"t\":\"Description\"},\"346\":{\"t\":\"给定目标值和元素各异的数组，求出数组中总和为目标值的组合的个数（元素可重复使用）\"},\"347\":{\"t\":\"Solution\"},\"348\":{\"t\":\"此类问题可以用回溯把每种组合模拟出来统计，但大可不必，因为只需求出数量，故可看作与顺序相关的完全背包问题，直接套用模版\"},\"349\":{\"t\":\"class Solution { public int combinationSum4(int[] nums, int target) { int[] dp = new int[target + 1]; dp[0] = 1; for (int j = 1; j <= target; j++) for (int num : nums) if (j >= num) dp[j] = dp[j] + dp[j - num]; return dp[target]; } } \"},\"350\":{\"h\":\"目标和\",\"a\":\"目标和\"},\"351\":{\"t\":\"Description\"},\"352\":{\"t\":\"给定非负整数数组和目标值，向数组中的每个元素前添加正负号，求添加完后数组和为目标值的添加方法数\"},\"353\":{\"t\":\"Solution\"},\"354\":{\"h\":\"零钱兑换\",\"a\":\"零钱兑换\"},\"355\":{\"t\":\"Description\"},\"356\":{\"t\":\"给定代表硬币面额的整数数组与目标值，求恰凑成总金额所需的最少的硬币个数。每种硬币数量无限，若无法凑成则返回-1\"},\"357\":{\"t\":\"详情\"},\"358\":{\"t\":\"令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令dp[i]为恰凑成总金额i的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为dp[i] = min(dp[i], dp[i - coin] + 1)，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为dp[0] = 0，最后只需检查目标值的硬币数是否变为了小于预设值的数即可\"},\"359\":{\"t\":\"class Solution { public int coinChange(int[] coins, int amount) { if (amount == 0) return 0; int[] dp = new int[amount + 1]; Arrays.fill(dp, amount + 1); dp[0] = 0; for (int coin : coins) for (int j = coin; j <= amount; j++) dp[j] = Math.min(dp[j], dp[j - coin] + 1); return dp[amount] > amount ? -1 : dp[amount]; } } \"},\"360\":{\"h\":\"完全平方数\",\"a\":\"完全平方数\"},\"361\":{\"t\":\"Description\"},\"362\":{\"t\":\"求和为给定整数的完全平方数的最少数量\"},\"363\":{\"t\":\"详情\"},\"364\":{\"t\":\"令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令dp[i]为恰凑成总金额i的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为dp[i] = min(dp[i], dp[i - coin] + 1)，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为dp[0] = 0，最后只需检查目标值的硬币数是否变为了小于预设值的数即可\"},\"365\":{\"t\":\"class Solution { public int coinChange(int[] coins, int amount) { if (amount == 0) return 0; int[] dp = new int[amount + 1]; Arrays.fill(dp, amount + 1); dp[0] = 0; for (int coin : coins) for (int j = coin; j <= amount; j++) dp[j] = Math.min(dp[j], dp[j - coin] + 1); return dp[amount] > amount ? -1 : dp[amount]; } } \"},\"366\":{\"h\":\"贪心\"},\"367\":{\"h\":\"跳跃游戏\",\"a\":\"跳跃游戏\"},\"368\":{\"t\":\"Description\"},\"369\":{\"t\":\"给定非负整数数组，数组中的每个元素代表能从该位置往右移动的最大长度，初始位于数组的第一个下标，判断能否到达最后一个下标\"},\"370\":{\"t\":\"Solution\"},\"371\":{\"h\":\"跳跃游戏 II\",\"a\":\"跳跃游戏-ii\"},\"372\":{\"t\":\"Description\"},\"373\":{\"t\":\"给定非负整数数组，数组中的每个元素代表能从该位置往右移动的最大长度，初始位于数组的第一个下标，给定数组保证能到达最后一个下标，求到达最后一个下标的最少移动次数\"},\"374\":{\"t\":\"Solution\"},\"375\":{\"t\":\"显然若想达到最少移动次数，每次都移动可达的最大长度并不一定最优，最远可达位置可以通过遍历数组每个元素时来更新，但需要关注的是哪些情况是需要实际移动才行的，显然是当遍历到远于上次移动的最远可达位置时，所以还需要记录上一次最远可达位置（即本次需要实际开始移动的位置），在每次更新最远距离之后，需要判断是否已经到下一个移动起始点了，如果到了才更新移动次数和移动起始点，因为到达下一个移动起始点才意味着需要实际移动一次来确保到达该位置，还没到下一个移动起始点时仍属于上次移动的覆盖范围，无需实际移动一次。\"},\"376\":{\"t\":\"需要注意的是，由于最远距离的更新与移动次数的更新是异步的，所以不可简单通过每次更新后判断是否已经可达最后下标来直接结束，因为此时答案可能还未更新\"},\"377\":{\"t\":\"class Solution { public int jump(int[] nums) { int cnt = 0, far = 0, old = 0; for (int i = 0; i < nums.length - 1; ++i) { far = Math.max(far, i + nums[i]); if (i == old) { ++cnt; old = far; } } return cnt; } } \"},\"378\":{\"h\":\"加油站\",\"a\":\"加油站\"},\"379\":{\"t\":\"Description\"},\"380\":{\"t\":\"在一条环路上有n个加油站，给定两个整数数组gas和cost，其中gas[i]为i处加油站提供的汽油补给量，从加油站i开往加油站i+1需要消耗汽油的量为cost[i]。\"},\"381\":{\"t\":\"现在驾驶一辆油箱容量无限的汽车从某个加油站出发，开始时油箱为空，若可以绕环路行驶一周则返回出发时加油站的编号（此情况保证解唯一），否则返回-1\"},\"382\":{\"t\":\"Solution\"},\"383\":{\"t\":\"先考虑有解的情况，题目隐含的限制条件是在任意一个加油站时油箱含量都不能为负，所以只需要在遍历时累加每个加油站的补给量与到下个加油站的消耗量之差，这个累加值即为油箱含量，若到某个加油站后为负，则说明前段旅程总消耗量为负，前一段旅程的起点不可能是解，应将邮箱清空从当前加油站的下一个加油站开始统计。\"},\"384\":{\"t\":\"下面证明为啥上一段途径的每个加油站也都不可能是解。假设从 x 出发最远只能到 y ，则有\"},\"385\":{\"t\":\"⎩⎨⎧​i=x∑y​gas[i]<i=x∑y​cost[i]i=x∑z​gas[i]≥i=x∑z​cost[i]​,x<y,∀z∈[x,y)​\"},\"386\":{\"t\":\"所以对于 ∀z∈(x,y] 有：\"},\"387\":{\"t\":\"i=z∑y​gas[i]​=i=x∑y​gas[i]−i=x∑z−1​gas[i]<i=x∑y​cost[i]−i=x∑z−1​cost[i]=i=z∑y​cost[i]​\"},\"388\":{\"t\":\"即从 [xy] 范围内任意加油站都不能达到 y 的下一个加油站，更不可能作为解。\"},\"389\":{\"t\":\"再回过头来考虑是否有解的问题，显然若全程的累加量为负，则不能绕完一整圈，所以只需在遍历时额外增加一个不会阶段性重置的统计变量即可\"},\"390\":{\"t\":\"class Solution { public int canCompleteCircuit(int[] gas, int[] cost) { int start = 0, total = 0, sum = 0; for (int i = 0; i < gas.length; ++i) { int cur = gas[i] - cost[i]; total += cur; sum += cur; if (sum < 0) { start = i + 1; sum = 0; } } return total < 0 ? -1 : start; } } \"},\"391\":{\"h\":\"划分字母区间\",\"a\":\"划分字母区间\"},\"392\":{\"t\":\"Description\"},\"393\":{\"t\":\"给定只含小写字母的字符串，要求将其划分为尽可能多的片段，且同一字母最多出现在一个片段中，返回一个表示每个字符串片段的长度的列表\"},\"394\":{\"t\":\"Solution\"},\"395\":{\"t\":\"按题目要求，需要令各划分的片段尽可能地短，所以得按照片段长度下限来划分，即片段内所有字母在字符串内所有的出现都在此片段内，所以自然需要先遍历一遍统计各字母的出现频率，由于是从头往后划分，只需要记录遍历到的字母最后一次出现的位置即可。统计完成后再次遍历字符串，在各片段内遍历字符的同时基于之前的统计将片段末尾往后推，当遍历到末尾时即表示此片段内所有字母在字符串内所有的出现都在此片段内，再从下一字符开始进行下一片段的划分\"},\"396\":{\"t\":\"class Solution { public List<Integer> partitionLabels(String s) { int[] last = new int[26]; for (int i = 0; i < s.length(); ++i) last[s.charAt(i) - 'a'] = i; List<Integer> res = new ArrayList<>(); int start = 0, end = 0; for (int i = 0; i < s.length(); ++i) { end = Math.max(end, last[s.charAt(i) - 'a']); if (i == end) { res.add(end - start + 1); start = end + 1; } } return res; } } \"},\"397\":{\"h\":\"摆动序列\",\"a\":\"摆动序列\"},\"398\":{\"t\":\"Description\"},\"399\":{\"t\":\"求给定数组中摆动子序列的最大长度。\"},\"400\":{\"t\":\"摆动序列指连续数字之间的差严格地在正数和负数之间交替（仅有一个元素或者含两个不等元素的序列也视作摆动序列）。\"},\"401\":{\"t\":\"子序列可以不在原始数组中连续，但需确保序列中各元素的相对位置与原来一致\"},\"402\":{\"t\":\"Solution\"},\"403\":{\"h\":\"用最少数量的箭引爆气球\",\"a\":\"用最少数量的箭引爆气球\"},\"404\":{\"t\":\"Description\"},\"405\":{\"t\":\"给定数组 points ，其中 pointsi​=[starti​,endi​] 表示气球 i 水平直径覆盖了范围 [starti​,endi​] ，每支箭可从任意位置射出并引爆覆盖范围包含该位置的所有气球，求引爆所有气球的最少弓箭数量\"},\"406\":{\"t\":\"Solution\"},\"407\":{\"t\":\"显然每支箭都得引爆尽可能多的气球。我们从左向右考虑所有气球的右边界，如果一支箭擦着所有气球中右边界最靠左的右边界将其引爆，那么一定是引爆了尽可能多的气球，因为这支箭在保证引爆原有必须得引爆的气球的同时，尽可能多地引爆了右侧的气球。\"},\"408\":{\"t\":\"继续往右考虑，若上一支箭右侧还有其他未引爆气球的左边界，则必须得加多一支箭，我们可以将此箭等效到其右边界，如此这支箭就能同样在保证引爆此气球的同时尽可能多地引爆右侧的气球，所以一直重复此过程即可\"},\"409\":{\"t\":\"class Solution { public int findMinArrowShots(int[][] points) { Arrays.sort(points, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { if (o1[1] < o2[1]) return -1; if (o1[1] > o2[1]) return 1; return 0; } }); int cnt = 1; for (int pre = points[0][1], i = 1; i < points.length; ++i) if (pre < points[i][0]) { ++cnt; pre = points[i][1]; } return cnt; } } \"},\"410\":{\"h\":\"无重叠区间\",\"a\":\"无重叠区间\"},\"411\":{\"t\":\"Description\"},\"412\":{\"t\":\"给定一个区间的集合 intervals ，其中 intervalsi​=[starti​,endi​] ，求使剩余区间互不重叠所需移除区间的最小数量（仅端点重合不算重合）\"},\"413\":{\"t\":\"Solution\"},\"414\":{\"t\":\"贪心思想。从左向右考虑区间，最优剩余最左侧的区间右端点必须是所有区间右端点最靠左的，然后将其右侧所有重叠区间都去除，则剩余区间为与原始问题相同的子问题，重复上述步骤即可\"},\"415\":{\"t\":\"class Solution { public int eraseOverlapIntervals(int[][] intervals) { Arrays.sort(intervals, (o1, o2) -> o1[1] - o2[1]); int cnt = 0; int end = Integer.MIN_VALUE; for (int[] item : intervals) { if (item[0] < end) ++cnt; else end = item[1]; } return cnt; } } \"},\"416\":{\"h\":\"算法讲解\"},\"417\":{\"h\":\"反转链表\",\"a\":\"反转链表\"},\"418\":{\"h\":\"队列和栈相互实现\",\"a\":\"队列和栈相互实现\"},\"419\":{\"h\":\"单调队列\",\"a\":\"单调队列\"},\"420\":{\"t\":\"貌似单调队列的作用常可以用优先队列来替代\"},\"421\":{\"t\":\"class MaxQueue { // O(1) 时间复杂度获取队列元素最大值 private Queue<Integer> queue; // 存储队列元素 private Deque<Integer> deque; // 存储队列元素最大值 public MaxQueue() { queue = new LinkedList<>(); deque = new LinkedList<>(); } public int max_value() { return deque.isEmpty() ? -1 : deque.peekFirst(); } public void push_back(int value) { queue.offer(value); while (!deque.isEmpty() && deque.peekLast() < value) deque.pollLast(); deque.offerLast(value); } public int pop_front() { if (queue.isEmpty()) return -1; if (deque.peekFirst().equals(queue.peek())) deque.pollFirst(); return queue.poll(); } } \"},\"422\":{\"h\":\"非递归遍历二叉树\",\"a\":\"非递归遍历二叉树\"},\"423\":{\"h\":\"遍历图\",\"a\":\"遍历图\"},\"424\":{\"h\":\"单调栈\",\"a\":\"单调栈\"},\"425\":{\"t\":\"单调栈的思想与单调队列类似，即在入栈前将栈内不满足单调性的元素都出栈，确保当前元素入栈后整体保持原有单调性\"},\"426\":{\"t\":\"单调栈的思想不难，但用到它的题一般不简单，在具体运用时经常需要依照实际情况判断栈内到底是存元素值本身还是存其索引\"},\"427\":{\"t\":\"class Solution { public void MonotoneStack(int[] nums) { Deque<Integer> stk = new ArrayDeque<>(); for (int num : nums) { while (!stk.isEmpty() && stk.peek() < num) stk.pop(); stk.push(num); } } } \"},\"428\":{\"h\":\"并查集\",\"a\":\"并查集\"},\"429\":{\"t\":\"并查集构建若干集合的缓存，用于快速查询某元素是否属于某集合，或者是俩元素是否属于同一集合\"},\"430\":{\"t\":\"具体实现是在内部用数组记录节点的父节点，初始时默认各节点独立成集合（父节点都是自己），后续通过更改父节点值来将节点连至父节点（类似用数组存储的链表）。在将两节点合并至同一集合时，先找到代表各自集合的根节点，再将两根节点连接成父子关系，根据连接规则的不同可分为两种：\"},\"431\":{\"t\":\"高度并查集：维护存储各节点的高度（自己和所有子节点的数量）的数组。因为集合高度就是查找集合根节点的最多迭代次数，所以合并原则是令合并后集合的高度最小，即两集合的根节点合并时高度大的为最终根节点，如此可确保合并后集合高度不会大于原有的两集合。若两集合高度一样则随机确立父子关系，但需注意更新最终根节点的高度\"},\"432\":{\"t\":\"重量并查集：维护存储各节点的重量（自己和所有子节点的数量）的数组。合并原则是重量小的集合归入重量大的集合中去，即令小重量根节点成为大重量根节点的子节点。但仅如此的话对主要影响并查集查询速度的集合高度并并无优化，所以在每次迭代查找父节点时都可以顺便进行路径压缩，令起始节点归根（降低其高度），即在每次向根节点迭代的时候不断地更改起始节点的父节点直到根节点。这样一来每个节点查询过后都能成为根节点的直接子节点，而根节点的直接子节点是可以直接找到判定的，所以重量并查集的节点从第二次查询开始会变得非常快\"},\"433\":{\"t\":\"关于重量并查集路径压缩的两点注意\"},\"434\":{\"t\":\"在迭代过程中更改起始节点的父节点后无需维护初始父节点和依次经过的父节点的重量，因为当前集合在后续合并时只会用到根节点的重量\"},\"435\":{\"t\":\"路径压缩不适用于高度并查集，因为遍历更改后根节点的高度可能会变，需要重新计算\"},\"436\":{\"h\":\"KMP 算法\",\"a\":\"kmp-算法\"},\"437\":{\"t\":\"ref: https://labuladong.gitee.io/algo/3/28/97/\"},\"438\":{\"t\":\"class KMP { private String pat; // 待寻找的串 private int[][] dp; // pat 的状态转移信息 // 预计算 pat 串的状态转移信息 public KMP(String pat) { this.pat = pat; dp = new int[pat.length()][256]; // 256 是假设字符范围是 ASCII 表 dp[0][pat.charAt(0)] = 1; int X = 0; for (int j = 1; j < pat.length(); ++j) { for (int c = 0; c < 256; ++c) dp[j][c] = dp[X][c]; dp[j][pat.charAt(j)] = j + 1; X = dp[X][pat.charAt(j)]; } } // 在给定的文本中寻找 pat 首次出现的位置 public int search(String txt) { int j = 0; for (int i = 0; i < txt.length(); ++i) { j = dp[j][txt.charAt(i)]; if (j == pat.length()) return i - pat.length() + 1; } return -1; } } \"},\"439\":{\"h\":\"前缀树（Trie）\",\"a\":\"前缀树-trie\"},\"440\":{\"t\":\"class Trie { private Trie[] child; private boolean isEnd; public Trie() { child = new Trie[26]; isEnd = false; } public void insert(String word) { Trie node = this; for (int i = 0; i < word.length(); i++) { int idx = word.charAt(i) - 'a'; if (node.child[idx] == null) node.child[idx] = new Trie(); node = node.child[idx]; } node.isEnd = true; } public boolean search(String word) { Trie res = searchPrefix(word); return res != null && res.isEnd; } public boolean startsWith(String prefix) { return searchPrefix(prefix) != null; } // search and return if exists prefix // not care isEnd private Trie searchPrefix(String prefix) { Trie node = this; for (int i = 0; i < prefix.length(); i++) { int idx = prefix.charAt(i) - 'a'; if (node.child[idx] == null) return null; node = node.child[idx]; } return node; } } \"},\"441\":{\"h\":\"树状数组\",\"a\":\"树状数组\"},\"442\":{\"t\":\"对于简单区间上的更新以及求和问题，在没必要用线段树的情景下，可以基于原数组构建树状数组 tree，其每个元素首先都相当于叶节点，但又同时是其前若干节点的根节点，故某节点的值最终为以其为根的子树所有节点值之和，具体来说有 treen​=i=n−2k+1∑n​treei​，其中 k 为 n 的二进制中从最低位到高位连续零的长度，实际上 2k 可通过函数 lowBit(n)=n&(−n) 来计算，此函数亦可用于获取最低有效位。\"},\"443\":{\"t\":\"对原数组的区间查询可转化为对树状数组的若干节点查询来解决，对原数组某值的更新可通过更新树状数组对应节点及其所有父节点来实现。查询和更新的复杂度都为 O(log2​N)，具体实现见代码。需要注意的是，更新和查询的循环中，为避免索引更新死循环，在实现树状数组时应与在原数组的基础上向右整体错开一格，通过空置索引 0 的位置来避免卡死。\"},\"444\":{\"t\":\"树状数组的应用形式在更新和查询方面都分别有单点和区间两种，单点更新、单点查询普通数组即可完成，其余三种情况如下：\"},\"445\":{\"h\":\"拓扑排序\",\"a\":\"拓扑排序\"},\"446\":{\"t\":\"有向图的拓扑排序是指满足上游节点一定排在下游节点前面的一种全节点排列，并且有：\"},\"447\":{\"t\":\"若有向图中存在环，则其不存在拓扑排序（环中节点顺序亦先亦后，与排序中确定的先后矛盾）\"},\"448\":{\"t\":\"若为有向无环图，则其拓扑排序可能不止一种（如无边图的任意节点排列都是拓扑排序）\"},\"449\":{\"t\":\"所以对于有先后制约关系的遍历搜索可以套用拓扑排序模版，用 DFS 或 BFS 都可以实现。\"},\"450\":{\"t\":\"例题为 课程表 II：给定所有必须得上的课的先修关系，求一种修完所有课的顺序（存在的话）\"},\"451\":{\"h\":\"二分查找\",\"a\":\"二分查找\"},\"452\":{\"h\":\"回溯\",\"a\":\"回溯\"},\"453\":{\"h\":\"适用问题\",\"a\":\"适用问题\"},\"454\":{\"t\":\"组合问题：若干数字中按⼀定规则找出若干个数的集合\"},\"455\":{\"t\":\"排列问题：若干数字按⼀定规则全排列的不同排列方式数量\"},\"456\":{\"t\":\"切割问题：⼀个字符串按⼀定规则有⼏种切割⽅式\"},\"457\":{\"t\":\"⼦集问题：若干数字的集合⾥有多少符合条件的⼦集\"},\"458\":{\"t\":\"棋盘问题：N 皇后，解数独等等\"},\"459\":{\"h\":\"模版\",\"a\":\"模版\"},\"460\":{\"h\":\"实现要点\",\"a\":\"实现要点\"},\"461\":{\"t\":\"添加一条答案路径时必须由当前路径列表新建一个列表来添加，否则每次添加的都是贯穿回溯全过程的唯一的列表指针，最后一无所有\"},\"462\":{\"t\":\"每层是否需要起始索引： \"},\"463\":{\"t\":\"对于组合问题： \"},\"464\":{\"t\":\"若在同一集合中求组合，则需起始索引控制各层循环的起始位置\"},\"465\":{\"t\":\"若是多个互不影响的集合取组合，则无需起始索引\"},\"466\":{\"t\":\"对于排列问题：每层都是从头开始搜索而无需起始索引，且\"},\"467\":{\"t\":\"是否需要标记数组标记当前层回溯路径中已存在哪些元素： \"},\"468\":{\"t\":\"若元素可重复使用，则无需标记数组\"},\"469\":{\"t\":\"若元素仅可使用一次，则需要标记\"},\"470\":{\"t\":\"实际上标记数组已经在功能上包含起始索引了，但起始索引能在下一层遍历选取时，先标记数组一步进行剪枝，进一步减少无效搜索；或者对于有序数组，因为每次下一层搜索都是基于当前层右边起始的，所以起始索引可以完全替代标记数组\"},\"471\":{\"t\":\"若题目仅要求求出不同组合的个数，可考虑用动态规划来做，避免实际模拟每一种组合\"},\"472\":{\"h\":\"动态规划\",\"a\":\"动态规划\"},\"473\":{\"h\":\"思考流程\",\"a\":\"思考流程\"},\"474\":{\"t\":\"明确问题存在哪几种状态；问题场景如何做状态选择，进而转换状态\"},\"475\":{\"t\":\"确定 dp 数组以及下标的含义\"},\"476\":{\"t\":\"根据【选择】的过程，确定递推公式\"},\"477\":{\"t\":\"dp 数组如何初始化\"},\"478\":{\"t\":\"确定遍历顺序\"},\"479\":{\"t\":\"举例推导 dp 数组，进行问题模拟\"},\"480\":{\"t\":\"出错的情况，将 dp 数组打印出来，保证程序处理流程如设想运行\"},\"481\":{\"t\":\"优化：若每一 dp 状态仅与上一个状态有关，则可将 dp 数组进行降维压缩\"},\"482\":{\"h\":\"背包问题\",\"a\":\"背包问题\"},\"483\":{\"h\":\"排序算法\",\"a\":\"排序算法\"},\"484\":{\"t\":\"Arrays.sort()看数据情况（联合考虑数据数量及其有序程度等）使用传统插入排序、成对插入排序、单轴快排、双轴快排、归并排序的一种或几种\"},\"485\":{\"t\":\"省略堆排序，因其无法利用现代操作系统的局部性原理进行缓存很少使用堆排序（数组元素很少和相邻的元素进行比较和交换）\"},\"486\":{\"t\":\"方便起见，定义用于交换数组两指定位置值的函数如下：\"},\"487\":{\"t\":\"void swap(int[] nums, int i, int j) { int t = nums[i]; nums[i] = nums[j]; nums[j] = t; } \"},\"488\":{\"h\":\"中间技巧\",\"a\":\"中间技巧\"},\"489\":{\"h\":\"Dijkstra 算法 - 知乎\",\"a\":\"dijkstra-算法-知乎\"},\"490\":{\"h\":\"二进制相关\",\"a\":\"二进制相关\"},\"491\":{\"t\":\"// 求正数的平均数时，采用无符号位移可解决溢出问题（因最高位补 0） int mid = (left + right) >>> 1; // 获取整数二进制表示种最低位的 1 // 注：不适用于 Integer.MIN_VALUE，它最低有效位为其本身 n & (-n) n & (~x + 1) // 消除整数二进制表示中最低位的 1 // 注：不适用于 Integer.MIN_VALUE，其最低有效位为负号位 n & (n - 1) // 统计整数的二进制表示中 1 的位数 int countBit(int num){ int cnt = 0; while(num != 0){ n &= n - 1; ++cnt; } return cnt; } // 判断是否为 2 的幂次方（即判断二进制表示中是否只有一个 1） boolean isPowerOfTwo(int num){ if(num <= 0) return false; return (num & (num - 1)) == 0; } \"},\"492\":{\"t\":\"// 交换两不同值变量的值【若两值相同则会出现 0 的错误】 a = a ^ b; // a1 = a0 ^ b0 b = a ^ b; // b1 = a1 ^ b0 = a0 ^ b0 ^ b0 = a0 a = a ^ b; // a2 = a1 ^ b1 = a0 ^ b0 ^ a0 = b0 // 判断两数相加是否溢出：若相加结果的符号同时与两加数异号则发生溢出 boolean isOverflow(int a, int b){ int res = a + b; return (res ^ a) < 0 && res ^ b < 0; } // 字符转换 ch | ' ' // 大小写 --> 小写 ch & '_' // 大小写 --> 大写 ch ^ ' ' // 大小写变换 \"},\"493\":{\"h\":\"计算组合数\",\"a\":\"计算组合数\"},\"494\":{\"t\":\"Cnm​​=m!(n−m)!n!​=m!n(n−1)⋯(n−m+1)​=1n​⋅2n−1​⋯mn−m+1​​\"},\"495\":{\"t\":\"对于上述最后的形式，若逐项除再相乘，不一定能保证每一项都是整数，直接计算会损失精度。但代码实现时基于已累乘结果，先乘下一项的分子，再除下一项的分母，则必可保证累乘结果始终为整数，因为在除分母k的时候，分子已经是连续的k个数相乘，其中必含分母的倍数。实际上分母不一定要逆序相乘，顺序亦可，代码如下\"},\"496\":{\"t\":\"long ans = 1; for (int x = n, y = 1; y <= m; --x, ++y) ans = ans * x / y; \"},\"497\":{\"h\":\"生成连续完全平方数\",\"a\":\"生成连续完全平方数\"},\"498\":{\"t\":\"ArrayList<Integer> getSerialSquare(int n){ ArrayList<Integer> result = new ArrayList<>(); int cur = 1, diff = 3; while(cur <= n){ result.add(cur); cur += diff; diff += 2; } return result; } \"},\"499\":{\"h\":\"求最大公约数和最小公倍数\",\"a\":\"求最大公约数和最小公倍数\"},\"500\":{\"t\":\"// 最大公约数 private int gcd(int x, int y) { return y == 0 ? x : gcd(y, x % y); } // 最小公倍数 private int lcm(int x, int y){ return x * y / gcd(x, y); } \"},\"501\":{\"h\":\"取余运算规则\",\"a\":\"取余运算规则\"},\"502\":{\"t\":\"(a±b)modp=(amodp±bmodp)modp\"},\"503\":{\"t\":\"abmodp=(amodp)∗(bmodp)modp\"},\"504\":{\"t\":\"abmodp=(amodp)bmodp\"},\"505\":{\"t\":\"[(a+b)modp+c]modp=[a+(b+c)modp]modp\"},\"506\":{\"t\":\"[(abmodp)c]modp=[a(bcmodp)]modp\"},\"507\":{\"t\":\"[(a+b)modp]cmodp=(acmodp+bcmodp)modp\"},\"508\":{\"t\":\"若a≡bmodp,则对于∀c,都有(a+c)≡(b+c)modp\"},\"509\":{\"t\":\"若a≡bmodp,则对于∀c,都有ac≡bcmodp\"},\"510\":{\"t\":\"若a≡bmodp,c≡dmodp,则有：\"},\"511\":{\"t\":\"(a±c)≡(b±d)modp\"},\"512\":{\"t\":\"ac≡bdmodp\"},\"513\":{\"t\":\"a/c≡b/dmodp\"},\"514\":{\"h\":\"二进制&哈希&多线程&并查集\"},\"515\":{\"h\":\"二进制\",\"a\":\"二进制\"},\"516\":{\"h\":\"只出现一次的数字 III\",\"a\":\"只出现一次的数字-iii\"},\"517\":{\"t\":\"Description\"},\"518\":{\"t\":\"给定整型数组，其中有两个数只出现一次，其余数都出现两次，找出两个只出现一次的数\"},\"519\":{\"t\":\"详情\"},\"520\":{\"t\":\"首先考虑简化版的问题，若只有一个数只出现一次，则只需要对整个数组进行异或操作，所得即为该数，因为其他数都两两异或为 0 了，而任何数与 0 异或都为其本身。\"},\"521\":{\"t\":\"所以只需要将原数组分为类似上述简化问题的两组再进行组内异或即可，具体来说分组需要确保两个只出现一次的数分到不同组，且其余数的两次出现都分到同一组。为达此目的，首先对原始数组进行全体异或，结果等同于两个只出现一次的数的异或，则任取一位为 1 的二进制位，表示在该位上两数是不同的，以该位的值来对所有数进行分组，可以确保两数被分到不同组，且其他数的两次出现都分到同一组。\"},\"522\":{\"t\":\"为方便起见，上述作为分组标准的数取全体异或的结果的最低位的 1。在大多情况下，结合补码知识，取最低有效位的方式为x & -x，但有一个特殊情况，当x为 −231 时，取负操作会导致溢出，考虑到其补码表示为“负零”，故其最低有效为为其本身\"},\"523\":{\"t\":\"class Solution { public int[] singleNumber(int[] nums) { int x = 0; for (int n : nums) x ^= n; if (x != Integer.MIN_VALUE) x &= -x; int[] res = new int[2]; for (int n : nums) if ((n & x) == 0) res[0] ^= n; else res[1] ^= n; return res; } } \"},\"524\":{\"h\":\"哈希\",\"a\":\"哈希\"},\"525\":{\"h\":\"字母异位词分组\",\"a\":\"字母异位词分组\"},\"526\":{\"t\":\"Description\"},\"527\":{\"t\":\"字母异位词是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次\"},\"528\":{\"t\":\"将字符串数组中的字母异位词组合在一起，如：\"},\"529\":{\"t\":\"input: strs = [\\\"eat\\\", \\\"tea\\\", \\\"tan\\\", \\\"ate\\\", \\\"nat\\\", \\\"bat\\\"]\"},\"530\":{\"t\":\"output: [[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\"},\"531\":{\"t\":\"Solution\"},\"532\":{\"t\":\"同种异位词字母排序后一致，可作为键来收集同种异位词\"},\"533\":{\"t\":\"class Solution { public List<List<String>> groupAnagrams(String[] strs) { Map<String, List<String>> map = new HashMap<>(); for (String str : strs) { char[] s = str.toCharArray(); Arrays.sort(s); String string = new String(s); List<String> list = map.getOrDefault(string, new ArrayList<>()); list.add(str); map.put(string, list); } return new ArrayList<List<String>>(map.values()); } } \"},\"534\":{\"h\":\"存在重复元素 II\",\"a\":\"存在重复元素-ii\"},\"535\":{\"t\":\"Description\"},\"536\":{\"t\":\"对于整数数组 nums 和整数 k ，判断数组中是否存在：(i=j)&{nums[i]=nums[j]}&[abs(i−j)≤k]\"},\"537\":{\"t\":\"Solution\"},\"538\":{\"h\":\"寻找重复的子树\",\"a\":\"寻找重复的子树\"},\"539\":{\"t\":\"Description\"},\"540\":{\"t\":\"找出二叉树中所有重复的子树（同种重复子树找任一棵的根节点即可）\"},\"541\":{\"t\":\"Solution1\"},\"542\":{\"h\":\"最长连续序列\",\"a\":\"最长连续序列\"},\"543\":{\"t\":\"Description\"},\"544\":{\"t\":\"求无序数组中最长数字连续子序列（不要求序列数字在原数组中也连续）的长度\"},\"545\":{\"t\":\"要求时间复杂度为 O(n)\"},\"546\":{\"t\":\"Solution\"},\"547\":{\"t\":\"class Solution { public int longestConsecutive(int[] nums) { int maxLen = 0; if (nums.length != 0) { Set<Integer> set = new HashSet<>(); for (int num : nums) set.add(num); for (int num : set) { if (!set.contains(num - 1)) { int curLen = 1; int cur = num; while (set.contains(cur + 1)) { ++curLen; ++cur; } maxLen = Math.max(maxLen, curLen); } } } return maxLen; } } \"},\"548\":{\"h\":\"缺失的第一个正数\",\"a\":\"缺失的第一个正数\"},\"549\":{\"t\":\"Description\"},\"550\":{\"t\":\"找出给定的无序整形数组中缺失的最小正整数，要求时间复杂度为O(n)且空间复杂度为O(1)\"},\"551\":{\"h\":\"多线程\",\"a\":\"多线程\"},\"552\":{\"h\":\"交替打印 FooBar\",\"a\":\"交替打印-foobar\"},\"553\":{\"t\":\"Description\"},\"554\":{\"t\":\"确保在多线程调用下，俩函数交替执行打印\"},\"555\":{\"t\":\"Solution\"},\"556\":{\"h\":\"交替打印字符串\",\"a\":\"交替打印字符串\"},\"557\":{\"t\":\"Description\"},\"558\":{\"t\":\"实现多线程版本从 1 ~ n 输出代表相应数字的字符串的程序，依据以下规则调用相应函数进行输出：\"},\"559\":{\"t\":\"若可被 3 整除，调用fizz()输出fizz\"},\"560\":{\"t\":\"若可被 5 整除，调用buzz()输出buzz\"},\"561\":{\"t\":\"若可同时被 3 和 5 整除，调用fizzbuzz()输出fizzbuzz\"},\"562\":{\"t\":\"其他情况调用number()输出该数\"},\"563\":{\"t\":\"比如当n = 15时输出1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz\"},\"564\":{\"t\":\"Solution\"},\"565\":{\"t\":\"class FizzBuzz { private ReentrantLock lock = new ReentrantLock(); private Condition con = lock.newCondition(); private volatile int cur = 1; private int n; public FizzBuzz(int n) { this.n = n; } // printFizz.run() outputs \\\"fizz\\\". public void fizz(Runnable printFizz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 == 0 && cur % 5 != 0) { printFizz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printBuzz.run() outputs \\\"buzz\\\". public void buzz(Runnable printBuzz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 5 == 0 && cur % 3 != 0) { printBuzz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printFizzBuzz.run() outputs \\\"fizzbuzz\\\". public void fizzbuzz(Runnable printFizzBuzz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 == 0 && cur % 5 == 0) { printFizzBuzz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printNumber.accept(x) outputs \\\"x\\\", where x is an integer. public void number(IntConsumer printNumber) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 != 0 && cur % 5 != 0) { printNumber.accept(cur); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // for local debug public static void main(String[] args) { FizzBuzz fb = new FizzBuzz(30); // number new Thread(new Runnable() { @Override public void run() { try { fb.number(new IntConsumer() { @Override public void accept(int value) { System.out.print(value); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // fizzbuzz new Thread(new Runnable() { @Override public void run() { try { fb.fizzbuzz(new Runnable() { @Override public void run() { System.out.print(\\\"fizzbuzz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // fizz new Thread(new Runnable() { @Override public void run() { try { fb.fizz(new Runnable() { @Override public void run() { System.out.print(\\\"fizz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // buzz new Thread(new Runnable() { @Override public void run() { try { fb.buzz(new Runnable() { @Override public void run() { System.out.print(\\\"buzz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); } } \"},\"566\":{\"h\":\"哲学家进餐\",\"a\":\"哲学家进餐\"},\"567\":{\"t\":\"Description\"},\"568\":{\"t\":\"5 个哲学家围坐在圆桌前，每人面前一盘意面，两哲学家之间都有一把叉子，哲学家只会在思考和进餐两种行为间交替\"},\"569\":{\"t\":\"哲学家只有同时拿到左边和右边的叉子才能吃面，而同一根叉子在同一时间只能被一个哲学家使用，哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子\"},\"570\":{\"t\":\"利用多线程实现进餐规则，使得每个哲学家都能在不知道别人什么时候想吃东西或思考的情况下，在吃饭和思考之间一直交替下去\"},\"571\":{\"t\":\"哲学家从 0 ~ 4 编号，请实现函数void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)，其中：\"},\"572\":{\"t\":\"philosopher 哲学家的编号\"},\"573\":{\"t\":\"pickLeftFork 和 pickRightFork 表示拿起左边或右边的叉子\"},\"574\":{\"t\":\"eat 表示吃面\"},\"575\":{\"t\":\"putLeftFork 和 putRightFork 表示放下左边或右边的叉子\"},\"576\":{\"t\":\"由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调\"},\"577\":{\"t\":\"给 5 个线程代表 5 个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数\"},\"578\":{\"t\":\"Solution\"},\"579\":{\"t\":\"class DiningPhilosophers { // 每个叉子相当于锁 private ReentrantLock[] fork = new ReentrantLock[5]; // 同时进餐人数上限【五人同时拿叉子会死锁】 private Semaphore eatLimit = new Semaphore(4); public DiningPhilosophers() { for (int i = 0; i < 5; i++) { fork[i] = new ReentrantLock(); } } // call the run() method of any runnable to execute its code public void wantsToEat(int philosopher, Runnable pickLeftFork, Runnable pickRightFork, Runnable eat, Runnable putLeftFork, Runnable putRightFork) throws InterruptedException { eatLimit.acquire();// 申请就餐名额 int leftFork = philosopher; int rightFork = (philosopher + 1) % 5; fork[leftFork].lock();// 占据叉子 fork[rightFork].lock(); pickLeftFork.run();// 拿起叉子 pickRightFork.run(); eat.run(); putLeftFork.run();// 放下叉子 putRightFork.run(); fork[leftFork].unlock();// 释放叉子 fork[rightFork].unlock(); eatLimit.release(); } } \"},\"580\":{\"h\":\"并查集\",\"a\":\"并查集\"},\"581\":{\"h\":\"冗余连接\",\"a\":\"冗余连接\"},\"582\":{\"t\":\"Description\"},\"583\":{\"t\":\"给定无环连通无向图的所有边和一条冗余的边，找出那条冗余边\"},\"584\":{\"t\":\"设所有节点为1 ~ n，边的信息由长度为n的二维数组edges给出：edges[i] = [ai, bi]表示节点ai和bi之间存在一条边\"},\"585\":{\"t\":\"Solution\"},\"586\":{\"t\":\"无环连通无向图若有n个节点，则必有且仅有n-1条边，故有且仅有唯一一条冗余边，该边令图出现了环\"},\"587\":{\"t\":\"使用并查集随着遍历边的信息逐渐联合各节点，当某条边的两节点都已经在联合集中则说明该边冗余\"},\"588\":{\"t\":\"class Solution { public int[] findRedundantConnection(int[][] edges) { int n = edges.length; int[] parent = new int[n + 1]; for (int i = 1; i <= n; ++i) parent[i] = i; for (int[] edge : edges) { int rx = find(parent, edge[0]); int ry = find(parent, edge[1]); if (rx == ry) return edge; parent[rx] = ry; } return null; } private int find(int[] parent, int x) { while (parent[x] != x) x = parent[x]; return x; } } \"},\"589\":{\"h\":\"除法求值\",\"a\":\"除法求值\"},\"590\":{\"t\":\"Description\"},\"591\":{\"t\":\"'[[\\\"a\\\",\\\"c\\\"],[\\\"b\\\",\\\"a\\\"],[\\\"a\\\",\\\"e\\\"],[\\\"a\\\",\\\"a\\\"],[\\\"x\\\",\\\"x\\\"]]' 给定字符串变量对数组equations和一个实数值数组values作为已知条件，即equations[i] = [Ai, Bi]和values[i]共同表示条件Ai / Bi = values[i]\"},\"592\":{\"t\":\"另有一些以数组queries表示的问题，其中第j个问题queries[j] = [Cj, Dj]表示问题Cj / Dj = ?，根据已知条件推出结果\"},\"593\":{\"t\":\"若存在无法推出的答案则用-1.0表示，保证输入有效（不存在除 0）且不存在矛盾\"},\"594\":{\"t\":\"Solution\"},\"595\":{\"t\":\"此类存在许多传递关系并需要记录的需求适合用并查集，A / B = x可看作A -> B的传递关系，其倍数关系用额外的权重数组记录，存在传递关系的若干变量视作在同一集合中，通过并查集的链式传递效果可以消去若干已知中间变量而求出问题的答案，在不断联合新变量的过程中就同时进行类似重量并查集的路径压缩，迭代压缩时累乘更新起始节点到各中间父节点的权重值，表示消去链式条件的中间变量，如此构建的并查集的所有节点都直接连接于根节点，其权重都更新到除以根节点变量的结果，即把问题中对零散变量相除求值转化为除相同额外变量，确保后续查询的效率\"},\"596\":{\"t\":\"具体实现时，先给字符串变量编号以便并查集处理，在并查集中用parent[A]=B表示A/B的链式关系，其结果（传递关系权重）用weight[A]表示。合并节点时的权重更新参考平行四边形四条边的关系，如把X所在集合向Y所在集合联合，设X/Y=v，X根节点为rx，Y根节点为ry，则显然有weight[rx] = v * weight[Y] / weight[X]。查询时可以仅考虑所有节点直接相连于同一根节点，因为即使最后一次联合之后可能有节点不直接与根节点相连，但实际查询时会先进行带路径压缩操作的搜索，故查得结果时必所有节点都已直接相连与根节点\"},\"597\":{\"t\":\"class Solution { private int id = 0; // 用于给各变量编号，语法要求不能为局部变量 public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) { UnionFind uf = new UnionFind(2 * equations.size()); Map<String, Integer> map = new HashMap<>(2 * equations.size()); for (int i = 0; i < equations.size(); ++i) { int i1 = map.computeIfAbsent(equations.get(i).get(0), x -> id++); int i2 = map.computeIfAbsent(equations.get(i).get(1), x -> id++); uf.union(i1, i2, values[i]); } double[] res = new double[queries.size()]; for (int i = 0; i < queries.size(); ++i) { Integer i1 = map.get(queries.get(i).get(0)); Integer i2 = map.get(queries.get(i).get(1)); if (i1 == null || i2 == null) res[i] = -1.0d; else res[i] = uf.query(i1, i2); } return res; } private class UnionFind { private int[] parent; private double[] weight; UnionFind(int size) { parent = new int[size]; weight = new double[size]; for (int i = 0; i < size; ++i) { parent[i] = i; weight[i] = 1.0d; } } public double query(int x, int y) { if (find(x) == find(y)) return weight[x] / weight[y]; return -1.0d; } public void union(int x, int y, double value) { int rx = find(x); int ry = find(y); if (rx != ry) { parent[rx] = ry; // 仅需考虑节点高不大于 2 的情况，因为 find() 时已压缩 weight[rx] = value * weight[y] / weight[x]; } } public int find(int x) { while (parent[x] != parent[parent[x]]) { weight[x] *= weight[parent[x]]; parent[x] = parent[parent[x]]; } return parent[x]; } } } \"},\"598\":{\"h\":\"最小体力消耗路径\",\"a\":\"最小体力消耗路径\"},\"599\":{\"t\":\"Description\"},\"600\":{\"t\":\"求从给定矩阵的左上角到右下角的所有连通路径中路径差值的最小值\"},\"601\":{\"t\":\"路径差值：路径可上下左右四方向连通，某一路径上所有两两相邻元素差值（绝对值）的最大值为该路径的差值\"},\"602\":{\"t\":\"Solution\"},\"603\":{\"t\":\"将所有相邻元素差值当作节点的边长进行排序，按从小到大拿边连接节点，当某条边连接后左上角和右下角变为连通，则该边即为所求，因为边是从小到大启用的，所以该边是当前连通路径的最大边，且对于全局来说最先连通的路径一定是差值最小的\"},\"604\":{\"t\":\"因为要反复判断某两点是否连通，故采用并查集实现，矩阵格子编号采用顺序计数方式，边的记录形式需同时包含两节点的编号和边长（差值）\"},\"605\":{\"t\":\"class Solution { private int[] parent; public int minimumEffortPath(int[][] heights) { int m = heights.length, n = heights[0].length; parent = new int[m * n]; for (int i = 0; i < m * n; ++i) parent[i] = i; List<int[]> edges = new ArrayList<>(2 * m * n - m - n); for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { int id = i * n + j; if (i > 0) edges.add(new int[] { id - n, id, Math.abs(heights[i][j] - heights[i - 1][j]) }); if (j > 0) edges.add(new int[] { id - 1, id, Math.abs(heights[i][j] - heights[i][j - 1]) }); } } Collections.sort(edges, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { return o1[2] - o2[2]; } }); int res = 0; for (int[] edge : edges) { union(edge[0], edge[1], edge[2]); if (find(0) == find(m * n - 1)) { res = edge[2]; break; } } return res; } private void union(int x, int y, int delta) { int rx = find(x); int ry = find(y); if (rx != ry) parent[rx] = ry; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } } \"},\"606\":{\"h\":\"水位上升的泳池中游泳\",\"a\":\"水位上升的泳池中游泳\"},\"607\":{\"t\":\"Description\"},\"608\":{\"t\":\"给定方形矩阵grid表示泳池，其中grid[i][j]表示位置(i, j)的池底高度。由于注水，在时间为t时，水池中的水位为t。当某块池底不高于泳池水位时认为其可达，可从周围可达的上下左右连通块游向该块。求何时泳池左上角到右下角才是连通的\"},\"609\":{\"t\":\"注意：此题数据集各池底高度各不相同，且在[0, n*n)中\"},\"610\":{\"t\":\"Solution\"},\"611\":{\"t\":\"这题与 [最小体力消耗路径](#最小体力消耗路径 09) 十分相似，都是按照一定条件将网格内的格子逐渐分别连通，同时每次检查给定端点是否变为连通\"},\"612\":{\"t\":\"考虑到数据集的特殊性，可以首先将索引与高度关系反转存储以备查询，随后每次时间增长时，都聚焦于高度数值等同于时刻的块，根据实际语义可以将其与四周不高于它的块连通，直到某时刻的操作令两角变得连通即为所求\"},\"613\":{\"t\":\"class Solution { private int[] parent; public int swimInWater(int[][] grid) { int n = grid.length; int size = n * n; int[][] dirs = { { 0, -1 }, { 0, 1 }, { -1, 0 }, { 1, 0 } }; parent = new int[size]; for (int i = 0; i < size; ++i) parent[i] = i; int[] index = new int[size]; for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) index[grid[i][j]] = i * n + j; for (int i = 0; i < size; ++i) { int row = index[i] / n; int col = index[i] % n; for (int[] d : dirs) { int r = row + d[0]; int c = col + d[1]; if (r >= 0 && r < n && c >= 0 && c < n && grid[r][c] <= grid[row][col]) parent[find(r * n + c)] = find(index[i]); } if (find(0) == find(size - 1)) return i; } return -1; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } } \"},\"614\":{\"h\":\"交换字符串中的元素\",\"a\":\"交换字符串中的元素\"},\"615\":{\"t\":\"Description\"},\"616\":{\"t\":\"给定字符串和其中若干索引对的数组pairs，其中pairs[i] = [a, b]表示字符串中的两个索引，可以任意多次交换索引对中任意一对索引处的字符，求在经过若干次交换后字符串能达到的按字典序最小的字符串\"},\"617\":{\"t\":\"Solution\"},\"618\":{\"t\":\"索引对实质上是连通两索引，所有索引对即表示某些索引连通成若干集合，不在索引对中的位置表示不可调换。所以先由并查集将所有索引对的信息翻译成字符串中的若干连通位置的集合，同一集合内的字符可以任意调换（直接按字典序排列），考虑到字符的可重复性，显然可以用字符对象的优先队列直接一步到位，各集合间用根节点位置来区分，所以用哈希表存各优先队列。最后拼成结果字符串时，各个位置都从其连通集合（即根节点对应的优先队列）中按已排好的顺序取出拼接即可\"},\"619\":{\"t\":\"class Solution { private int[] parent; public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) { parent = new int[s.length()]; for (int i = 0; i < s.length(); ++i) parent[i] = i; for (List<Integer> pair : pairs) union(pair.get(0), pair.get(1)); HashMap<Integer, PriorityQueue<Character>> sets = new HashMap<>(); for (int i = 0; i < s.length(); ++i) // 此处必须用 find(i)，因为还有一节点未直接与根节点相连 sets.computeIfAbsent(find(i), x -> new PriorityQueue<>()).offer(s.charAt(i)); char[] res = new char[s.length()]; for (int i = 0; i < s.length(); ++i) res[i] = sets.get(parent[i]).poll(); // 此处可直接用 parent 索引 return String.valueOf(res); } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { int rx = find(x); int ry = find(y); if (rx != ry) parent[rx] = ry; } } \"},\"620\":{\"h\":\"合并账户\",\"a\":\"合并账户\"},\"621\":{\"t\":\"Description\"},\"622\":{\"t\":\"给定一个列表accounts，其中的accounts[i]是字符串列表，其中第一个元素accounts[i][0]为人名（账户），后续元素为账户下的若干邮箱。\"},\"623\":{\"t\":\"一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。现在按实际的人来合并这些账户：若两个账户含相同邮箱地址，则认为两账户属于同一个人。但是即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。\"},\"624\":{\"t\":\"合并账户后的返回格式：不同账户间顺序随意，每个账户内的第一个元素是名称，其余元素是按字典序排列的邮箱地址\"},\"625\":{\"t\":\"input:accounts = [[\\\"John\\\", \\\"johnsmith@mail.com\\\", \\\"john00@mail.com\\\"], [\\\"John\\\", \\\"johnnybravo@mail.com\\\"], [\\\"John\\\", \\\"johnsmith@mail.com\\\", \\\"john_newyork@mail.com\\\"], [\\\"Mary\\\", \\\"mary@mail.com\\\"]] output:[[\\\"John\\\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'], [\\\"John\\\", \\\"johnnybravo@mail.com\\\"], [\\\"Mary\\\", \\\"mary@mail.com\\\"]]\"},\"626\":{\"t\":\"Solution\"},\"627\":{\"t\":\"针对不同账户（列表）间的合并，可以将accounts[i]视为独立区域，针对所有索引建立并查集，在遍历过程中若发现某邮箱已经遍历过，则将此时正遍历的账户与已存在邮箱所对应的账户进行合并，由此可见遍历时需要存储各邮箱对应的账户，又考虑到账户可能同名，故采用索引来避免直接使用人名，即遍历时用哈希表存邮箱 - 索引对，遍历完之后实际上完成了邮箱的去重和合并主体标记。\"},\"628\":{\"t\":\"接下来就是实际上的合并，此时暂且还是用索引当作合并标识，遍历上一步构建的哈希表，将所有邮箱按合并标识进行合并。考虑到邮箱第一次出现的账户索引可能不是合并的主体标识，所以得到邮箱对应的索引后还需要经过并查集找到可以作为合并标识的根。由于题目要求账户内邮箱需要排序，容器使用TreeSet。完成之后只需要将答案整理成要求的返回格式即可\"},\"629\":{\"t\":\"class Solution { private int[] parent; public List<List<String>> accountsMerge(List<List<String>> accounts) { parent = new int[accounts.size()]; for (int i = 0; i < accounts.size(); ++i) parent[i] = i; // all mails -> index, and union accounts[i] Map<String, Integer> mailToIdx = new HashMap<>(); for (int i = 0; i < accounts.size(); ++i) { List<String> accs = accounts.get(i); for (int j = 1; j < accs.size(); ++j) { if (mailToIdx.containsKey(accs.get(j))) union(i, mailToIdx.get(accs.get(j))); else mailToIdx.put(accs.get(j), i); } } // merge accounts to index(person) with sort Map<Integer, TreeSet<String>> idxMail = new HashMap<>(); for (String mail : mailToIdx.keySet()) { int idx = find(mailToIdx.get(mail)); idxMail.computeIfAbsent(idx, k -> new TreeSet<>()).add(mail); } // just convert result List<List<String>> res = new ArrayList<>(); for (Map.Entry<Integer, TreeSet<String>> entry : idxMail.entrySet()) { List<String> person = new ArrayList<>(); person.add(accounts.get(entry.getKey()).get(0)); person.addAll(entry.getValue()); res.add(person); } return res; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { parent[find(x)] = find(y); } } \"},\"630\":{\"h\":\"打砖块\",\"a\":\"打砖块\"},\"631\":{\"t\":\"Description\"},\"632\":{\"t\":\"给定二维网格，其值为1表示砖块，0表示空白，某砖块稳定（不会掉落）是指其直接或间接（上下左右）与网格顶部相连，再给定若干表示依次消除的位置，若消除的位置本就无砖块则无事发生，否则指定位置砖块消失，从而导致相邻位置的砖块可能不再与网格顶部直接或间接相连而不稳定（掉落），砖块掉落就立即从网格内消失而不会落到其他砖块上。求因每次的消除而掉落的砖块数量\"},\"633\":{\"t\":\"Solution\"},\"634\":{\"t\":\"这实际上是一个求不断断开某些节点后连通量的问题，需要逆向思维，每次因消除而减少的连通数量，等效于逆序填补时增加的连通数量，由此利用并查集实现\"},\"635\":{\"t\":\"具体实现时，并查集位置使用i*m+j规则编号，再额外多一个m*n编号表示顶部。由于需要时刻查询连通集合内节点数量，故需要维护各根节点的节点数量。开始时需将网格数据复制一份，保留原有数据，留备每次填充时先查询，若原本该位置就无砖块则填充后连通数量也必无变化。首先将所有消除一并执行，再将剩余的砖块连通成若干集合（分为与顶部相连的稳定集合与其他集合）。连通时由于是从左上往右下进行遍历，故每次只需考虑向左上的连通。完成之后就开始按消除顺序的逆序进行填充，每次填充前先记录稳定集合的砖块数量，再进行填充后的四周连通，此时需注意考虑填充位置与顶部的特殊连通，完成后再次获取此时稳定集合的砖块数量，则变化量减一（剪掉消除/填充的那块）即为正向消除的本次掉落数量，又因为变化量有减一的操作，考虑变化量为零的情况，需要进行保护性修正。最后别忘了在网格中实际地将其标为砖块\"},\"636\":{\"t\":\"class Solution { private int[] parent; private int[] weight; public int[] hitBricks(int[][] grid, int[][] hits) { int[][] dirs = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } }; int m = grid.length, n = grid[0].length; int size = m * n; // init union find set, with [size] as ceiling parent = new int[size + 1]; weight = new int[size + 1]; for (int i = 0; i <= size; ++i) { parent[i] = i; weight[i] = 1; } // copy grid, because grid is useful later int[][] copy = new int[m][n]; for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) copy[i][j] = grid[i][j]; // hit all for (int[] hit : hits) copy[hit[0]][hit[1]] = 0; // union ceiling for (int j = 0; j < n; ++j) if (copy[0][j] == 1) union(j, size); // union other sets, from left-up to right-down for (int i = 1; i < m; ++i) for (int j = 0; j < n; ++j) if (copy[i][j] == 1) { if (copy[i - 1][j] == 1) union(i * n + j, (i - 1) * n + j); if (j > 0 && copy[i][j - 1] == 1) union(i * n + j, i * n + j - 1); } // fill with reverse order int[] res = new int[hits.length]; for (int i = hits.length - 1; i >= 0; --i) { int x = hits[i][0], y = hits[i][1]; if (grid[x][y] == 0) // no meaning continue; // connect count to ceiling before filling int origin = weight[find(size)]; // union the hit position to ceiling if its row == 0 if (x == 0) union(y, size); // fill and union it arround for (int[] d : dirs) { int r = x + d[0], c = y + d[1]; if (r >= 0 && r < m && c >= 0 && c < n && copy[r][c] == 1) union(x * n + y, r * n + c); } // connect count to ceiling after filling int filled = weight[find(size)]; // delta count minus one is answer, but consider delta == 0 res[i] = Math.max(0, filled - origin - 1); copy[x][y] = 1; } return res; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { int rx = find(x); int ry = find(y); if (rx != ry) { parent[rx] = ry; weight[ry] += weight[rx]; } } } \"},\"637\":{\"h\":\"搜索\"},\"638\":{\"h\":\"01 矩阵\",\"a\":\"_01-矩阵\"},\"639\":{\"t\":\"Description\"},\"640\":{\"t\":\"矩阵值为 0 或 1，找出各 1 最近的 0\"},\"641\":{\"t\":\"Solution\"},\"642\":{\"h\":\"打开转盘锁\",\"a\":\"打开转盘锁\"},\"643\":{\"t\":\"Description\"},\"644\":{\"t\":\"四位转盘锁初始为0000，每个转盘可转转为0 ~ 9（0与9相邻），但每次只能转一个转盘的相邻数字\"},\"645\":{\"t\":\"另外给定若干转盘数位组合，在转至正确组合过程中不可遇到，问在此限制下解开锁的最少转动次数（无法解开则次数为-1）\"},\"646\":{\"t\":\"Solution\"},\"647\":{\"t\":\"不可简单地通过判断各位是否从两种方向转至正确位数是否都被限制来直接断定，因为某些位被限制的同时只需要至少其他一位不同即可绕过\"},\"648\":{\"t\":\"故还是得通过搜索来判断，因为求最少转动次数，故用 BFS。对于每种组合，不同转动结果有 8 种，过程类似于图搜索，将搜索过的组合缓存标记（可以直接并在给定的限制组合集中）\"},\"649\":{\"t\":\"值得一提的是在实现时，需要判断若0000本身就在限制组合中，则直接返回，否则需要将所有组合都搜一遍，达到极端最坏情况\"},\"650\":{\"t\":\"class Solution { public int openLock(String[] deadends, String target) { Set<String> set = new HashSet<>(); for (String s : deadends) set.add(s); int count = 0; Queue<String> que = new LinkedList<>(); if (!set.contains(\\\"0000\\\")) que.offer(\\\"0000\\\"); while (!que.isEmpty()) { int size = que.size(); while (size-- > 0) { String cur = que.poll(); if (target.equals(cur)) return count; if (!set.contains(cur)) { set.add(cur); for (String s : changeOne(cur)) if (!set.contains(s)) que.add(s); } } ++count; } return -1; } private ArrayList<String> changeOne(String src) { ArrayList<String> res = new ArrayList<>(); char[] data = src.toCharArray(); for (int i = 0; i < 4; ++i) { int cur = data[i] - '0'; data[i] = (char) ('0' + ((cur + 1) % 10)); res.add(String.valueOf(data)); data[i] = (char) ('0' + ((cur + 9) % 10)); res.add(String.valueOf(data)); data[i] = (char) ('0' + cur); } return res; } } \"},\"651\":{\"h\":\"太平洋大西洋水流问题\",\"a\":\"太平洋大西洋水流问题\"},\"652\":{\"t\":\"Description\"},\"653\":{\"t\":\"设矩阵左和上边界为太平洋，右和下边界为大西洋，矩阵元素表示海拔，其位置上的水可向四周等高或更低位置流，求所有能使水流向两个大洋的位置\"},\"654\":{\"t\":\"Solution\"},\"655\":{\"t\":\"若从各位置往边界搜固然可达，但在回溯过程中途径的位置复用性极差，故应从边界的各位置开始往高的地势搜同时记录位置向该大洋的可达性，最后遍历各位置收集可达两洋的位置\"},\"656\":{\"t\":\"class Solution { private int[][] dirs = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } }; private int[][] heights; private int m; private int n; private boolean[][] paci; private boolean[][] atla; public List<List<Integer>> pacificAtlantic(int[][] heights) { this.heights = heights; this.m = heights.length; this.n = heights[0].length; this.paci = new boolean[m][n]; this.atla = new boolean[m][n]; List<List<Integer>> res = new ArrayList<>(); for (int i = 0; i < m; ++i) { dfs(i, 0, paci); dfs(i, n - 1, atla); } for (int i = 0; i < n; ++i) { dfs(0, i, paci); dfs(m - 1, i, atla); } for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) if (paci[i][j] && atla[i][j]) res.add(Arrays.asList(i, j)); return res; } private void dfs(int row, int col, boolean[][] ocean) { ocean[row][col] = true; for (int[] d : dirs) { int r = row + d[0]; int c = col + d[1]; if (r >= 0 && r < m && c >= 0 && c < n && heights[r][c] >= heights[row][col] && !ocean[r][c]) dfs(r, c, ocean); } } } \"},\"657\":{\"h\":\"二进制矩阵中的最短路径\",\"a\":\"二进制矩阵中的最短路径\"},\"658\":{\"t\":\"Description\"},\"659\":{\"t\":\"求总左上角沿全 0 路径到右下角的最短路径长度（可以斜着走）\"},\"660\":{\"t\":\"Solution\"},\"661\":{\"t\":\"求最短路径用 BFS\"},\"662\":{\"t\":\"搜索时用另一矩阵记录当前位置是否被访问过。之所以 BFS 也能像 DFS 回溯那般用矩阵记录，是因为若即将遍历的位置已经被访问过，则说明存在不长于当前路径的另一更优路径，当前路径再经过已经访问过的位置也无意义\"},\"663\":{\"t\":\"值得注意的是实现时需确保位置入队同时标记为已访问，不可在出队寻找相邻下一位置时再标记，因为即使同一批入队，因为相邻位置的相邻位置可以是同一个，很可能会造成同一位置重复入队情况\"},\"664\":{\"t\":\"class Solution { public int shortestPathBinaryMatrix(int[][] grid) { if (grid[0][0] == 0) { int res = 1; int n = grid.length; if (n == 1) return 1; boolean[][] visited = new boolean[n][n]; int[][] dirs = { { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, -1 }, { 0, 0 }, { 0, 1 }, { 1, -1 }, { 1, 0 }, { 1, 1 } }; Queue<int[]> que = new LinkedList<>(); que.offer(new int[] { 0, 0 }); visited[0][0] = true; while (!que.isEmpty()) { int size = que.size(); while (size-- > 0) { int[] cur = que.poll(); for (int[] d : dirs) { int r = cur[0] + d[0]; int c = cur[1] + d[1]; if (r >= 0 && r < n && c >= 0 && c < n && grid[r][c] == 0 && !visited[r][c]) { if (r == n - 1 && c == n - 1) return res + 1; visited[r][c] = true; que.offer(new int[] { r, c }); } } } ++res; } } return -1; } } \"},\"665\":{\"h\":\"判断二分图\",\"a\":\"判断二分图\"},\"666\":{\"t\":\"Description\"},\"667\":{\"t\":\"给定无向图和连接情况数组（二维数组graph[u]中为邻接的不同节点），但不保证图连通（可能存在节点之间无连通路径的情况），判断该图是否为二分图\"},\"668\":{\"t\":\"二分图：所有节点分为两个独立集合，每条边连接的俩节点都属于不同集合\"},\"669\":{\"t\":\"Solution\"},\"670\":{\"h\":\"模拟\"},\"671\":{\"h\":\"对角线遍历\",\"a\":\"对角线遍历\"},\"672\":{\"t\":\"Description\"},\"673\":{\"t\":\"按对角线遍历矩阵，如：\"},\"674\":{\"t\":\"input: mat = [[1,2,3],[4,5,6],[7,8,9]]\"},\"675\":{\"t\":\"output: [1,2,4,7,5,3,6,8,9]\"},\"676\":{\"t\":\"Solution\"},\"677\":{\"t\":\"先假设每条斜线都从右上至左下遍历，再依据奇偶按需逆序\"},\"678\":{\"t\":\"可进一步实时遍历判断方向与斜线收尾的方法，未记录\"},\"679\":{\"t\":\"class Solution { public int[] findDiagonalOrder(int[][] mat) { ArrayList<Integer> temp = new ArrayList<>(); int m = mat.length, n = mat[0].length; int[] res = new int[m * n]; int cnt = 0; for (int k = 0; k < m + n - 1; ++k) { temp.clear(); int r = k < n ? 0 : k - n + 1; int c = k < n ? k : n - 1; while (r < m && c >= 0) temp.add(mat[r++][c--]); if (k % 2 == 0) Collections.reverse(temp); for (int num : temp) res[cnt++] = num; } return res; } } \"},\"680\":{\"h\":\"最长回文子串\",\"a\":\"最长回文子串\"},\"681\":{\"t\":\"Description\"},\"682\":{\"t\":\"找出给定字符串中最长的回文子串\"},\"683\":{\"t\":\"Solution\"},\"684\":{\"t\":\"枚举每个字符，在保持回文前提下，以其为中心向两端扩展，扩展期间维护最大回文串位置\"},\"685\":{\"t\":\"class Solution { public String longestPalindrome(String s) { int start = 0, end = 0; for (int i = 0; i < s.length(); ++i) { // 考虑初始回文串为 1 和 2 字符的边界情况 int len = Math.max(expand(s, i, i), expand(s, i, i + 1)); if (len > end - start) { // 当回文串由 2 字符拓展而来时，i-len/2 会导致左边界多减一 start = i - (len - 1) / 2; end = i + len / 2; } } return s.substring(start, end + 1); } private int expand(String s, int left, int right) { while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) { --left; ++right; } // 此时的俩边界为多拓展了一次的，故返回时将长度 -2 return right - left - 1; } } \"},\"686\":{\"h\":\"两数之和 II - 输入有序数组\",\"a\":\"两数之和-ii-输入有序数组\"},\"687\":{\"t\":\"Description\"},\"688\":{\"t\":\"找出非递减数组中和为给定值的两个数的下标\"},\"689\":{\"t\":\"要求空间复杂度为 O(1)\"},\"690\":{\"t\":\"Solution\"},\"691\":{\"t\":\"因为数组有序，故可以用双指针由两端逐渐逼近\"},\"692\":{\"t\":\"class Solution { public int[] twoSum(int[] numbers, int target) { int left = 0, right = numbers.length - 1; while (left < right) { int sum = numbers[left] + numbers[right]; if (sum < target) ++left; else if (sum > target) --right; else return new int[] { left + 1, right + 1 }; } return new int[] { -1, -1 }; } } \"},\"693\":{\"h\":\"翻转单词顺序\",\"a\":\"翻转单词顺序\"},\"694\":{\"t\":\"Description\"},\"695\":{\"t\":\"将给定英文句子字符串的单词逆序（需除掉一切多余空格），如：\"},\"696\":{\"t\":\"input: \\\" hello world! \\\"\"},\"697\":{\"t\":\"output: \\\"world! hello\\\"\"},\"698\":{\"t\":\"Solution\"},\"699\":{\"h\":\"求众数 II\",\"a\":\"求众数-ii\"},\"700\":{\"t\":\"Description\"},\"701\":{\"t\":\"求非空数组中所有出现次数大于数组长度三分之一的元素\"},\"702\":{\"t\":\"Solution\"},\"703\":{\"t\":\"此类求多数元素的问题考虑用摩尔投票法，其实质就是不同元素对拼消耗，最后多数元素肯定会相应剩下。\"},\"704\":{\"t\":\"例如 N 个元素中求出现次数大于 N÷k 的元素，故先拟定 k−1 个可能存在的候选多数元素【符合条件的最多只可能有 k−1 个】，每次取 k−1 个不同元素进行抵消，最后若有剩下的候选元素，则对每种进行计数核查是否符合要求。\"},\"705\":{\"t\":\"具体实现是设若干候选变量及其相应计数变量，在遍历数组的每个元素时，若当前元素与某个剩余的变量相同（且相应计数非零），则将其计数加一；若与各候选变量都不同，则伺机选取坑位占据，以备接下来的一组抵消，若此时发现无坑位，则说明已凑够一组不同元素，立即进行抵消。遍历完之后若有剩余候选变量，再到原数组中统计其次数是否达标，最终确认答案\"},\"706\":{\"t\":\"class Solution { public List<Integer> majorityElement(int[] nums) { int r1 = 0, c1 = 0, r2 = 0, c2 = 0; for (int num : nums) { if (c1 > 0 && num == r1) ++c1; else if (c2 > 0 && num == r2) ++c2; else if (c1 == 0) { r1 = num; ++c1; } else if (c2 == 0) { r2 = num; ++c2; } else { --c1; --c2; } } List<Integer> res = new ArrayList<>(); if (c1 > 0 || c2 > 0) { int n1 = 0, n2 = 0; for (int num : nums) { if (num == r1) ++n1; else if (num == r2) ++n2; } if (n1 > nums.length / 3) res.add(r1); if (n2 > nums.length / 3) res.add(r2); } return res; } } \"},\"707\":{\"h\":\"根据身高重建队列\",\"a\":\"根据身高重建队列\"},\"708\":{\"t\":\"Description\"},\"709\":{\"t\":\"给定一群人的乱序的属性数组，其中各元素 [hi​,ki​] 表示第 i 个人的身高为 hi​ 且前面恰有 ki​ 个人的身高不低于 hi​ ，将属性数组重建为有序的并返回\"},\"710\":{\"t\":\"input: [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\"},\"711\":{\"t\":\"output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\"},\"712\":{\"t\":\"Solution\"},\"713\":{\"t\":\"分为两个部分来考虑，以什么顺序从原数组中抽出来人，还有将抽出来的人怎么插入新建的队列中去。实际上新建的队列只需对各人的第二属性负责即可，那么显然如果将人从高到低逐渐插入新队列，就不会对已插入的人的第二属性产生影响，并且当前插入者的第二属性恰好就是插入新队列的索引位置，由此可得从原数组中抽人的第一顺序应当是其第一属性（身高），当身高相同时考虑第二属性，因为其表示的是前面有多少个的问题，所以只需稍加试验即可得应按照升序进行抽取\"},\"714\":{\"t\":\"class Solution { public int[][] reconstructQueue(int[][] people) { Arrays.sort(people, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { return o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]; } }); List<int[]> res = new LinkedList<>(); for (int[] p : people) res.add(p[1], p); return res.toArray(new int[res.size()][]); } } \"},\"715\":{\"h\":\"分发糖果\",\"a\":\"分发糖果\"},\"716\":{\"t\":\"Description\"},\"717\":{\"t\":\"若干人站成一排，给定代表各位评分的整数数组，依据评分给每人发糖果，要求每人至少发一个，并且相邻两人评分更高的分给更多糖果，求满足要求的最少糖果数\"},\"718\":{\"t\":\"Solution\"},\"719\":{\"h\":\"非递减数列\",\"a\":\"非递减数列\"},\"720\":{\"t\":\"Description\"},\"721\":{\"t\":\"判断给定数组是否能在最多改变一个元素条件下成为非递减的\"},\"722\":{\"t\":\"Solution\"},\"723\":{\"t\":\"能变成非递减数组的话，原数组最多只能有一次递减发生。考虑发生递减的连续的三个元素a, b, c，其中a <= b且b > c，实际上只有两种情况：\"},\"724\":{\"t\":\"a <= c：既可将b降至c，也可将c升至b。但应尽可能使紧接着c的元素满足非递减，所以应将b降至c\"},\"725\":{\"t\":\"a > c: 只有将c升至a一种方式\"},\"726\":{\"t\":\"在遍历检查时记录是否已有一次递减发生，若已发生则直接返回。基于此可知，在检测到可能存在的第二次递减时，一定用不到第一次递减的b元素，故上述第一种情况下无需实际地改变b的值\"},\"727\":{\"t\":\"class Solution { public boolean checkPossibility(int[] nums) { if (nums.length == 1) return true; boolean one = nums[0] > nums[1]; for (int i = 1; i < nums.length - 1; ++i) { if (nums[i] > nums[i + 1]) { if (one) return false; one = true; if (nums[i - 1] > nums[i + 1]) nums[i + 1] = nums[i]; } } return true; } } \"},\"728\":{\"h\":\"回文子串\",\"a\":\"回文子串\"},\"729\":{\"t\":\"Description\"},\"730\":{\"t\":\"求给定字符串所有回文子串的数量\"},\"731\":{\"t\":\"Solution\"},\"732\":{\"t\":\"枚举所有可能的回文子串中心，将各中心向两侧尽可能延伸，以此枚举所有回文子串，时间复杂度比直接枚举子串两端再判断是否回文要低。\"},\"733\":{\"t\":\"回文子串的中心有单字符和双字符两种，需要分开讨论扩展。枚举所有中心时有个小技巧：对于每个字符作为中心左端，中心右端要么是其本身，要么是右侧的下一个字符，故索引呈现强烈的奇偶规律性，可以将中心的左右端点并在一个循环中进行枚举，归纳可得共需枚举2*n-1次，左端点为i/2再取整，右端点为i/2 + i%2\"},\"734\":{\"t\":\"class Solution { public int countSubstrings(String s) { int res = 0; for (int i = 0; i < 2 * s.length() - 1; ++i) { int l = i >> 1, r = (i >> 1) + (i & 1); while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) { --l; ++r; ++res; } } return res; } } \"},\"735\":{\"h\":\"找出游戏的获胜者\",\"a\":\"找出游戏的获胜者\"},\"736\":{\"t\":\"Description\"},\"737\":{\"t\":\"n个人围成一圈，顺时针编号1 ~ n，从 1 号开始（含 1 号）往后数第k个淘汰，再从淘汰位置的下一个开始数，求如此淘汰到只剩最后一人的编号\"},\"738\":{\"t\":\"Solution\"},\"739\":{\"h\":\"盛最多水的容器\",\"a\":\"盛最多水的容器\"},\"740\":{\"t\":\"Description\"},\"741\":{\"t\":\"给定表示每个位置高度的整型数组，仅可选其中两条线与地面构成容器，求存储水的最大量\"},\"742\":{\"t\":\"Solution\"},\"743\":{\"t\":\"用双指针从两端相向逼近并维护最大储水量。指针如何移动？因为指针是相向移动的，故每次移动横向距离减小，而储水量的高取决于二者高度的较小值，故移动较高的指针必不可能获得更大的储水量，移动高度低的指针才有可能。\"},\"744\":{\"t\":\"当二者一样高时可以同时移动两个指针，因为若只移动一个的话，不管新位置高度如何，横向距离变小且最小高度不会变大，储水量必变小。更进一步，移动的那个指针即使一直移到紧挨另一个，也不可能会获得更大的储水量，必须一个移动后另一个也移动才可能，故合并为两指针同时相向移动\"},\"745\":{\"t\":\"class Solution { public int maxArea(int[] height) { int res = 0; int left = 0, right = height.length - 1; while (left < right) { res = Math.max(res, (right - left) * Math.min(height[left], height[right])); if (height[left] < height[right]) ++left; else if (height[left] > height[right]) --right; else { ++left; --right; } } return res; } } \"},\"746\":{\"h\":\"计算右侧小于当前元素的个数\",\"a\":\"计算右侧小于当前元素的个数\"},\"747\":{\"t\":\"Description\"},\"748\":{\"t\":\"给定整型数组nums，要求计算新数组counts，其中counts[i]的值是nums[i]右侧小于nums[i]的元素的数量\"},\"749\":{\"t\":\"详情\"},\"750\":{\"t\":\"可以转化为单点更新、区间查询型的离散化树状数组的应用。将原数组去重再排序并由此建立树状数组，从右至左遍历原数组的同时维护树状数组，并查询小于当前遍历值的所有数的数量和（因为是从右向左遍历的原数组，故树状数组中各值的数量即为当前遍历值右侧的数据）\"},\"751\":{\"t\":\"还有基于归并排序变种的解法，见官方题解\"},\"752\":{\"t\":\"class Solution { public List<Integer> countSmaller(int[] nums) { List<Integer> res = new ArrayList<>(); Set<Integer> set = new TreeSet<>(); for (int n : nums) set.add(n); int[] a = new int[set.size()]; int idx = 0; for (int n : set) a[idx++] = n; int[] c = new int[a.length + 1]; for (int i = nums.length - 1; i >= 0; --i) { idx = Arrays.binarySearch(a, nums[i]) + 1; int sum = 0; for (int j = idx - 1; j > 0; j -= j & -j) sum += c[j]; res.add(sum); for (; idx < c.length; idx += idx & -idx) c[idx] += 1; } Collections.reverse(res); return res; } } \"},\"753\":{\"h\":\"翻转对\",\"a\":\"翻转对\"},\"754\":{\"t\":\"Description\"},\"755\":{\"t\":\"求给定数组nums所含翻转对的数量，其中翻转对指满足i < j && nums[i] > 2*nums[j]的索引对\"},\"756\":{\"t\":\"Solution\"},\"757\":{\"t\":\"求翻转对与归并排序过程十分契合，不断合并已排序子数组的过程中，可以顺便求出索引恰分别在左右子数组中的翻转对数量，而索引分布在同一子数组范围内的翻转对则在前一轮排序时已求出，故可借助整个归并排序过程逐渐求出所有翻转对。\"},\"758\":{\"t\":\"在归并排序中合并两已升序排序的子数组过程中，设分别处于左右子数组的索引分别为i和j，本次待归并的总范围为[left, right]且2*len == right-left+1，右子数组起始索引为left+len，对于固定的nums[i]，在右侧维护最大的区间[left+len, end)，使得end处的元素为区间向右扩展遇到的首个不满足与nums[i]组成翻转对的元素，则对于i作为翻转对的左元素的情况来说，归并范围内本次需新增的数量为end - (left + len)，遍历左子数组中所有元素即可累加出所有新增翻转对数量，并且考虑到左右子数组的有序性，end在全过程随i单调不减。\"},\"759\":{\"t\":\"本题还可用树状数组配合离散化来解，官方题解不好，可参考民间题解\"},\"760\":{\"t\":\"class Solution { public int reversePairs(int[] nums) { int cnt = 0; int[] tmp = new int[nums.length]; for (int len = 1; len < nums.length; len <<= 1) { for (int left = 0; left < nums.length - len; left += len << 1) { int right = Math.min(nums.length - 1, left + (len << 1) - 1); for (int i = left; i <= right; ++i) tmp[i] = nums[i]; int l = left, r = left + len; int end = r; // [r, end) for (int i = l; i < r; ++i) { while (end <= right && (long) tmp[i] > (long) tmp[end] << 1) ++end; // end 随 i 单调不减 cnt += end - r; // end 最大是 right+1，恰表示开区间个数 } for (int i = left; i <= right; ++i) { if (l == left + len) nums[i] = tmp[r++]; else if (r > right || tmp[l] <= tmp[r]) nums[i] = tmp[l++]; else nums[i] = tmp[r++]; } } } return cnt; } } \"},\"761\":{\"h\":\"旋转数组\",\"a\":\"旋转数组\"},\"762\":{\"t\":\"Description\"},\"763\":{\"t\":\"将给定数组向右轮转k个位置\"},\"764\":{\"t\":\"Solution\"},\"765\":{\"h\":\"说明\"},\"766\":{\"h\":\"说明\",\"a\":\"说明\"},\"767\":{\"t\":\"此目录下的文章都是关于工作的\"},\"768\":{\"h\":\"Java 知识点\"},\"769\":{\"h\":\"记录一些杂的知识点\",\"a\":\"记录一些杂的知识点\"},\"770\":{\"t\":\"线程池\"},\"771\":{\"t\":\"AQS(AbstractQueuedSyncronizer)\"},\"772\":{\"t\":\"Redis 的 SDS、Redis 的 zset 底层（跳表）、Redis 的 list 底层\"},\"773\":{\"t\":\"Redis 过期删除策略和内存淘汰策略\"},\"774\":{\"t\":\"B+ 树插入删除操作\"},\"775\":{\"t\":\"二叉树插入节点后再平衡操作\"},\"776\":{\"t\":\"数据库索引及其结构、索引失效场景\"},\"777\":{\"t\":\"RC 与 RR 的 MVCC 实现、当前读与快照读\"},\"778\":{\"t\":\"MySQL 中 RedoLog 与 BinLog 一致性问题、Canal 原理\"},\"779\":{\"t\":\"MySQL 与 Redis 一致性问题\"},\"780\":{\"t\":\"MySQL 的锁\"},\"781\":{\"t\":\"数据库迁移时如何确保数据一致性\"},\"782\":{\"t\":\"基于 Lock+Condition 实现自定义阻塞队列\"},\"783\":{\"t\":\"HashMap 为什么线程不安全\"},\"784\":{\"t\":\"Redis 缓存穿透、缓存击穿、缓存雪崩、(一致性哈希算法、jump consistent hash)\"},\"785\":{\"t\":\"Redis 持久化\"},\"786\":{\"t\":\"抽象类与接口\"},\"787\":{\"t\":\"synchronized 原理、Lock 原理\"},\"788\":{\"t\":\"死锁的产生、防止、避免、检测和解除\"},\"789\":{\"t\":\"synchronized 原理、Java 常用锁的使用\"},\"790\":{\"t\":\"MySQL 日志分类及简介、MySQL 事务日志\"},\"791\":{\"t\":\"操作系统 IO 模型、select & poll & epoll\"},\"792\":{\"t\":\"http & https\"},\"793\":{\"t\":\"BIO & NIO & AIO\"},\"794\":{\"t\":\"操作系统文件读写流程\"},\"795\":{\"t\":\"Java 实现线程安全的三种方式及如何保证线程安全\"},\"796\":{\"t\":\"粘包及其解决方案\"},\"797\":{\"t\":\"TCP 的可靠性\"},\"798\":{\"t\":\"Kafka 消费流程\"},\"799\":{\"t\":\"策略模式、观察者模式\"},\"800\":{\"h\":\"代码上线后 CPU 占用高排查过程\",\"a\":\"代码上线后-cpu-占用高排查过程\"},\"801\":{\"t\":\"top查看占用 CPU 占用高的 PID（进程号）\"},\"802\":{\"t\":\"top -Hp 进程号查看该进程下所有线程的占用情况\"},\"803\":{\"t\":\"printf \\\"%x\\\\n\\\" 线程号获取目标线程的十六进制表示\"},\"804\":{\"t\":\"jstack 进程号 | grep -A 30 线程号的十六进制表示输出该线程状态的前 30 行，定位到具体代码问题\"},\"805\":{\"t\":\"可额外执行jstat -gcutil 进程号 统计间隔毫秒数 统计次数（缺省则一直统计）来查看进程 GC 的持续变化情况，若其中的FGC列很大且一直增大则确认 Full GC\"},\"806\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"807\":{\"h\":\"JS 笔记\"},\"808\":{\"t\":\"学习的 Mr.Hope 的教程，仅记录与 Java 不同且需要注意的地方\"},\"809\":{\"h\":\"变量\",\"a\":\"变量\"},\"810\":{\"t\":\"JavaScript 的保留字：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield\"},\"811\":{\"t\":\"申明变量别用var，最好用let或const代替\"},\"812\":{\"t\":\"最好用 strict 模式：在代码第一行加上'use strict';\"},\"813\":{\"t\":\"转换为布尔值的结果： \"},\"814\":{\"t\":\"仅这些为false: undefined, null, false, 0, NaN, \\\"\\\", ''\"},\"815\":{\"t\":\"特别注意这些为true: [], {}\"},\"816\":{\"t\":\"NaN与所有值都不相等，包括自己，只能用isNaN(NaN);判断\"},\"817\":{\"t\":\"浮点数得用差的绝对值判断：Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001;\"},\"818\":{\"t\":\"for ... in对数组循环得到的元素为字符串 \"},\"819\":{\"t\":\"遍历集合类型时用for ... of或forEach()\"},\"820\":{\"t\":\"反引号对``可表示跨行字符串，且可以用模版${}填充多个字符变量\"},\"821\":{\"t\":\"对象类似 python 的字典，且定义时最后的键值对后不加,，用.访问属性 \"},\"822\":{\"t\":\"若键为非法变量名，则需写成字符串形式，且用[]访问\"},\"823\":{\"t\":\"访问不存在的属性返回undefined\"},\"824\":{\"t\":\"ES6 添加了Set和Map数据类型\"},\"825\":{\"h\":\"运算符\",\"a\":\"运算符\"},\"826\":{\"t\":\"坚持用===进行比较，避免==自动转换类型导致的错误 \"},\"827\":{\"t\":\"switch内部采用的是===\"},\"828\":{\"t\":\"typeof可用于检查变量是否声明，instanceof可区分数组和对象\"},\"829\":{\"h\":\"数组\",\"a\":\"数组\"},\"830\":{\"t\":\"数组可同时含不同类型元素\"},\"831\":{\"t\":\"可通过给length属性赋值改变数组长度，通过索引赋值时超范围也会改变数组长度（但最好别）\"},\"832\":{\"t\":\"空数组pop()返回undefined\"},\"833\":{\"t\":\"在数组头添加/删除：unshift()/shift()\"},\"834\":{\"t\":\"splice(): 在指定索引处开始删除若干元素，再添加若干元素\"},\"835\":{\"t\":\"concat(): 连接两个数组，并返回新数组（会将参数数组中的数组拆成单个元素）\"},\"836\":{\"t\":\"join(): 把数组元素用参数连成字符串\"},\"837\":{\"h\":\"Vim 简明教程\"},\"838\":{\"h\":\"Normal Mode\",\"a\":\"normal-mode\"},\"839\":{\"h\":\"Motions\",\"a\":\"motions\"},\"840\":{\"t\":\"j: next line\"},\"841\":{\"t\":\"gj: next wrapped line\"},\"842\":{\"t\":\"k: previous line\"},\"843\":{\"t\":\"gk: previous wrapped line\"},\"844\":{\"t\":\"h: back char\"},\"845\":{\"t\":\"l: next char\"},\"846\":{\"t\":\"w: next word, separated by space and symbol\"},\"847\":{\"t\":\"W: next word, separated by space\"},\"848\":{\"t\":\"e: word end, separated by space and symbol\"},\"849\":{\"t\":\"E: word end, separated by space\"},\"850\":{\"t\":\"b: previous word, separated by space and symbol\"},\"851\":{\"t\":\"B: previous word, separated by space\"},\"852\":{\"t\":\"ge: previous word end, separated by space and symbol\"},\"853\":{\"t\":\"gE: previous word end, separated by space\"},\"854\":{\"t\":\"f{char} / F{char}: find char after / behind cursor\"},\"855\":{\"t\":\"t{char} / T{char}: until char after / behind cursor\"},\"856\":{\"t\":\"; / ,: repeat last char search towards next / previous\"},\"857\":{\"t\":\"0: to first char of line\"},\"858\":{\"t\":\"^: to first non-blank char of line\"},\"859\":{\"t\":\"$: to end of line\"},\"860\":{\"t\":\"g_: to non-blank char end of line\"},\"861\":{\"t\":\"}: jump paragraph downwards\"},\"862\":{\"t\":\"{: jump paragraph upwards\"},\"863\":{\"t\":\"[{: goto start of cursor block\"},\"864\":{\"t\":\"]}: goto end of cursor block\"},\"865\":{\"t\":\"Ctrl + D: move down half page\"},\"866\":{\"t\":\"Ctrl + U: move up half page\"},\"867\":{\"t\":\"Ctrl + F: move down page\"},\"868\":{\"t\":\"Ctrl + B: move up page\"},\"869\":{\"t\":\"Ctrl + E: move down one line\"},\"870\":{\"t\":\"Ctrl + Y: move up one line\"},\"871\":{\"t\":\"n%: goto n% of whole file\"},\"872\":{\"t\":\"zz: move cursor line to center\"},\"873\":{\"t\":\"zt: move cursor line to top\"},\"874\":{\"t\":\"zb: move cursor line to bottom\"},\"875\":{\"t\":\"/{pattern}: search forward\"},\"876\":{\"t\":\"?{pattern}: search backward \"},\"877\":{\"t\":\"<Enter>: end pattern input and start match\"},\"878\":{\"t\":\"{pattern} can be regular expression\"},\"879\":{\"t\":\"n / N: next / previous match\"},\"880\":{\"t\":\"/<Enter> / ?<Enter>: last forward / backward search\"},\"881\":{\"t\":\"*: search crusor word forward\"},\"882\":{\"t\":\"#: search crusor word backward\"},\"883\":{\"t\":\"{count}{command}: multiply effect of command\"},\"884\":{\"t\":\"gd: goto local variable definition\"},\"885\":{\"t\":\"gD: goto global variable definition\"},\"886\":{\"t\":\"gf: goto file in import\"},\"887\":{\"t\":\"gg: goto file top\"},\"888\":{\"t\":\"{line}gg: goto special line\"},\"889\":{\"t\":\"G: goto file end\"},\"890\":{\"t\":\"H/M/L: move cursor to top/middle/bottom of view\"},\"891\":{\"t\":\"{line}G / :{line}<Enter>: goto start of {line}\"},\"892\":{\"t\":\"+ / <Enter>: goto non-blank char of next line\"},\"893\":{\"t\":\"-: goto non-blank char of previous line\"},\"894\":{\"t\":\"%: goto matching ({[]})\"},\"895\":{\"h\":\"Operators\",\"a\":\"operators\"},\"896\":{\"t\":\"{opeartor}{count}{motion} / {count}{operator}{motion}\"},\"897\":{\"t\":\"eg: d5j, df', dt', d/hello, ggdG, 3c/hello, ggyG, gUw, 4f\\\", d0\"},\"898\":{\"t\":\"Operators: \"},\"899\":{\"t\":\"c: change [cut and switch to insert mode]\"},\"900\":{\"t\":\"y: yank (copy)\"},\"901\":{\"t\":\"d: cut\"},\"902\":{\"t\":\"p: paste after cursor\"},\"903\":{\"t\":\"=: format code\"},\"904\":{\"t\":\"g~: switch uppercase or lowercase [gU or gu]\"},\"905\":{\"t\":\">: add indentation\"},\"906\":{\"t\":\"<: remove indentation\"},\"907\":{\"t\":\"Double operator to perform on whole line. \"},\"908\":{\"t\":\"eg: dd, cc, g~~\"},\"909\":{\"t\":\"Capitalize operator to perform stronger or alternate. \"},\"910\":{\"t\":\"D: delete from cursor to end of line\"},\"911\":{\"t\":\"cc: change whole line\"},\"912\":{\"t\":\"C: change from cursor to end of line\"},\"913\":{\"t\":\"Y / yy: copy whole line\"},\"914\":{\"t\":\"P: paste before cursor\"},\"915\":{\"t\":\">>: shift line right\"},\"916\":{\"t\":\"<<: shift line left\"},\"917\":{\"t\":\"==: format line\"},\"918\":{\"t\":\"{i|a}{text-object-id}\"},\"919\":{\"t\":\"i: inner [text object and whitespace]\"},\"920\":{\"t\":\"a: around [text object without whitespace]\"},\"921\":{\"t\":\"{operator}{i|a}{text-object}\"},\"922\":{\"t\":\"w: word\"},\"923\":{\"t\":\"s: sentence\"},\"924\":{\"t\":\"p: paragraph\"},\"925\":{\"t\":\"b / (: block surrounded by ()\"},\"926\":{\"t\":\"B / {: block surrounded by {}\"},\"927\":{\"t\":\"\\\" / ': quoted text [also `]\"},\"928\":{\"t\":\"< / >: block surrounded by <>\"},\"929\":{\"t\":\"[ / ]: block surrounded by []\"},\"930\":{\"t\":\"t: tag [for HTML]\"},\"931\":{\"t\":\"eg: daw, ciw, das, da\\\", ci\\\", dap, dab / da( / da), daB / da{ / da}\"},\"932\":{\"t\":\".: repeat last change\"},\"933\":{\"t\":\"x / dl: cut cursor char\"},\"934\":{\"t\":\"X / dh: cut char before cursor\"},\"935\":{\"t\":\"s / ch: cut cursor char and switch insert mode\"},\"936\":{\"t\":\"r: replace cursor char\"},\"937\":{\"t\":\"R: replace words after cursor\"},\"938\":{\"t\":\"~: switch char case\"},\"939\":{\"t\":\"u: undo last change\"},\"940\":{\"t\":\"{count}u: undo last count changes\"},\"941\":{\"t\":\"Crtl + R: redo last change\"},\"942\":{\"h\":\"NORMAL mode trikies\",\"a\":\"normal-mode-trikies\"},\"943\":{\"t\":\"i: goto INSERT mode before cursor\"},\"944\":{\"t\":\"a: goto INSERT mode after cursor\"},\"945\":{\"t\":\"I: goto INSERT mode at the beginning of line\"},\"946\":{\"t\":\"A: goto INSERT mode at the line end\"},\"947\":{\"t\":\"o: insert a new line below the current line and goto INSERT mode\"},\"948\":{\"t\":\"O: insert a new line above the current line and goto INSERT mode\"},\"949\":{\"t\":\"gi: goto INSERT mode at the last place changed\"},\"950\":{\"h\":\"INSERT mode trikies\",\"a\":\"insert-mode-trikies\"},\"951\":{\"t\":\"Ctrl + h: delete last char typed\"},\"952\":{\"t\":\"Ctrl + w: delete last word typed\"},\"953\":{\"t\":\"Ctrl + u: delete last line typed\"},\"954\":{\"h\":\"VISUAL mode\",\"a\":\"visual-mode\"},\"955\":{\"t\":\"v: VISUAL mode - char\"},\"956\":{\"t\":\"V: VISUAL mode - linewise\"},\"957\":{\"t\":\"Ctrl + V: VISUAL - rect block\"},\"958\":{\"t\":\"gn / gN: \"},\"959\":{\"t\":\"select the match in VISUAL mode if cursor on top of search match\"},\"960\":{\"t\":\"extend current selection until the end of the next much if in VISUAL mode\"},\"961\":{\"t\":\"operate on the next match if in Operator-pending mode, that's {operator}gn\"},\"962\":{\"h\":\"Copying and Pasting\",\"a\":\"copying-and-pasting\"},\"963\":{\"t\":\"yl: yanka a letter\"},\"964\":{\"t\":\"yh: yanka a letter before cursor\"},\"965\":{\"t\":\"yaw: yank a word\"},\"966\":{\"t\":\"yas: yank a sentence\"},\"967\":{\"t\":\"yi(: yank all in (\"},\"968\":{\"t\":\"gp / gP: same as p / P, then put cursor after the pasted selection\"},\"969\":{\"t\":\"yank characters or lines will be different when pasting, around cursor or at new line.\"},\"970\":{\"t\":\"yy{count}p: duplicate count lines\"},\"971\":{\"t\":\"ddp / ddP: swap lines\"},\"972\":{\"t\":\"xp / dlp: swap characters\"},\"973\":{\"h\":\"Registers\",\"a\":\"registers\"},\"974\":{\"h\":\"in NORMAL mode\",\"a\":\"in-normal-mode\"},\"975\":{\"t\":\"\\\"{register name}{y / d / c}{motion}\"},\"976\":{\"t\":\"\\\": the unnamed register which is default\"},\"977\":{\"t\":\"a ~ z: the named registers which can be used explicitly\"},\"978\":{\"t\":\"0: yank register that store the last thing yanked\"},\"979\":{\"t\":\"1 ~ 9: cut register that store the last 9 things cut by delete or change command\"},\"980\":{\"t\":\"eg: \\\"ayas -> \\\"ap\"},\"981\":{\"t\":\":reg {register}: inspect specific register content\"},\"982\":{\"h\":\"in INSERT mode\",\"a\":\"in-insert-mode\"},\"983\":{\"t\":\"Ctrl-R {register}\"},\"984\":{\"t\":\"eg: Ctrl-R \\\", Ctrl-R a, Ctrl-R 0\"},\"985\":{\"t\":\"can paste a line just after cursor in INSERT mode\"},\"986\":{\"h\":\"Command-line mode\",\"a\":\"command-line-mode\"},\"987\":{\"t\":\"Ex command: start with : and search pattern: start with / or ?\"},\"988\":{\"t\":\":e / :edit {relative-path-to-file}: open or create file\"},\"989\":{\"t\":\":w / :write: save file (soft command)\"},\"990\":{\"t\":\":q / :quit: close file (soft command)\"},\"991\":{\"t\":\"!: combine with other soft command to force execute\"},\"992\":{\"t\":\":w!: save file even if readonly\"},\"993\":{\"t\":\":q!: close file without saving\"},\"994\":{\"t\":\":wq: save and close file\"},\"995\":{\"t\":\":wa / :wall: save all files\"},\"996\":{\"t\":\":qa / :qall: close all files\"},\"997\":{\"t\":\":wqa / :wqall: save and close all files\"},\"998\":{\"t\":\":qa! / :qall!: close all files without saving\"},\"999\":{\"t\":\":![command]: run command in shell temporarily\"},\"1000\":{\"t\":\":[range]command[options]: text-editing Ex command\"},\"1001\":{\"t\":\":[range]d [register]: delete lines and put them to register \"},\"1002\":{\"t\":\"eg: 10,12d a: delete lines 10 ~ 12 and put them inside the a register\"},\"1003\":{\"t\":\"some ways to express range extremes \"},\"1004\":{\"t\":\"numbers: :10,12d\"},\"1005\":{\"t\":\"offsets: :10,+2d\"},\"1006\":{\"t\":\". represent current line: :.,+2d\"},\"1007\":{\"t\":\"% represent whole line: :%d\"},\"1008\":{\"t\":\"0 represent beginning of file: :0,+10d\"},\"1009\":{\"t\":\"$ represent end of file: :.,$d\"},\"1010\":{\"t\":\"after make text selection in VISUAL mode and then type :, line area will pre-populated with :'<,'> so that can continue input command like d\"},\"1011\":{\"t\":\"Ex commands allow apply command over multiple lines with no move of cursor. If need change multiple lines, consider using Ex commands.\"},\"1012\":{\"t\":\"useful Ex commands: :yank, :put, :copy, :move\"},\"1013\":{\"t\":\"@:: repeat last command\"},\"1014\":{\"t\":\"@@: repeat again after @:\"},\"1015\":{\"t\":\":substitute: to substitute text\"},\"1016\":{\"t\":\":[range]s/{pattern}/{substitute}/{flags}\"},\"1017\":{\"t\":\"range: define range to apply substitute\"},\"1018\":{\"t\":\"pattern: search pattern that describe the text to be changed. /{pattern} support regular expression\"},\"1019\":{\"t\":\"substitute: the text to be substitute\"},\"1020\":{\"t\":\"flags: set options that configure substitution\"},\"1021\":{\"t\":\"eg: \"},\"1022\":{\"t\":\":s/led/gold: replace the first occurrence of led in the current line with gold\"},\"1023\":{\"t\":\":s/led/gold/g: change all occurrences in the current line (g means global)\"},\"1024\":{\"t\":\":%s/led/gold/g: change all occurrences for whole file\"},\"1025\":{\"t\":\"more flags: i for case insensitive search, c to confirm each and every substitution\"},\"1026\":{\"t\":\":%s/^#//: change the indentation level of all titles in markdown file \"},\"1027\":{\"t\":\"%: for whole file\"},\"1028\":{\"t\":\"s: substitute\"},\"1029\":{\"t\":\"^#: any # at the beginning of a line\"},\"1030\":{\"t\":\"//: for an empty char\"},\"1031\":{\"t\":\"VSCodeVim setting has changed, Vim:Gdefault opposite the /g flag\"},\"1032\":{\"h\":\"Splits and Tabs\",\"a\":\"splits-and-tabs\"},\"1033\":{\"t\":\"open file in horizontal split: \"},\"1034\":{\"t\":\":sp {relative-path-to-file}\"},\"1035\":{\"t\":\"<Ctrl-W> S\"},\"1036\":{\"t\":\"open file in vertical split: \"},\"1037\":{\"t\":\":vsp {relative-path-to-file}\"},\"1038\":{\"t\":\"<Ctrl-W> V\"},\"1039\":{\"t\":\"After creating split, type CMD-P to open new file\"},\"1040\":{\"t\":\"A split window can be split again\"},\"1041\":{\"t\":\"<Ctrl-W> + h / j / k / l: move between splits\"},\"1042\":{\"t\":\":tabnew {file}: open file in new tab\"},\"1043\":{\"t\":\":tabn / :tabnext: goto next tab\"},\"1044\":{\"t\":\":tabp / :tabprevious: goto previous tab\"},\"1045\":{\"t\":\":tabo / :tabonly: close all other tabs\"},\"1046\":{\"h\":\"Vim-surround built-in plugin\",\"a\":\"vim-surround-built-in-plugin\"},\"1047\":{\"t\":\"ds / cs / ys{count}{motion}\"},\"1048\":{\"t\":\"ds{char}: delete surrounding char\"},\"1049\":{\"t\":\"eg: ds'\"},\"1050\":{\"t\":\"cs{old}{new}: change surrounding old to new\"},\"1051\":{\"t\":\"eg: cs'\\\"\"},\"1052\":{\"t\":\"ys{motion}{char}: add surrounding \"},\"1053\":{\"t\":\"eg: ysaptli>: to surround paragraph with an <li> tag\"},\"1054\":{\"t\":\"in VISUAL mode, select text then type S{char}, selection text will be surrounded by char\"},\"1055\":{\"h\":\"Custom mappings\",\"a\":\"custom-mappings\"},\"1056\":{\"t\":\"setting name: vim.normalModeKeyBindingsNonRescursive\"},\"1057\":{\"t\":\"leader key: \\\\ change to <Space>\"},\"1058\":{\"t\":\"J means 5j\"},\"1059\":{\"t\":\"K means 5k\"},\"1060\":{\"t\":\"<Leader> - j means J: join lines together\"},\"1061\":{\"t\":\"switch between splits: \"},\"1062\":{\"t\":\"<Ctrl-h> means <Ctrl-w> + h\"},\"1063\":{\"t\":\"<Ctrl-j> means <Ctrl-w> + j\"},\"1064\":{\"t\":\"<Ctrl-k> means <Ctrl-w> + k\"},\"1065\":{\"t\":\"<Ctrl-l> means <Ctrl-w> + l\"},\"1066\":{\"t\":\":noh: remove highlights matching patterns of search\"},\"1067\":{\"h\":\"Moving faster\",\"a\":\"moving-faster\"},\"1068\":{\"h\":\"Vim-Sneak\",\"a\":\"vim-sneak\"},\"1069\":{\"t\":\"setting name: vim.sneak\"},\"1070\":{\"t\":\"s{char}{char}: cursor goto first occurrence of that two char sequence\"},\"1071\":{\"t\":\"; for next occurrence or , for previous one\"},\"1072\":{\"t\":\"S{char}{char}: similar but backward\"},\"1073\":{\"t\":\"{operator}z{char}{char}: apply operator over the text traversed by the sneak motion\"},\"1074\":{\"t\":\"vim-sneak use z instead of s with other operators, because s is already taken by vim-surround\"},\"1075\":{\"h\":\"Vim-EasyMotion\",\"a\":\"vim-easymotion\"},\"1076\":{\"t\":\"setting name: vim.easymotion\"},\"1077\":{\"t\":\"All the key below need to add <leader><leader> first\"},\"1078\":{\"t\":\"w: goto start of words\"},\"1079\":{\"t\":\"b: goto start of words backwards\"},\"1080\":{\"t\":\"bdw: goto start of words everywhere (USELESS)\"},\"1081\":{\"t\":\"The bd stands for bidirectional\"},\"1082\":{\"t\":\"e: goto end of words\"},\"1083\":{\"t\":\"ge: goto end of words backwords\"},\"1084\":{\"t\":\"bdw: goto end of words everywhere (USELESS)\"},\"1085\":{\"t\":\"j: goto beginning of lines\"},\"1086\":{\"t\":\"k: goto beginning of lines backwards\"},\"1087\":{\"t\":\"f{char}: find char\"},\"1088\":{\"t\":\"F{char}: find char backwards\"},\"1089\":{\"t\":\"t{char}: until char\"},\"1090\":{\"t\":\"T{char}: until char backwards\"},\"1091\":{\"t\":\"s{char}: search char everywhere\"},\"1092\":{\"t\":\"In VSCodeVim, EasyMotion only support moving around but can't be combined with operators. Traditional Vim support.\"},\"1093\":{\"h\":\"Multiple cursors\",\"a\":\"multiple-cursors\"},\"1094\":{\"t\":\"steps of add multiple cursors based on word search:\"},\"1095\":{\"t\":\"move cursor on aim word\"},\"1096\":{\"t\":\"type <CMD-D> / gb to add cursor, and repeat it to auto select same word\"},\"1097\":{\"t\":\"perform actions or turn to NORMAL mode to perform\"},\"1098\":{\"t\":\"steps of extend cursors up or down in consecutive lines:\"},\"1099\":{\"t\":\"type <Ctrl-V> for VISUAL-block mode\"},\"1100\":{\"t\":\"use j / k to select rectangle of text\"},\"1101\":{\"t\":\"type I to insert or A to append text\"},\"1102\":{\"t\":\"alternatively, use any NORMAL mode commands to operate the selection\"},\"1103\":{\"h\":\"Docs\"},\"1104\":{\"h\":\"Algorithm\"}},\"dirtCount\":0,\"index\":[[\"`\",{\"1\":{\"927\":1}}],[\"简明教程\",{\"0\":{\"837\":1}}],[\"把数组元素用参数连成字符串\",{\"1\":{\"836\":1}}],[\"把主机暴露出去\",{\"1\":{\"117\":1}}],[\"连接两个数组\",{\"1\":{\"835\":1}}],[\"连通时由于是从左上往右下进行遍历\",{\"1\":{\"635\":1}}],[\"删除\",{\"1\":{\"833\":1}}],[\"删掉会车即可看到密码\",{\"1\":{\"119\":1}}],[\"返回undefined\",{\"1\":{\"832\":1}}],[\"返回一个表示每个字符串片段的长度的列表\",{\"1\":{\"393\":1}}],[\"空数组pop\",{\"1\":{\"832\":1}}],[\"空串是任意串的子序列\",{\"1\":{\"282\":1}}],[\"坚持用===进行比较\",{\"1\":{\"826\":1}}],[\"运算符\",{\"0\":{\"825\":1}}],[\"访问不存在的属性返回undefined\",{\"1\":{\"823\":1}}],[\"访问\",{\"1\":{\"822\":1}}],[\"访问属性\",{\"1\":{\"821\":1}}],[\"访问教程\",{\"1\":{\"85\":1}}],[\"填充多个字符变量\",{\"1\":{\"820\":1}}],[\"填充的那块\",{\"1\":{\"635\":1}}],[\"浮点数得用差的绝对值判断\",{\"1\":{\"817\":1}}],[\"包括自己\",{\"1\":{\"816\":1}}],[\"特别注意这些为true\",{\"1\":{\"815\":1}}],[\"申明变量别用var\",{\"1\":{\"811\":1}}],[\"申请就餐名额\",{\"1\":{\"579\":1}}],[\"变量\",{\"0\":{\"809\":1}}],[\"变化而来的\",{\"1\":{\"336\":1}}],[\"学习的\",{\"1\":{\"808\":1}}],[\"学校宿舍校园移动宽带连不上\",{\"1\":{\"116\":1}}],[\"笔记\",{\"0\":{\"807\":1}}],[\"笔交易后状态为持有的利润\",{\"1\":{\"330\":1}}],[\"笔交易初始化\",{\"1\":{\"329\":1}}],[\"笔交易即可确保获得最大利润\",{\"1\":{\"327\":1}}],[\"缺省则一直统计\",{\"1\":{\"805\":1}}],[\"缺失的第一个正数\",{\"0\":{\"548\":1}}],[\"定位到具体代码问题\",{\"1\":{\"804\":1}}],[\"定义用于交换数组两指定位置值的函数如下\",{\"1\":{\"486\":1}}],[\"定义\",{\"1\":{\"203\":1}}],[\"行\",{\"1\":{\"804\":1}}],[\"行和列很容易解决状态记录的编号问题\",{\"1\":{\"166\":1}}],[\"线程号的十六进制表示输出该线程状态的前\",{\"1\":{\"804\":1}}],[\"线程号获取目标线程的十六进制表示\",{\"1\":{\"803\":1}}],[\"线程池\",{\"1\":{\"770\":1}}],[\"占用高的\",{\"1\":{\"801\":1}}],[\"占用高排查过程\",{\"0\":{\"800\":1}}],[\"占据叉子\",{\"1\":{\"579\":1}}],[\"观察者模式\",{\"1\":{\"799\":1}}],[\"策略模式\",{\"1\":{\"799\":1}}],[\"消费流程\",{\"1\":{\"798\":1}}],[\"消除整数二进制表示中最低位的\",{\"1\":{\"491\":1}}],[\"粘包及其解决方案\",{\"1\":{\"796\":1}}],[\"粘贴刚刚复制的内容到文本框中\",{\"1\":{\"55\":1}}],[\"操作系统文件读写流程\",{\"1\":{\"794\":1}}],[\"操作系统\",{\"1\":{\"791\":1}}],[\"操作服务器\",{\"1\":{\"86\":1}}],[\"事务日志\",{\"1\":{\"790\":1}}],[\"日志分类及简介\",{\"1\":{\"790\":1}}],[\"日常小问题的解决\",{\"0\":{\"47\":1}}],[\"常用锁的使用\",{\"1\":{\"789\":1}}],[\"常见问题\",{\"1\":{\"30\":1}}],[\"检测和解除\",{\"1\":{\"788\":1}}],[\"检查密码框元素把\",{\"1\":{\"119\":1}}],[\"避免==自动转换类型导致的错误\",{\"1\":{\"826\":1}}],[\"避免\",{\"1\":{\"788\":1}}],[\"避免实际模拟每一种组合\",{\"1\":{\"471\":1}}],[\"防止\",{\"1\":{\"788\":1}}],[\"死锁的产生\",{\"1\":{\"788\":1}}],[\"抽象类与接口\",{\"1\":{\"786\":1}}],[\"持久化\",{\"1\":{\"785\":1}}],[\"持有股票\",{\"1\":{\"342\":1}}],[\"持有股票keep\",{\"1\":{\"337\":1}}],[\"缓存雪崩\",{\"1\":{\"784\":1}}],[\"缓存击穿\",{\"1\":{\"784\":1}}],[\"缓存穿透\",{\"1\":{\"784\":1}}],[\"原理\",{\"1\":{\"778\":1,\"787\":2,\"789\":1}}],[\"原数组最多只能有一次递减发生\",{\"1\":{\"723\":1}}],[\"数据库迁移时如何确保数据一致性\",{\"1\":{\"781\":1}}],[\"数据库索引及其结构\",{\"1\":{\"776\":1}}],[\"数组可同时含不同类型元素\",{\"1\":{\"830\":1}}],[\"数组元素很少和相邻的元素进行比较和交换\",{\"1\":{\"485\":1}}],[\"数组进行降维压缩\",{\"1\":{\"481\":1}}],[\"数组打印出来\",{\"1\":{\"480\":1}}],[\"数组\",{\"0\":{\"829\":1},\"1\":{\"479\":1}}],[\"数组如何初始化\",{\"1\":{\"477\":1}}],[\"数组以及下标的含义\",{\"1\":{\"475\":1}}],[\"数组中的每个元素代表能从该位置往右移动的最大长度\",{\"1\":{\"369\":1,\"373\":1}}],[\"数组中的每个数字在每个子集中只能使用一次\",{\"1\":{\"135\":1}}],[\"数组初始化的值\",{\"1\":{\"330\":1}}],[\"数组的某个值时\",{\"1\":{\"295\":1}}],[\"数组降维压缩也稍显麻烦\",{\"1\":{\"214\":1}}],[\"树插入删除操作\",{\"1\":{\"774\":1}}],[\"树状数组的应用形式在更新和查询方面都分别有单点和区间两种\",{\"1\":{\"444\":1}}],[\"树状数组\",{\"0\":{\"441\":1}}],[\"过期删除策略和内存淘汰策略\",{\"1\":{\"773\":1}}],[\"过程类似于图搜索\",{\"1\":{\"648\":1}}],[\"底层\",{\"1\":{\"772\":2}}],[\"知识点\",{\"0\":{\"768\":1}}],[\"知乎\",{\"0\":{\"489\":1}}],[\"旋转数组\",{\"0\":{\"761\":1}}],[\"恰表示开区间个数\",{\"1\":{\"760\":1}}],[\"随\",{\"1\":{\"760\":1}}],[\"随后每次时间增长时\",{\"1\":{\"612\":1}}],[\"官方题解不好\",{\"1\":{\"759\":1}}],[\"本题还可用树状数组配合离散化来解\",{\"1\":{\"759\":1}}],[\"本次待归并的总范围为\",{\"1\":{\"758\":1}}],[\"本站开发命令记录\",{\"0\":{\"5\":1}}],[\"翻转对\",{\"0\":{\"753\":1}}],[\"翻转单词顺序\",{\"0\":{\"693\":1}}],[\"见官方题解\",{\"1\":{\"751\":1}}],[\"区间查询型的离散化树状数组的应用\",{\"1\":{\"750\":1}}],[\"区间的楼层f使得使得鸡蛋只有从高于f的楼层扔下才会碎\",{\"1\":{\"250\":1}}],[\"必须一个移动后另一个也移动才可能\",{\"1\":{\"744\":1}}],[\"储水量必变小\",{\"1\":{\"744\":1}}],[\"横向距离变小且最小高度不会变大\",{\"1\":{\"744\":1}}],[\"移动的那个指针即使一直移到紧挨另一个\",{\"1\":{\"744\":1}}],[\"移动高度低的指针才有可能\",{\"1\":{\"743\":1}}],[\"移动完成后可下载迁移失败的歌曲信息\",{\"1\":{\"59\":1}}],[\"盛最多水的容器\",{\"0\":{\"739\":1}}],[\"往后数第k个淘汰\",{\"1\":{\"737\":1}}],[\"号\",{\"1\":{\"737\":1}}],[\"号开始\",{\"1\":{\"737\":1}}],[\"顺时针编号1\",{\"1\":{\"737\":1}}],[\"顺序亦可\",{\"1\":{\"495\":1}}],[\"归并范围内本次需新增的数量为end\",{\"1\":{\"758\":1}}],[\"归并排序的一种或几种\",{\"1\":{\"484\":1}}],[\"归纳可得共需枚举2\",{\"1\":{\"733\":1}}],[\"枚举所有中心时有个小技巧\",{\"1\":{\"733\":1}}],[\"枚举所有可能的回文子串中心\",{\"1\":{\"732\":1}}],[\"枚举每个字符\",{\"1\":{\"684\":1}}],[\"既可将b降至c\",{\"1\":{\"724\":1}}],[\"能变成非递减数组的话\",{\"1\":{\"723\":1}}],[\"非递减数列\",{\"0\":{\"719\":1}}],[\"非递归遍历二叉树\",{\"0\":{\"422\":1}}],[\"身高\",{\"1\":{\"713\":1}}],[\"立即进行抵消\",{\"1\":{\"705\":1}}],[\"符合条件的最多只可能有\",{\"1\":{\"704\":1}}],[\"符合要求的种子越难找\",{\"1\":{\"40\":1}}],[\"输入有序数组\",{\"0\":{\"686\":1}}],[\"输出该数\",{\"1\":{\"562\":1}}],[\"输出buzz\",{\"1\":{\"560\":1}}],[\"输出fizzbuzz\",{\"1\":{\"561\":1}}],[\"输出fizz\",{\"1\":{\"559\":1}}],[\"输出代表相应数字的字符串的程序\",{\"1\":{\"558\":1}}],[\"扩展期间维护最大回文串位置\",{\"1\":{\"684\":1}}],[\"未记录\",{\"1\":{\"678\":1}}],[\"未持有\",{\"1\":{\"342\":2}}],[\"未持有且不在冷静期wait\",{\"1\":{\"337\":1}}],[\"未持有但在冷静期cool\",{\"1\":{\"337\":1}}],[\"值得注意的是实现时需确保位置入队同时标记为已访问\",{\"1\":{\"663\":1}}],[\"值得一提的是在实现时\",{\"1\":{\"649\":1}}],[\"右子数组起始索引为left+len\",{\"1\":{\"758\":1}}],[\"右侧小于nums\",{\"1\":{\"748\":1}}],[\"右端点为i\",{\"1\":{\"733\":1}}],[\"右和下边界为大西洋\",{\"1\":{\"653\":1}}],[\"右边为待填入的元素\",{\"1\":{\"157\":1}}],[\"太平洋大西洋水流问题\",{\"0\":{\"651\":1}}],[\"达到极端最坏情况\",{\"1\":{\"649\":1}}],[\"种\",{\"1\":{\"648\":1}}],[\"种子获取采用暴力搜索方法\",{\"1\":{\"39\":1}}],[\"问在此限制下解开锁的最少转动次数\",{\"1\":{\"645\":1}}],[\"问题场景如何做状态选择\",{\"1\":{\"474\":1}}],[\"问题解决博客\",{\"1\":{\"113\":1}}],[\"四位转盘锁初始为0000\",{\"1\":{\"644\":1}}],[\"矩阵元素表示海拔\",{\"1\":{\"653\":1}}],[\"矩阵值为\",{\"1\":{\"640\":1}}],[\"矩阵\",{\"0\":{\"638\":1}}],[\"矩阵格子编号采用顺序计数方式\",{\"1\":{\"604\":1}}],[\"搜索时用另一矩阵记录当前位置是否被访问过\",{\"1\":{\"662\":1}}],[\"搜索\",{\"0\":{\"637\":1}}],[\"搜一下报错信息就能找到教程解决\",{\"1\":{\"99\":1}}],[\"又因为变化量有减一的操作\",{\"1\":{\"635\":1}}],[\"又考虑到账户可能同名\",{\"1\":{\"627\":1}}],[\"剪掉消除\",{\"1\":{\"635\":1}}],[\"留备每次填充时先查询\",{\"1\":{\"635\":1}}],[\"留存字符思考\",{\"1\":{\"264\":1}}],[\"保留原有数据\",{\"1\":{\"635\":1}}],[\"保证输入有效\",{\"1\":{\"593\":1}}],[\"保证程序处理流程如设想运行\",{\"1\":{\"480\":1}}],[\"砖块掉落就立即从网格内消失而不会落到其他砖块上\",{\"1\":{\"632\":1}}],[\"掉落\",{\"1\":{\"632\":1}}],[\"某砖块稳定\",{\"1\":{\"632\":1}}],[\"某一路径上所有两两相邻元素差值\",{\"1\":{\"601\":1}}],[\"打开转盘锁\",{\"0\":{\"642\":1}}],[\"打砖块\",{\"0\":{\"630\":1}}],[\"打家劫舍\",{\"0\":{\"209\":1,\"217\":1}}],[\"完成后再次获取此时稳定集合的砖块数量\",{\"1\":{\"635\":1}}],[\"完成之后就开始按消除顺序的逆序进行填充\",{\"1\":{\"635\":1}}],[\"完成之后只需要将答案整理成要求的返回格式即可\",{\"1\":{\"628\":1}}],[\"完全平方数\",{\"0\":{\"360\":1}}],[\"容器使用treeset\",{\"1\":{\"628\":1}}],[\"接下来就是实际上的合并\",{\"1\":{\"628\":1}}],[\"针对所有索引建立并查集\",{\"1\":{\"627\":1}}],[\"针对不同账户\",{\"1\":{\"627\":1}}],[\"视为独立区域\",{\"1\":{\"627\":1}}],[\"间的合并\",{\"1\":{\"627\":1}}],[\"它们也可能属于不同的人\",{\"1\":{\"623\":1}}],[\"它最低有效位为其本身\",{\"1\":{\"491\":1}}],[\"账户\",{\"1\":{\"622\":1}}],[\"索引失效场景\",{\"1\":{\"776\":1}}],[\"索引对\",{\"1\":{\"627\":1}}],[\"索引对实质上是连通两索引\",{\"1\":{\"618\":1}}],[\"索引\",{\"1\":{\"619\":1}}],[\"各个位置都从其连通集合\",{\"1\":{\"618\":1}}],[\"各集合间用根节点位置来区分\",{\"1\":{\"618\":1}}],[\"直到某时刻的操作令两角变得连通即为所求\",{\"1\":{\"612\":1}}],[\"直接按字典序排列\",{\"1\":{\"618\":1}}],[\"直接计算会损失精度\",{\"1\":{\"495\":1}}],[\"直接套用模版\",{\"1\":{\"348\":1}}],[\"十分相似\",{\"1\":{\"611\":1}}],[\"水池中的水位为t\",{\"1\":{\"608\":1}}],[\"水位上升的泳池中游泳\",{\"0\":{\"606\":1}}],[\"水平直径覆盖了范围\",{\"1\":{\"405\":1}}],[\"差值\",{\"1\":{\"604\":1}}],[\"绝对值\",{\"1\":{\"601\":1}}],[\"语法要求不能为局部变量\",{\"1\":{\"597\":1}}],[\"合并账户后的返回格式\",{\"1\":{\"624\":1}}],[\"合并账户\",{\"0\":{\"620\":1}}],[\"合并节点时的权重更新参考平行四边形四条边的关系\",{\"1\":{\"596\":1}}],[\"合并原则是重量小的集合归入重量大的集合中去\",{\"1\":{\"432\":1}}],[\"传递关系权重\",{\"1\":{\"596\":1}}],[\"迭代压缩时累乘更新起始节点到各中间父节点的权重值\",{\"1\":{\"595\":1}}],[\"另外给定若干转盘数位组合\",{\"1\":{\"645\":1}}],[\"另有一些以数组queries表示的问题\",{\"1\":{\"592\":1}}],[\"另起一个索引变量用来遍历标记索引右侧所有元素\",{\"1\":{\"158\":1}}],[\"共同表示条件ai\",{\"1\":{\"591\":1}}],[\"除法求值\",{\"0\":{\"589\":1}}],[\"除了常规的空间压缩之外\",{\"1\":{\"326\":1}}],[\"冗余连接\",{\"0\":{\"581\":1}}],[\"释放叉子\",{\"1\":{\"579\":1}}],[\"放下叉子\",{\"1\":{\"579\":1}}],[\"放置成功的话就进入下一层继续搜索\",{\"1\":{\"164\":1}}],[\"拿起叉子\",{\"1\":{\"579\":1}}],[\"五人同时拿叉子会死锁\",{\"1\":{\"579\":1}}],[\"请你使用类的同一个对象来模拟这个过程\",{\"1\":{\"577\":1}}],[\"请实现函数void\",{\"1\":{\"571\":1}}],[\"个人的身高不低于\",{\"1\":{\"709\":1}}],[\"个人的身高为\",{\"1\":{\"709\":1}}],[\"个不同元素进行抵消\",{\"1\":{\"704\":1}}],[\"个\",{\"1\":{\"704\":1}}],[\"个可能存在的候选多数元素\",{\"1\":{\"704\":1}}],[\"个元素中求出现次数大于\",{\"1\":{\"704\":1}}],[\"个哲学家\",{\"1\":{\"577\":1}}],[\"个哲学家围坐在圆桌前\",{\"1\":{\"568\":1}}],[\"个线程代表\",{\"1\":{\"577\":1}}],[\"使得end处的元素为区间向右扩展遇到的首个不满足与nums\",{\"1\":{\"758\":1}}],[\"使得每个哲学家都能在不知道别人什么时候想吃东西或思考的情况下\",{\"1\":{\"570\":1}}],[\"使用并查集随着遍历边的信息逐渐联合各节点\",{\"1\":{\"587\":1}}],[\"使用传统插入排序\",{\"1\":{\"484\":1}}],[\"哲学家的编号\",{\"1\":{\"572\":1}}],[\"哲学家从\",{\"1\":{\"571\":1}}],[\"哲学家可以拿起左边或者右边的叉子\",{\"1\":{\"569\":1}}],[\"哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面\",{\"1\":{\"569\":1}}],[\"哲学家只有同时拿到左边和右边的叉子才能吃面\",{\"1\":{\"569\":1}}],[\"哲学家只会在思考和进餐两种行为间交替\",{\"1\":{\"568\":1}}],[\"哲学家进餐\",{\"0\":{\"566\":1}}],[\"7\",{\"1\":{\"563\":1,\"674\":1,\"675\":1,\"710\":2,\"711\":2}}],[\"7f8c8d\",{\"1\":{\"28\":1}}],[\"4f\",{\"1\":{\"897\":1}}],[\"4\",{\"1\":{\"563\":1,\"571\":1,\"579\":1,\"650\":1,\"674\":1,\"675\":1,\"710\":2,\"711\":2}}],[\"调用buzz\",{\"1\":{\"560\":1}}],[\"调用fizzbuzz\",{\"1\":{\"561\":1}}],[\"调用fizz\",{\"1\":{\"559\":1}}],[\"5k\",{\"1\":{\"1059\":1}}],[\"5j\",{\"1\":{\"1058\":1}}],[\"5\",{\"1\":{\"560\":1,\"561\":1,\"565\":4,\"568\":1,\"577\":2,\"579\":3,\"674\":1,\"675\":1,\"710\":2,\"711\":2}}],[\"依据评分给每人发糖果\",{\"1\":{\"717\":1}}],[\"依据以下规则调用相应函数进行输出\",{\"1\":{\"558\":1}}],[\"依赖的包\",{\"1\":{\"75\":1}}],[\"俩函数交替执行打印\",{\"1\":{\"554\":1}}],[\"交换字符串中的元素\",{\"0\":{\"614\":1}}],[\"交换两不同值变量的值\",{\"1\":{\"492\":1}}],[\"交替打印字符串\",{\"0\":{\"556\":1}}],[\"交替打印\",{\"0\":{\"552\":1}}],[\"寻找重复的子树\",{\"0\":{\"538\":1}}],[\"≤k\",{\"1\":{\"536\":1}}],[\"同一集合内的字符可以任意调换\",{\"1\":{\"618\":1}}],[\"同时每次检查给定端点是否变为连通\",{\"1\":{\"611\":1}}],[\"同时进餐人数上限\",{\"1\":{\"579\":1}}],[\"同种重复子树找任一棵的根节点即可\",{\"1\":{\"540\":1}}],[\"同种异位词字母排序后一致\",{\"1\":{\"532\":1}}],[\"同理可得允许上方有dp\",{\"1\":{\"255\":1}}],[\"字母异位词是由重新排列源单词的字母得到的一个新单词\",{\"1\":{\"527\":1}}],[\"字母异位词分组\",{\"0\":{\"525\":1}}],[\"字符拓展而来时\",{\"1\":{\"685\":1}}],[\"字符的边界情况\",{\"1\":{\"685\":1}}],[\"字符转换\",{\"1\":{\"492\":1}}],[\"字符串问题\",{\"0\":{\"259\":1}}],[\"字符串的排列\",{\"0\":{\"146\":1}}],[\"负零\",{\"1\":{\"522\":1}}],[\"结合补码知识\",{\"1\":{\"522\":1}}],[\"结果等同于两个只出现一次的数的异或\",{\"1\":{\"521\":1}}],[\"异或都为其本身\",{\"1\":{\"520\":1}}],[\"了\",{\"1\":{\"520\":1}}],[\"多线程\",{\"0\":{\"514\":1,\"551\":1}}],[\"哈希\",{\"0\":{\"514\":1,\"524\":1}}],[\"≡\",{\"1\":{\"508\":1,\"511\":1}}],[\"∗\",{\"1\":{\"503\":1}}],[\"生成连续完全平方数\",{\"0\":{\"497\":1}}],[\"生成密钥对\",{\"1\":{\"62\":1}}],[\"分发糖果\",{\"0\":{\"715\":1}}],[\"分为两个部分来考虑\",{\"1\":{\"713\":1}}],[\"分为与顶部相连的稳定集合与其他集合\",{\"1\":{\"635\":1}}],[\"分子已经是连续的k个数相乘\",{\"1\":{\"495\":1}}],[\"分别表示第i天交易完后未持有和持有股票的最大利润\",{\"1\":{\"303\":1}}],[\"计算右侧小于当前元素的个数\",{\"0\":{\"746\":1}}],[\"计算组合数\",{\"0\":{\"493\":1}}],[\"计算答案时只需从小到大计算\",{\"1\":{\"206\":1}}],[\"大写\",{\"1\":{\"492\":1}}],[\"大小写变换\",{\"1\":{\"492\":1}}],[\"大小写\",{\"1\":{\"492\":2}}],[\"小写\",{\"1\":{\"492\":1}}],[\"|\",{\"1\":{\"492\":1,\"804\":1}}],[\"||\",{\"1\":{\"143\":1,\"151\":1,\"168\":2,\"331\":1,\"597\":1,\"706\":1,\"760\":1}}],[\"^=\",{\"1\":{\"523\":3}}],[\"^\",{\"1\":{\"492\":13,\"858\":1,\"1026\":1,\"1029\":1}}],[\"判断\",{\"1\":{\"816\":1}}],[\"判断给定数组是否能在最多改变一个元素条件下成为非递减的\",{\"1\":{\"721\":1}}],[\"判断该图是否为二分图\",{\"1\":{\"667\":1}}],[\"判断二分图\",{\"0\":{\"665\":1}}],[\"判断数组中是否存在\",{\"1\":{\"536\":1}}],[\"判断两数相加是否溢出\",{\"1\":{\"492\":1}}],[\"判断是否为\",{\"1\":{\"491\":1}}],[\"判断能否到达最后一个下标\",{\"1\":{\"369\":1}}],[\"统计次数\",{\"1\":{\"805\":1}}],[\"统计间隔毫秒数\",{\"1\":{\"805\":1}}],[\"统计整数的二进制表示中\",{\"1\":{\"491\":1}}],[\"统计完成后再次遍历字符串\",{\"1\":{\"395\":1}}],[\"注意\",{\"1\":{\"609\":1}}],[\"注意由此运算导致的特殊测试用例错误\",{\"1\":{\"328\":1}}],[\"注\",{\"1\":{\"491\":2}}],[\"获取整数二进制表示种最低位的\",{\"1\":{\"491\":1}}],[\"采用无符号位移可解决溢出问题\",{\"1\":{\"491\":1}}],[\"采用光猫软路由搭配路由器自动获取地址方式上网\",{\"1\":{\"117\":1}}],[\"二叉树插入节点后再平衡操作\",{\"1\":{\"775\":1}}],[\"二分图\",{\"1\":{\"668\":1}}],[\"二分查找\",{\"0\":{\"451\":1}}],[\"二维数组graph\",{\"1\":{\"667\":1}}],[\"二进制矩阵中的最短路径\",{\"0\":{\"657\":1}}],[\"二进制\",{\"0\":{\"514\":1,\"515\":1}}],[\"二进制相关\",{\"0\":{\"490\":1}}],[\"方便起见\",{\"1\":{\"486\":1}}],[\"省略堆排序\",{\"1\":{\"485\":1}}],[\"双轴快排\",{\"1\":{\"484\":1}}],[\"成对插入排序\",{\"1\":{\"484\":1}}],[\"联合考虑数据数量及其有序程度等\",{\"1\":{\"484\":1}}],[\"排序算法\",{\"0\":{\"483\":1}}],[\"排列问题\",{\"1\":{\"455\":1}}],[\"状态仅与上一个状态有关\",{\"1\":{\"481\":1}}],[\"优化\",{\"1\":{\"481\":1}}],[\"出错的情况\",{\"1\":{\"480\":1}}],[\"出发最远只能到\",{\"1\":{\"384\":1}}],[\"举例推导\",{\"1\":{\"479\":1}}],[\"根据身高重建队列\",{\"0\":{\"707\":1}}],[\"根据实际语义可以将其与四周不高于它的块连通\",{\"1\":{\"612\":1}}],[\"根据已知条件推出结果\",{\"1\":{\"592\":1}}],[\"根据\",{\"1\":{\"476\":1}}],[\"根据连接规则的不同可分为两种\",{\"1\":{\"430\":1}}],[\"确保后续查询的效率\",{\"1\":{\"595\":1}}],[\"确保在多线程调用下\",{\"1\":{\"554\":1}}],[\"确保当前元素入栈后整体保持原有单调性\",{\"1\":{\"425\":1}}],[\"确定遍历顺序\",{\"1\":{\"478\":1}}],[\"确定递推公式\",{\"1\":{\"476\":1}}],[\"确定\",{\"1\":{\"475\":1}}],[\"明确问题存在哪几种状态\",{\"1\":{\"474\":1}}],[\"思考流程\",{\"0\":{\"473\":1}}],[\"实现线程安全的三种方式及如何保证线程安全\",{\"1\":{\"795\":1}}],[\"实现自定义阻塞队列\",{\"1\":{\"782\":1}}],[\"实现\",{\"1\":{\"777\":1}}],[\"实现多线程版本从\",{\"1\":{\"558\":1}}],[\"实现要点\",{\"0\":{\"460\":1}}],[\"实际获得逆序规划的过程就是\",{\"1\":{\"185\":1}}],[\"实际上只有两种情况\",{\"1\":{\"723\":1}}],[\"实际上新建的队列只需对各人的第二属性负责即可\",{\"1\":{\"713\":1}}],[\"实际上分母不一定要逆序相乘\",{\"1\":{\"495\":1}}],[\"实际上标记数组已经在功能上包含起始索引了\",{\"1\":{\"470\":1}}],[\"实际上就是求两字符串的最长相同子串\",{\"1\":{\"264\":1}}],[\"实际上也就只有两种情况\",{\"1\":{\"243\":1}}],[\"实际上可以拆成俩子问题\",{\"1\":{\"213\":1}}],[\"实际上可以仅用一维数组存储\",{\"1\":{\"167\":1}}],[\"实际上上述推导的函数为卡塔兰数\",{\"1\":{\"207\":1}}],[\"实际上\",{\"1\":{\"166\":1,\"442\":1}}],[\"模式\",{\"1\":{\"812\":1}}],[\"模型\",{\"1\":{\"791\":1}}],[\"模拟\",{\"0\":{\"670\":1}}],[\"模版\",{\"0\":{\"459\":1}}],[\"模块路径\",{\"1\":{\"72\":1}}],[\"棋盘问题\",{\"1\":{\"458\":1}}],[\"⼦集问题\",{\"1\":{\"457\":1}}],[\"⼀个字符串按⼀定规则有⼏种切割⽅式\",{\"1\":{\"456\":1}}],[\"切割问题\",{\"1\":{\"456\":1}}],[\"适用问题\",{\"0\":{\"453\":1}}],[\"存在传递关系的若干变量视作在同一集合中\",{\"1\":{\"595\":1}}],[\"存在重复元素\",{\"0\":{\"534\":1}}],[\"存在的话\",{\"1\":{\"450\":1}}],[\"存储队列元素最大值\",{\"1\":{\"421\":1}}],[\"存储队列元素\",{\"1\":{\"421\":1}}],[\"课程表\",{\"1\":{\"450\":1}}],[\"例题为\",{\"1\":{\"450\":1}}],[\"例如\",{\"1\":{\"704\":1}}],[\"例如tickets\",{\"1\":{\"185\":1}}],[\"例如row\",{\"1\":{\"174\":1}}],[\"环中节点顺序亦先亦后\",{\"1\":{\"447\":1}}],[\"环形子数组的最大和\",{\"0\":{\"239\":1}}],[\"拓扑排序\",{\"0\":{\"445\":1}}],[\"单例模式\",{\"0\":{\"806\":1}}],[\"单轴快排\",{\"1\":{\"484\":1}}],[\"单点查询普通数组即可完成\",{\"1\":{\"444\":1}}],[\"单点更新\",{\"1\":{\"444\":1}}],[\"单调不减\",{\"1\":{\"760\":1}}],[\"单调栈的思想不难\",{\"1\":{\"426\":1}}],[\"单调栈的思想与单调队列类似\",{\"1\":{\"425\":1}}],[\"单调栈\",{\"0\":{\"424\":1}}],[\"单调队列\",{\"0\":{\"419\":1}}],[\"通过索引赋值时超范围也会改变数组长度\",{\"1\":{\"831\":1}}],[\"通过并查集的链式传递效果可以消去若干已知中间变量而求出问题的答案\",{\"1\":{\"595\":1}}],[\"通过空置索引\",{\"1\":{\"443\":1}}],[\"通过设置特定的随机种子使生成的一系列特定数字\",{\"1\":{\"39\":1}}],[\"更进一步\",{\"1\":{\"744\":1}}],[\"更新和查询的循环中\",{\"1\":{\"443\":1}}],[\"更不可能作为解\",{\"1\":{\"388\":1}}],[\"查询时可以仅考虑所有节点直接相连于同一根节点\",{\"1\":{\"596\":1}}],[\"查询和更新的复杂度都为\",{\"1\":{\"443\":1}}],[\"查看密钥对指纹\",{\"1\":{\"63\":1}}],[\"来查看进程\",{\"1\":{\"805\":1}}],[\"来计算\",{\"1\":{\"442\":1}}],[\"来说\",{\"1\":{\"183\":1}}],[\"−231\",{\"1\":{\"522\":1}}],[\"−n\",{\"1\":{\"442\":1}}],[\"−i=x∑z−1​cost\",{\"1\":{\"387\":1}}],[\"−i=x∑z−1​gas\",{\"1\":{\"387\":1}}],[\"前缀树\",{\"0\":{\"439\":1}}],[\"前一段旅程的起点不可能是解\",{\"1\":{\"383\":1}}],[\"首先将所有消除一并执行\",{\"1\":{\"635\":1}}],[\"首先对原始数组进行全体异或\",{\"1\":{\"521\":1}}],[\"首先考虑简化版的问题\",{\"1\":{\"520\":1}}],[\"首先要控制随机数生成的区间\",{\"1\":{\"40\":1}}],[\"首次出现的位置\",{\"1\":{\"438\":1}}],[\"表\",{\"1\":{\"438\":1}}],[\"表示第\",{\"1\":{\"709\":1}}],[\"表示第i天第j笔交易完成后未持有股票的最大利润\",{\"1\":{\"323\":1}}],[\"表示第i天第j笔交易完成后持有股票的最大利润\",{\"1\":{\"323\":1}}],[\"表示字符串中的两个索引\",{\"1\":{\"616\":1}}],[\"表示字符串s中以s\",{\"1\":{\"292\":1}}],[\"表示位置\",{\"1\":{\"608\":1}}],[\"表示\",{\"1\":{\"596\":1}}],[\"表示消去链式条件的中间变量\",{\"1\":{\"595\":1}}],[\"表示问题cj\",{\"1\":{\"592\":1}}],[\"表示节点ai和bi之间存在一条边\",{\"1\":{\"584\":1}}],[\"表示放下左边或右边的叉子\",{\"1\":{\"575\":1}}],[\"表示吃面\",{\"1\":{\"574\":1}}],[\"表示拿起左边或右边的叉子\",{\"1\":{\"573\":1}}],[\"表示在该位上两数是不同的\",{\"1\":{\"521\":1}}],[\"表示气球\",{\"1\":{\"405\":1}}],[\"表示某支股票第i天的价格\",{\"1\":{\"301\":1,\"310\":1,\"321\":1,\"334\":1}}],[\"表示t的前i个字符在s的前j个字符的子序列中出现的次数\",{\"1\":{\"281\":1}}],[\"表示将正整数i拆分成至少两个正整数的和所对应的最大乘积\",{\"1\":{\"229\":1}}],[\"表示该段的起点和终点\",{\"1\":{\"179\":1}}],[\"串的状态转移信息\",{\"1\":{\"438\":1}}],[\"预计算\",{\"1\":{\"438\":1}}],[\"待寻找的串\",{\"1\":{\"438\":1}}],[\"降低其高度\",{\"1\":{\"432\":1}}],[\"维护存储各节点的重量\",{\"1\":{\"432\":1}}],[\"维护存储各节点的高度\",{\"1\":{\"431\":1}}],[\"高度并查集\",{\"1\":{\"431\":1}}],[\"高级\",{\"1\":{\"30\":1}}],[\"高级功能\",{\"1\":{\"30\":1}}],[\"后续元素为账户下的若干邮箱\",{\"1\":{\"622\":1}}],[\"后续通过更改父节点值来将节点连至父节点\",{\"1\":{\"430\":1}}],[\"后续可以考虑将区间分段用多线程分别同时查找\",{\"1\":{\"43\":1}}],[\"父节点都是自己\",{\"1\":{\"430\":1}}],[\"初始时默认各节点独立成集合\",{\"1\":{\"430\":1}}],[\"初始位于数组的第一个下标\",{\"1\":{\"369\":1,\"373\":1}}],[\"具体实现是设若干候选变量及其相应计数变量\",{\"1\":{\"705\":1}}],[\"具体实现是在内部用数组记录节点的父节点\",{\"1\":{\"430\":1}}],[\"具体实现时\",{\"1\":{\"596\":1,\"635\":1}}],[\"具体实现见代码\",{\"1\":{\"443\":1}}],[\"具体来说分组需要确保两个只出现一次的数分到不同组\",{\"1\":{\"521\":1}}],[\"具体来说有\",{\"1\":{\"442\":1}}],[\"具体来说\",{\"1\":{\"144\":1,\"158\":1}}],[\"或者对于有序数组\",{\"1\":{\"470\":1}}],[\"或者是俩元素是否属于同一集合\",{\"1\":{\"429\":1}}],[\"或\",{\"1\":{\"449\":1,\"640\":1}}],[\"或出售股票\",{\"1\":{\"301\":1,\"310\":1,\"321\":1}}],[\"遍历集合类型时用for\",{\"1\":{\"819\":1}}],[\"遍历左子数组中所有元素即可累加出所有新增翻转对数量\",{\"1\":{\"758\":1}}],[\"遍历完之后若有剩余候选变量\",{\"1\":{\"705\":1}}],[\"遍历完之后实际上完成了邮箱的去重和合并主体标记\",{\"1\":{\"627\":1}}],[\"遍历上一步构建的哈希表\",{\"1\":{\"628\":1}}],[\"遍历图\",{\"0\":{\"423\":1}}],[\"遍历过程中将标记索引与当前元素换位置\",{\"1\":{\"158\":1}}],[\"貌似单调队列的作用常可以用优先队列来替代\",{\"1\":{\"420\":1}}],[\"队列和栈相互实现\",{\"0\":{\"418\":1}}],[\"反引号对``可表示跨行字符串\",{\"1\":{\"820\":1}}],[\"反转链表\",{\"0\":{\"417\":1}}],[\"反斜杠方向同一斜线上所有格子行和列相减为相同值\",{\"1\":{\"166\":1}}],[\"算法\",{\"0\":{\"436\":1,\"489\":1}}],[\"算法讲解\",{\"0\":{\"416\":1}}],[\"算法已经不再安全\",{\"1\":{\"61\":1}}],[\"然后将其右侧所有重叠区间都去除\",{\"1\":{\"414\":1}}],[\"然后进入下一层\",{\"1\":{\"158\":1}}],[\"无法解开则次数为\",{\"1\":{\"645\":1}}],[\"无环连通无向图若有n个节点\",{\"1\":{\"586\":1}}],[\"无重叠区间\",{\"0\":{\"410\":1}}],[\"无需实际移动一次\",{\"1\":{\"375\":1}}],[\"继续往右考虑\",{\"1\":{\"408\":1}}],[\"尽可能多地引爆了右侧的气球\",{\"1\":{\"407\":1}}],[\"子序列可以不在原始数组中连续\",{\"1\":{\"401\":1}}],[\"仅这些为false\",{\"1\":{\"814\":1}}],[\"仅记录与\",{\"1\":{\"808\":1}}],[\"仅可选其中两条线与地面构成容器\",{\"1\":{\"741\":1}}],[\"仅可重复使用未碎的鸡蛋\",{\"1\":{\"250\":1}}],[\"仅需考虑节点高不大于\",{\"1\":{\"597\":1}}],[\"仅端点重合不算重合\",{\"1\":{\"412\":1}}],[\"仅有一个元素或者含两个不等元素的序列也视作摆动序列\",{\"1\":{\"400\":1}}],[\"摆动序列指连续数字之间的差严格地在正数和负数之间交替\",{\"1\":{\"400\":1}}],[\"摆动序列\",{\"0\":{\"397\":1}}],[\"划分字母区间\",{\"0\":{\"391\":1}}],[\"范围内任意加油站都不能达到\",{\"1\":{\"388\":1}}],[\"范围内分别计算抢的最大金额\",{\"1\":{\"213\":1}}],[\"∀z∈\",{\"1\":{\"385\":1,\"386\":1}}],[\"​=1n​⋅2n−1​⋯mn−m+1​​\",{\"1\":{\"494\":1}}],[\"​=m\",{\"1\":{\"494\":1}}],[\"​=i=x∑y​gas\",{\"1\":{\"387\":1}}],[\"​\",{\"1\":{\"385\":2,\"387\":1}}],[\"​cn​\",{\"1\":{\"207\":1}}],[\"≥i=x∑z​cost\",{\"1\":{\"385\":1}}],[\"⎩⎨⎧​i=x∑y​gas\",{\"1\":{\"385\":1}}],[\"假设从\",{\"1\":{\"384\":1}}],[\"假随机数组词造句\",{\"0\":{\"37\":1,\"38\":1}}],[\"下面证明为啥上一段途径的每个加油站也都不可能是解\",{\"1\":{\"384\":1}}],[\"下属一个片区用一个公网\",{\"1\":{\"117\":1}}],[\"应将邮箱清空从当前加油站的下一个加油站开始统计\",{\"1\":{\"383\":1}}],[\"应确保其正下方\",{\"1\":{\"295\":1}}],[\"题目隐含的限制条件是在任意一个加油站时油箱含量都不能为负\",{\"1\":{\"383\":1}}],[\"题目要求的规划实际上是求该图的欧拉路径\",{\"1\":{\"181\":1}}],[\"现在按实际的人来合并这些账户\",{\"1\":{\"623\":1}}],[\"现在驾驶一辆油箱容量无限的汽车从某个加油站出发\",{\"1\":{\"381\":1}}],[\"现状是移动光猫\",{\"1\":{\"117\":1}}],[\"加油站\",{\"0\":{\"378\":1}}],[\"跳表\",{\"1\":{\"772\":1}}],[\"跳跃游戏\",{\"0\":{\"367\":1,\"371\":1}}],[\"跳源码\",{\"1\":{\"68\":1}}],[\"贪心思想\",{\"1\":{\"414\":1}}],[\"贪心\",{\"0\":{\"366\":1}}],[\"与\",{\"1\":{\"777\":1,\"778\":1,\"779\":1}}],[\"与网格顶部相连\",{\"1\":{\"632\":1}}],[\"与排序中确定的先后矛盾\",{\"1\":{\"447\":1}}],[\"与顺序无关故外层遍历硬币\",{\"1\":{\"358\":1,\"364\":1}}],[\"与当前数进行选取与否的考虑\",{\"1\":{\"144\":1}}],[\"详情\",{\"1\":{\"357\":1,\"363\":1,\"519\":1,\"749\":1}}],[\"详见官方题解\",{\"1\":{\"233\":1}}],[\"详见此\",{\"1\":{\"116\":1}}],[\"零钱兑换\",{\"0\":{\"354\":1}}],[\"向数组中的每个元素前添加正负号\",{\"1\":{\"352\":1}}],[\"元素可重复使用\",{\"1\":{\"346\":1}}],[\"元素分别代表以当前节点为根的树\",{\"1\":{\"221\":1}}],[\"背包问题\",{\"0\":{\"343\":1,\"482\":1}}],[\"进程号查看该进程下所有线程的占用情况\",{\"1\":{\"802\":1}}],[\"进程号\",{\"1\":{\"801\":1,\"804\":1,\"805\":1}}],[\"进而转换状态\",{\"1\":{\"474\":1}}],[\"进而向后累积\",{\"1\":{\"330\":1}}],[\"进一步减少无效搜索\",{\"1\":{\"470\":1}}],[\"进行问题模拟\",{\"1\":{\"479\":1}}],[\"进行删除操作使word1\",{\"1\":{\"273\":1}}],[\"进行插入操作使word1\",{\"1\":{\"272\":1}}],[\"进行替换操作使word1\",{\"1\":{\"271\":1}}],[\"否则需要将所有组合都搜一遍\",{\"1\":{\"649\":1}}],[\"否则指定位置砖块消失\",{\"1\":{\"632\":1}}],[\"否则每次添加的都是贯穿回溯全过程的唯一的列表指针\",{\"1\":{\"461\":1}}],[\"否则返回\",{\"1\":{\"381\":1}}],[\"否则最后计算出的总利润可能会超出实际能获得的\",{\"1\":{\"330\":1}}],[\"否则使用时无法导入\",{\"1\":{\"110\":1}}],[\"需除掉一切多余空格\",{\"1\":{\"695\":1}}],[\"需要分开讨论扩展\",{\"1\":{\"733\":1}}],[\"需要判断若0000本身就在限制组合中\",{\"1\":{\"649\":1}}],[\"需要判断是否已经到下一个移动起始点了\",{\"1\":{\"375\":1}}],[\"需要进行保护性修正\",{\"1\":{\"635\":1}}],[\"需要逆向思维\",{\"1\":{\"634\":1}}],[\"需要重新计算\",{\"1\":{\"435\":1}}],[\"需要令各划分的片段尽可能地短\",{\"1\":{\"395\":1}}],[\"需要注意的是\",{\"1\":{\"376\":1,\"443\":1}}],[\"需要到处找\",{\"1\":{\"120\":1}}],[\"需注意的是压缩之后每天的仨变量都是相互依赖的\",{\"1\":{\"341\":1}}],[\"需将每笔的持有利润都设为\",{\"1\":{\"330\":1}}],[\"基于\",{\"1\":{\"782\":1}}],[\"基于此可知\",{\"1\":{\"726\":1}}],[\"基于上一条\",{\"1\":{\"330\":1}}],[\"基本类型\",{\"0\":{\"198\":1}}],[\"已第一次卖出且第二次买入的keep2只能是由原有keep2保持或者当天买入由sell1\",{\"1\":{\"315\":1}}],[\"第i天第j笔未持有的sell\",{\"1\":{\"325\":1}}],[\"第i天第j笔持有的keep\",{\"1\":{\"324\":1}}],[\"第i行的皇后在第queens\",{\"1\":{\"167\":1}}],[\"第二笔卖出的sell2只能是由原有sell2保持或者当天卖出转移而来\",{\"1\":{\"316\":1}}],[\"第一次卖出但未进行第二次买入的sell1只能是由原有sell1保持或者由当天卖出转移而来\",{\"1\":{\"314\":1}}],[\"第一笔买入的keep1只能是由原有keep1保持或者当天买入转移而来\",{\"1\":{\"313\":1}}],[\"比如当n\",{\"1\":{\"563\":1}}],[\"比如先更新了keep\",{\"1\":{\"306\":1}}],[\"比含重复元素的要少排序和回溯判重步骤\",{\"1\":{\"156\":1}}],[\"天价格购入了股票\",{\"1\":{\"306\":1}}],[\"天的利润\",{\"1\":{\"306\":1}}],[\"买卖股票的最佳时机\",{\"0\":{\"299\":1,\"308\":1,\"319\":1},\"1\":{\"312\":1,\"323\":1,\"336\":2}}],[\"股票问题\",{\"0\":{\"298\":1}}],[\"左端点为i\",{\"1\":{\"733\":1}}],[\"左下方的值已经是有效的\",{\"1\":{\"295\":1}}],[\"左侧\",{\"1\":{\"295\":1}}],[\"左边为已经填入的元素\",{\"1\":{\"157\":1}}],[\"含\",{\"1\":{\"292\":1,\"737\":1}}],[\"含的话就相当于s的前j\",{\"1\":{\"286\":1}}],[\"两数之和\",{\"0\":{\"686\":1}}],[\"两哲学家之间都有一把叉子\",{\"1\":{\"568\":1}}],[\"两种情况\",{\"1\":{\"286\":1}}],[\"两个字符串的删除操作\",{\"0\":{\"260\":1}}],[\"处理每一行时\",{\"1\":{\"284\":1}}],[\"任意非空串都不是空串的子序列\",{\"1\":{\"283\":1}}],[\"时间复杂度比直接枚举子串两端再判断是否回文要低\",{\"1\":{\"732\":1}}],[\"时间复杂度获取队列元素最大值\",{\"1\":{\"421\":1}}],[\"时已压缩\",{\"1\":{\"597\":1}}],[\"时转移方程中就会从keep\",{\"1\":{\"306\":1}}],[\"时\",{\"1\":{\"275\":1,\"293\":1,\"294\":1,\"522\":1}}],[\"时就会先进入\",{\"1\":{\"185\":1}}],[\"转换为布尔值的结果\",{\"1\":{\"813\":1}}],[\"转换而来表示在word1前i个字符与word2前j\",{\"1\":{\"272\":1}}],[\"转换而来表示在word1前i\",{\"1\":{\"271\":1,\"273\":1}}],[\"转移方程为dp\",{\"1\":{\"358\":1,\"364\":1}}],[\"转移而来\",{\"1\":{\"315\":1}}],[\"转移而非之前的keep\",{\"1\":{\"306\":1}}],[\"转移代表从当天的持有到卖出\",{\"1\":{\"306\":1}}],[\"转移状态方程需考虑俩字符串各自遍历到的字符是否相同\",{\"1\":{\"264\":1}}],[\"相似\",{\"1\":{\"336\":1}}],[\"相对于其来说\",{\"1\":{\"270\":1}}],[\"相关\",{\"0\":{\"104\":1}}],[\"取负操作会导致溢出\",{\"1\":{\"522\":1}}],[\"取最低有效位的方式为x\",{\"1\":{\"522\":1}}],[\"取最大转移而来\",{\"1\":{\"264\":1}}],[\"取余运算规则\",{\"0\":{\"501\":1}}],[\"取消注释\",{\"1\":{\"97\":1}}],[\"目标值\",{\"1\":{\"358\":1,\"364\":1}}],[\"目标和\",{\"0\":{\"350\":1}}],[\"目标是通过删除导致两单词不同的字符来使其相同\",{\"1\":{\"264\":1}}],[\"目录\",{\"1\":{\"90\":1,\"100\":1}}],[\"内的所有值\",{\"1\":{\"257\":1}}],[\"内置标签页浏览条件下\",{\"1\":{\"66\":1}}],[\"内置的\",{\"1\":{\"61\":1}}],[\"显然可以用字符对象的优先队列直接一步到位\",{\"1\":{\"618\":1}}],[\"显然每支箭都得引爆尽可能多的气球\",{\"1\":{\"407\":1}}],[\"显然若全程的累加量为负\",{\"1\":{\"389\":1}}],[\"显然若想达到最少移动次数\",{\"1\":{\"375\":1}}],[\"显然是当遍历到远于上次移动的最远可达位置时\",{\"1\":{\"375\":1}}],[\"显然越小越好\",{\"1\":{\"358\":1,\"364\":1}}],[\"显然能进行空间压缩\",{\"1\":{\"341\":1}}],[\"显然利润为零\",{\"1\":{\"306\":1}}],[\"显然sell\",{\"1\":{\"306\":1}}],[\"显然两仅相差一个字符的单词的编辑距离至多为一\",{\"1\":{\"275\":1}}],[\"显然此时最短编辑距离为dp\",{\"1\":{\"274\":1}}],[\"显然最大操作次数不会大于楼高\",{\"1\":{\"257\":1}}],[\"显然有\",{\"1\":{\"206\":1}}],[\"边的记录形式需同时包含两节点的编号和边长\",{\"1\":{\"604\":1}}],[\"边的信息由长度为n的二维数组edges给出\",{\"1\":{\"584\":1}}],[\"边缘条件为dp\",{\"1\":{\"358\":1,\"364\":1}}],[\"边缘状态是第\",{\"1\":{\"306\":1}}],[\"边界条件为\",{\"1\":{\"256\":1}}],[\"边栏目录样例\",{\"0\":{\"29\":1}}],[\"层\",{\"1\":{\"254\":1,\"255\":1}}],[\"允许t\",{\"1\":{\"254\":1}}],[\"鸡蛋没碎\",{\"1\":{\"255\":1}}],[\"鸡蛋碎了\",{\"1\":{\"254\":1}}],[\"鸡蛋掉落\",{\"0\":{\"248\":1}}],[\"考虑发生递减的连续的三个元素a\",{\"1\":{\"723\":1}}],[\"考虑初始回文串为\",{\"1\":{\"685\":1}}],[\"考虑变化量为零的情况\",{\"1\":{\"635\":1}}],[\"考虑到邮箱第一次出现的账户索引可能不是合并的主体标识\",{\"1\":{\"628\":1}}],[\"考虑到字符的可重复性\",{\"1\":{\"618\":1}}],[\"考虑到数据集的特殊性\",{\"1\":{\"612\":1}}],[\"考虑到其补码表示为\",{\"1\":{\"522\":1}}],[\"考虑到题目要求字典序\",{\"1\":{\"182\":1}}],[\"考虑s的前j个字符\",{\"1\":{\"284\":1}}],[\"考虑编辑距离的实际意义\",{\"1\":{\"275\":1}}],[\"考虑转移方程\",{\"1\":{\"253\":1}}],[\"换个角度思考\",{\"1\":{\"252\":1}}],[\"楼层区间扔下\",{\"1\":{\"250\":1}}],[\"有向图的拓扑排序是指满足上游节点一定排在下游节点前面的一种全节点排列\",{\"1\":{\"446\":1}}],[\"有\",{\"1\":{\"386\":1}}],[\"有边缘条件\",{\"1\":{\"281\":1}}],[\"有dp\",{\"1\":{\"275\":1}}],[\"有两种\",{\"1\":{\"264\":1}}],[\"有k枚鸡蛋和n层高的楼\",{\"1\":{\"250\":1}}],[\"有时使用\",{\"1\":{\"96\":1}}],[\"回文子串的中心有单字符和双字符两种\",{\"1\":{\"733\":1}}],[\"回文子串\",{\"0\":{\"728\":1}}],[\"回到环形数组中\",{\"1\":{\"243\":1}}],[\"回溯那般用矩阵记录\",{\"1\":{\"662\":1}}],[\"回溯到有其他下游节点的节点\",{\"1\":{\"184\":1}}],[\"回溯需要对大量的格子反复进行某数能否放置的检查\",{\"1\":{\"174\":1}}],[\"回溯时再换回来\",{\"1\":{\"158\":1}}],[\"回溯时按照遍历根节点递归分左右子树的思路依旧\",{\"1\":{\"129\":1}}],[\"回溯函数的返回值不应是一般的单个节点\",{\"1\":{\"130\":1}}],[\"回溯\",{\"0\":{\"123\":1,\"452\":1}}],[\"整除\",{\"1\":{\"559\":1,\"560\":1,\"561\":1}}],[\"整个数组的总和固定\",{\"1\":{\"243\":1}}],[\"整数拆分\",{\"0\":{\"225\":1}}],[\"很可能会造成同一位置重复入队情况\",{\"1\":{\"663\":1}}],[\"很容易联想到普通数组求\",{\"1\":{\"243\":1}}],[\"很有可能找不到特定种子\",{\"1\":{\"42\":1}}],[\"设分别处于左右子数组的索引分别为i和j\",{\"1\":{\"758\":1}}],[\"设矩阵左和上边界为太平洋\",{\"1\":{\"653\":1}}],[\"设x\",{\"1\":{\"596\":1}}],[\"设所有节点为1\",{\"1\":{\"584\":1}}],[\"设其拆成j和i\",{\"1\":{\"229\":1}}],[\"设置\",{\"1\":{\"72\":1}}],[\"当前读与快照读\",{\"1\":{\"777\":1}}],[\"当前路径再经过已经访问过的位置也无意义\",{\"1\":{\"662\":1}}],[\"当二者一样高时可以同时移动两个指针\",{\"1\":{\"744\":1}}],[\"当身高相同时考虑第二属性\",{\"1\":{\"713\":1}}],[\"当回文串由\",{\"1\":{\"685\":1}}],[\"当某块池底不高于泳池水位时认为其可达\",{\"1\":{\"608\":1}}],[\"当某条边连接后左上角和右下角变为连通\",{\"1\":{\"603\":1}}],[\"当某条边的两节点都已经在联合集中则说明该边冗余\",{\"1\":{\"587\":1}}],[\"当x为\",{\"1\":{\"522\":1}}],[\"当遍历到末尾时即表示此片段内所有字母在字符串内所有的出现都在此片段内\",{\"1\":{\"395\":1}}],[\"当s\",{\"1\":{\"293\":1,\"294\":1}}],[\"当word1\",{\"1\":{\"275\":1}}],[\"当将环分割为两个子数组后\",{\"1\":{\"243\":1}}],[\"当i\",{\"1\":{\"229\":1}}],[\"当标记索引移动到最右边时就达成了一种全排列\",{\"1\":{\"158\":1}}],[\"因最高位补\",{\"1\":{\"491\":1}}],[\"因其无法利用现代操作系统的局部性原理进行缓存很少使用堆排序\",{\"1\":{\"485\":1}}],[\"因正整数对应的最大乘积取决于比其小的正整数对应的最大乘积\",{\"1\":{\"229\":1}}],[\"因为是从右向左遍历的原数组\",{\"1\":{\"750\":1}}],[\"因为若只移动一个的话\",{\"1\":{\"744\":1}}],[\"因为指针是相向移动的\",{\"1\":{\"743\":1}}],[\"因为其表示的是前面有多少个的问题\",{\"1\":{\"713\":1}}],[\"因为其他数都两两异或为\",{\"1\":{\"520\":1}}],[\"因为数组有序\",{\"1\":{\"691\":1}}],[\"因为相邻位置的相邻位置可以是同一个\",{\"1\":{\"663\":1}}],[\"因为即使同一批入队\",{\"1\":{\"663\":1}}],[\"因为即使最后一次联合之后可能有节点不直接与根节点相连\",{\"1\":{\"596\":1}}],[\"因为求最少转动次数\",{\"1\":{\"648\":1}}],[\"因为某些位被限制的同时只需要至少其他一位不同即可绕过\",{\"1\":{\"647\":1}}],[\"因为人们可能具有相同的名称\",{\"1\":{\"623\":1}}],[\"因为还有一节点未直接与根节点相连\",{\"1\":{\"619\":1}}],[\"因为要反复判断某两点是否连通\",{\"1\":{\"604\":1}}],[\"因为边是从小到大启用的\",{\"1\":{\"603\":1}}],[\"因为\",{\"1\":{\"597\":1}}],[\"因为在除分母k的时候\",{\"1\":{\"495\":1}}],[\"因为每次下一层搜索都是基于当前层右边起始的\",{\"1\":{\"470\":1}}],[\"因为遍历更改后根节点的高度可能会变\",{\"1\":{\"435\":1}}],[\"因为当前集合在后续合并时只会用到根节点的重量\",{\"1\":{\"434\":1}}],[\"因为集合高度就是查找集合根节点的最多迭代次数\",{\"1\":{\"431\":1}}],[\"因为这支箭在保证引爆原有必须得引爆的气球的同时\",{\"1\":{\"407\":1}}],[\"因为此时答案可能还未更新\",{\"1\":{\"376\":1}}],[\"因为此思路是一路做选择直到数据末尾\",{\"1\":{\"144\":1}}],[\"因为到达下一个移动起始点才意味着需要实际移动一次来确保到达该位置\",{\"1\":{\"375\":1}}],[\"因为只需求出数量\",{\"1\":{\"348\":1}}],[\"因为对交易次数进行优化之后实际上强制每天都进行模拟买卖\",{\"1\":{\"330\":1}}],[\"因为按照实际意义来看\",{\"1\":{\"306\":1}}],[\"因为成环且不能抢相邻的\",{\"1\":{\"213\":1}}],[\"因为原始集合中含重复值\",{\"1\":{\"150\":1}}],[\"因为前一个数可能因为其再前一个数不同而没选\",{\"1\":{\"144\":1}}],[\"因为路径也无法提供同层的帮助\",{\"1\":{\"143\":1}}],[\"因为不同的重复数字在回溯时不算同一个\",{\"1\":{\"137\":1}}],[\"因为左右子树的结构不同\",{\"1\":{\"130\":1}}],[\"因为左右子树的笛卡尔积会导致即使单个值作为根节点\",{\"1\":{\"130\":1}}],[\"因为虽然国内所有\",{\"1\":{\"116\":1}}],[\"因为移动劫持了\",{\"1\":{\"116\":1}}],[\"因为种子参数类型为long\",{\"1\":{\"41\":1}}],[\"抢当前节点\",{\"1\":{\"222\":1}}],[\"抢与不抢根节点的最大收益\",{\"1\":{\"221\":1}}],[\"函数返回值为含俩元素的数组\",{\"1\":{\"221\":1}}],[\"代码上线后\",{\"0\":{\"800\":1}}],[\"代码如下\",{\"1\":{\"215\":1,\"495\":1}}],[\"代表以\",{\"1\":{\"205\":1}}],[\"代表序列长度为\",{\"1\":{\"204\":1}}],[\"最好用\",{\"1\":{\"812\":1}}],[\"最好用let或const代替\",{\"1\":{\"811\":1}}],[\"最终确认答案\",{\"1\":{\"705\":1}}],[\"最终答案为max\",{\"1\":{\"246\":1}}],[\"最终答案为dp\",{\"1\":{\"232\":1}}],[\"最近的\",{\"1\":{\"640\":1}}],[\"最小体力消耗路径\",{\"0\":{\"598\":1},\"1\":{\"611\":2}}],[\"最小公倍数\",{\"1\":{\"500\":1}}],[\"最优剩余最左侧的区间右端点必须是所有区间右端点最靠左的\",{\"1\":{\"414\":1}}],[\"最远可达位置可以通过遍历数组每个元素时来更新\",{\"1\":{\"375\":1}}],[\"最佳买卖股票时机含冷冻期\",{\"0\":{\"332\":1}}],[\"最长回文子串\",{\"0\":{\"680\":1}}],[\"最长回文子序列\",{\"0\":{\"288\":1}}],[\"最长连续序列\",{\"0\":{\"542\":1}}],[\"最长递增子序列\",{\"0\":{\"235\":1}}],[\"最大是\",{\"1\":{\"760\":1}}],[\"最大公约数\",{\"1\":{\"500\":1}}],[\"最大和子数组跨越原数组首尾\",{\"1\":{\"245\":1}}],[\"最大和子数组不跨越原数组首尾\",{\"1\":{\"244\":1}}],[\"最大子数组和\",{\"1\":{\"243\":1}}],[\"最大收益为以左子节点为根节点的最大收益与以右子节点为根节点的最大收益这二者之和\",{\"1\":{\"223\":1}}],[\"最大收益为当前节点值\",{\"1\":{\"222\":1}}],[\"最大收益即为抢和不抢俩状态的较大者\",{\"1\":{\"215\":1}}],[\"最后若有剩下的候选元素\",{\"1\":{\"704\":1}}],[\"最后多数元素肯定会相应剩下\",{\"1\":{\"703\":1}}],[\"最后遍历各位置收集可达两洋的位置\",{\"1\":{\"655\":1}}],[\"最后别忘了在网格中实际地将其标为砖块\",{\"1\":{\"635\":1}}],[\"最后拼成结果字符串时\",{\"1\":{\"618\":1}}],[\"最后一无所有\",{\"1\":{\"461\":1}}],[\"最后一天卖掉股票一定比持有股票的利润更大\",{\"1\":{\"306\":1}}],[\"最后只需检查目标值的硬币数是否变为了小于预设值的数即可\",{\"1\":{\"358\":1,\"364\":1}}],[\"最后只需将规划逆序即可\",{\"1\":{\"184\":1}}],[\"最后利润最大的显然是sell2\",{\"1\":{\"317\":1}}],[\"最后用原数组总和减去最小和即为最大和\",{\"1\":{\"245\":1}}],[\"最后用缓存更新抢的收益\",{\"1\":{\"215\":1}}],[\"最后将上网模式由软路由改为桥接\",{\"1\":{\"118\":1}}],[\"较简单的形式是仅基于上一间房屋的俩状态来思考抢还是不抢当前房屋\",{\"1\":{\"215\":1}}],[\"令起始节点归根\",{\"1\":{\"432\":1}}],[\"令凑成某金额的硬币数为价值\",{\"1\":{\"358\":1,\"364\":1}}],[\"令目标值为背包容量\",{\"1\":{\"358\":1,\"364\":1}}],[\"令keep\",{\"1\":{\"323\":1}}],[\"令sell\",{\"1\":{\"303\":1,\"323\":1}}],[\"令dp\",{\"1\":{\"214\":1,\"229\":1,\"252\":1,\"264\":1,\"270\":1,\"281\":1,\"292\":1,\"358\":1,\"364\":1}}],[\"令限制条件为仅当前一个数与当前数不同时才考虑不选当前数\",{\"1\":{\"144\":1}}],[\"房屋首尾相连成环\",{\"1\":{\"211\":1}}],[\"⋅g\",{\"1\":{\"206\":2}}],[\"动态规划\",{\"0\":{\"197\":1,\"472\":1}}],[\"xp\",{\"1\":{\"972\":1}}],[\"x根节点为rx\",{\"1\":{\"596\":1}}],[\"x可看作a\",{\"1\":{\"595\":1}}],[\"xy\",{\"1\":{\"388\":1}}],[\"x<y\",{\"1\":{\"385\":1}}],[\"x\",{\"1\":{\"196\":1,\"384\":1,\"385\":1,\"386\":1,\"438\":4,\"496\":3,\"500\":6,\"522\":1,\"523\":6,\"565\":3,\"588\":6,\"591\":2,\"596\":1,\"597\":16,\"605\":8,\"613\":6,\"619\":9,\"629\":8,\"636\":14,\"803\":1,\"933\":1,\"934\":1}}],[\"xxx\",{\"1\":{\"80\":1}}],[\"按对角线遍历矩阵\",{\"1\":{\"673\":1}}],[\"按从小到大拿边连接节点\",{\"1\":{\"603\":1}}],[\"按题目要求\",{\"1\":{\"395\":1}}],[\"按语义应为\",{\"1\":{\"295\":1}}],[\"按照字典序\",{\"1\":{\"185\":1}}],[\"按指示更新即可\",{\"1\":{\"7\":1}}],[\"深入其他下游节点完成其他所有边的遍历这几个阶段\",{\"1\":{\"184\":1}}],[\"仔细思考死胡同节点在\",{\"1\":{\"184\":1}}],[\"皆大欢喜\",{\"1\":{\"183\":1}}],[\"该边令图出现了环\",{\"1\":{\"586\":1}}],[\"该点必须为规划的终点\",{\"1\":{\"183\":1}}],[\"该数组被一个标记索引分为两部分\",{\"1\":{\"157\":1}}],[\"得到规划\",{\"1\":{\"183\":1}}],[\"那么显然如果将人从高到低逐渐插入新队列\",{\"1\":{\"713\":1}}],[\"那么一定是引爆了尽可能多的气球\",{\"1\":{\"407\":1}}],[\"那么向下游搜索的时候肯定优先选字典序小\",{\"1\":{\"182\":1}}],[\"那一定能确定出具体楼层f的楼高n最高可以是多少\",{\"1\":{\"252\":1}}],[\"那另一子数组的和自然为最小\",{\"1\":{\"243\":1}}],[\"那下次搜索出队的依旧是该节点\",{\"1\":{\"182\":1}}],[\"我们可以将此箭等效到其右边界\",{\"1\":{\"408\":1}}],[\"我们从左向右考虑所有气球的右边界\",{\"1\":{\"407\":1}}],[\"我们在搜索之前\",{\"1\":{\"182\":1}}],[\"我步入你\",{\"1\":{\"46\":1}}],[\"且用\",{\"1\":{\"822\":1}}],[\"且定义时最后的键值对后不加\",{\"1\":{\"821\":1}}],[\"且可以用模版$\",{\"1\":{\"820\":1}}],[\"且2\",{\"1\":{\"758\":1}}],[\"且前面恰有\",{\"1\":{\"709\":1}}],[\"且相应计数非零\",{\"1\":{\"705\":1}}],[\"且在\",{\"1\":{\"609\":1}}],[\"且对于全局来说最先连通的路径一定是差值最小的\",{\"1\":{\"603\":1}}],[\"且对应dp\",{\"1\":{\"254\":1}}],[\"且不存在矛盾\",{\"1\":{\"593\":1}}],[\"且不在冷静期\",{\"1\":{\"342\":1}}],[\"且空间复杂度为o\",{\"1\":{\"550\":1}}],[\"且其他数的两次出现都分到同一组\",{\"1\":{\"521\":1}}],[\"且其余数的两次出现都分到同一组\",{\"1\":{\"521\":1}}],[\"且\",{\"1\":{\"466\":1}}],[\"且同一字母最多出现在一个片段中\",{\"1\":{\"393\":1}}],[\"且初始化需联合考虑前一天处理过后的利润\",{\"1\":{\"329\":1}}],[\"且多笔交易之间的买卖关系需联合考虑\",{\"1\":{\"312\":1}}],[\"且最多只能完成k笔交易\",{\"1\":{\"321\":1}}],[\"且最多只能完成两笔交易\",{\"1\":{\"310\":1}}],[\"且最多只存在一个节点的出度为零\",{\"1\":{\"181\":1}}],[\"且仅出现一次\",{\"1\":{\"282\":1}}],[\"且dp\",{\"1\":{\"275\":1}}],[\"且存在属于\",{\"1\":{\"250\":1}}],[\"且边界条件\",{\"1\":{\"206\":1}}],[\"且子问题的解可复用\",{\"1\":{\"203\":1}}],[\"且如此构建的树的唯一性由根节点的不同来保证\",{\"1\":{\"129\":1,\"203\":1}}],[\"给\",{\"1\":{\"577\":1}}],[\"给出的条件构成一个连通有向图\",{\"1\":{\"181\":1}}],[\"给定表示每个位置高度的整型数组\",{\"1\":{\"741\":1}}],[\"给定表示每天股价的数组prices\",{\"1\":{\"301\":1,\"310\":1,\"321\":1,\"334\":1}}],[\"给定无向图和连接情况数组\",{\"1\":{\"667\":1}}],[\"给定无环连通无向图的所有边和一条冗余的边\",{\"1\":{\"583\":1}}],[\"给定二维网格\",{\"1\":{\"632\":1}}],[\"给定方形矩阵grid表示泳池\",{\"1\":{\"608\":1}}],[\"给定整型数组nums\",{\"1\":{\"748\":1}}],[\"给定整型数组\",{\"1\":{\"518\":1}}],[\"给定整数n\",{\"1\":{\"126\":1,\"201\":1}}],[\"给定所有必须得上的课的先修关系\",{\"1\":{\"450\":1}}],[\"给定只含小写字母的字符串\",{\"1\":{\"393\":1}}],[\"给定两个整数数组gas和cost\",{\"1\":{\"380\":1}}],[\"给定两个单词\",{\"1\":{\"262\":1,\"268\":1}}],[\"给定数组\",{\"1\":{\"405\":1}}],[\"给定数组保证能到达最后一个下标\",{\"1\":{\"373\":1}}],[\"给定数据保证至少存在一种合理规划\",{\"1\":{\"179\":1}}],[\"给定非负整数数组\",{\"1\":{\"369\":1,\"373\":1}}],[\"给定非负整数数组和目标值\",{\"1\":{\"352\":1}}],[\"给定代表各位评分的整数数组\",{\"1\":{\"717\":1}}],[\"给定代表硬币面额的整数数组与目标值\",{\"1\":{\"356\":1}}],[\"给定代表每个房屋存放金额的非负节点值二叉树\",{\"1\":{\"219\":1}}],[\"给定代表每个房屋存放金额的非负整数数组\",{\"1\":{\"211\":1}}],[\"给定目标值和元素各异的数组\",{\"1\":{\"346\":1}}],[\"给定目标值和含重复数字的数组\",{\"1\":{\"135\":1}}],[\"给定字符串和其中若干索引对的数组pairs\",{\"1\":{\"616\":1}}],[\"给定字符串变量对数组equations和一个实数值数组values作为已知条件\",{\"1\":{\"591\":1}}],[\"给定字符串中最长回文子序列的长度\",{\"1\":{\"290\":1}}],[\"给定字符串s和t\",{\"1\":{\"279\":1}}],[\"给定正整数拆为俩数之和\",{\"1\":{\"229\":1}}],[\"给定一群人的乱序的属性数组\",{\"1\":{\"709\":1}}],[\"给定一个列表accounts\",{\"1\":{\"622\":1}}],[\"给定一个区间的集合\",{\"1\":{\"412\":1}}],[\"给定一个大于\",{\"1\":{\"227\":1}}],[\"给定一组起点\",{\"1\":{\"179\":1}}],[\"看数据情况\",{\"1\":{\"484\":1}}],[\"看题干是一道图论题\",{\"1\":{\"181\":1}}],[\"看哪个数字生成的数字序列符合要求\",{\"1\":{\"39\":1}}],[\"规划出依次经过的点\",{\"1\":{\"179\":1}}],[\"终点对tickets\",{\"1\":{\"179\":1}}],[\"终端执行\",{\"1\":{\"73\":1,\"75\":1}}],[\"重量并查集\",{\"1\":{\"432\":1}}],[\"重复上述步骤即可\",{\"1\":{\"414\":1}}],[\"重点考虑存在导致搜索进入死胡同的节点\",{\"1\":{\"183\":1}}],[\"重新安排行程\",{\"0\":{\"177\":1}}],[\"重启光猫\",{\"1\":{\"118\":1}}],[\"节省遍历时间\",{\"1\":{\"176\":1}}],[\"宫是否已存在某数\",{\"1\":{\"176\":1}}],[\"还有基于归并排序变种的解法\",{\"1\":{\"751\":1}}],[\"还有将抽出来的人怎么插入新建的队列中去\",{\"1\":{\"713\":1}}],[\"还有些细节需要注意\",{\"1\":{\"326\":1}}],[\"还没到下一个移动起始点时仍属于上次移动的覆盖范围\",{\"1\":{\"375\":1}}],[\"还可以添加全局类型的是否完成标志\",{\"1\":{\"175\":1}}],[\"还需要装有\",{\"1\":{\"71\":1}}],[\"j>\",{\"1\":{\"1063\":1}}],[\"join\",{\"1\":{\"836\":1,\"1060\":1}}],[\"johnnybravo\",{\"1\":{\"625\":2}}],[\"john00\",{\"1\":{\"625\":2}}],[\"johnsmith\",{\"1\":{\"625\":3}}],[\"john\",{\"1\":{\"625\":7}}],[\"js\",{\"0\":{\"807\":1}}],[\"jstack\",{\"1\":{\"804\":1}}],[\"javascript\",{\"1\":{\"810\":1}}],[\"java\",{\"0\":{\"768\":1},\"1\":{\"789\":1,\"795\":1,\"808\":1}}],[\"just\",{\"1\":{\"629\":1,\"985\":1}}],[\"jump\",{\"1\":{\"377\":1,\"784\":1,\"861\":1,\"862\":1}}],[\"j+1\",{\"1\":{\"281\":1,\"285\":1,\"286\":1}}],[\"j++\",{\"1\":{\"176\":1,\"234\":1,\"265\":1,\"276\":1,\"349\":1,\"359\":1,\"365\":1}}],[\"j打住不继续拆\",{\"1\":{\"231\":1}}],[\"j继续拆分\",{\"1\":{\"230\":1}}],[\"jfk\",{\"1\":{\"179\":1,\"185\":3,\"186\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"j\",{\"1\":{\"174\":1,\"176\":7,\"229\":2,\"230\":2,\"231\":2,\"232\":2,\"234\":6,\"258\":5,\"264\":1,\"265\":8,\"270\":2,\"271\":2,\"272\":3,\"273\":2,\"274\":4,\"275\":11,\"276\":9,\"282\":2,\"285\":3,\"286\":4,\"287\":8,\"292\":2,\"293\":3,\"294\":4,\"297\":8,\"323\":2,\"324\":4,\"325\":4,\"331\":8,\"349\":6,\"359\":5,\"365\":5,\"438\":11,\"487\":3,\"536\":1,\"592\":1,\"605\":8,\"608\":2,\"613\":4,\"629\":5,\"636\":18,\"656\":5,\"752\":6,\"755\":2,\"840\":1,\"1041\":1,\"1058\":1,\"1060\":2,\"1063\":1,\"1085\":1,\"1100\":1}}],[\"jpg\",{\"1\":{\"46\":3}}],[\"临时遍历每行\",{\"1\":{\"174\":1}}],[\"都聚焦于高度数值等同于时刻的块\",{\"1\":{\"612\":1}}],[\"都是按照一定条件将网格内的格子逐渐分别连通\",{\"1\":{\"611\":1}}],[\"都有ac≡bcmodp\",{\"1\":{\"509\":1}}],[\"都有\",{\"1\":{\"508\":1}}],[\"都有域名审查与拦截\",{\"1\":{\"116\":1}}],[\"都可以实现\",{\"1\":{\"449\":1}}],[\"都能完成多笔交易\",{\"1\":{\"336\":1}}],[\"都不可拆\",{\"1\":{\"229\":1}}],[\"都含数字1~9且无重复\",{\"1\":{\"171\":1}}],[\"解9\",{\"1\":{\"171\":1}}],[\"解数独等等\",{\"1\":{\"458\":1}}],[\"解数独\",{\"0\":{\"169\":1}}],[\"解决方案就是利用\",{\"1\":{\"117\":1}}],[\"列表\",{\"1\":{\"627\":1}}],[\"列\",{\"1\":{\"167\":1,\"176\":1}}],[\"列和两种方向斜线\",{\"1\":{\"165\":1}}],[\"斜杠方向同一斜线上所有格子行和列相加为相同值\",{\"1\":{\"166\":1}}],[\"斜杠和反斜杠两种方向\",{\"1\":{\"165\":1}}],[\"就不会对已插入的人的第二属性产生影响\",{\"1\":{\"713\":1}}],[\"就是经典的范围动态规划\",{\"1\":{\"214\":1}}],[\"就是一个一个格子往后试验\",{\"1\":{\"164\":1}}],[\"就会意识到很像坐标系中的一次函数\",{\"1\":{\"166\":1}}],[\"从右至左遍历原数组的同时维护树状数组\",{\"1\":{\"750\":1}}],[\"从\",{\"1\":{\"737\":1}}],[\"从而导致相邻位置的砖块可能不再与网格顶部直接或间接相连而不稳定\",{\"1\":{\"632\":1}}],[\"从而在大量的搜索中节约大量时间\",{\"1\":{\"165\":1}}],[\"从左向右考虑区间\",{\"1\":{\"414\":1}}],[\"从左至右\",{\"1\":{\"295\":1}}],[\"从加油站i开往加油站i+1需要消耗汽油的量为cost\",{\"1\":{\"380\":1}}],[\"从keep\",{\"1\":{\"306\":1}}],[\"从根节点开始往下抢\",{\"1\":{\"219\":1}}],[\"从给定的起点开始按字典序优先进行\",{\"1\":{\"183\":1}}],[\"从某节点出发沿有向边方向不重复地遍历图中所有的边\",{\"1\":{\"181\":1}}],[\"从链接中得到\",{\"1\":{\"50\":1}}],[\"由此可得从原数组中抽人的第一顺序应当是其第一属性\",{\"1\":{\"713\":1}}],[\"由此可见遍历时需要存储各邮箱对应的账户\",{\"1\":{\"627\":1}}],[\"由此利用并查集实现\",{\"1\":{\"634\":1}}],[\"由上述转移方程结合实际语义来看\",{\"1\":{\"295\":1}}],[\"由dp\",{\"1\":{\"271\":1,\"272\":1,\"273\":1}}],[\"由题目条件可知每行\",{\"1\":{\"165\":1}}],[\"由于需要时刻查询连通集合内节点数量\",{\"1\":{\"635\":1}}],[\"由于需要硬币数量最少\",{\"1\":{\"358\":1,\"364\":1}}],[\"由于题目要求账户内邮箱需要排序\",{\"1\":{\"628\":1}}],[\"由于注水\",{\"1\":{\"608\":1}}],[\"由于哲学家不是在吃面就是在想着啥时候吃面\",{\"1\":{\"576\":1}}],[\"由于是从头往后划分\",{\"1\":{\"395\":1}}],[\"由于最远距离的更新与移动次数的更新是异步的\",{\"1\":{\"376\":1}}],[\"由于转移方程仅与上一天状态相关\",{\"1\":{\"306\":1}}],[\"由于子序列中的字符可以不在原串中连续\",{\"1\":{\"292\":1}}],[\"由于原问题可以分解为俩规模较小的子问题\",{\"1\":{\"203\":1}}],[\"由于回溯函数返回的是以某范围的值为根节点的所有种类的搜索树\",{\"1\":{\"131\":1}}],[\"由于\",{\"1\":{\"99\":1}}],[\"标识第i行的第j列个宫内是否已存在数字k\",{\"1\":{\"174\":1}}],[\"标识第i行中是否已存在数字k\",{\"1\":{\"174\":1}}],[\"标准的回溯搜索题\",{\"1\":{\"164\":1,\"173\":1}}],[\"标记索引初始时在最左边\",{\"1\":{\"158\":1}}],[\"标记外层的\",{\"1\":{\"20\":1}}],[\"标记开头与结尾\",{\"1\":{\"20\":1}}],[\"要求计算新数组counts\",{\"1\":{\"748\":1}}],[\"要求每人至少发一个\",{\"1\":{\"717\":1}}],[\"要求每行\",{\"1\":{\"171\":1}}],[\"要求空间复杂度为\",{\"1\":{\"689\":1}}],[\"要求时间复杂度为o\",{\"1\":{\"550\":1}}],[\"要求时间复杂度为\",{\"1\":{\"545\":1}}],[\"要求将其划分为尽可能多的片段\",{\"1\":{\"393\":1}}],[\"要求规划的起始点必须是点\",{\"1\":{\"179\":1}}],[\"要求一行\",{\"1\":{\"162\":1}}],[\"要么是右侧的下一个字符\",{\"1\":{\"733\":1}}],[\"要么用哈希表费空间\",{\"1\":{\"143\":1}}],[\"要么每次遍历查找费时\",{\"1\":{\"143\":1}}],[\"皇后\",{\"0\":{\"160\":1},\"1\":{\"458\":1}}],[\"每条边连接的俩节点都属于不同集合\",{\"1\":{\"668\":1}}],[\"每条斜线的放置状态\",{\"1\":{\"165\":1}}],[\"每条斜线有且仅有一个皇后\",{\"1\":{\"165\":1}}],[\"每个转盘可转转为0\",{\"1\":{\"644\":1}}],[\"每个账户内的第一个元素是名称\",{\"1\":{\"624\":1}}],[\"每个叉子相当于锁\",{\"1\":{\"579\":1}}],[\"每个到一个格子都需要进行放置的合法性检查\",{\"1\":{\"165\":1}}],[\"每人面前一盘意面\",{\"1\":{\"568\":1}}],[\"每层都是从头开始搜索而无需起始索引\",{\"1\":{\"466\":1}}],[\"每层是否需要起始索引\",{\"1\":{\"462\":1}}],[\"每支箭可从任意位置射出并引爆覆盖范围包含该位置的所有气球\",{\"1\":{\"405\":1}}],[\"每种硬币无限则是完全背包问题\",{\"1\":{\"358\":1,\"364\":1}}],[\"每种硬币数量无限\",{\"1\":{\"356\":1}}],[\"每天开始处理各笔交易前都需要将第\",{\"1\":{\"329\":1}}],[\"每一天都可决定是否购买和\",{\"1\":{\"301\":1,\"310\":1,\"321\":1}}],[\"每宫内各数字是否已存在的状态以便快速查询\",{\"1\":{\"174\":1}}],[\"每宫会耗费大量时间\",{\"1\":{\"174\":1}}],[\"每宫\",{\"1\":{\"171\":1}}],[\"每列\",{\"1\":{\"165\":2,\"171\":1,\"174\":2}}],[\"每向下一层就向右移动一位\",{\"1\":{\"158\":1}}],[\"每次取\",{\"1\":{\"704\":1}}],[\"每次填充前先记录稳定集合的砖块数量\",{\"1\":{\"635\":1}}],[\"每次因消除而减少的连通数量\",{\"1\":{\"634\":1}}],[\"每次编辑可对一个单词进行单个字符的插入或删除或替换\",{\"1\":{\"268\":1}}],[\"每次都移动可达的最大长度并不一定最优\",{\"1\":{\"375\":1}}],[\"每次都可删除其中一个单词的任意一个字符\",{\"1\":{\"262\":1}}],[\"每次都从右边选一个\",{\"1\":{\"157\":1}}],[\"每次操作可以取一枚未碎的鸡蛋并把它从\",{\"1\":{\"250\":1}}],[\"每次出队的就是剩余下游节点中字典序最小的\",{\"1\":{\"182\":1}}],[\"每次从返回的左右子搜索树列表中挑选一对有别于之前的\",{\"1\":{\"131\":1}}],[\"等效于逆序填补时增加的连通数量\",{\"1\":{\"634\":1}}],[\"等回溯时再换回来撤销处理\",{\"1\":{\"157\":1}}],[\"等待连接成功\",{\"1\":{\"121\":1}}],[\"等待最终移动结果\",{\"1\":{\"58\":1}}],[\"全排列\",{\"0\":{\"152\":1}}],[\"类似用数组存储的链表\",{\"1\":{\"430\":1}}],[\"类似\",{\"1\":{\"312\":1,\"323\":1}}],[\"类比之前\",{\"1\":{\"150\":1}}],[\"类型\",{\"1\":{\"19\":1}}],[\"求翻转对与归并排序过程十分契合\",{\"1\":{\"757\":1}}],[\"求存储水的最大量\",{\"1\":{\"741\":1}}],[\"求如此淘汰到只剩最后一人的编号\",{\"1\":{\"737\":1}}],[\"求满足要求的最少糖果数\",{\"1\":{\"717\":1}}],[\"求非空数组中所有出现次数大于数组长度三分之一的元素\",{\"1\":{\"701\":1}}],[\"求众数\",{\"0\":{\"699\":1}}],[\"求最短路径用\",{\"1\":{\"661\":1}}],[\"求最大公约数和最小公倍数\",{\"0\":{\"499\":1}}],[\"求总左上角沿全\",{\"1\":{\"659\":1}}],[\"求所有能使水流向两个大洋的位置\",{\"1\":{\"653\":1}}],[\"求因每次的消除而掉落的砖块数量\",{\"1\":{\"632\":1}}],[\"求在经过若干次交换后字符串能达到的按字典序最小的字符串\",{\"1\":{\"616\":1}}],[\"求何时泳池左上角到右下角才是连通的\",{\"1\":{\"608\":1}}],[\"求从给定矩阵的左上角到右下角的所有连通路径中路径差值的最小值\",{\"1\":{\"600\":1}}],[\"求无序数组中最长数字连续子序列\",{\"1\":{\"544\":1}}],[\"求正数的平均数时\",{\"1\":{\"491\":1}}],[\"求一种修完所有课的顺序\",{\"1\":{\"450\":1}}],[\"求一定能确定出具体楼层f的最小操作次数\",{\"1\":{\"250\":1}}],[\"求使剩余区间互不重叠所需移除区间的最小数量\",{\"1\":{\"412\":1}}],[\"求使两单词相同的最小操作次数\",{\"1\":{\"262\":1}}],[\"求引爆所有气球的最少弓箭数量\",{\"1\":{\"405\":1}}],[\"求到达最后一个下标的最少移动次数\",{\"1\":{\"373\":1}}],[\"求和为给定整数的完全平方数的最少数量\",{\"1\":{\"362\":1}}],[\"求恰凑成总金额所需的最少的硬币个数\",{\"1\":{\"356\":1}}],[\"求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\",{\"1\":{\"126\":1,\"201\":1}}],[\"求添加完后数组和为目标值的添加方法数\",{\"1\":{\"352\":1}}],[\"求出数组中总和为目标值的组合的个数\",{\"1\":{\"346\":1}}],[\"求能获得的最大利润\",{\"1\":{\"301\":1,\"310\":1,\"321\":1,\"334\":1}}],[\"求能够偷窃到的最高金额\",{\"1\":{\"211\":1,\"219\":1}}],[\"求t在s的子序列\",{\"1\":{\"279\":1}}],[\"求将一单词转换成另一单词的最少编辑次数\",{\"1\":{\"268\":1}}],[\"求拆分出的正整数之积的最大值\",{\"1\":{\"227\":1}}],[\"求字典序最小的规划\",{\"1\":{\"179\":1}}],[\"求给定数组nums所含翻转对的数量\",{\"1\":{\"755\":1}}],[\"求给定数组中摆动子序列的最大长度\",{\"1\":{\"399\":1}}],[\"求给定字符串所有回文子串的数量\",{\"1\":{\"730\":1}}],[\"求给定环形整数数组的最大子数组和\",{\"1\":{\"241\":1}}],[\"求给定整数数组中最长严格递增子序列\",{\"1\":{\"237\":1}}],[\"求给定不含重复元素的数组的全排列\",{\"1\":{\"154\":1}}],[\"求给定含重复字符的字符串所有字符的所有排列\",{\"1\":{\"148\":1}}],[\"剑指\",{\"0\":{\"146\":1}}],[\"会将参数数组中的数组拆成单个元素\",{\"1\":{\"835\":1}}],[\"会将模块安装在新建的\",{\"1\":{\"79\":1}}],[\"会导致左边界多减一\",{\"1\":{\"685\":1}}],[\"会自然涵盖所有情况\",{\"1\":{\"144\":1}}],[\"鉴于存在连续多个重复值的情况\",{\"1\":{\"144\":1}}],[\"鉴于选取的子序列也不一定在原数组中连续\",{\"1\":{\"144\":1}}],[\"鉴于重复的组合是因为同层遍历时用了个体不同但数值相同的数\",{\"1\":{\"138\":1}}],[\"即为正向消除的本次掉落数量\",{\"1\":{\"635\":1}}],[\"即遍历时用哈希表存邮箱\",{\"1\":{\"627\":1}}],[\"即根节点对应的优先队列\",{\"1\":{\"618\":1}}],[\"即把问题中对零散变量相除求值转化为除相同额外变量\",{\"1\":{\"595\":1}}],[\"即equations\",{\"1\":{\"591\":1}}],[\"即判断二进制表示中是否只有一个\",{\"1\":{\"491\":1}}],[\"即令小重量根节点成为大重量根节点的子节点\",{\"1\":{\"432\":1}}],[\"即两集合的根节点合并时高度大的为最终根节点\",{\"1\":{\"431\":1}}],[\"即片段内所有字母在字符串内所有的出现都在此片段内\",{\"1\":{\"395\":1}}],[\"即从\",{\"1\":{\"388\":1}}],[\"即本次需要实际开始移动的位置\",{\"1\":{\"375\":1}}],[\"即买卖若在同一天则无意义\",{\"1\":{\"327\":1}}],[\"即逆序拷贝原字符串\",{\"1\":{\"296\":1}}],[\"即dp\",{\"1\":{\"285\":1,\"294\":1}}],[\"即对于固定的t的前i个字符来说\",{\"1\":{\"284\":1}}],[\"即有dp\",{\"1\":{\"275\":1}}],[\"即转移到的子问题为\",{\"1\":{\"254\":1}}],[\"即变成求普通数组的最小子数组和的问题\",{\"1\":{\"245\":1}}],[\"即取抢和不抢的较大者\",{\"1\":{\"214\":1}}],[\"即在每次向根节点迭代的时候不断地更改起始节点的父节点直到根节点\",{\"1\":{\"432\":1}}],[\"即在入栈前将栈内不满足单调性的元素都出栈\",{\"1\":{\"425\":1}}],[\"即在\",{\"1\":{\"213\":1}}],[\"即可\",{\"1\":{\"206\":1}}],[\"即\",{\"1\":{\"206\":1}}],[\"即使将\",{\"1\":{\"214\":1}}],[\"即使此条件下路径的字典序不是最小的\",{\"1\":{\"183\":1}}],[\"即使通过改变同层遍历的重复判定条件为if\",{\"1\":{\"143\":1}}],[\"即同层仅进行列的遍历以寻找能放置的格子而不同层搜索不同行\",{\"1\":{\"167\":1}}],[\"即每个位置都是从本次排列所有还未使用的字符中挑选一个\",{\"1\":{\"150\":1}}],[\"即一层仅考虑当前位置数字的选择与否\",{\"1\":{\"144\":1}}],[\"其位置上的水可向四周等高或更低位置流\",{\"1\":{\"653\":1}}],[\"其值为1表示砖块\",{\"1\":{\"632\":1}}],[\"其结果\",{\"1\":{\"596\":1}}],[\"其权重都更新到除以根节点变量的结果\",{\"1\":{\"595\":1}}],[\"其倍数关系用额外的权重数组记录\",{\"1\":{\"595\":1}}],[\"其他情况调用number\",{\"1\":{\"562\":1}}],[\"其他能正常完成搜索的节点的逆序回溯\",{\"1\":{\"184\":1}}],[\"其余元素是按字典序排列的邮箱地址\",{\"1\":{\"624\":1}}],[\"其余数都出现两次\",{\"1\":{\"518\":1}}],[\"其余三种情况如下\",{\"1\":{\"444\":1}}],[\"其最低有效位为负号位\",{\"1\":{\"491\":1}}],[\"其每个元素首先都相当于叶节点\",{\"1\":{\"442\":1}}],[\"其出现次数不变\",{\"1\":{\"286\":1}}],[\"其中翻转对指满足i\",{\"1\":{\"755\":1}}],[\"其中counts\",{\"1\":{\"748\":1}}],[\"其中a\",{\"1\":{\"723\":1}}],[\"其中各元素\",{\"1\":{\"709\":1}}],[\"其中第一个元素accounts\",{\"1\":{\"622\":1}}],[\"其中第j个问题queries\",{\"1\":{\"592\":1}}],[\"其中的accounts\",{\"1\":{\"622\":1}}],[\"其中pairs\",{\"1\":{\"616\":1}}],[\"其中prices\",{\"1\":{\"301\":1,\"310\":1,\"321\":1,\"334\":1}}],[\"其中grid\",{\"1\":{\"608\":1}}],[\"其中gas\",{\"1\":{\"380\":1}}],[\"其中有两个数只出现一次\",{\"1\":{\"518\":1}}],[\"其中必含分母的倍数\",{\"1\":{\"495\":1}}],[\"其中\",{\"1\":{\"405\":1,\"412\":1,\"442\":1,\"571\":1}}],[\"其中1\",{\"1\":{\"229\":1}}],[\"其中tickets\",{\"1\":{\"179\":1}}],[\"其简便计算的定义为\",{\"1\":{\"207\":1}}],[\"其不同子树结构数量为左右子树节点集合的笛卡尔积\",{\"1\":{\"206\":1}}],[\"其实质就是不同元素对拼消耗\",{\"1\":{\"703\":1}}],[\"其实用优先队列的话还要考虑向下搜索发现此路不通时回溯的操作\",{\"1\":{\"182\":1}}],[\"其实也能接受\",{\"1\":{\"143\":1}}],[\"其本身所指为当前待填的位置\",{\"1\":{\"157\":1}}],[\"其下的子网才是主机\",{\"1\":{\"117\":1}}],[\"而索引分布在同一子数组范围内的翻转对则在前一轮排序时已求出\",{\"1\":{\"757\":1}}],[\"而储水量的高取决于二者高度的较小值\",{\"1\":{\"743\":1}}],[\"而同一根叉子在同一时间只能被一个哲学家使用\",{\"1\":{\"569\":1}}],[\"而任何数与\",{\"1\":{\"520\":1}}],[\"而根节点的直接子节点是可以直接找到判定的\",{\"1\":{\"432\":1}}],[\"而不能仅设置第\",{\"1\":{\"330\":1}}],[\"而持有状态则表示以第\",{\"1\":{\"306\":1}}],[\"而对于以\",{\"1\":{\"206\":1}}],[\"而对于分块连续重复值的起始索引不是重复值的情况\",{\"1\":{\"143\":1}}],[\"而在同一层中\",{\"1\":{\"158\":1}}],[\"而是从头开始选一个未使用的\",{\"1\":{\"150\":1}}],[\"而导致重复序列的原因是原数组中可能存在不连续分布的重复值\",{\"1\":{\"144\":1}}],[\"而应是各子树的根节点列表\",{\"1\":{\"130\":1}}],[\"乍一看能套用\",{\"1\":{\"143\":1}}],[\"递增子序列的合法性由仅把不小于路径末尾的值加入来保证\",{\"1\":{\"144\":1}}],[\"递增子序列\",{\"0\":{\"140\":1}}],[\"限定相同的数只能在最开始的时候用一次即可\",{\"1\":{\"138\":1}}],[\"此时的俩边界为多拓展了一次的\",{\"1\":{\"685\":1}}],[\"此时需注意考虑填充位置与顶部的特殊连通\",{\"1\":{\"635\":1}}],[\"此时暂且还是用索引当作合并标识\",{\"1\":{\"628\":1}}],[\"此处可直接用\",{\"1\":{\"619\":1}}],[\"此处必须用\",{\"1\":{\"619\":1}}],[\"此类求多数元素的问题考虑用摩尔投票法\",{\"1\":{\"703\":1}}],[\"此类存在许多传递关系并需要记录的需求适合用并查集\",{\"1\":{\"595\":1}}],[\"此类问题可以用回溯把每种组合模拟出来统计\",{\"1\":{\"348\":1}}],[\"此函数亦可用于获取最低有效位\",{\"1\":{\"442\":1}}],[\"此情况保证解唯一\",{\"1\":{\"381\":1}}],[\"此两字符必不能同时用于扩展其内部的最长回文子序列\",{\"1\":{\"294\":1}}],[\"此新边界必都可以用来扩展原来其内部的最长回文子序列\",{\"1\":{\"293\":1}}],[\"此外还有不同的重复字符多次排列的结果重复问题\",{\"1\":{\"150\":1}}],[\"此题数据集各池底高度各不相同\",{\"1\":{\"609\":1}}],[\"此题应视作\",{\"1\":{\"336\":1}}],[\"此题看似与\",{\"1\":{\"336\":1}}],[\"此题还有另一种思考方式\",{\"1\":{\"296\":1}}],[\"此题有利用数学证明的极简算法\",{\"1\":{\"233\":1}}],[\"此题不含重复元素\",{\"1\":{\"156\":1}}],[\"此题是求所有排列而非所有组合\",{\"1\":{\"150\":1}}],[\"此题与基础的同一集合中求不同组合所不同的是可以含重复数字\",{\"1\":{\"137\":1}}],[\"此目录下的文章都是关于工作的\",{\"1\":{\"767\":1}}],[\"此目录下的文章是一些随笔\",{\"1\":{\"36\":1}}],[\"此目录下的文章为写作语法参考\",{\"1\":{\"15\":1}}],[\"找出游戏的获胜者\",{\"0\":{\"735\":1}}],[\"找出非递减数组中和为给定值的两个数的下标\",{\"1\":{\"688\":1}}],[\"找出给定字符串中最长的回文子串\",{\"1\":{\"682\":1}}],[\"找出给定的无序整形数组中缺失的最小正整数\",{\"1\":{\"550\":1}}],[\"找出各\",{\"1\":{\"640\":1}}],[\"找出那条冗余边\",{\"1\":{\"583\":1}}],[\"找出二叉树中所有重复的子树\",{\"1\":{\"540\":1}}],[\"找出两个只出现一次的数\",{\"1\":{\"518\":1}}],[\"找出数组中所有和为目标值的不同子集\",{\"1\":{\"135\":1}}],[\"找不到\",{\"0\":{\"81\":1}}],[\"组成翻转对的元素\",{\"1\":{\"758\":1}}],[\"组合问题\",{\"1\":{\"454\":1}}],[\"组合总和\",{\"0\":{\"133\":1,\"344\":1},\"1\":{\"143\":1,\"150\":1}}],[\"组的虚拟内网\",{\"1\":{\"115\":1}}],[\"拼成一颗新搜索树再加到本级回溯函数的返回列表中即可\",{\"1\":{\"131\":1}}],[\"以此枚举所有回文子串\",{\"1\":{\"732\":1}}],[\"以什么顺序从原数组中抽出来人\",{\"1\":{\"713\":1}}],[\"以备接下来的一组抵消\",{\"1\":{\"705\":1}}],[\"以其为中心向两端扩展\",{\"1\":{\"684\":1}}],[\"以其为根节点的所有种类的搜索树的构造就是\",{\"1\":{\"131\":1}}],[\"以该位的值来对所有数进行分组\",{\"1\":{\"521\":1}}],[\"以节点为键以其所有下游节点列表为值\",{\"1\":{\"182\":1}}],[\"以便后续能只对这些位置进行快速搜索而无需遍历其他已填充格子\",{\"1\":{\"175\":1}}],[\"以上述的特定值来区分各斜线\",{\"1\":{\"166\":1}}],[\"以链接形式分享歌单\",{\"1\":{\"50\":1}}],[\"作为前一个数\",{\"1\":{\"144\":1}}],[\"作为根节点\",{\"1\":{\"129\":1,\"203\":1}}],[\"作为目的地并开始迁移\",{\"1\":{\"57\":1}}],[\"⋯\",{\"1\":{\"129\":3,\"203\":3,\"494\":1}}],[\"对象类似\",{\"1\":{\"821\":1}}],[\"对角线遍历\",{\"0\":{\"671\":1}}],[\"对原数组某值的更新可通过更新树状数组对应节点及其所有父节点来实现\",{\"1\":{\"443\":1}}],[\"对原数组的区间查询可转化为对树状数组的若干节点查询来解决\",{\"1\":{\"443\":1}}],[\"对word2\",{\"1\":{\"272\":1}}],[\"对word1\",{\"1\":{\"271\":1,\"273\":1}}],[\"对于固定的nums\",{\"1\":{\"758\":1}}],[\"对于每个字符作为中心左端\",{\"1\":{\"733\":1}}],[\"对于每种组合\",{\"1\":{\"648\":1}}],[\"对于整数数组\",{\"1\":{\"536\":1}}],[\"对于上述最后的形式\",{\"1\":{\"495\":1}}],[\"对于排列问题\",{\"1\":{\"466\":1}}],[\"对于组合问题\",{\"1\":{\"463\":1}}],[\"对于简单区间上的更新以及求和问题\",{\"1\":{\"442\":1}}],[\"对于keep状态\",{\"1\":{\"305\":1}}],[\"对于sell状态\",{\"1\":{\"304\":1}}],[\"对于函数内部返回值的计算\",{\"1\":{\"221\":1}}],[\"对于树自然想到\",{\"1\":{\"221\":1}}],[\"对于单个子问题\",{\"1\":{\"214\":1}}],[\"对于有向图的\",{\"1\":{\"183\":1}}],[\"对于各皇后具体放置位置的记录\",{\"1\":{\"167\":1}}],[\"对于此题\",{\"1\":{\"144\":1}}],[\"对于我来说此题较难的地方在于构建回溯的代码形式\",{\"1\":{\"130\":1}}],[\"对于节点序列\",{\"1\":{\"129\":1,\"203\":1}}],[\"对齐\",{\"0\":{\"21\":1}}],[\"只能用isnan\",{\"1\":{\"816\":1}}],[\"只能是由原有保持或者当天由本笔交易卖出转移而来\",{\"1\":{\"325\":1}}],[\"只能是由原有保持或者当天由上一笔未持有状态买入转移而来\",{\"1\":{\"324\":1}}],[\"只有将c升至a一种方式\",{\"1\":{\"725\":1}}],[\"只要条件允许\",{\"1\":{\"569\":1}}],[\"只出现一次的数字\",{\"0\":{\"516\":1}}],[\"只是将交易上限定为k\",{\"1\":{\"323\":1}}],[\"只是要求统计不同搜索树的数量\",{\"1\":{\"128\":1}}],[\"只会用还未使用的部分中最左边的那个\",{\"1\":{\"150\":1}}],[\"只需在其基础上增加一状态变量即可\",{\"1\":{\"336\":1}}],[\"只需联合考虑各笔交易即可\",{\"1\":{\"323\":1}}],[\"只需要记录遍历到的字母最后一次出现的位置即可\",{\"1\":{\"395\":1}}],[\"只需要把每行每列的索引写标出来再画出斜线\",{\"1\":{\"166\":1}}],[\"只需要模拟笛卡尔积的运算即可\",{\"1\":{\"131\":1}}],[\"只需确认最终提示模块安装成功即可\",{\"1\":{\"80\":1}}],[\"不断合并已排序子数组的过程中\",{\"1\":{\"757\":1}}],[\"不管新位置高度如何\",{\"1\":{\"744\":1}}],[\"不管抢不抢i\",{\"1\":{\"214\":1}}],[\"不可在出队寻找相邻下一位置时再标记\",{\"1\":{\"663\":1}}],[\"不可简单地通过判断各位是否从两种方向转至正确位数是否都被限制来直接断定\",{\"1\":{\"647\":1}}],[\"不会掉落\",{\"1\":{\"632\":1}}],[\"不同且需要注意的地方\",{\"1\":{\"808\":1}}],[\"不同转动结果有\",{\"1\":{\"648\":1}}],[\"不同账户间顺序随意\",{\"1\":{\"624\":1}}],[\"不同的子序列\",{\"0\":{\"277\":1}}],[\"不同的二叉搜索树\",{\"0\":{\"124\":1,\"199\":1},\"1\":{\"128\":1}}],[\"不在索引对中的位置表示不可调换\",{\"1\":{\"618\":1}}],[\"不存在除\",{\"1\":{\"593\":1}}],[\"不要求序列数字在原数组中也连续\",{\"1\":{\"544\":1}}],[\"不一定能保证每一项都是整数\",{\"1\":{\"495\":1}}],[\"不适用于\",{\"1\":{\"491\":2}}],[\"不限制交易次数但不可在卖出股票的下一天买入\",{\"1\":{\"334\":1}}],[\"不含的话同上\",{\"1\":{\"286\":1}}],[\"不抢当前节点\",{\"1\":{\"223\":1}}],[\"不抢右子节点作为根节点的最大收益这三者之和\",{\"1\":{\"222\":1}}],[\"不抢左子节点作为根节点的最大收益\",{\"1\":{\"222\":1}}],[\"不是在向下深入时而是在回溯时添加\",{\"1\":{\"184\":1}}],[\"不予实现\",{\"1\":{\"42\":1}}],[\"登陆路由器管理界面\",{\"1\":{\"121\":1}}],[\"上下左右\",{\"1\":{\"632\":1}}],[\"上述作为分组标准的数取全体异或的结果的最低位的\",{\"1\":{\"522\":1}}],[\"上述开关并不在同一处\",{\"1\":{\"120\":1}}],[\"上自带的字体文件缺少能被\",{\"1\":{\"82\":1}}],[\"改桥接之前先记录软路由方式中的宽带帐密\",{\"1\":{\"119\":1}}],[\"指针如何移动\",{\"1\":{\"743\":1}}],[\"指向本机\",{\"1\":{\"118\":1}}],[\"指南\",{\"1\":{\"30\":1}}],[\"开始时需将网格数据复制一份\",{\"1\":{\"635\":1}}],[\"开始时油箱为空\",{\"1\":{\"381\":1}}],[\"开\",{\"1\":{\"118\":2}}],[\"关于重量并查集路径压缩的两点注意\",{\"1\":{\"433\":1}}],[\"关闭\",{\"1\":{\"118\":1}}],[\"关键词精选图标\",{\"1\":{\"4\":1}}],[\"先假设每条斜线都从右上至左下遍历\",{\"1\":{\"677\":1}}],[\"先给字符串变量编号以便并查集处理\",{\"1\":{\"596\":1}}],[\"先乘下一项的分子\",{\"1\":{\"495\":1}}],[\"先标记数组一步进行剪枝\",{\"1\":{\"470\":1}}],[\"先找到代表各自集合的根节点\",{\"1\":{\"430\":1}}],[\"先考虑有解的情况\",{\"1\":{\"383\":1}}],[\"先将抢的最大收益算出来存着\",{\"1\":{\"215\":1}}],[\"先将字符按字典序排序以把相同字符并到一起\",{\"1\":{\"150\":1}}],[\"先利用超级管理帐密登陆光猫管理界面\",{\"1\":{\"118\":1}}],[\"先pnpm\",{\"1\":{\"12\":1}}],[\"步骤如下\",{\"1\":{\"117\":1}}],[\"搭配\",{\"1\":{\"117\":1}}],[\"3c\",{\"1\":{\"897\":1}}],[\"30\",{\"1\":{\"565\":1,\"804\":2}}],[\"3格子组成\",{\"1\":{\"171\":1}}],[\"38\",{\"0\":{\"146\":1}}],[\"3\",{\"1\":{\"117\":1,\"143\":1,\"171\":1,\"176\":10,\"437\":1,\"498\":1,\"559\":1,\"561\":1,\"565\":4,\"674\":1,\"675\":1,\"706\":2,\"817\":2}}],[\"导致利润虚高\",{\"1\":{\"330\":1}}],[\"导致其他下游节点永不被进入搜索而死循环\",{\"1\":{\"182\":1}}],[\"导致重复的原因是选了前一个数没选当前数和没选前一个数选了当前数这两种情况实质上等效\",{\"1\":{\"144\":1}}],[\"导致俩主机之间无法通信\",{\"1\":{\"117\":1}}],[\"导入文件\",{\"0\":{\"26\":1}}],[\"于是俩主机之间经过了无数层\",{\"1\":{\"117\":1}}],[\"路径到右下角的最短路径长度\",{\"1\":{\"659\":1}}],[\"路径可上下左右四方向连通\",{\"1\":{\"601\":1}}],[\"路径差值\",{\"1\":{\"601\":1}}],[\"路径压缩不适用于高度并查集\",{\"1\":{\"435\":1}}],[\"路径末尾值\",{\"1\":{\"144\":1}}],[\"路径中\",{\"1\":{\"79\":1}}],[\"路由器\",{\"1\":{\"117\":1}}],[\"路由器是二阶内网\",{\"1\":{\"117\":1}}],[\"入户宽带仅是内网地址\",{\"1\":{\"117\":1}}],[\"是因为若即将遍历的位置已经被访问过\",{\"1\":{\"662\":1}}],[\"是因为移动是个大内网\",{\"1\":{\"117\":1}}],[\"是指其直接或间接\",{\"1\":{\"632\":1}}],[\"是字符串列表\",{\"1\":{\"622\":1}}],[\"是否需要标记数组标记当前层回溯路径中已存在哪些元素\",{\"1\":{\"467\":1}}],[\"是否需要将出队的元素再添加回来\",{\"1\":{\"182\":1}}],[\"是假设字符范围是\",{\"1\":{\"438\":1}}],[\"是自己用\",{\"1\":{\"99\":1}}],[\"师弟给我科普\",{\"1\":{\"117\":1}}],[\"老家也是移动宽带连不上\",{\"1\":{\"117\":1}}],[\"论文\",{\"1\":{\"116\":1}}],[\"也不可能会获得更大的储水量\",{\"1\":{\"744\":1}}],[\"也不必费心设啥国外的\",{\"1\":{\"116\":1}}],[\"也能像\",{\"1\":{\"662\":1}}],[\"也能拦下来再回个假的\",{\"1\":{\"116\":1}}],[\"也无需为多笔交易单独设置变量维度\",{\"1\":{\"336\":1}}],[\"也可将c升至b\",{\"1\":{\"724\":1}}],[\"也可将俩数继续往下拆分\",{\"1\":{\"229\":1}}],[\"也可以是通过买入股票从sell转换而来\",{\"1\":{\"305\":1}}],[\"也可以是通过将持有股票卖掉从keep转换而来\",{\"1\":{\"304\":1}}],[\"也就不存在之前讨论的问题了\",{\"1\":{\"184\":1}}],[\"也就是说对于特定的值\",{\"1\":{\"131\":1}}],[\"也分两种情况\",{\"1\":{\"183\":1}}],[\"也只能滤掉起始索引为首个重复值的分块连续重复值情况\",{\"1\":{\"143\":1}}],[\"也常会实际构造多棵树\",{\"1\":{\"130\":1}}],[\"6\",{\"1\":{\"116\":3,\"674\":1,\"675\":1,\"710\":1,\"711\":1}}],[\"一致性哈希算法\",{\"1\":{\"784\":1}}],[\"一致性问题\",{\"1\":{\"778\":1,\"779\":1}}],[\"一定用不到第一次递减的b元素\",{\"1\":{\"726\":1}}],[\"一定消耗一次操作次数\",{\"1\":{\"253\":1}}],[\"一个人最初可以拥有任意数量的账户\",{\"1\":{\"623\":1}}],[\"一个一个数字试\",{\"1\":{\"39\":1}}],[\"一笔交易产生实质买卖利润至少需要两天\",{\"1\":{\"327\":1}}],[\"一是按照字典序优先该点恰好排在最后\",{\"1\":{\"183\":1}}],[\"一条斜线内都只能存在一个皇后\",{\"1\":{\"162\":1}}],[\"一列\",{\"1\":{\"162\":1}}],[\"一般用阿里云的223\",{\"1\":{\"116\":1}}],[\"教研室用\",{\"1\":{\"115\":1}}],[\"教程\",{\"1\":{\"30\":2}}],[\"添加了set和map数据类型\",{\"1\":{\"824\":1}}],[\"添加一条答案路径时必须由当前路径列表新建一个列表来添加\",{\"1\":{\"461\":1}}],[\"添加\",{\"1\":{\"107\":1}}],[\"添加写的权限\",{\"1\":{\"10\":1}}],[\"using\",{\"1\":{\"1011\":1}}],[\"useless\",{\"1\":{\"1080\":1,\"1084\":1}}],[\"useful\",{\"1\":{\"636\":1,\"1012\":1}}],[\"used\",{\"1\":{\"151\":6,\"977\":1}}],[\"use\",{\"1\":{\"106\":1,\"108\":1,\"812\":1,\"1074\":1,\"1100\":1,\"1102\":1}}],[\"u\",{\"1\":{\"667\":1,\"866\":1,\"939\":1,\"940\":1,\"953\":1}}],[\"uppercase\",{\"1\":{\"904\":1}}],[\"upwards\",{\"1\":{\"862\":1}}],[\"up\",{\"1\":{\"636\":1,\"866\":1,\"868\":1,\"870\":1,\"1098\":1}}],[\"upnp\",{\"1\":{\"118\":1}}],[\"uf\",{\"1\":{\"597\":3}}],[\"unnamed\",{\"1\":{\"976\":1}}],[\"undo\",{\"1\":{\"939\":1,\"940\":1}}],[\"undefined\",{\"1\":{\"814\":1}}],[\"until\",{\"1\":{\"855\":1,\"960\":1,\"1089\":1,\"1090\":1}}],[\"unshift\",{\"1\":{\"833\":1}}],[\"union\",{\"1\":{\"597\":2,\"605\":2,\"619\":2,\"629\":3,\"636\":11}}],[\"unionfind\",{\"1\":{\"597\":4}}],[\"unicode\",{\"1\":{\"42\":1,\"78\":1}}],[\"unlock\",{\"1\":{\"565\":4,\"579\":2}}],[\"unrob\",{\"1\":{\"216\":9,\"224\":2}}],[\"跟\",{\"1\":{\"105\":1}}],[\"执行时会自动重置系统变量\",{\"1\":{\"105\":1}}],[\"修改时记得同时改两行\",{\"1\":{\"103\":1}}],[\"修改时需同时变动两行\",{\"1\":{\"92\":1}}],[\"覆盖了\",{\"1\":{\"102\":1}}],[\"装的\",{\"1\":{\"99\":1}}],[\"启用虚拟目录功能\",{\"1\":{\"97\":1}}],[\"启用的主题色\",{\"1\":{\"28\":1}}],[\"周围添加新的侦听端口\",{\"1\":{\"96\":1}}],[\"端口不可用\",{\"1\":{\"96\":1}}],[\"虚拟主机配置文件\",{\"1\":{\"100\":1}}],[\"虚拟主机会将其覆盖\",{\"1\":{\"93\":1}}],[\"虚拟内网访问时\",{\"1\":{\"96\":1}}],[\"8\",{\"1\":{\"563\":1,\"648\":1,\"674\":1,\"675\":1}}],[\"80\",{\"1\":{\"94\":1,\"96\":1}}],[\"8e44ad\",{\"1\":{\"28\":1}}],[\"0000001\",{\"1\":{\"817\":1}}],[\"0000\",{\"1\":{\"650\":2}}],[\"0与9相邻\",{\"1\":{\"644\":1}}],[\"01\",{\"0\":{\"638\":1}}],[\"09\",{\"1\":{\"611\":1}}],[\"0d\",{\"1\":{\"597\":3}}],[\"0表示空白\",{\"1\":{\"632\":1}}],[\"0表示\",{\"1\":{\"593\":1}}],[\"0\",{\"1\":{\"94\":2,\"106\":1,\"132\":1,\"139\":2,\"145\":1,\"151\":3,\"159\":1,\"168\":4,\"176\":7,\"196\":1,\"206\":1,\"208\":1,\"213\":1,\"216\":4,\"224\":3,\"229\":3,\"247\":5,\"250\":1,\"276\":3,\"282\":2,\"283\":3,\"287\":7,\"297\":2,\"306\":6,\"307\":2,\"318\":4,\"329\":1,\"330\":3,\"331\":8,\"342\":3,\"349\":1,\"358\":2,\"359\":4,\"364\":2,\"365\":4,\"377\":4,\"390\":7,\"396\":4,\"409\":3,\"415\":2,\"438\":6,\"440\":2,\"443\":1,\"491\":5,\"492\":3,\"500\":1,\"520\":2,\"523\":3,\"547\":2,\"565\":8,\"571\":1,\"579\":1,\"588\":1,\"593\":1,\"597\":6,\"605\":9,\"609\":1,\"613\":12,\"619\":4,\"622\":1,\"629\":3,\"636\":24,\"640\":2,\"650\":7,\"656\":14,\"659\":1,\"664\":19,\"679\":6,\"685\":4,\"692\":1,\"706\":12,\"710\":2,\"711\":2,\"714\":4,\"727\":1,\"734\":3,\"745\":2,\"752\":4,\"760\":2,\"814\":1,\"817\":1,\"857\":1,\"978\":1,\"984\":1,\"1008\":2}}],[\"k>\",{\"1\":{\"1064\":1}}],[\"kafka\",{\"1\":{\"798\":1}}],[\"ki​\",{\"1\":{\"709\":2}}],[\"k−1\",{\"1\":{\"704\":3}}],[\"kmp\",{\"0\":{\"436\":1},\"1\":{\"438\":2}}],[\"k2\",{\"1\":{\"318\":4}}],[\"k1\",{\"1\":{\"318\":4}}],[\"keep可由原有保持或前一天买入转移而来\",{\"1\":{\"338\":1}}],[\"keep2\",{\"1\":{\"315\":1,\"316\":1}}],[\"keep1\",{\"1\":{\"313\":1,\"314\":1}}],[\"keep\",{\"1\":{\"304\":1,\"305\":1,\"307\":4,\"324\":1,\"325\":1,\"331\":8,\"338\":1,\"340\":1,\"342\":4}}],[\"keyset\",{\"1\":{\"629\":1}}],[\"key\",{\"1\":{\"62\":1,\"63\":1,\"1057\":1,\"1077\":1}}],[\"keygen\",{\"1\":{\"62\":1,\"63\":1}}],[\"kul\",{\"1\":{\"185\":2,\"186\":1,\"187\":1,\"188\":1}}],[\"k\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"174\":2,\"208\":5,\"252\":1,\"254\":2,\"255\":1,\"256\":5,\"257\":1,\"258\":5,\"327\":1,\"331\":8,\"442\":1,\"536\":1,\"629\":1,\"679\":7,\"842\":1,\"1041\":1,\"1059\":1,\"1064\":1,\"1086\":1,\"1100\":1}}],[\"参考博客\",{\"1\":{\"111\":1,\"112\":1}}],[\"参考教程\",{\"1\":{\"84\":1}}],[\"参数是为了将包指定安装在\",{\"1\":{\"79\":1}}],[\"但最好别\",{\"1\":{\"831\":1}}],[\"但应尽可能使紧接着c的元素满足非递减\",{\"1\":{\"724\":1}}],[\"但应该考虑充分利用已计算的数据\",{\"1\":{\"292\":1}}],[\"但不保证图连通\",{\"1\":{\"667\":1}}],[\"但每次只能转一个转盘的相邻数字\",{\"1\":{\"644\":1}}],[\"但是即使两个账户具有相同的名称\",{\"1\":{\"623\":1}}],[\"但是按照回溯时添加的解法\",{\"1\":{\"185\":1}}],[\"但其所有账户都具有相同的名称\",{\"1\":{\"623\":1}}],[\"但有一个特殊情况\",{\"1\":{\"522\":1}}],[\"但有几个点\",{\"1\":{\"173\":1}}],[\"但代码实现时基于已累乘结果\",{\"1\":{\"495\":1}}],[\"但起始索引能在下一层遍历选取时\",{\"1\":{\"470\":1}}],[\"但又同时是其前若干节点的根节点\",{\"1\":{\"442\":1}}],[\"但仅如此的话对主要影响并查集查询速度的集合高度并并无优化\",{\"1\":{\"432\":1}}],[\"但用到它的题一般不简单\",{\"1\":{\"426\":1}}],[\"但用移动的垃圾宽带会连不上\",{\"1\":{\"115\":1}}],[\"但需注意更新最终根节点的高度\",{\"1\":{\"431\":1}}],[\"但需确保序列中各元素的相对位置与原来一致\",{\"1\":{\"401\":1}}],[\"但需要关注的是哪些情况是需要实际移动才行的\",{\"1\":{\"375\":1}}],[\"但大可不必\",{\"1\":{\"348\":1}}],[\"但这并没影响\",{\"1\":{\"306\":1}}],[\"但这涉及到前俩的初始化值\",{\"1\":{\"214\":1}}],[\"但在回溯过程中途径的位置复用性极差\",{\"1\":{\"655\":1}}],[\"但在冷静期\",{\"1\":{\"342\":1}}],[\"但在任何时候最多只能持有一股股票\",{\"1\":{\"301\":1,\"310\":1,\"321\":1}}],[\"但在最后求得组合结果时显然会因为数值相同算作重复\",{\"1\":{\"137\":1}}],[\"但分鸡蛋有没有碎两种情况\",{\"1\":{\"253\":1}}],[\"但实际查询时会先进行带路径压缩操作的搜索\",{\"1\":{\"596\":1}}],[\"但实际上若数组全为负数就会导致此法失效\",{\"1\":{\"246\":1}}],[\"但实测保持软路由并直接在光猫上启用\",{\"1\":{\"117\":1}}],[\"但两种方向的斜线就稍显麻烦\",{\"1\":{\"166\":1}}],[\"但此题有几个针对性的小技巧和几个需要注意的点\",{\"1\":{\"164\":1}}],[\"但此题需要将所有树实际构造出来\",{\"1\":{\"128\":1}}],[\"但还有另一种不需要标记数组的回溯解法\",{\"1\":{\"156\":1}}],[\"但由于存在冷冻期\",{\"1\":{\"336\":1}}],[\"但由于能进行多笔交易且限制了交易上限\",{\"1\":{\"312\":1}}],[\"但由于此题求递增子序列要求元素相对位置不能变\",{\"1\":{\"143\":1}}],[\"但由于字符区间过长\",{\"1\":{\"42\":1}}],[\"但重复数字可以一起使用\",{\"1\":{\"135\":1}}],[\"但即使设成国外\",{\"1\":{\"116\":1}}],[\"但\",{\"1\":{\"82\":1}}],[\"提示\",{\"1\":{\"80\":1}}],[\"若键为非法变量名\",{\"1\":{\"822\":1}}],[\"若其中的fgc列很大且一直增大则确认\",{\"1\":{\"805\":1}}],[\"若已发生则直接返回\",{\"1\":{\"726\":1}}],[\"若干人站成一排\",{\"1\":{\"717\":1}}],[\"若干数字的集合⾥有多少符合条件的⼦集\",{\"1\":{\"457\":1}}],[\"若干数字按⼀定规则全排列的不同排列方式数量\",{\"1\":{\"455\":1}}],[\"若干数字中按⼀定规则找出若干个数的集合\",{\"1\":{\"454\":1}}],[\"若此时发现无坑位\",{\"1\":{\"705\":1}}],[\"若与各候选变量都不同\",{\"1\":{\"705\":1}}],[\"若当前元素与某个剩余的变量相同\",{\"1\":{\"705\":1}}],[\"若从各位置往边界搜固然可达\",{\"1\":{\"655\":1}}],[\"若从删除的反面\",{\"1\":{\"264\":1}}],[\"若原本该位置就无砖块则填充后连通数量也必无变化\",{\"1\":{\"635\":1}}],[\"若消除的位置本就无砖块则无事发生\",{\"1\":{\"632\":1}}],[\"若存在无法推出的答案则用\",{\"1\":{\"593\":1}}],[\"若可同时被\",{\"1\":{\"561\":1}}],[\"若可被\",{\"1\":{\"559\":1,\"560\":1}}],[\"若可以绕环路行驶一周则返回出发时加油站的编号\",{\"1\":{\"381\":1}}],[\"若只有一个数只出现一次\",{\"1\":{\"520\":1}}],[\"若a≡bmodp\",{\"1\":{\"508\":1,\"509\":1,\"510\":1}}],[\"若逐项除再相乘\",{\"1\":{\"495\":1}}],[\"若相加结果的符号同时与两加数异号则发生溢出\",{\"1\":{\"492\":1}}],[\"若相同则公共子序列加一\",{\"1\":{\"264\":1}}],[\"若相同则必选当前数\",{\"1\":{\"144\":1}}],[\"若两个账户含相同邮箱地址\",{\"1\":{\"623\":1}}],[\"若两值相同则会出现\",{\"1\":{\"492\":1}}],[\"若两集合高度一样则随机确立父子关系\",{\"1\":{\"431\":1}}],[\"若每一\",{\"1\":{\"481\":1}}],[\"若每次都进行行\",{\"1\":{\"165\":1}}],[\"若题目仅要求求出不同组合的个数\",{\"1\":{\"471\":1}}],[\"若元素仅可使用一次\",{\"1\":{\"469\":1}}],[\"若元素可重复使用\",{\"1\":{\"468\":1}}],[\"若是多个互不影响的集合取组合\",{\"1\":{\"465\":1}}],[\"若在同一集合中求组合\",{\"1\":{\"464\":1}}],[\"若为有向无环图\",{\"1\":{\"448\":1}}],[\"若有向图中存在环\",{\"1\":{\"447\":1}}],[\"若上一支箭右侧还有其他未引爆气球的左边界\",{\"1\":{\"408\":1}}],[\"若到某个加油站后为负\",{\"1\":{\"383\":1}}],[\"若无法凑成则返回\",{\"1\":{\"356\":1}}],[\"若亏损则再强制等效于未进行买卖\",{\"1\":{\"330\":1}}],[\"若t\",{\"1\":{\"285\":1,\"286\":1}}],[\"若word1\",{\"1\":{\"270\":1}}],[\"若允许进行t次操作且有k个鸡蛋\",{\"1\":{\"252\":1}}],[\"若一个子数组的和恰为最大\",{\"1\":{\"243\":1}}],[\"若i\",{\"1\":{\"230\":1,\"231\":1}}],[\"若不同则从上一状态\",{\"1\":{\"264\":1}}],[\"若不存在出度为零的节点则可以顺畅地按照字典序优先完成\",{\"1\":{\"183\":1}}],[\"若不选则直接进入下一层递归\",{\"1\":{\"144\":1}}],[\"若选则按回溯规则在下一层递归前后进行处理和反处理\",{\"1\":{\"144\":1}}],[\"若想完全去除同层重复\",{\"1\":{\"143\":1}}],[\"若缺少此参数\",{\"1\":{\"79\":1}}],[\"若待生成的词句为汉字则得用\",{\"1\":{\"42\":1}}],[\"若待生成的词句为纯英文小写\",{\"1\":{\"42\":1}}],[\"才能使用这些模块\",{\"1\":{\"79\":1}}],[\"如把x所在集合向y所在集合联合\",{\"1\":{\"596\":1}}],[\"如\",{\"1\":{\"528\":1,\"673\":1,\"695\":1}}],[\"如无边图的任意节点排列都是拓扑排序\",{\"1\":{\"448\":1}}],[\"如prices\",{\"1\":{\"328\":1}}],[\"如果一支箭擦着所有气球中右边界最靠左的右边界将其引爆\",{\"1\":{\"407\":1}}],[\"如果到了才更新移动次数和移动起始点\",{\"1\":{\"375\":1}}],[\"如果搜到了无下游节点的节点就会进行回溯\",{\"1\":{\"183\":1}}],[\"如果需要像普通回溯那样添加回来\",{\"1\":{\"182\":1}}],[\"如1\",{\"1\":{\"143\":1}}],[\"如环境路径等变量\",{\"1\":{\"105\":1}}],[\"如此构建的并查集的所有节点都直接连接于根节点\",{\"1\":{\"595\":1}}],[\"如此可确保合并后集合高度不会大于原有的两集合\",{\"1\":{\"431\":1}}],[\"如此这支箭就能同样在保证引爆此气球的同时尽可能多地引爆右侧的气球\",{\"1\":{\"408\":1}}],[\"如此也可避免枚举左下三角的边缘条件的不便\",{\"1\":{\"295\":1}}],[\"如此遍历到最后一间\",{\"1\":{\"215\":1}}],[\"如此来保证进入下一层时标记索引左侧的数都是已选择的\",{\"1\":{\"157\":1}}],[\"如此\",{\"1\":{\"79\":1}}],[\"如链接为\",{\"1\":{\"51\":1}}],[\"所有节点分为两个独立集合\",{\"1\":{\"668\":1}}],[\"所有索引对即表示某些索引连通成若干集合\",{\"1\":{\"618\":1}}],[\"所有源单词中的字母通常恰好只用一次\",{\"1\":{\"527\":1}}],[\"所得即为该数\",{\"1\":{\"520\":1}}],[\"所以应将b降至c\",{\"1\":{\"724\":1}}],[\"所以应当存储并维护每行\",{\"1\":{\"165\":1}}],[\"所以得到邮箱对应的索引后还需要经过并查集找到可以作为合并标识的根\",{\"1\":{\"628\":1}}],[\"所以得按照片段长度下限来划分\",{\"1\":{\"395\":1}}],[\"所以用哈希表存各优先队列\",{\"1\":{\"618\":1}}],[\"所以先由并查集将所有索引对的信息翻译成字符串中的若干连通位置的集合\",{\"1\":{\"618\":1}}],[\"所以该边是当前连通路径的最大边\",{\"1\":{\"603\":1}}],[\"所以思考这个方法没有对应的回调\",{\"1\":{\"576\":1}}],[\"所以起始索引可以完全替代标记数组\",{\"1\":{\"470\":1}}],[\"所以重量并查集的节点从第二次查询开始会变得非常快\",{\"1\":{\"432\":1}}],[\"所以在每次迭代查找父节点时都可以顺便进行路径压缩\",{\"1\":{\"432\":1}}],[\"所以在每层回溯函数中待选的字符并不需要从某个起始索引开始\",{\"1\":{\"150\":1}}],[\"所以合并原则是令合并后集合的高度最小\",{\"1\":{\"431\":1}}],[\"所以一直重复此过程即可\",{\"1\":{\"408\":1}}],[\"所以一开始会有签名问题\",{\"1\":{\"99\":1}}],[\"所以自然需要先遍历一遍统计各字母的出现频率\",{\"1\":{\"395\":1}}],[\"所以自然需要考虑分割问题进行套用\",{\"1\":{\"243\":1}}],[\"所以对于有先后制约关系的遍历搜索可以套用拓扑排序模版\",{\"1\":{\"449\":1}}],[\"所以对于\",{\"1\":{\"386\":1}}],[\"所以对于i的拆分的最大乘积为遍历所有j的最大值\",{\"1\":{\"232\":1}}],[\"所以只需稍加试验即可得应按照升序进行抽取\",{\"1\":{\"713\":1}}],[\"所以只需要将原数组分为类似上述简化问题的两组再进行组内异或即可\",{\"1\":{\"521\":1}}],[\"所以只需要在遍历时累加每个加油站的补给量与到下个加油站的消耗量之差\",{\"1\":{\"383\":1}}],[\"所以只需在遍历时额外增加一个不会阶段性重置的统计变量即可\",{\"1\":{\"389\":1}}],[\"所以只能采用光猫桥接搭配路由器拨号上网的方式\",{\"1\":{\"117\":1}}],[\"所以不可简单通过每次更新后判断是否已经可达最后下标来直接结束\",{\"1\":{\"376\":1}}],[\"所以还需要记录上一次最远可达位置\",{\"1\":{\"375\":1}}],[\"所以无法像那题一样在一天内完成无数笔交易\",{\"1\":{\"336\":1}}],[\"所以无法通过排序将重复数字并到一块\",{\"1\":{\"143\":1}}],[\"所以最长相同子串的字符可不在原字符串中连续\",{\"1\":{\"264\":1}}],[\"所以最后应进行此情况的判断\",{\"1\":{\"246\":1}}],[\"所以貌似只需要同时求出不成环的原数组的最大和与最小和\",{\"1\":{\"246\":1}}],[\"所以抢第一间和最后一间就不能都抢\",{\"1\":{\"213\":1}}],[\"所以整个规划中节点添加的顺序恰好为字典序的逆序\",{\"1\":{\"184\":1}}],[\"所以解决问题的关键其实将节点添加入规划的时机\",{\"1\":{\"184\":1}}],[\"所以实际需要考虑的只有该点出现在搜索中间某处的情况\",{\"1\":{\"183\":1}}],[\"所以加下来从整体考虑是否会有这个问题\",{\"1\":{\"182\":1}}],[\"所以我们可以将两种方向的斜线分开编号\",{\"1\":{\"166\":1}}],[\"所以需要标记数组来记录本次排列哪些字符已经用过\",{\"1\":{\"150\":1}}],[\"所以需要加上限制条件禁止其中一种\",{\"1\":{\"144\":1}}],[\"所以递归终止条件为递归到达数据末尾\",{\"1\":{\"144\":1}}],[\"所以引入另一套更为通用的模版思想\",{\"1\":{\"144\":1}}],[\"所以此题再强行套用上述模版已不再是最优方案\",{\"1\":{\"143\":1}}],[\"所以也并不会影响到寻找需要同时用到多个重复数的子集\",{\"1\":{\"138\":1}}],[\"所以具体实现的时候只需要在同层遍历时进行判断\",{\"1\":{\"138\":1}}],[\"所以考虑先排序数组\",{\"1\":{\"137\":1}}],[\"所以\",{\"1\":{\"105\":1}}],[\"所以会阻止此类签名算法验证的登陆行为\",{\"1\":{\"61\":1}}],[\"所选用的字体宏包所识别的特定样式\",{\"1\":{\"82\":1}}],[\"所设置的模块路径中\",{\"1\":{\"79\":1}}],[\"安装会提示已存在一种样式\",{\"1\":{\"82\":1}}],[\"安装时会夹杂\",{\"1\":{\"80\":1}}],[\"安装\",{\"1\":{\"75\":1}}],[\"并返回新数组\",{\"1\":{\"835\":1}}],[\"并查询小于当前遍历值的所有数的数量和\",{\"1\":{\"750\":1}}],[\"并查集位置使用i\",{\"1\":{\"635\":1}}],[\"并查集构建若干集合的缓存\",{\"1\":{\"429\":1}}],[\"并查集\",{\"0\":{\"428\":1,\"514\":1,\"580\":1}}],[\"并且考虑到左右子数组的有序性\",{\"1\":{\"758\":1}}],[\"并且相邻两人评分更高的分给更多糖果\",{\"1\":{\"717\":1}}],[\"并且当前插入者的第二属性恰好就是插入新队列的索引位置\",{\"1\":{\"713\":1}}],[\"并且有\",{\"1\":{\"446\":1}}],[\"并且在每天更新时无需将先更新的值用临时变量暂存\",{\"1\":{\"306\":1}}],[\"并且每次大循环开始前需确保对角线上的值已初始化\",{\"1\":{\"295\":1}}],[\"并且由于每次删除的字符位置可任选\",{\"1\":{\"264\":1}}],[\"并且由于下一层不关注起始索引之前的路径\",{\"1\":{\"138\":1}}],[\"并且也不存在需要像普通回溯那般撤销处理的操作\",{\"1\":{\"184\":1}}],[\"并且求的是路径沿途节点名字典序最小的那条\",{\"1\":{\"181\":1}}],[\"并且这样记录也恰好契合每层搜索基于行的形式\",{\"1\":{\"167\":1}}],[\"并且移动会屏蔽端口\",{\"1\":{\"117\":1}}],[\"并指向本机\",{\"1\":{\"122\":1}}],[\"并将\",{\"1\":{\"118\":1}}],[\"并不可行\",{\"1\":{\"117\":1}}],[\"并\",{\"1\":{\"74\":1}}],[\"$d\",{\"1\":{\"1009\":1}}],[\"$home\",{\"1\":{\"78\":1,\"79\":1}}],[\"$\",{\"1\":{\"74\":1,\"77\":1,\"859\":1,\"1009\":1}}],[\"$theme\",{\"1\":{\"28\":1}}],[\"和values\",{\"1\":{\"591\":1}}],[\"和整数\",{\"1\":{\"536\":1}}],[\"和keep\",{\"1\":{\"303\":1}}],[\"和s\",{\"1\":{\"292\":1}}],[\"和\",{\"1\":{\"71\":1,\"122\":1,\"129\":1,\"203\":1,\"213\":1,\"229\":1,\"561\":1,\"573\":1,\"575\":1,\"685\":1}}],[\"自己和所有子节点的数量\",{\"1\":{\"431\":1,\"432\":1}}],[\"自底向上返回遍历\",{\"1\":{\"221\":1}}],[\"自带\",{\"1\":{\"71\":1}}],[\"自定义截止数字\",{\"1\":{\"39\":1}}],[\"自定义容器\",{\"0\":{\"18\":1}}],[\"格式化\",{\"1\":{\"70\":1}}],[\"格式化问题\",{\"0\":{\"69\":1}}],[\"写作环境配置问题\",{\"1\":{\"70\":1}}],[\"写作参考\",{\"0\":{\"13\":1}}],[\"这实际上是一个求不断断开某些节点后连通量的问题\",{\"1\":{\"634\":1}}],[\"这题与\",{\"1\":{\"611\":1}}],[\"这样一来每个节点查询过后都能成为根节点的直接子节点\",{\"1\":{\"432\":1}}],[\"这样对于每个格子都可快速判断能否放置\",{\"1\":{\"165\":1}}],[\"这个累加值即为油箱含量\",{\"1\":{\"383\":1}}],[\"这个死胡同节点\",{\"1\":{\"185\":1}}],[\"这种情况则说明与之相对的最小和子数组不跨越原数组首尾\",{\"1\":{\"245\":1}}],[\"这种不用管\",{\"1\":{\"80\":1}}],[\"这就退化为普通数组求最大子数组和\",{\"1\":{\"244\":1}}],[\"这是默认路径\",{\"1\":{\"93\":1}}],[\"这是\",{\"1\":{\"70\":1}}],[\"这篇文章\",{\"1\":{\"61\":1}}],[\"源码跳\",{\"1\":{\"67\":1}}],[\"源码与\",{\"0\":{\"65\":1}}],[\"插件\",{\"1\":{\"70\":1}}],[\"插件且\",{\"1\":{\"66\":1}}],[\"插件配置\",{\"1\":{\"30\":1}}],[\"之所以\",{\"1\":{\"662\":1}}],[\"之间相互跳转\",{\"0\":{\"65\":1}}],[\"之后自动编译并部署\",{\"1\":{\"9\":1}}],[\"建议采用目前性能最好且最安全的eddsa算法\",{\"1\":{\"61\":1}}],[\"默认采用的\",{\"1\":{\"61\":1}}],[\"版本认为\",{\"1\":{\"61\":1}}],[\"文件最后配置允许使用\",{\"1\":{\"98\":1}}],[\"文件根目录\",{\"1\":{\"92\":1}}],[\"文件无法通过\",{\"1\":{\"70\":1}}],[\"文件较慢\",{\"1\":{\"59\":1}}],[\"文件被渲染成页面\",{\"1\":{\"27\":1}}],[\"网络连接问题\",{\"0\":{\"114\":1}}],[\"网络原因下载\",{\"1\":{\"59\":1}}],[\"网站\",{\"1\":{\"52\":1}}],[\"网站框架\",{\"1\":{\"1\":1}}],[\"选择保留两者即可\",{\"1\":{\"82\":1}}],[\"选择\",{\"1\":{\"57\":1,\"476\":1}}],[\"选择来源为从文本\",{\"1\":{\"54\":1}}],[\"耐心等待歌单转换完成\",{\"1\":{\"56\":1}}],[\"的字典\",{\"1\":{\"821\":1}}],[\"的保留字\",{\"1\":{\"810\":1}}],[\"的教程\",{\"1\":{\"808\":1}}],[\"的持续变化情况\",{\"1\":{\"805\":1}}],[\"的可靠性\",{\"1\":{\"797\":1}}],[\"的锁\",{\"1\":{\"780\":1}}],[\"的索引对\",{\"1\":{\"755\":1}}],[\"的值是nums\",{\"1\":{\"748\":1}}],[\"的元素的数量\",{\"1\":{\"748\":1}}],[\"的元素\",{\"1\":{\"704\":1}}],[\"的池底高度\",{\"1\":{\"608\":1}}],[\"的最大值为该路径的差值\",{\"1\":{\"601\":1}}],[\"的最长回文子序列长度\",{\"1\":{\"292\":1}}],[\"的情况\",{\"1\":{\"597\":1}}],[\"的二进制位\",{\"1\":{\"521\":1}}],[\"的二进制中从最低位到高位连续零的长度\",{\"1\":{\"442\":1}}],[\"的错误\",{\"1\":{\"492\":1}}],[\"的幂次方\",{\"1\":{\"491\":1}}],[\"的位数\",{\"1\":{\"491\":1}}],[\"的位置来避免卡死\",{\"1\":{\"443\":1}}],[\"的过程\",{\"1\":{\"476\":1}}],[\"的状态转移信息\",{\"1\":{\"438\":1}}],[\"的数组\",{\"1\":{\"431\":1,\"432\":1}}],[\"的下一个加油站\",{\"1\":{\"388\":1}}],[\"的s前j个字符的子序列中不可能恰出现t的前i个字符\",{\"1\":{\"285\":1}}],[\"的题目\",{\"1\":{\"243\":1}}],[\"的长度\",{\"1\":{\"237\":1,\"544\":1}}],[\"的正整数\",{\"1\":{\"227\":1}}],[\"的不同搜索树数量\",{\"1\":{\"204\":1,\"205\":1}}],[\"的遍历查找肯定很慢\",{\"1\":{\"165\":1}}],[\"的模版\",{\"1\":{\"143\":1}}],[\"的扩展库文件需要手动拷贝到安装路径中去\",{\"1\":{\"110\":1}}],[\"的\",{\"1\":{\"52\":1,\"772\":3,\"777\":1}}],[\"项目\",{\"1\":{\"52\":1}}],[\"凭借\",{\"1\":{\"52\":1}}],[\"为什么线程不安全\",{\"1\":{\"783\":1}}],[\"为人名\",{\"1\":{\"622\":1}}],[\"为方便起见\",{\"1\":{\"522\":1}}],[\"为达此目的\",{\"1\":{\"521\":1}}],[\"为避免索引更新死循环\",{\"1\":{\"443\":1}}],[\"为i处加油站提供的汽油补给量\",{\"1\":{\"380\":1}}],[\"为恰凑成总金额i的硬币数\",{\"1\":{\"358\":1,\"364\":1}}],[\"为确保能够成功转移\",{\"1\":{\"295\":1}}],[\"为左右边界\",{\"1\":{\"292\":1}}],[\"为word1前i个字符与word2前j个字符之间的编辑距离\",{\"1\":{\"270\":1}}],[\"为前一单词的前i个字符与后一单词的前j个字符中的最长公共子序列的长度\",{\"1\":{\"264\":1}}],[\"为允许进行t次操作且有k个鸡蛋的条件下楼高n的最大值\",{\"1\":{\"252\":1}}],[\"为遍历到i时获得的最大金额\",{\"1\":{\"214\":1}}],[\"为根节点的搜索树来说\",{\"1\":{\"206\":1}}],[\"为根节点且长度为\",{\"1\":{\"205\":1}}],[\"为\",{\"1\":{\"51\":1,\"442\":1}}],[\"则伺机选取坑位占据\",{\"1\":{\"705\":1}}],[\"则将其计数加一\",{\"1\":{\"705\":1}}],[\"则将此时正遍历的账户与已存在邮箱所对应的账户进行合并\",{\"1\":{\"627\":1}}],[\"则对于i作为翻转对的左元素的情况来说\",{\"1\":{\"758\":1}}],[\"则对于∀c\",{\"1\":{\"508\":1,\"509\":1}}],[\"则对每种进行计数核查是否符合要求\",{\"1\":{\"704\":1}}],[\"则说明已凑够一组不同元素\",{\"1\":{\"705\":1}}],[\"则说明存在不长于当前路径的另一更优路径\",{\"1\":{\"662\":1}}],[\"则说明前段旅程总消耗量为负\",{\"1\":{\"383\":1}}],[\"则直接返回\",{\"1\":{\"649\":1}}],[\"则变化量减一\",{\"1\":{\"635\":1}}],[\"则认为两账户属于同一个人\",{\"1\":{\"623\":1}}],[\"则该边即为所求\",{\"1\":{\"603\":1}}],[\"则显然有weight\",{\"1\":{\"596\":1}}],[\"则显然可分为子序列中是否含s\",{\"1\":{\"286\":1}}],[\"则任取一位为\",{\"1\":{\"521\":1}}],[\"则只需要对整个数组进行异或操作\",{\"1\":{\"520\":1}}],[\"则只需在所有dp值中找出满足不小于n所对应的最小t值\",{\"1\":{\"252\":1}}],[\"则必有且仅有n\",{\"1\":{\"586\":1}}],[\"则必可保证累乘结果始终为整数\",{\"1\":{\"495\":1}}],[\"则必须得加多一支箭\",{\"1\":{\"408\":1}}],[\"则无需标记数组\",{\"1\":{\"468\":1}}],[\"则无需起始索引\",{\"1\":{\"465\":1}}],[\"则需写成字符串形式\",{\"1\":{\"822\":1}}],[\"则需要标记\",{\"1\":{\"469\":1}}],[\"则需要确保当前遍历到的值与之前所有值都不同\",{\"1\":{\"143\":1}}],[\"则需起始索引控制各层循环的起始位置\",{\"1\":{\"464\":1}}],[\"则其拓扑排序可能不止一种\",{\"1\":{\"448\":1}}],[\"则其不存在拓扑排序\",{\"1\":{\"447\":1}}],[\"则剩余区间为与原始问题相同的子问题\",{\"1\":{\"414\":1}}],[\"则不能绕完一整圈\",{\"1\":{\"389\":1}}],[\"则不可抢其左右子节点\",{\"1\":{\"222\":1}}],[\"则有\",{\"1\":{\"384\":1,\"510\":1}}],[\"则有dp\",{\"1\":{\"214\":1}}],[\"则第i天能获得的最大利润为\",{\"1\":{\"337\":1}}],[\"则后续更新sell\",{\"1\":{\"306\":1}}],[\"则回文问题就变成了求两字符串的最长公共子序列问题\",{\"1\":{\"296\":1}}],[\"则含新增字符s\",{\"1\":{\"285\":1}}],[\"则待确定楼层在此次扔鸡蛋的下方\",{\"1\":{\"254\":1}}],[\"则dp\",{\"1\":{\"230\":1,\"231\":1}}],[\"则子节点抢不抢都行\",{\"1\":{\"223\":1}}],[\"则可将\",{\"1\":{\"481\":1}}],[\"则可以继续递归遍历尝试构建搜索子树\",{\"1\":{\"129\":1,\"203\":1}}],[\"则可利用\",{\"1\":{\"42\":1}}],[\"则左右子树节点序列为\",{\"1\":{\"129\":1,\"203\":1}}],[\"则\",{\"1\":{\"51\":1,\"79\":1,\"270\":1,\"303\":1,\"323\":1}}],[\"ysaptli>\",{\"1\":{\"1053\":1}}],[\"ys\",{\"1\":{\"1047\":1,\"1052\":1}}],[\"yi\",{\"1\":{\"967\":1}}],[\"yield\",{\"1\":{\"810\":1}}],[\"yh\",{\"1\":{\"964\":1}}],[\"yl\",{\"1\":{\"963\":1}}],[\"yy\",{\"1\":{\"913\":1,\"970\":1}}],[\"yas\",{\"1\":{\"966\":1}}],[\"yaw\",{\"1\":{\"965\":1}}],[\"yanked\",{\"1\":{\"978\":1}}],[\"yanka\",{\"1\":{\"963\":1,\"964\":1}}],[\"yank\",{\"1\":{\"900\":1,\"965\":1,\"966\":1,\"967\":1,\"969\":1,\"978\":1,\"1012\":1}}],[\"yaml\",{\"1\":{\"78\":1}}],[\"y根节点为ry\",{\"1\":{\"596\":1}}],[\"y=v\",{\"1\":{\"596\":1}}],[\"y\",{\"1\":{\"51\":1,\"384\":1,\"385\":1,\"386\":1,\"388\":1,\"496\":3,\"500\":7,\"596\":1,\"597\":6,\"605\":2,\"619\":2,\"629\":2,\"636\":8,\"870\":1,\"900\":1,\"913\":1,\"975\":1}}],[\"yml\",{\"1\":{\"11\":1}}],[\"h>\",{\"1\":{\"1062\":1}}],[\"half\",{\"1\":{\"865\":1,\"866\":1}}],[\"hash\",{\"1\":{\"784\":1}}],[\"hashmap\",{\"1\":{\"783\":1}}],[\"hashmap<integer\",{\"1\":{\"619\":1}}],[\"hashmap<>\",{\"1\":{\"196\":1,\"533\":1,\"597\":1,\"619\":1,\"629\":2}}],[\"hashset<>\",{\"1\":{\"547\":1,\"650\":1}}],[\"has\",{\"1\":{\"168\":3,\"1031\":1}}],[\"h\",{\"1\":{\"844\":1,\"890\":1,\"951\":1,\"1041\":1,\"1062\":1}}],[\"hp\",{\"1\":{\"802\":1}}],[\"highlights\",{\"1\":{\"1066\":1}}],[\"hi​\",{\"1\":{\"709\":3}}],[\"hit\",{\"1\":{\"636\":5}}],[\"hits\",{\"1\":{\"636\":6}}],[\"hitbricks\",{\"1\":{\"636\":1}}],[\"height\",{\"1\":{\"745\":8}}],[\"heights\",{\"1\":{\"605\":7,\"656\":8}}],[\"hello\",{\"1\":{\"696\":1,\"697\":1,\"897\":2}}],[\"h2\",{\"1\":{\"117\":1}}],[\"h5\",{\"1\":{\"106\":1}}],[\"http\",{\"1\":{\"102\":1,\"106\":2,\"108\":1,\"792\":1}}],[\"httpd\",{\"1\":{\"90\":1,\"97\":1,\"100\":1}}],[\"https\",{\"1\":{\"51\":1,\"85\":1,\"437\":1,\"792\":1}}],[\"html\",{\"1\":{\"51\":1,\"930\":1}}],[\"horizontal\",{\"1\":{\"1033\":1}}],[\"house\",{\"1\":{\"216\":4}}],[\"homedir\",{\"1\":{\"78\":1}}],[\"home\",{\"1\":{\"30\":2}}],[\"hope\",{\"1\":{\"2\":1,\"30\":1,\"808\":1}}],[\"音乐的歌单转移到\",{\"1\":{\"49\":1}}],[\"qall\",{\"1\":{\"996\":1,\"998\":1}}],[\"qa\",{\"1\":{\"996\":1,\"998\":1}}],[\"quit\",{\"1\":{\"990\":1}}],[\"quoted\",{\"1\":{\"927\":1}}],[\"que\",{\"1\":{\"650\":6,\"664\":6}}],[\"query\",{\"1\":{\"597\":2}}],[\"queries\",{\"1\":{\"597\":5}}],[\"queue<int\",{\"1\":{\"664\":1}}],[\"queue<integer>\",{\"1\":{\"421\":1}}],[\"queue<string>\",{\"1\":{\"650\":1}}],[\"queue\",{\"1\":{\"421\":6}}],[\"queen\",{\"1\":{\"168\":3}}],[\"queens\",{\"1\":{\"168\":5}}],[\"question\",{\"1\":{\"30\":1}}],[\"q\",{\"1\":{\"168\":1,\"990\":1,\"993\":1}}],[\"qos\",{\"1\":{\"118\":1}}],[\"qq\",{\"1\":{\"49\":1,\"51\":1}}],[\"记录一些杂的知识点\",{\"0\":{\"769\":1}}],[\"记录需填充坐标\",{\"1\":{\"176\":1}}],[\"记录某行\",{\"1\":{\"176\":1}}],[\"记录将网易云音乐或\",{\"1\":{\"49\":1}}],[\"记得给仓库的\",{\"1\":{\"10\":1}}],[\"歌单转移\",{\"0\":{\"48\":1}}],[\"熊宝生日快乐\",{\"1\":{\"46\":1}}],[\"野鹤奔向闲云\",{\"1\":{\"46\":1}}],[\"月亮照回湖心\",{\"1\":{\"46\":1}}],[\"将给定数组向右轮转k个位置\",{\"1\":{\"763\":1}}],[\"将给定英文句子字符串的单词逆序\",{\"1\":{\"695\":1}}],[\"将原数组去重再排序并由此建立树状数组\",{\"1\":{\"750\":1}}],[\"将各中心向两侧尽可能延伸\",{\"1\":{\"732\":1}}],[\"将属性数组重建为有序的并返回\",{\"1\":{\"709\":1}}],[\"将搜索过的组合缓存标记\",{\"1\":{\"648\":1}}],[\"将所有邮箱按合并标识进行合并\",{\"1\":{\"628\":1}}],[\"将所有相邻元素差值当作节点的边长进行排序\",{\"1\":{\"603\":1}}],[\"将字符串数组中的字母异位词组合在一起\",{\"1\":{\"528\":1}}],[\"将其拆分为两个及以上正整数之和\",{\"1\":{\"227\":1}}],[\"将n个皇后放入n\",{\"1\":{\"162\":1}}],[\"将当前排列复制一份加入到答案中\",{\"1\":{\"158\":1}}],[\"将标记索引指向的数与选中的数互换\",{\"1\":{\"157\":1}}],[\"将重复的数字并在一起在相邻的层进行连续处理\",{\"1\":{\"137\":1}}],[\"将上网方式改为宽带拨号上网并填入宽带帐密\",{\"1\":{\"121\":1}}],[\"将\",{\"1\":{\"97\":1,\"480\":1}}],[\"将对小熊的生日祝福嵌入图片中\",{\"1\":{\"45\":1}}],[\"将数字对应的字符连起来可组成正常语义的词句\",{\"1\":{\"39\":1}}],[\"利用多线程实现进餐规则\",{\"1\":{\"570\":1}}],[\"利用状态机模型归纳后考虑设置三种状态\",{\"1\":{\"337\":1}}],[\"利用隐写技术\",{\"1\":{\"45\":1}}],[\"利用伪随机算法\",{\"1\":{\"39\":1}}],[\"9\",{\"1\":{\"176\":8,\"644\":1,\"650\":1,\"674\":1,\"675\":1,\"979\":2}}],[\"9数独\",{\"1\":{\"171\":1}}],[\"9999\",{\"1\":{\"96\":1}}],[\"96\",{\"1\":{\"42\":1}}],[\"97\",{\"1\":{\"42\":1,\"437\":1}}],[\"可额外执行jstat\",{\"1\":{\"805\":1}}],[\"可参考民间题解\",{\"1\":{\"759\":1}}],[\"可进一步实时遍历判断方向与斜线收尾的方法\",{\"1\":{\"678\":1}}],[\"可从周围可达的上下左右连通块游向该块\",{\"1\":{\"608\":1}}],[\"可能存在节点之间无连通路径的情况\",{\"1\":{\"667\":1}}],[\"可能会为同一个哲学家多次调用该函数\",{\"1\":{\"577\":1}}],[\"可能有几种问题\",{\"1\":{\"115\":1}}],[\"可作为键来收集同种异位词\",{\"1\":{\"532\":1}}],[\"可考虑用动态规划来做\",{\"1\":{\"471\":1}}],[\"可通过给length属性赋值改变数组长度\",{\"1\":{\"831\":1}}],[\"可通过函数\",{\"1\":{\"442\":1}}],[\"可通过二维动态规划来解决\",{\"1\":{\"264\":1}}],[\"可不连续\",{\"1\":{\"279\":1}}],[\"可令\",{\"1\":{\"221\":1}}],[\"可以顺便求出索引恰分别在左右子数组中的翻转对数量\",{\"1\":{\"757\":1}}],[\"可以顺便绑定下\",{\"1\":{\"122\":1}}],[\"可以转化为单点更新\",{\"1\":{\"750\":1}}],[\"可以斜着走\",{\"1\":{\"659\":1}}],[\"可以直接并在给定的限制组合集中\",{\"1\":{\"648\":1}}],[\"可以将中心的左右端点并在一个循环中进行枚举\",{\"1\":{\"733\":1}}],[\"可以将accounts\",{\"1\":{\"627\":1}}],[\"可以将给定数据整理成拓扑排序那般的哈希表\",{\"1\":{\"182\":1}}],[\"可以任意多次交换索引对中任意一对索引处的字符\",{\"1\":{\"616\":1}}],[\"可以首先将索引与高度关系反转存储以备查询\",{\"1\":{\"612\":1}}],[\"可以确保两数被分到不同组\",{\"1\":{\"521\":1}}],[\"可以基于原数组构建树状数组\",{\"1\":{\"442\":1}}],[\"可以是原本就持有\",{\"1\":{\"305\":1}}],[\"可以是原本就未持有\",{\"1\":{\"304\":1}}],[\"可以不连续\",{\"1\":{\"237\":1}}],[\"可以打住直接求俩数之积\",{\"1\":{\"229\":1}}],[\"可以发现顺序是死胡同节点向上到有其他下游节点的节点\",{\"1\":{\"184\":1}}],[\"可以发现依次为向下深入到死胡同节点\",{\"1\":{\"184\":1}}],[\"可以在初始因维护上述状态而进行格子遍历时顺便将待填充的格子的位置记下来\",{\"1\":{\"175\":1}}],[\"可以遍历取特定数\",{\"1\":{\"129\":1,\"203\":1}}],[\"可取为\",{\"1\":{\"42\":1}}],[\"可在\",{\"1\":{\"27\":1}}],[\"1次\",{\"1\":{\"733\":1}}],[\"1次操作且有k\",{\"1\":{\"254\":1}}],[\"10\",{\"1\":{\"650\":2,\"1002\":2,\"1004\":1,\"1005\":1}}],[\"107\",{\"1\":{\"106\":1}}],[\"1条边\",{\"1\":{\"586\":1}}],[\"14\",{\"1\":{\"563\":1}}],[\"11\",{\"1\":{\"563\":1}}],[\"15时输出1\",{\"1\":{\"563\":1}}],[\"1个字符的所有子序列都新增一个相同字符\",{\"1\":{\"286\":1}}],[\"1个字符的次数\",{\"1\":{\"285\":1}}],[\"1个字符和t的前i\",{\"1\":{\"286\":1}}],[\"1个字符完成编辑的基础上\",{\"1\":{\"271\":1,\"272\":1}}],[\"1个字符与word2前j个字符完成编辑的基础上\",{\"1\":{\"273\":1}}],[\"1个字符与word2前j\",{\"1\":{\"271\":1}}],[\"1枚鸡蛋\",{\"1\":{\"254\":1}}],[\"1时有dp\",{\"1\":{\"256\":2}}],[\"1时\",{\"1\":{\"229\":1}}],[\"168\",{\"1\":{\"106\":1}}],[\"16a085\",{\"1\":{\"28\":1}}],[\"12\",{\"1\":{\"1002\":1}}],[\"12d\",{\"1\":{\"1002\":1,\"1004\":1}}],[\"127\",{\"1\":{\"94\":1}}],[\"123\",{\"1\":{\"42\":1}}],[\"1\",{\"1\":{\"61\":1,\"94\":1,\"111\":1,\"129\":2,\"132\":3,\"139\":2,\"143\":3,\"145\":4,\"151\":3,\"159\":1,\"168\":5,\"176\":4,\"196\":1,\"203\":2,\"206\":1,\"208\":5,\"213\":2,\"214\":1,\"216\":3,\"224\":5,\"227\":1,\"229\":2,\"234\":2,\"250\":1,\"254\":4,\"255\":1,\"256\":7,\"258\":13,\"265\":11,\"271\":2,\"272\":1,\"273\":1,\"274\":5,\"275\":15,\"276\":15,\"282\":1,\"287\":9,\"293\":1,\"294\":1,\"295\":1,\"297\":8,\"304\":2,\"305\":2,\"306\":2,\"307\":1,\"313\":1,\"314\":2,\"315\":3,\"316\":2,\"317\":1,\"318\":1,\"324\":3,\"325\":2,\"328\":1,\"331\":5,\"338\":2,\"339\":2,\"340\":1,\"342\":1,\"349\":3,\"356\":1,\"358\":1,\"359\":4,\"364\":1,\"365\":4,\"377\":1,\"381\":1,\"390\":2,\"396\":2,\"409\":10,\"415\":3,\"421\":3,\"438\":5,\"491\":9,\"496\":2,\"498\":1,\"521\":1,\"522\":1,\"523\":1,\"547\":3,\"550\":1,\"558\":1,\"565\":1,\"579\":1,\"588\":3,\"593\":1,\"597\":5,\"605\":5,\"613\":7,\"619\":1,\"629\":1,\"636\":23,\"640\":2,\"645\":1,\"650\":2,\"656\":7,\"664\":21,\"674\":1,\"675\":1,\"679\":3,\"685\":5,\"689\":1,\"692\":5,\"710\":2,\"711\":2,\"714\":3,\"727\":8,\"734\":4,\"737\":2,\"745\":1,\"752\":5,\"760\":7,\"817\":2,\"979\":1}}],[\"13\",{\"1\":{\"61\":1,\"563\":1}}],[\"1736483147\",{\"1\":{\"51\":1}}],[\">>\",{\"1\":{\"734\":2,\"915\":1}}],[\">>>\",{\"1\":{\"491\":1}}],[\">=\",{\"1\":{\"256\":2,\"258\":1,\"297\":1,\"349\":1,\"613\":2,\"636\":3,\"656\":3,\"664\":2,\"679\":1,\"685\":1,\"734\":1,\"752\":1}}],[\">\",{\"1\":{\"42\":1,\"132\":1,\"139\":1,\"143\":1,\"145\":1,\"151\":1,\"176\":1,\"186\":1,\"189\":1,\"190\":1,\"196\":1,\"229\":1,\"359\":1,\"365\":1,\"409\":2,\"415\":1,\"492\":2,\"595\":1,\"597\":2,\"605\":4,\"619\":1,\"629\":2,\"636\":1,\"650\":1,\"664\":2,\"685\":1,\"692\":1,\"706\":6,\"714\":2,\"723\":1,\"725\":1,\"727\":3,\"745\":1,\"752\":1,\"755\":1,\"760\":2,\"905\":1,\"928\":1,\"980\":1,\"1010\":1}}],[\"<cmd\",{\"1\":{\"1096\":1}}],[\"<ctrl\",{\"1\":{\"1035\":1,\"1038\":1,\"1041\":1,\"1062\":2,\"1063\":2,\"1064\":2,\"1065\":2,\"1099\":1}}],[\"<leader><leader>\",{\"1\":{\"1077\":1}}],[\"<leader>\",{\"1\":{\"1060\":1}}],[\"<li>\",{\"1\":{\"1053\":1}}],[\"<space>\",{\"1\":{\"1057\":1}}],[\"<>\",{\"1\":{\"928\":1}}],[\"<enter>\",{\"1\":{\"877\":1,\"880\":2,\"891\":1,\"892\":1}}],[\"<<\",{\"1\":{\"760\":3,\"916\":1}}],[\"<<=\",{\"1\":{\"760\":1}}],[\"<i=x∑y​cost\",{\"1\":{\"385\":1,\"387\":1}}],[\"<=\",{\"1\":{\"132\":1,\"145\":1,\"208\":2,\"216\":1,\"229\":1,\"234\":1,\"258\":3,\"265\":2,\"275\":2,\"276\":4,\"282\":2,\"283\":1,\"349\":1,\"359\":1,\"365\":1,\"491\":1,\"496\":1,\"498\":1,\"565\":4,\"588\":1,\"613\":1,\"636\":1,\"723\":1,\"724\":1,\"760\":4}}],[\"<\",{\"1\":{\"42\":1,\"139\":2,\"151\":2,\"159\":1,\"168\":3,\"176\":3,\"229\":1,\"234\":1,\"283\":1,\"287\":4,\"297\":1,\"307\":1,\"318\":1,\"331\":2,\"342\":1,\"377\":1,\"390\":3,\"396\":2,\"409\":3,\"415\":1,\"421\":1,\"427\":1,\"438\":3,\"440\":2,\"492\":2,\"579\":1,\"597\":3,\"605\":3,\"613\":6,\"619\":3,\"629\":3,\"636\":7,\"650\":1,\"656\":6,\"664\":2,\"679\":4,\"685\":2,\"692\":2,\"727\":1,\"734\":2,\"745\":2,\"752\":1,\"755\":1,\"760\":3,\"817\":1,\"906\":1,\"928\":1,\"1010\":1}}],[\"zb\",{\"1\":{\"874\":1}}],[\"zt\",{\"1\":{\"873\":1}}],[\"zz\",{\"1\":{\"872\":1}}],[\"zset\",{\"1\":{\"772\":1}}],[\"zshrc\",{\"1\":{\"74\":1}}],[\"zip\",{\"1\":{\"106\":1}}],[\"zerotier\",{\"1\":{\"96\":1,\"115\":1}}],[\"z\",{\"1\":{\"42\":1,\"977\":1,\"1073\":1,\"1074\":1}}],[\"zh\",{\"1\":{\"30\":4}}],[\"zhsidebarconfig\",{\"1\":{\"30\":1}}],[\"码进行映射\",{\"1\":{\"42\":1}}],[\"故树状数组中各值的数量即为当前遍历值右侧的数据\",{\"1\":{\"750\":1}}],[\"故合并为两指针同时相向移动\",{\"1\":{\"744\":1}}],[\"故移动较高的指针必不可能获得更大的储水量\",{\"1\":{\"743\":1}}],[\"故每次移动横向距离减小\",{\"1\":{\"743\":1}}],[\"故每次只需考虑向左上的连通\",{\"1\":{\"635\":1}}],[\"故索引呈现强烈的奇偶规律性\",{\"1\":{\"733\":1}}],[\"故上述第一种情况下无需实际地改变b的值\",{\"1\":{\"726\":1}}],[\"故先拟定\",{\"1\":{\"704\":1}}],[\"故返回时将长度\",{\"1\":{\"685\":1}}],[\"故用\",{\"1\":{\"648\":1}}],[\"故用动态规划来做\",{\"1\":{\"229\":1}}],[\"故还是得通过搜索来判断\",{\"1\":{\"648\":1}}],[\"故需要维护各根节点的节点数量\",{\"1\":{\"635\":1}}],[\"故采用索引来避免直接使用人名\",{\"1\":{\"627\":1}}],[\"故采用并查集实现\",{\"1\":{\"604\":1}}],[\"故查得结果时必所有节点都已直接相连与根节点\",{\"1\":{\"596\":1}}],[\"故有且仅有唯一一条冗余边\",{\"1\":{\"586\":1}}],[\"故有dp\",{\"1\":{\"293\":1}}],[\"故其最低有效为为其本身\",{\"1\":{\"522\":1}}],[\"故某节点的值最终为以其为根的子树所有节点值之和\",{\"1\":{\"442\":1}}],[\"故初始条件应将硬币数设为不能达到的大数\",{\"1\":{\"358\":1,\"364\":1}}],[\"故初始条件dp\",{\"1\":{\"229\":1}}],[\"故可借助整个归并排序过程逐渐求出所有翻转对\",{\"1\":{\"757\":1}}],[\"故可以用双指针由两端逐渐逼近\",{\"1\":{\"691\":1}}],[\"故可看作与顺序相关的完全背包问题\",{\"1\":{\"348\":1}}],[\"故可将数组压缩为单一变量\",{\"1\":{\"306\":1}}],[\"故必须得先缓存至少一个变量的值\",{\"1\":{\"341\":1}}],[\"故cool\",{\"1\":{\"340\":1}}],[\"故wait\",{\"1\":{\"339\":1}}],[\"故实际上可以将每笔交易都割裂开来计算\",{\"1\":{\"336\":1}}],[\"故对于每一笔交易来说都有可能强制将本为负的买卖利润强行拉至\",{\"1\":{\"330\":1}}],[\"故对于上一层来说\",{\"1\":{\"131\":1}}],[\"故答案为sell\",{\"1\":{\"306\":1}}],[\"故利润keep\",{\"1\":{\"306\":1}}],[\"故keep2\",{\"1\":{\"315\":1}}],[\"故keep1\",{\"1\":{\"313\":1}}],[\"故keep\",{\"1\":{\"305\":1,\"324\":1,\"338\":1}}],[\"故sell2\",{\"1\":{\"316\":1}}],[\"故sell1\",{\"1\":{\"314\":1}}],[\"故sell\",{\"1\":{\"304\":1,\"325\":1}}],[\"故只能枚举整个二维数组的右上三角区域\",{\"1\":{\"295\":1}}],[\"故只需求出dp\",{\"1\":{\"257\":1}}],[\"故整体的循环应从下至上\",{\"1\":{\"295\":1}}],[\"故应从边界的各位置开始往高的地势搜同时记录位置向该大洋的可达性\",{\"1\":{\"655\":1}}],[\"故应最多只需要进行min\",{\"1\":{\"327\":1}}],[\"故应对每次交易单独进行\",{\"1\":{\"312\":1}}],[\"故应延用某侧较短边界内含最长回文子序列的较大值\",{\"1\":{\"294\":1}}],[\"故应存储并维护每行\",{\"1\":{\"174\":1}}],[\"故虽然枚举的是两端\",{\"1\":{\"292\":1}}],[\"故综合起来dp\",{\"1\":{\"286\":1}}],[\"故次数应延用s前j\",{\"1\":{\"285\":1}}],[\"故最终有dp\",{\"1\":{\"275\":1}}],[\"故最终得到\",{\"1\":{\"206\":1}}],[\"故总转移方程为dp\",{\"1\":{\"256\":1}}],[\"故允许下方有dp\",{\"1\":{\"254\":1}}],[\"故此种拆分情况下有dp\",{\"1\":{\"232\":1}}],[\"故考虑用动态规划求解\",{\"1\":{\"203\":1}}],[\"故下游节点可用优先队列存储\",{\"1\":{\"182\":1}}],[\"故参考组合的处理方式\",{\"1\":{\"150\":1}}],[\"故以上一个选取的数\",{\"1\":{\"144\":1}}],[\"故做到这点势必会导致增加额外的开销\",{\"1\":{\"143\":1}}],[\"故得用回溯方式\",{\"1\":{\"128\":1}}],[\"故得在网上下载stheiti\",{\"1\":{\"82\":1}}],[\"故按照绝对值从小到大进行搜索\",{\"1\":{\"41\":1}}],[\"故搜寻空间为long\",{\"1\":{\"41\":1}}],[\"再添加若干元素\",{\"1\":{\"834\":1}}],[\"再从淘汰位置的下一个开始数\",{\"1\":{\"737\":1}}],[\"再从下一字符开始进行下一片段的划分\",{\"1\":{\"395\":1}}],[\"再到原数组中统计其次数是否达标\",{\"1\":{\"705\":1}}],[\"再依据奇偶按需逆序\",{\"1\":{\"677\":1}}],[\"再进行填充后的四周连通\",{\"1\":{\"635\":1}}],[\"再进行空间压缩可得代码\",{\"1\":{\"317\":1}}],[\"再将剩余的砖块连通成若干集合\",{\"1\":{\"635\":1}}],[\"再将两根节点连接成父子关系\",{\"1\":{\"430\":1}}],[\"再额外多一个m\",{\"1\":{\"635\":1}}],[\"再给定若干表示依次消除的位置\",{\"1\":{\"632\":1}}],[\"再除下一项的分母\",{\"1\":{\"495\":1}}],[\"再回过头来考虑是否有解的问题\",{\"1\":{\"389\":1}}],[\"再基于上一房屋的状态更新不抢的最大收益\",{\"1\":{\"215\":1}}],[\"再取较大者作为最终答案\",{\"1\":{\"213\":1}}],[\"再加上教研室也是移动网\",{\"1\":{\"117\":1}}],[\"再配置虚拟主机配置文件\",{\"1\":{\"97\":1}}],[\"再考虑枚举边界不应重复\",{\"1\":{\"295\":1}}],[\"再考虑截止数字与区间的连续性\",{\"1\":{\"42\":1}}],[\"再考虑到越短的数字看起来越简洁\",{\"1\":{\"41\":1}}],[\"再部署到服务器上\",{\"1\":{\"12\":1}}],[\"~x\",{\"1\":{\"491\":1}}],[\"~\",{\"1\":{\"41\":1,\"42\":2,\"77\":1,\"558\":1,\"571\":1,\"584\":1,\"644\":1,\"737\":1,\"938\":1,\"977\":1,\"979\":1,\"1002\":1}}],[\"甚至有可能不存在\",{\"1\":{\"40\":1}}],[\"越大的区间随机到想要的数字的概率越低\",{\"1\":{\"40\":1}}],[\"测试\",{\"0\":{\"32\":1}}],[\"幻灯片页\",{\"0\":{\"31\":1}}],[\"occurrences\",{\"1\":{\"1023\":1,\"1024\":1}}],[\"occurrence\",{\"1\":{\"1022\":1,\"1070\":1,\"1071\":1}}],[\"ocean\",{\"1\":{\"656\":4}}],[\"over\",{\"1\":{\"1011\":1,\"1073\":1}}],[\"override\",{\"1\":{\"409\":1,\"565\":8,\"605\":1,\"714\":1}}],[\"or\",{\"1\":{\"904\":2,\"909\":1,\"969\":2,\"979\":1,\"987\":1,\"988\":1,\"1071\":1,\"1097\":1,\"1098\":1,\"1101\":1}}],[\"origin\",{\"1\":{\"636\":2}}],[\"orion\",{\"1\":{\"106\":1}}],[\"order\",{\"1\":{\"636\":1}}],[\"other\",{\"1\":{\"636\":1,\"991\":1,\"1045\":1,\"1074\":1}}],[\"others\",{\"1\":{\"30\":3}}],[\"out\",{\"1\":{\"565\":8}}],[\"outputs\",{\"1\":{\"565\":4}}],[\"output\",{\"1\":{\"530\":1,\"625\":1,\"675\":1,\"697\":1,\"711\":1}}],[\"o\",{\"1\":{\"421\":1,\"443\":1,\"545\":1,\"689\":1,\"947\":1,\"948\":1}}],[\"o2\",{\"1\":{\"409\":3,\"415\":2,\"605\":2,\"714\":4}}],[\"o1\",{\"1\":{\"409\":3,\"415\":2,\"605\":2,\"714\":4}}],[\"old\",{\"1\":{\"377\":3,\"1050\":2}}],[\"offsets\",{\"1\":{\"1005\":1}}],[\"offerlast\",{\"1\":{\"421\":1}}],[\"offer\",{\"0\":{\"146\":1},\"1\":{\"421\":1,\"619\":1,\"650\":1,\"664\":2}}],[\"of或foreach\",{\"1\":{\"819\":1}}],[\"of\",{\"1\":{\"168\":1,\"216\":1,\"579\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"863\":1,\"864\":1,\"871\":1,\"883\":1,\"890\":1,\"891\":1,\"892\":1,\"893\":1,\"910\":1,\"912\":1,\"945\":1,\"959\":1,\"960\":1,\"1008\":1,\"1009\":1,\"1011\":1,\"1022\":1,\"1026\":1,\"1029\":1,\"1066\":1,\"1070\":1,\"1074\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1082\":1,\"1083\":1,\"1084\":1,\"1085\":1,\"1086\":1,\"1094\":1,\"1098\":1,\"1100\":1}}],[\"only\",{\"1\":{\"1092\":1}}],[\"one\",{\"1\":{\"216\":2,\"636\":1,\"727\":3,\"869\":1,\"870\":1,\"1071\":1}}],[\"on\",{\"1\":{\"80\":1,\"907\":1,\"959\":1,\"961\":1,\"1094\":1,\"1095\":1}}],[\"opposite\",{\"1\":{\"1031\":1}}],[\"operate\",{\"1\":{\"961\":1,\"1102\":1}}],[\"operator\",{\"1\":{\"896\":1,\"907\":1,\"909\":1,\"921\":1,\"961\":2,\"1073\":2}}],[\"operators\",{\"0\":{\"895\":1},\"1\":{\"898\":1,\"1074\":1,\"1092\":1}}],[\"opeartor\",{\"1\":{\"896\":1}}],[\"open\",{\"1\":{\"988\":1,\"1033\":1,\"1036\":1,\"1039\":1,\"1042\":1}}],[\"openlock\",{\"1\":{\"650\":1}}],[\"opencv\",{\"0\":{\"109\":2}}],[\"openssh\",{\"1\":{\"61\":1}}],[\"options\",{\"1\":{\"1000\":1,\"1020\":1}}],[\"option+command+j\",{\"1\":{\"67\":1}}],[\"opt=\",{\"1\":{\"73\":1}}],[\"object\",{\"1\":{\"30\":1,\"918\":1,\"919\":1,\"920\":1,\"921\":1}}],[\"l>\",{\"1\":{\"1065\":1}}],[\"l++\",{\"1\":{\"760\":1}}],[\"lcm\",{\"1\":{\"500\":1}}],[\"leader\",{\"1\":{\"1057\":1}}],[\"level\",{\"1\":{\"1026\":1}}],[\"led\",{\"1\":{\"1022\":2,\"1023\":1,\"1024\":1}}],[\"letter\",{\"1\":{\"963\":1,\"964\":1}}],[\"let\",{\"1\":{\"810\":1}}],[\"left+len\",{\"1\":{\"758\":1}}],[\"left+1\",{\"1\":{\"758\":1}}],[\"leftfork\",{\"1\":{\"579\":3}}],[\"leftnode\",{\"1\":{\"132\":2}}],[\"lefttrees\",{\"1\":{\"132\":2}}],[\"left\",{\"1\":{\"132\":5,\"216\":2,\"224\":5,\"491\":1,\"636\":1,\"685\":5,\"692\":4,\"745\":6,\"758\":2,\"760\":9,\"916\":1}}],[\"length\",{\"1\":{\"139\":1,\"145\":1,\"151\":5,\"159\":2,\"216\":3,\"265\":2,\"276\":2,\"282\":1,\"283\":1,\"287\":11,\"297\":1,\"307\":1,\"318\":1,\"327\":1,\"328\":1,\"331\":4,\"342\":1,\"377\":1,\"390\":1,\"396\":2,\"409\":1,\"438\":5,\"440\":2,\"547\":1,\"588\":1,\"605\":2,\"613\":1,\"619\":5,\"636\":4,\"656\":2,\"664\":1,\"679\":2,\"685\":2,\"692\":1,\"706\":2,\"727\":2,\"734\":2,\"745\":1,\"752\":3,\"760\":4}}],[\"len\",{\"1\":{\"46\":3,\"685\":5,\"758\":2,\"760\":8}}],[\"l\",{\"1\":{\"78\":1,\"79\":1,\"734\":4,\"760\":4,\"845\":1,\"890\":1,\"1041\":1,\"1065\":1}}],[\"like\",{\"1\":{\"1010\":1}}],[\"list\",{\"1\":{\"533\":3,\"772\":1}}],[\"list<int\",{\"1\":{\"176\":1,\"605\":1,\"714\":1}}],[\"list<integer>\",{\"1\":{\"145\":1,\"159\":1,\"396\":2,\"619\":1,\"706\":2,\"752\":2}}],[\"list<list<string>>\",{\"1\":{\"168\":2,\"196\":1,\"533\":1,\"597\":2,\"629\":3}}],[\"list<list<integer>>\",{\"1\":{\"139\":2,\"145\":2,\"159\":2,\"619\":1,\"656\":2}}],[\"list<string>>\",{\"1\":{\"533\":1}}],[\"list<string>\",{\"1\":{\"151\":1,\"168\":2,\"196\":3,\"533\":1,\"629\":2}}],[\"list<treenode>\",{\"1\":{\"132\":5}}],[\"listen\",{\"1\":{\"96\":2}}],[\"lines\",{\"1\":{\"969\":1,\"970\":1,\"971\":1,\"1001\":1,\"1002\":1,\"1011\":2,\"1060\":1,\"1085\":1,\"1086\":1,\"1098\":1}}],[\"linewise\",{\"1\":{\"956\":1}}],[\"line\",{\"0\":{\"986\":1},\"1\":{\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"869\":1,\"870\":1,\"872\":1,\"873\":1,\"874\":1,\"888\":2,\"891\":3,\"892\":1,\"893\":1,\"907\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":1,\"915\":1,\"916\":1,\"917\":1,\"945\":1,\"946\":1,\"947\":2,\"948\":2,\"953\":1,\"969\":1,\"985\":1,\"1006\":1,\"1007\":1,\"1010\":1,\"1022\":1,\"1023\":1,\"1029\":1}}],[\"linux\",{\"0\":{\"104\":1}}],[\"linkedlist<>\",{\"1\":{\"139\":1,\"421\":2,\"650\":1,\"664\":1,\"714\":1}}],[\"linkedlist<integer>\",{\"1\":{\"139\":1}}],[\"link\",{\"1\":{\"30\":1,\"117\":1}}],[\"library\",{\"1\":{\"91\":1,\"101\":1}}],[\"lib=~\",{\"1\":{\"77\":1}}],[\"lib=$home\",{\"1\":{\"74\":1}}],[\"lib\",{\"1\":{\"73\":1,\"74\":1,\"77\":3}}],[\"lowercase\",{\"1\":{\"904\":1}}],[\"lowbit\",{\"1\":{\"442\":1}}],[\"lock+condition\",{\"1\":{\"782\":1}}],[\"lock\",{\"1\":{\"565\":14,\"579\":2,\"787\":1}}],[\"local\",{\"1\":{\"73\":1,\"77\":2,\"565\":1,\"884\":1}}],[\"log2​n\",{\"1\":{\"443\":1}}],[\"log4perl\",{\"1\":{\"78\":1}}],[\"log\",{\"1\":{\"78\":2}}],[\"longestpalindrome\",{\"1\":{\"685\":1}}],[\"longestpalindromesubseq\",{\"1\":{\"297\":1}}],[\"longestconsecutive\",{\"1\":{\"547\":1}}],[\"long\",{\"1\":{\"41\":1,\"496\":1,\"760\":2}}],[\"later\",{\"1\":{\"636\":1}}],[\"latexindent\",{\"1\":{\"70\":1,\"75\":1}}],[\"latex\",{\"0\":{\"64\":1,\"65\":1},\"1\":{\"66\":1,\"70\":2,\"82\":1}}],[\"labuladong\",{\"1\":{\"437\":1}}],[\"last\",{\"1\":{\"145\":4,\"396\":3,\"856\":1,\"880\":1,\"932\":1,\"939\":1,\"940\":1,\"941\":1,\"949\":1,\"951\":1,\"952\":1,\"953\":1,\"978\":1,\"979\":1,\"1013\":1}}],[\"layout\",{\"1\":{\"30\":5}}],[\"lf\",{\"1\":{\"63\":1}}],[\"主机应用中开启\",{\"1\":{\"122\":1}}],[\"主机域名设置\",{\"1\":{\"95\":1}}],[\"主要思想与\",{\"1\":{\"323\":1}}],[\"主要框架与\",{\"1\":{\"312\":1}}],[\"主要问题是实际编译后某些\",{\"1\":{\"110\":1}}],[\"主要配置文件\",{\"1\":{\"90\":1}}],[\"主题配置\",{\"1\":{\"30\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"博客\",{\"1\":{\"30\":1}}],[\"增强\",{\"1\":{\"30\":1}}],[\"增强说明\",{\"1\":{\"3\":1}}],[\"need\",{\"1\":{\"1011\":1,\"1077\":1}}],[\"next\",{\"1\":{\"840\":1,\"841\":1,\"845\":1,\"846\":1,\"847\":1,\"856\":1,\"879\":1,\"892\":1,\"960\":1,\"961\":1,\"1043\":1,\"1071\":1}}],[\"newyork\",{\"1\":{\"625\":2}}],[\"newcondition\",{\"1\":{\"565\":1}}],[\"newwait\",{\"1\":{\"342\":2}}],[\"new\",{\"1\":{\"132\":3,\"139\":3,\"145\":3,\"151\":4,\"159\":3,\"168\":7,\"176\":5,\"196\":3,\"208\":1,\"224\":2,\"234\":1,\"258\":1,\"265\":1,\"276\":1,\"287\":1,\"297\":1,\"331\":2,\"349\":1,\"359\":1,\"365\":1,\"396\":2,\"409\":1,\"421\":2,\"427\":1,\"438\":1,\"440\":2,\"498\":1,\"523\":1,\"533\":4,\"547\":1,\"565\":14,\"579\":3,\"588\":1,\"597\":5,\"605\":5,\"613\":2,\"619\":4,\"629\":6,\"636\":4,\"650\":3,\"656\":3,\"664\":4,\"679\":2,\"692\":2,\"706\":1,\"714\":3,\"752\":4,\"760\":1,\"810\":1,\"947\":1,\"948\":1,\"969\":1,\"1039\":1,\"1042\":1,\"1050\":2}}],[\"nio\",{\"1\":{\"793\":1}}],[\"n个人围成一圈\",{\"1\":{\"737\":1}}],[\"n1\",{\"1\":{\"706\":2}}],[\"n÷k\",{\"1\":{\"704\":1}}],[\"n编号表示顶部\",{\"1\":{\"635\":1}}],[\"n−1\",{\"1\":{\"494\":1}}],[\"n−m+1\",{\"1\":{\"494\":1}}],[\"n−m\",{\"1\":{\"494\":1}}],[\"n−i\",{\"1\":{\"206\":2}}],[\"nrt\",{\"1\":{\"185\":2,\"189\":1,\"190\":1,\"192\":1,\"193\":1,\"194\":1}}],[\"n的棋盘中\",{\"1\":{\"162\":1}}],[\"numbers\",{\"1\":{\"692\":4,\"1004\":1}}],[\"number\",{\"1\":{\"565\":3}}],[\"numdistinct\",{\"1\":{\"287\":1}}],[\"numtrees\",{\"1\":{\"208\":1}}],[\"num\",{\"1\":{\"159\":2,\"247\":4,\"349\":3,\"427\":3,\"491\":6,\"547\":5,\"679\":2,\"706\":8}}],[\"nums\",{\"1\":{\"143\":4,\"145\":9,\"159\":7,\"216\":9,\"247\":2,\"349\":2,\"377\":3,\"427\":2,\"487\":5,\"523\":3,\"536\":2,\"547\":3,\"706\":5,\"727\":11,\"752\":4,\"755\":2,\"760\":9}}],[\"null\",{\"1\":{\"132\":1,\"196\":1,\"224\":1,\"440\":5,\"588\":1,\"597\":2,\"810\":1,\"814\":1}}],[\"noh\",{\"1\":{\"1066\":1}}],[\"non\",{\"1\":{\"858\":1,\"860\":1,\"892\":1,\"893\":1}}],[\"normalmodekeybindingsnonrescursive\",{\"1\":{\"1056\":1}}],[\"normal\",{\"0\":{\"838\":1,\"942\":1,\"974\":1},\"1\":{\"1097\":1,\"1102\":1}}],[\"no\",{\"1\":{\"636\":1,\"1011\":1}}],[\"not\",{\"1\":{\"145\":1,\"440\":1}}],[\"note\",{\"1\":{\"19\":1}}],[\"node\",{\"1\":{\"132\":4,\"224\":5,\"440\":11}}],[\"n2\",{\"1\":{\"51\":1,\"706\":2}}],[\"n\",{\"0\":{\"160\":1},\"1\":{\"46\":1,\"129\":2,\"132\":3,\"168\":16,\"203\":2,\"204\":2,\"205\":2,\"206\":5,\"208\":4,\"213\":2,\"232\":1,\"234\":4,\"250\":2,\"257\":1,\"258\":5,\"265\":5,\"276\":7,\"297\":6,\"306\":1,\"317\":1,\"442\":2,\"458\":1,\"491\":7,\"494\":2,\"496\":1,\"498\":2,\"523\":6,\"545\":1,\"550\":1,\"558\":1,\"565\":8,\"584\":1,\"588\":3,\"605\":9,\"609\":2,\"613\":11,\"636\":13,\"656\":8,\"664\":8,\"679\":7,\"704\":1,\"733\":1,\"737\":1,\"752\":4,\"803\":1,\"871\":2,\"879\":2}}],[\"nan与所有值都不相等\",{\"1\":{\"816\":1}}],[\"nan\",{\"1\":{\"814\":1,\"816\":1}}],[\"nat\",{\"1\":{\"529\":1,\"530\":1}}],[\"nature\",{\"1\":{\"30\":1}}],[\"named\",{\"1\":{\"977\":1}}],[\"name\",{\"1\":{\"46\":1,\"62\":1,\"63\":1,\"975\":1,\"1056\":1,\"1069\":1,\"1076\":1}}],[\"navbar\",{\"1\":{\"30\":1}}],[\"布局\",{\"1\":{\"30\":1}}],[\"界面\",{\"1\":{\"30\":1}}],[\"快速上手\",{\"1\":{\"30\":1}}],[\"sneak\",{\"0\":{\"1068\":1},\"1\":{\"1069\":1,\"1073\":1,\"1074\":1}}],[\"saving\",{\"1\":{\"993\":1,\"998\":1}}],[\"save\",{\"1\":{\"989\":1,\"992\":1,\"994\":1,\"995\":1,\"997\":1}}],[\"same\",{\"1\":{\"968\":1,\"1096\":1}}],[\"safari\",{\"1\":{\"30\":1}}],[\"sp\",{\"1\":{\"1034\":1}}],[\"split\",{\"1\":{\"1033\":1,\"1036\":1,\"1039\":1,\"1040\":2}}],[\"splits\",{\"0\":{\"1032\":1},\"1\":{\"1041\":1,\"1061\":1}}],[\"splice\",{\"1\":{\"834\":1}}],[\"specific\",{\"1\":{\"981\":1}}],[\"special\",{\"1\":{\"888\":1}}],[\"space\",{\"1\":{\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1}}],[\"sds\",{\"1\":{\"772\":1}}],[\"shell\",{\"1\":{\"999\":1}}],[\"shift\",{\"1\":{\"833\":1,\"915\":1,\"916\":1}}],[\"shortestpathbinarymatrix\",{\"1\":{\"664\":1}}],[\"sha\",{\"1\":{\"61\":1}}],[\"share\",{\"1\":{\"51\":1}}],[\"shape=wm\",{\"1\":{\"46\":1}}],[\"src\",{\"1\":{\"650\":2}}],[\"smalleststringwithswaps\",{\"1\":{\"619\":1}}],[\"synchronized\",{\"1\":{\"787\":1,\"789\":1}}],[\"system\",{\"1\":{\"565\":8}}],[\"symbol\",{\"1\":{\"30\":1,\"846\":1,\"848\":1,\"850\":1,\"852\":1}}],[\"s2\",{\"1\":{\"318\":4}}],[\"s1\",{\"1\":{\"318\":4}}],[\"squ\",{\"1\":{\"174\":1,\"176\":5}}],[\"switch内部采用的是===\",{\"1\":{\"827\":1}}],[\"switch\",{\"1\":{\"810\":1,\"899\":1,\"904\":1,\"935\":1,\"938\":1,\"1061\":1}}],[\"swiminwater\",{\"1\":{\"613\":1}}],[\"swipe\",{\"1\":{\"30\":1}}],[\"swap\",{\"1\":{\"159\":2,\"487\":1,\"971\":1,\"972\":1}}],[\"s\",{\"1\":{\"151\":3,\"282\":1,\"285\":1,\"286\":1,\"287\":8,\"293\":1,\"294\":1,\"297\":4,\"396\":5,\"533\":3,\"619\":7,\"650\":5,\"685\":9,\"734\":5,\"923\":1,\"935\":1,\"961\":1,\"1016\":1,\"1022\":1,\"1023\":1,\"1024\":1,\"1026\":1,\"1028\":1,\"1035\":1,\"1054\":1,\"1070\":1,\"1072\":1,\"1074\":2,\"1091\":1}}],[\"so\",{\"1\":{\"1010\":1}}],[\"some\",{\"1\":{\"1003\":1}}],[\"soft\",{\"1\":{\"989\":1,\"990\":1,\"991\":1}}],[\"solvesudoku\",{\"1\":{\"176\":1}}],[\"solvenqueens\",{\"1\":{\"168\":1}}],[\"solution1\",{\"1\":{\"541\":1}}],[\"solution\",{\"1\":{\"127\":1,\"132\":1,\"136\":1,\"139\":1,\"142\":1,\"145\":1,\"149\":1,\"151\":1,\"155\":1,\"159\":1,\"163\":1,\"168\":1,\"172\":1,\"176\":1,\"180\":1,\"196\":1,\"202\":1,\"208\":1,\"212\":1,\"216\":1,\"220\":1,\"224\":1,\"228\":1,\"234\":1,\"238\":1,\"242\":1,\"247\":1,\"251\":1,\"258\":1,\"263\":1,\"265\":1,\"269\":1,\"276\":1,\"280\":1,\"287\":1,\"291\":1,\"297\":1,\"302\":1,\"307\":1,\"311\":1,\"318\":1,\"322\":1,\"331\":1,\"335\":1,\"342\":1,\"347\":1,\"349\":1,\"353\":1,\"359\":1,\"365\":1,\"370\":1,\"374\":1,\"377\":1,\"382\":1,\"390\":1,\"394\":1,\"396\":1,\"402\":1,\"406\":1,\"409\":1,\"413\":1,\"415\":1,\"427\":1,\"523\":1,\"531\":1,\"533\":1,\"537\":1,\"546\":1,\"547\":1,\"555\":1,\"564\":1,\"578\":1,\"585\":1,\"588\":1,\"594\":1,\"597\":1,\"602\":1,\"605\":1,\"610\":1,\"613\":1,\"617\":1,\"619\":1,\"626\":1,\"629\":1,\"633\":1,\"636\":1,\"641\":1,\"646\":1,\"650\":1,\"654\":1,\"656\":1,\"660\":1,\"664\":1,\"669\":1,\"676\":1,\"679\":1,\"683\":1,\"685\":1,\"690\":1,\"692\":1,\"698\":1,\"702\":1,\"706\":1,\"712\":1,\"714\":1,\"718\":1,\"722\":1,\"727\":1,\"731\":1,\"734\":1,\"738\":1,\"742\":1,\"745\":1,\"752\":1,\"756\":1,\"760\":1,\"764\":1}}],[\"sort\",{\"1\":{\"139\":1,\"151\":1,\"409\":1,\"415\":1,\"484\":1,\"533\":1,\"605\":1,\"629\":1,\"714\":1}}],[\"source\",{\"1\":{\"74\":1}}],[\"ssh\",{\"1\":{\"62\":1,\"63\":1}}],[\"similar\",{\"1\":{\"1072\":1}}],[\"signalall\",{\"1\":{\"565\":4}}],[\"singlenumber\",{\"1\":{\"523\":1}}],[\"size\",{\"1\":{\"145\":2,\"151\":2,\"176\":1,\"597\":9,\"613\":6,\"629\":4,\"636\":9,\"650\":3,\"664\":3,\"714\":1,\"752\":1}}],[\"sites\",{\"1\":{\"101\":1}}],[\"sitemap\",{\"1\":{\"30\":1}}],[\"sidebar\",{\"1\":{\"30\":1}}],[\"sequence\",{\"1\":{\"1070\":1}}],[\"sentence\",{\"1\":{\"923\":1,\"966\":1}}],[\"separated\",{\"1\":{\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1}}],[\"selection\",{\"1\":{\"960\":1,\"968\":1,\"1010\":1,\"1054\":1,\"1102\":1}}],[\"select\",{\"1\":{\"791\":1,\"959\":1,\"1054\":1,\"1096\":1,\"1100\":1}}],[\"sell2\",{\"1\":{\"316\":1}}],[\"sell1\",{\"1\":{\"314\":1,\"315\":1}}],[\"sell\",{\"1\":{\"304\":1,\"305\":1,\"307\":5,\"324\":1,\"325\":1,\"331\":7}}],[\"setting\",{\"1\":{\"1031\":1,\"1056\":1,\"1069\":1,\"1076\":1}}],[\"set<string>\",{\"1\":{\"650\":1}}],[\"set<integer>\",{\"1\":{\"547\":1,\"752\":1}}],[\"sets\",{\"1\":{\"619\":3,\"636\":1}}],[\"set\",{\"1\":{\"547\":5,\"636\":1,\"650\":6,\"752\":4,\"1020\":1}}],[\"seg\",{\"1\":{\"106\":1}}],[\"semaphore\",{\"1\":{\"579\":2}}],[\"sem\",{\"1\":{\"106\":1}}],[\"servername\",{\"1\":{\"94\":1}}],[\"seo\",{\"1\":{\"30\":1}}],[\"searchprefix\",{\"1\":{\"440\":3}}],[\"search\",{\"1\":{\"30\":1,\"438\":1,\"440\":2,\"856\":1,\"875\":1,\"876\":1,\"880\":1,\"881\":1,\"882\":1,\"959\":1,\"987\":1,\"1018\":1,\"1025\":1,\"1066\":1,\"1091\":1,\"1094\":1}}],[\"surrounding\",{\"1\":{\"1048\":1,\"1050\":1,\"1052\":1}}],[\"surround\",{\"0\":{\"1046\":1},\"1\":{\"1053\":1,\"1074\":1}}],[\"surrounded\",{\"1\":{\"925\":1,\"926\":1,\"928\":1,\"929\":1,\"1054\":1}}],[\"sum\",{\"1\":{\"246\":1,\"247\":4,\"390\":4,\"692\":3,\"752\":3}}],[\"sudo\",{\"1\":{\"78\":1,\"87\":1,\"88\":1,\"89\":1,\"105\":2}}],[\"substitution\",{\"1\":{\"1020\":1,\"1025\":1}}],[\"substitute\",{\"1\":{\"1015\":2,\"1016\":1,\"1017\":1,\"1019\":2,\"1028\":1}}],[\"substring\",{\"1\":{\"685\":1}}],[\"sub\",{\"1\":{\"30\":1}}],[\"support\",{\"1\":{\"1018\":1,\"1092\":2}}],[\"super\",{\"1\":{\"810\":1}}],[\"supereggdrop\",{\"1\":{\"258\":1}}],[\"sup\",{\"1\":{\"30\":1}}],[\"slides\",{\"1\":{\"30\":1}}],[\"steps\",{\"1\":{\"1094\":1,\"1098\":1}}],[\"store\",{\"1\":{\"978\":1,\"979\":1}}],[\"stop\",{\"1\":{\"89\":1}}],[\"stk\",{\"1\":{\"427\":5}}],[\"stands\",{\"1\":{\"1081\":1}}],[\"stanford\",{\"1\":{\"106\":1}}],[\"static\",{\"1\":{\"565\":1,\"810\":1}}],[\"startswith\",{\"1\":{\"440\":1}}],[\"starti​\",{\"1\":{\"405\":2,\"412\":1}}],[\"start\",{\"1\":{\"87\":1,\"139\":3,\"143\":2,\"390\":3,\"396\":3,\"565\":4,\"685\":4,\"863\":1,\"877\":1,\"891\":1,\"987\":2,\"1078\":1,\"1079\":1,\"1080\":1}}],[\"started\",{\"1\":{\"30\":2}}],[\"stheiti实际上就是华文黑体\",{\"1\":{\"82\":1}}],[\"stheiti\",{\"0\":{\"81\":1}}],[\"stronger\",{\"1\":{\"909\":1}}],[\"strict\",{\"1\":{\"812\":2}}],[\"string\",{\"1\":{\"151\":4,\"168\":1,\"196\":1,\"265\":2,\"276\":2,\"287\":2,\"297\":1,\"396\":1,\"438\":3,\"440\":4,\"533\":7,\"565\":1,\"619\":3,\"629\":1,\"650\":8,\"685\":3,\"734\":1}}],[\"stringbuilder\",{\"1\":{\"151\":2}}],[\"strs\",{\"1\":{\"529\":1,\"533\":2}}],[\"str\",{\"1\":{\"46\":2,\"151\":10,\"533\":3}}],[\"structure\",{\"1\":{\"30\":1}}],[\"style\",{\"1\":{\"30\":4}}],[\"v>\",{\"1\":{\"1099\":1}}],[\"vsp\",{\"1\":{\"1037\":1}}],[\"vscodevim\",{\"1\":{\"1031\":1,\"1092\":1}}],[\"vscode\",{\"1\":{\"66\":1,\"70\":1}}],[\"vertical\",{\"1\":{\"1036\":1}}],[\"ventura\",{\"1\":{\"61\":1}}],[\"variable\",{\"1\":{\"884\":1,\"885\":1}}],[\"var\",{\"1\":{\"810\":1}}],[\"val\",{\"1\":{\"224\":1}}],[\"values\",{\"1\":{\"533\":1,\"591\":1,\"597\":2}}],[\"valueof\",{\"1\":{\"168\":1,\"619\":1,\"650\":2}}],[\"value\",{\"1\":{\"41\":2,\"145\":1,\"247\":2,\"415\":1,\"421\":5,\"491\":2,\"523\":1,\"565\":2,\"597\":2}}],[\"visual\",{\"0\":{\"954\":1},\"1\":{\"955\":1,\"956\":1,\"957\":1,\"959\":1,\"960\":1,\"1010\":1,\"1054\":1,\"1099\":1}}],[\"visited\",{\"1\":{\"664\":4}}],[\"view\",{\"1\":{\"890\":1}}],[\"vim\",{\"0\":{\"837\":1,\"1046\":1,\"1068\":1,\"1075\":1},\"1\":{\"1031\":1,\"1056\":1,\"1069\":1,\"1074\":2,\"1076\":1,\"1092\":1}}],[\"vite\",{\"1\":{\"30\":1}}],[\"v\",{\"1\":{\"596\":1,\"955\":1,\"956\":1,\"957\":1,\"1038\":1}}],[\"volatile\",{\"1\":{\"565\":1}}],[\"void\",{\"1\":{\"139\":1,\"145\":1,\"151\":1,\"159\":1,\"168\":1,\"176\":2,\"196\":1,\"421\":1,\"427\":1,\"440\":1,\"487\":1,\"565\":13,\"579\":1,\"597\":1,\"605\":1,\"619\":1,\"629\":1,\"636\":1,\"656\":1,\"810\":1}}],[\"vhosts\",{\"1\":{\"97\":1,\"100\":1}}],[\"vue\",{\"1\":{\"30\":1}}],[\"vuepress\",{\"1\":{\"2\":1,\"12\":1,\"27\":1,\"30\":4}}],[\"everywhere\",{\"1\":{\"1080\":1,\"1084\":1,\"1091\":1}}],[\"every\",{\"1\":{\"1025\":1}}],[\"even\",{\"1\":{\"992\":1}}],[\"eval\",{\"1\":{\"74\":1,\"77\":1,\"810\":1}}],[\"eg\",{\"1\":{\"897\":1,\"908\":1,\"931\":1,\"980\":1,\"984\":1,\"1002\":1,\"1021\":1,\"1049\":1,\"1051\":1,\"1053\":1}}],[\"effect\",{\"1\":{\"883\":1}}],[\"es6\",{\"1\":{\"824\":1}}],[\"epoll\",{\"1\":{\"791\":1}}],[\"equations\",{\"1\":{\"597\":6}}],[\"equals\",{\"1\":{\"421\":1,\"650\":1}}],[\"easymotion\",{\"0\":{\"1075\":1},\"1\":{\"1076\":1,\"1092\":1}}],[\"eatlimit\",{\"1\":{\"579\":3}}],[\"eat\",{\"1\":{\"529\":1,\"530\":1,\"571\":1,\"574\":1,\"579\":2}}],[\"each\",{\"1\":{\"168\":1,\"1025\":1}}],[\"eraseoverlapintervals\",{\"1\":{\"415\":1}}],[\"error\",{\"1\":{\"30\":1}}],[\"else\",{\"1\":{\"176\":1,\"265\":1,\"276\":1,\"287\":1,\"297\":1,\"415\":1,\"523\":1,\"565\":4,\"597\":1,\"629\":1,\"692\":2,\"706\":5,\"745\":2,\"760\":2,\"810\":1}}],[\"e\",{\"1\":{\"106\":2,\"108\":2,\"565\":8,\"591\":1,\"848\":1,\"849\":1,\"869\":1,\"988\":1,\"1082\":1}}],[\"editing\",{\"1\":{\"1000\":1}}],[\"edit\",{\"1\":{\"988\":1}}],[\"edge\",{\"1\":{\"588\":4,\"605\":5}}],[\"edges\",{\"1\":{\"584\":1,\"588\":3,\"605\":5}}],[\"edu\",{\"1\":{\"106\":1}}],[\"ed25519\",{\"1\":{\"62\":1}}],[\"etc\",{\"1\":{\"90\":1,\"97\":1,\"100\":1}}],[\"empty\",{\"1\":{\"176\":5,\"1030\":1}}],[\"embedded\",{\"1\":{\"46\":2}}],[\"embed\",{\"1\":{\"46\":3}}],[\"emoji\",{\"1\":{\"30\":4}}],[\"enum\",{\"1\":{\"810\":1}}],[\"entryset\",{\"1\":{\"629\":1}}],[\"entry\",{\"1\":{\"629\":3}}],[\"entry<integer\",{\"1\":{\"629\":1}}],[\"end在全过程随i单调不减\",{\"1\":{\"758\":1}}],[\"endi​\",{\"1\":{\"405\":2,\"412\":1}}],[\"end\",{\"1\":{\"396\":6,\"415\":3,\"685\":4,\"758\":1,\"760\":7,\"848\":1,\"849\":1,\"852\":1,\"853\":1,\"859\":1,\"860\":1,\"864\":1,\"877\":1,\"889\":1,\"910\":1,\"912\":1,\"946\":1,\"960\":1,\"1009\":1,\"1082\":1,\"1083\":1,\"1084\":1}}],[\"env\",{\"1\":{\"30\":1}}],[\"enhance\",{\"1\":{\"30\":1}}],[\"encrypt\",{\"1\":{\"30\":1}}],[\"ex\",{\"1\":{\"987\":1,\"1000\":1,\"1011\":2,\"1012\":1}}],[\"express\",{\"1\":{\"1003\":1}}],[\"expression\",{\"1\":{\"878\":1,\"1018\":1}}],[\"explicitly\",{\"1\":{\"977\":1}}],[\"expand\",{\"1\":{\"685\":3}}],[\"export\",{\"1\":{\"30\":1,\"810\":1}}],[\"execute\",{\"1\":{\"579\":1,\"991\":1}}],[\"exists\",{\"1\":{\"440\":1}}],[\"extremes\",{\"1\":{\"1003\":1}}],[\"extra\",{\"1\":{\"97\":1,\"100\":1}}],[\"extract\",{\"1\":{\"46\":5}}],[\"extends\",{\"1\":{\"810\":1}}],[\"extend\",{\"1\":{\"30\":1,\"960\":1,\"1098\":1}}],[\"external\",{\"1\":{\"30\":1}}],[\"迁移\",{\"1\":{\"30\":1}}],[\"配置\",{\"1\":{\"30\":2,\"85\":1}}],[\"auto\",{\"1\":{\"1096\":1}}],[\"again\",{\"1\":{\"1014\":1,\"1040\":1}}],[\"ayas\",{\"1\":{\"980\":1}}],[\"aqs\",{\"1\":{\"771\":1}}],[\"at\",{\"1\":{\"945\":1,\"946\":1,\"949\":1,\"969\":1,\"1029\":1}}],[\"atla\",{\"1\":{\"656\":5}}],[\"ate\",{\"1\":{\"529\":1,\"530\":1}}],[\"after\",{\"1\":{\"636\":1,\"854\":1,\"855\":1,\"902\":1,\"937\":1,\"944\":1,\"968\":1,\"985\":1,\"1010\":1,\"1014\":1,\"1039\":1}}],[\"aslist\",{\"1\":{\"656\":1}}],[\"as\",{\"1\":{\"636\":1,\"968\":1}}],[\"ascii\",{\"1\":{\"42\":1,\"438\":1}}],[\"aio\",{\"1\":{\"793\":1}}],[\"ai\",{\"1\":{\"584\":1,\"591\":1}}],[\"aim\",{\"1\":{\"196\":3,\"1095\":1}}],[\"await\",{\"1\":{\"565\":4}}],[\"above\",{\"1\":{\"948\":1}}],[\"abstractqueuedsyncronizer\",{\"1\":{\"771\":1}}],[\"abs\",{\"1\":{\"536\":1,\"605\":2,\"817\":1}}],[\"abmodp\",{\"1\":{\"506\":1}}],[\"abmodp=\",{\"1\":{\"503\":1,\"504\":1}}],[\"a±c\",{\"1\":{\"511\":1}}],[\"a±b\",{\"1\":{\"502\":1}}],[\"a+c\",{\"1\":{\"508\":1}}],[\"a+\",{\"1\":{\"505\":1}}],[\"a+b\",{\"1\":{\"505\":1,\"507\":1}}],[\"amodp\",{\"1\":{\"503\":1,\"504\":1}}],[\"amodp±bmodp\",{\"1\":{\"502\":1}}],[\"amount\",{\"1\":{\"359\":8,\"365\":8}}],[\"any\",{\"1\":{\"579\":1,\"1029\":1,\"1102\":1}}],[\"an\",{\"1\":{\"565\":1,\"1030\":1,\"1053\":1}}],[\"answer\",{\"1\":{\"636\":1}}],[\"ans\",{\"1\":{\"496\":3}}],[\"and\",{\"0\":{\"962\":1,\"1032\":1},\"1\":{\"30\":1,\"216\":1,\"440\":1,\"629\":1,\"636\":1,\"846\":1,\"848\":1,\"850\":1,\"852\":1,\"877\":1,\"899\":1,\"919\":1,\"935\":1,\"947\":1,\"948\":1,\"987\":1,\"994\":1,\"997\":1,\"1001\":1,\"1002\":1,\"1010\":1,\"1025\":1,\"1096\":1}}],[\"a2\",{\"1\":{\"492\":1}}],[\"a0\",{\"1\":{\"492\":5}}],[\"a1\",{\"1\":{\"492\":3}}],[\"addall\",{\"1\":{\"629\":1}}],[\"add\",{\"1\":{\"132\":2,\"139\":2,\"145\":2,\"151\":1,\"159\":2,\"168\":2,\"176\":1,\"187\":1,\"191\":1,\"193\":1,\"195\":1,\"196\":2,\"396\":1,\"498\":1,\"533\":1,\"547\":1,\"605\":2,\"629\":3,\"650\":5,\"656\":1,\"679\":1,\"706\":2,\"714\":1,\"752\":2,\"905\":1,\"1052\":1,\"1077\":1,\"1094\":1,\"1096\":1}}],[\"advance\",{\"1\":{\"30\":2}}],[\"advanced\",{\"1\":{\"30\":4}}],[\"alternatively\",{\"1\":{\"1102\":1}}],[\"alternate\",{\"1\":{\"909\":1}}],[\"already\",{\"1\":{\"1074\":1}}],[\"also\",{\"1\":{\"927\":1}}],[\"allow\",{\"1\":{\"1011\":1}}],[\"all\",{\"1\":{\"629\":1,\"636\":1,\"967\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1023\":1,\"1024\":1,\"1026\":1,\"1045\":1,\"1077\":1}}],[\"alltrees\",{\"1\":{\"132\":5}}],[\"algorithm\",{\"0\":{\"1104\":1}}],[\"algo\",{\"1\":{\"437\":1}}],[\"align\",{\"1\":{\"30\":1}}],[\"area\",{\"1\":{\"1010\":1}}],[\"around\",{\"1\":{\"920\":1,\"969\":1,\"1092\":1}}],[\"arguments\",{\"1\":{\"810\":1}}],[\"args\",{\"1\":{\"565\":1}}],[\"arround\",{\"1\":{\"636\":1}}],[\"arraylist<string>\",{\"1\":{\"650\":2}}],[\"arraylist<list<string>>\",{\"1\":{\"533\":1}}],[\"arraylist<integer>\",{\"1\":{\"498\":2,\"679\":1}}],[\"arraylist<>\",{\"1\":{\"132\":2,\"139\":2,\"145\":3,\"151\":1,\"159\":3,\"168\":2,\"176\":1,\"196\":1,\"396\":1,\"498\":1,\"533\":1,\"605\":1,\"629\":2,\"650\":1,\"656\":1,\"679\":1,\"706\":1,\"752\":1}}],[\"arraydeque<>\",{\"1\":{\"427\":1}}],[\"arrays\",{\"1\":{\"139\":1,\"151\":1,\"331\":1,\"359\":1,\"365\":1,\"409\":1,\"415\":1,\"484\":1,\"533\":1,\"656\":1,\"714\":1,\"752\":1}}],[\"article\",{\"1\":{\"30\":1}}],[\"ap\",{\"1\":{\"980\":1}}],[\"apachectl\",{\"1\":{\"87\":1,\"88\":1,\"89\":1}}],[\"apache2\",{\"0\":{\"83\":1},\"1\":{\"90\":1,\"97\":1,\"100\":1}}],[\"apply\",{\"1\":{\"1011\":1,\"1017\":1,\"1073\":1}}],[\"apple\",{\"1\":{\"49\":1,\"53\":1,\"57\":1}}],[\"append\",{\"1\":{\"151\":1,\"1101\":1}}],[\"apperance\",{\"1\":{\"30\":1}}],[\"a\",{\"1\":{\"42\":1,\"396\":2,\"440\":2,\"492\":8,\"506\":1,\"513\":1,\"591\":5,\"595\":1,\"596\":2,\"616\":1,\"724\":1,\"725\":1,\"752\":4,\"804\":1,\"920\":1,\"944\":1,\"946\":1,\"947\":1,\"948\":1,\"963\":1,\"964\":1,\"965\":1,\"966\":1,\"977\":1,\"984\":1,\"985\":1,\"1002\":2,\"1029\":1,\"1040\":1,\"1101\":1}}],[\"accs\",{\"1\":{\"629\":5}}],[\"accountsmerge\",{\"1\":{\"629\":1}}],[\"accounts\",{\"1\":{\"625\":1,\"629\":8}}],[\"accept\",{\"1\":{\"565\":3}}],[\"accessibility\",{\"1\":{\"30\":1}}],[\"acquire\",{\"1\":{\"579\":1}}],[\"ac≡bdmodp\",{\"1\":{\"512\":1}}],[\"acmodp+bcmodp\",{\"1\":{\"507\":1}}],[\"actions\",{\"1\":{\"1097\":1}}],[\"action\",{\"1\":{\"9\":1}}],[\"bd\",{\"1\":{\"1081\":1}}],[\"bdw\",{\"1\":{\"1080\":1,\"1084\":1}}],[\"by\",{\"1\":{\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1,\"925\":1,\"926\":1,\"928\":1,\"929\":1,\"979\":1,\"1054\":1,\"1073\":1,\"1074\":1}}],[\"b+\",{\"1\":{\"774\":1}}],[\"b+c\",{\"1\":{\"505\":1,\"508\":1}}],[\"b且b\",{\"1\":{\"723\":1}}],[\"between\",{\"1\":{\"1041\":1,\"1061\":1}}],[\"below\",{\"1\":{\"947\":1,\"1077\":1}}],[\"beginning\",{\"1\":{\"945\":1,\"1008\":1,\"1029\":1,\"1085\":1,\"1086\":1}}],[\"be\",{\"1\":{\"878\":1,\"969\":1,\"977\":1,\"1018\":1,\"1019\":1,\"1040\":1,\"1054\":1,\"1092\":1}}],[\"behind\",{\"1\":{\"854\":1,\"855\":1}}],[\"before\",{\"1\":{\"636\":1,\"914\":1,\"934\":1,\"943\":1,\"964\":1}}],[\"because\",{\"1\":{\"636\":1,\"1074\":1}}],[\"b的链式关系\",{\"1\":{\"596\":1}}],[\"b的传递关系\",{\"1\":{\"595\":1}}],[\"bidirectional\",{\"1\":{\"1081\":1}}],[\"bio\",{\"1\":{\"793\":1}}],[\"binlog\",{\"1\":{\"778\":1}}],[\"binarysearch\",{\"1\":{\"752\":1}}],[\"bi\",{\"1\":{\"584\":1,\"591\":2}}],[\"bit\",{\"1\":{\"46\":1}}],[\"built\",{\"0\":{\"1046\":1}}],[\"build\",{\"1\":{\"132\":4}}],[\"build在src\",{\"1\":{\"12\":1}}],[\"but\",{\"1\":{\"636\":1,\"1072\":1,\"1092\":1}}],[\"buzz\",{\"1\":{\"563\":2,\"565\":5}}],[\"b±d\",{\"1\":{\"511\":1}}],[\"bcmodp\",{\"1\":{\"506\":1}}],[\"bmodp\",{\"1\":{\"503\":1,\"504\":1}}],[\"b1\",{\"1\":{\"492\":2}}],[\"b0\",{\"1\":{\"492\":6}}],[\"b\",{\"1\":{\"492\":7,\"591\":1,\"595\":1,\"616\":1,\"723\":1,\"850\":1,\"851\":1,\"868\":1,\"925\":1,\"926\":1,\"1079\":1}}],[\"bfs\",{\"1\":{\"449\":1,\"648\":1,\"661\":1,\"662\":1}}],[\"bottom\",{\"1\":{\"874\":1,\"890\":1}}],[\"board\",{\"1\":{\"176\":7}}],[\"boolean\",{\"1\":{\"151\":2,\"168\":6,\"176\":7,\"440\":3,\"491\":1,\"492\":1,\"656\":5,\"664\":2,\"727\":2}}],[\"bat\",{\"1\":{\"529\":1,\"530\":1}}],[\"backwords\",{\"1\":{\"1083\":1}}],[\"backwards\",{\"1\":{\"1079\":1,\"1086\":1,\"1088\":1,\"1090\":1}}],[\"backward\",{\"1\":{\"876\":1,\"880\":1,\"882\":1,\"1072\":1}}],[\"back\",{\"1\":{\"421\":1,\"844\":1}}],[\"backtrack\",{\"1\":{\"159\":3,\"168\":3}}],[\"based\",{\"1\":{\"1094\":1}}],[\"base=$home\",{\"1\":{\"73\":1}}],[\"basic\",{\"1\":{\"30\":1}}],[\"break\",{\"1\":{\"139\":1,\"605\":1,\"810\":1}}],[\"breadcrumb\",{\"1\":{\"30\":1}}],[\"brew\",{\"1\":{\"76\":1,\"99\":1}}],[\"bwm1\",{\"1\":{\"46\":6}}],[\"block\",{\"1\":{\"863\":1,\"864\":1,\"925\":1,\"926\":1,\"928\":1,\"929\":1,\"957\":1,\"1099\":1}}],[\"blogger\",{\"1\":{\"30\":1}}],[\"blog\",{\"1\":{\"30\":4}}],[\"blank\",{\"1\":{\"858\":1,\"860\":1,\"892\":1,\"893\":1}}],[\"blind\",{\"1\":{\"46\":1}}],[\"gb\",{\"1\":{\"1096\":1}}],[\"gold\",{\"1\":{\"1022\":2,\"1023\":1,\"1024\":1}}],[\"goto\",{\"1\":{\"863\":1,\"864\":1,\"871\":1,\"884\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":1,\"889\":1,\"891\":1,\"892\":1,\"893\":1,\"894\":1,\"943\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"948\":1,\"949\":1,\"1043\":1,\"1044\":1,\"1070\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1082\":1,\"1083\":1,\"1084\":1,\"1085\":1,\"1086\":1}}],[\"gp\",{\"1\":{\"968\":2}}],[\"gn\",{\"1\":{\"958\":2,\"961\":1}}],[\"gi\",{\"1\":{\"949\":1}}],[\"gitee\",{\"1\":{\"437\":1}}],[\"github\",{\"1\":{\"9\":1}}],[\"g~~\",{\"1\":{\"908\":1}}],[\"g~\",{\"1\":{\"904\":1}}],[\"gu\",{\"1\":{\"904\":2}}],[\"guw\",{\"1\":{\"897\":1}}],[\"guide\",{\"1\":{\"30\":4}}],[\"ggyg\",{\"1\":{\"897\":1}}],[\"ggdg\",{\"1\":{\"897\":1}}],[\"gg\",{\"1\":{\"887\":1,\"888\":1}}],[\"gf\",{\"1\":{\"886\":1}}],[\"global\",{\"1\":{\"885\":1,\"1023\":1}}],[\"gdefault\",{\"1\":{\"1031\":1}}],[\"gd\",{\"1\":{\"884\":1,\"885\":1}}],[\"gk\",{\"1\":{\"843\":1}}],[\"gj\",{\"1\":{\"841\":1}}],[\"grep\",{\"1\":{\"804\":1}}],[\"grid\",{\"1\":{\"613\":5,\"636\":7,\"664\":4}}],[\"groupanagrams\",{\"1\":{\"533\":1}}],[\"group\",{\"1\":{\"30\":1}}],[\"gc\",{\"1\":{\"805\":2}}],[\"gcutil\",{\"1\":{\"805\":1}}],[\"gcd\",{\"1\":{\"500\":3}}],[\"gcstring\",{\"1\":{\"78\":1}}],[\"gas\",{\"1\":{\"390\":3}}],[\"g\",{\"1\":{\"204\":1,\"206\":4,\"860\":1,\"889\":1,\"891\":1,\"1023\":2,\"1024\":1,\"1031\":1}}],[\"ge\",{\"1\":{\"852\":1,\"853\":1,\"1083\":1}}],[\"generatetrees\",{\"1\":{\"132\":1}}],[\"getvalue\",{\"1\":{\"629\":1}}],[\"getkey\",{\"1\":{\"629\":1}}],[\"getname\",{\"1\":{\"565\":4}}],[\"getordefault\",{\"1\":{\"533\":1}}],[\"getserialsquare\",{\"1\":{\"498\":1}}],[\"getboard\",{\"1\":{\"168\":2}}],[\"get\",{\"1\":{\"30\":2,\"151\":1,\"176\":2,\"196\":3,\"216\":2,\"597\":10,\"619\":3,\"629\":8}}],[\"=b表示a\",{\"1\":{\"596\":1}}],[\"=nums\",{\"1\":{\"536\":1}}],[\"=n\",{\"1\":{\"442\":1}}],[\"=i=z∑y​cost\",{\"1\":{\"387\":1}}],[\"=i=1∑n​g\",{\"1\":{\"206\":1}}],[\"=i=1∑n​f\",{\"1\":{\"206\":1}}],[\"=1\",{\"1\":{\"206\":1}}],[\"=g\",{\"1\":{\"206\":2}}],[\"==\",{\"1\":{\"46\":1,\"132\":1,\"139\":2,\"143\":2,\"145\":1,\"151\":2,\"159\":1,\"168\":1,\"176\":2,\"216\":1,\"224\":1,\"247\":1,\"258\":1,\"265\":1,\"271\":1,\"272\":1,\"273\":1,\"275\":1,\"276\":2,\"286\":1,\"287\":2,\"293\":1,\"297\":1,\"328\":1,\"331\":2,\"359\":1,\"365\":1,\"377\":1,\"396\":1,\"438\":1,\"440\":2,\"491\":1,\"500\":1,\"523\":1,\"565\":4,\"588\":1,\"597\":3,\"605\":1,\"613\":1,\"636\":9,\"664\":5,\"679\":1,\"685\":1,\"706\":6,\"714\":1,\"727\":1,\"734\":1,\"758\":1,\"760\":1,\"917\":1}}],[\"=\",{\"1\":{\"30\":1,\"46\":4,\"132\":7,\"139\":3,\"145\":4,\"151\":10,\"159\":3,\"168\":22,\"176\":22,\"179\":1,\"185\":1,\"196\":5,\"208\":5,\"214\":1,\"216\":6,\"224\":5,\"229\":2,\"230\":1,\"231\":1,\"232\":1,\"234\":4,\"247\":9,\"256\":3,\"258\":6,\"265\":7,\"270\":1,\"274\":1,\"275\":2,\"276\":11,\"282\":1,\"283\":1,\"285\":2,\"286\":1,\"287\":7,\"293\":1,\"294\":2,\"297\":7,\"304\":1,\"305\":1,\"306\":2,\"307\":5,\"313\":1,\"314\":1,\"315\":1,\"316\":1,\"318\":9,\"324\":1,\"325\":1,\"331\":9,\"338\":1,\"339\":1,\"340\":1,\"342\":8,\"349\":4,\"358\":2,\"359\":4,\"364\":2,\"365\":4,\"377\":6,\"390\":7,\"396\":9,\"409\":4,\"415\":3,\"421\":2,\"427\":1,\"438\":12,\"440\":15,\"487\":3,\"491\":4,\"492\":11,\"496\":4,\"498\":3,\"523\":4,\"529\":1,\"533\":4,\"547\":6,\"563\":1,\"565\":9,\"579\":6,\"584\":1,\"588\":9,\"591\":2,\"592\":2,\"595\":1,\"596\":1,\"597\":25,\"605\":17,\"613\":18,\"616\":1,\"619\":14,\"625\":1,\"629\":14,\"636\":33,\"650\":12,\"656\":14,\"664\":11,\"674\":1,\"679\":9,\"685\":6,\"692\":3,\"706\":9,\"714\":1,\"727\":4,\"734\":4,\"745\":4,\"752\":11,\"760\":15,\"903\":1}}],[\"flag\",{\"1\":{\"1031\":1}}],[\"flags\",{\"1\":{\"1016\":1,\"1020\":1,\"1025\":1}}],[\"flowchart\",{\"1\":{\"30\":1}}],[\"function\",{\"1\":{\"810\":1}}],[\"full\",{\"1\":{\"805\":1}}],[\"fb\",{\"1\":{\"565\":5}}],[\"f\",{\"1\":{\"205\":1,\"206\":1,\"854\":2,\"867\":1,\"1087\":1,\"1088\":1}}],[\"foobar\",{\"0\":{\"552\":1}}],[\"footnote\",{\"1\":{\"30\":1}}],[\"footer\",{\"1\":{\"30\":1}}],[\"force\",{\"1\":{\"991\":1}}],[\"format\",{\"1\":{\"903\":1,\"917\":1}}],[\"forward\",{\"1\":{\"875\":1,\"880\":1,\"881\":1}}],[\"fork\",{\"1\":{\"579\":6}}],[\"for\",{\"1\":{\"132\":3,\"139\":1,\"151\":2,\"159\":2,\"168\":3,\"176\":3,\"196\":1,\"208\":2,\"216\":1,\"234\":2,\"247\":1,\"258\":3,\"265\":2,\"276\":4,\"287\":3,\"297\":2,\"307\":1,\"318\":1,\"331\":2,\"342\":1,\"349\":2,\"359\":2,\"365\":2,\"377\":1,\"390\":1,\"396\":2,\"409\":1,\"415\":1,\"427\":1,\"438\":3,\"440\":2,\"496\":1,\"523\":2,\"533\":1,\"547\":2,\"565\":1,\"579\":1,\"588\":2,\"597\":3,\"605\":4,\"613\":5,\"619\":4,\"629\":5,\"636\":9,\"650\":3,\"656\":5,\"664\":1,\"679\":2,\"685\":1,\"706\":2,\"714\":1,\"727\":1,\"734\":1,\"752\":5,\"760\":5,\"810\":1,\"818\":1,\"930\":1,\"1024\":1,\"1025\":1,\"1027\":1,\"1030\":1,\"1071\":2,\"1081\":1,\"1099\":1}}],[\"faster\",{\"0\":{\"1067\":1}}],[\"far\",{\"1\":{\"377\":4}}],[\"false\",{\"1\":{\"151\":1,\"168\":3,\"176\":2,\"440\":1,\"491\":1,\"727\":1,\"810\":1,\"814\":1}}],[\"failed\",{\"1\":{\"80\":1}}],[\"faq\",{\"1\":{\"30\":1}}],[\"first\",{\"1\":{\"857\":1,\"858\":1,\"1022\":1,\"1070\":1,\"1077\":1}}],[\"fizzbuzz\",{\"1\":{\"563\":1,\"565\":9}}],[\"fizz\",{\"1\":{\"563\":4,\"565\":5}}],[\"filled\",{\"1\":{\"636\":2}}],[\"filling\",{\"1\":{\"636\":2}}],[\"fill\",{\"1\":{\"331\":1,\"359\":1,\"365\":1,\"636\":2}}],[\"files\",{\"1\":{\"995\":1,\"996\":1,\"997\":1,\"998\":1}}],[\"filename=\",{\"1\":{\"46\":1}}],[\"file\",{\"1\":{\"30\":1,\"78\":2,\"871\":1,\"886\":1,\"887\":1,\"889\":1,\"988\":2,\"989\":1,\"990\":1,\"992\":1,\"993\":1,\"994\":1,\"1008\":1,\"1009\":1,\"1024\":1,\"1026\":1,\"1027\":1,\"1033\":1,\"1034\":1,\"1036\":1,\"1037\":1,\"1039\":1,\"1042\":2}}],[\"finally\",{\"1\":{\"565\":4,\"810\":1}}],[\"finished\",{\"1\":{\"176\":3}}],[\"finddiagonalorder\",{\"1\":{\"679\":1}}],[\"find\",{\"1\":{\"588\":3,\"597\":6,\"605\":5,\"613\":5,\"619\":5,\"629\":4,\"636\":6,\"854\":1,\"1087\":1,\"1088\":1}}],[\"findredundantconnection\",{\"1\":{\"588\":1}}],[\"findminarrowshots\",{\"1\":{\"409\":1}}],[\"finditinerary\",{\"1\":{\"196\":1}}],[\"finding\",{\"1\":{\"80\":1}}],[\"findsubsequences\",{\"1\":{\"145\":1}}],[\"feed\",{\"1\":{\"30\":2}}],[\"feature\",{\"1\":{\"30\":3}}],[\"front\",{\"1\":{\"421\":1}}],[\"frontmatter\",{\"1\":{\"30\":3}}],[\"from\",{\"1\":{\"30\":1,\"46\":1,\"179\":1,\"636\":1,\"910\":1,\"912\":1}}],[\"f39c12\",{\"1\":{\"28\":1}}],[\"2再取整\",{\"1\":{\"733\":1}}],[\"2k\",{\"1\":{\"442\":1}}],[\"256\",{\"1\":{\"438\":3}}],[\"28\",{\"1\":{\"437\":1}}],[\"26\",{\"1\":{\"396\":1,\"440\":1}}],[\"2n+1\",{\"1\":{\"207\":1}}],[\"2\",{\"1\":{\"112\":1,\"143\":1,\"168\":3,\"208\":1,\"213\":1,\"214\":1,\"216\":1,\"224\":1,\"234\":1,\"258\":1,\"265\":1,\"293\":1,\"297\":1,\"327\":1,\"331\":1,\"491\":1,\"498\":1,\"523\":1,\"563\":1,\"597\":3,\"605\":5,\"674\":1,\"675\":1,\"679\":1,\"685\":6,\"710\":1,\"711\":1,\"733\":2,\"734\":1,\"755\":1,\"817\":1}}],[\"20172\",{\"1\":{\"106\":1}}],[\"2c3e50\",{\"1\":{\"28\":1}}],[\"2980b9\",{\"1\":{\"28\":1}}],[\"27ae60\",{\"1\":{\"28\":1}}],[\"cmd\",{\"1\":{\"1039\":1}}],[\"cmodp=\",{\"1\":{\"507\":1}}],[\"ci\",{\"1\":{\"931\":1}}],[\"ciw\",{\"1\":{\"931\":1}}],[\"cc\",{\"1\":{\"908\":1,\"911\":1}}],[\"custom\",{\"0\":{\"1055\":1}}],[\"cut\",{\"1\":{\"899\":1,\"901\":1,\"933\":1,\"934\":1,\"935\":1,\"979\":2}}],[\"cursors\",{\"0\":{\"1093\":1},\"1\":{\"1094\":1,\"1098\":1}}],[\"cursor\",{\"1\":{\"854\":1,\"855\":1,\"863\":1,\"864\":1,\"872\":1,\"873\":1,\"874\":1,\"890\":1,\"902\":1,\"910\":1,\"912\":1,\"914\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"937\":1,\"943\":1,\"944\":1,\"959\":1,\"964\":1,\"968\":1,\"969\":1,\"985\":1,\"1011\":1,\"1070\":1,\"1095\":1,\"1096\":1}}],[\"curlen\",{\"1\":{\"547\":2}}],[\"currob\",{\"1\":{\"216\":2}}],[\"currentthread\",{\"1\":{\"565\":4}}],[\"current\",{\"1\":{\"216\":4,\"947\":1,\"948\":1,\"960\":1,\"1006\":1,\"1022\":1,\"1023\":1}}],[\"cur\",{\"1\":{\"145\":8,\"196\":3,\"390\":3,\"498\":4,\"547\":2,\"565\":14,\"650\":9,\"664\":3}}],[\"crtl\",{\"1\":{\"941\":1}}],[\"crusor\",{\"1\":{\"881\":1,\"882\":1}}],[\"creating\",{\"1\":{\"1039\":1}}],[\"creative\",{\"1\":{\"30\":2}}],[\"create\",{\"1\":{\"30\":1,\"988\":1}}],[\"ctrl\",{\"1\":{\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"951\":1,\"952\":1,\"953\":1,\"957\":1,\"983\":1,\"984\":3}}],[\"cpu\",{\"0\":{\"800\":1},\"1\":{\"801\":1}}],[\"cpanmetadb\",{\"1\":{\"80\":1}}],[\"cpanm\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1}}],[\"cpan\",{\"1\":{\"71\":1,\"73\":1}}],[\"c2\",{\"1\":{\"706\":5}}],[\"c1\",{\"1\":{\"706\":5}}],[\"close\",{\"1\":{\"990\":1,\"993\":1,\"994\":1,\"996\":1,\"997\":1,\"998\":1,\"1045\":1}}],[\"clear\",{\"1\":{\"679\":1}}],[\"class\",{\"1\":{\"132\":1,\"139\":1,\"145\":1,\"151\":1,\"159\":1,\"168\":1,\"176\":1,\"196\":1,\"208\":1,\"216\":1,\"224\":1,\"234\":1,\"247\":1,\"258\":1,\"265\":1,\"276\":1,\"287\":1,\"297\":1,\"307\":1,\"318\":1,\"331\":1,\"342\":1,\"349\":1,\"359\":1,\"365\":1,\"377\":1,\"390\":1,\"396\":1,\"409\":1,\"415\":1,\"421\":1,\"427\":1,\"438\":1,\"440\":1,\"523\":1,\"533\":1,\"547\":1,\"565\":1,\"579\":1,\"588\":1,\"597\":2,\"605\":1,\"613\":1,\"619\":1,\"629\":1,\"636\":1,\"650\":1,\"656\":1,\"664\":1,\"679\":1,\"685\":1,\"692\":1,\"706\":1,\"714\":1,\"727\":1,\"734\":1,\"745\":1,\"752\":1,\"760\":1,\"810\":1}}],[\"ceiling\",{\"1\":{\"636\":5}}],[\"center\",{\"1\":{\"22\":1,\"872\":1}}],[\"cj\",{\"1\":{\"592\":1}}],[\"c≡b\",{\"1\":{\"513\":1}}],[\"c≡dmodp\",{\"1\":{\"510\":1}}],[\"c0​=1\",{\"1\":{\"207\":1}}],[\"c0392b\",{\"1\":{\"28\":1}}],[\"cnm​​=m\",{\"1\":{\"494\":1}}],[\"cnt++\",{\"1\":{\"679\":1}}],[\"cnt\",{\"1\":{\"377\":2,\"409\":2,\"415\":2,\"491\":2,\"679\":1,\"760\":3}}],[\"cn+1​=n+22\",{\"1\":{\"207\":1}}],[\"cn​\",{\"1\":{\"207\":1}}],[\"capitalize\",{\"1\":{\"909\":1}}],[\"case\",{\"1\":{\"810\":1,\"938\":1,\"1025\":1}}],[\"calcequation\",{\"1\":{\"597\":1}}],[\"call\",{\"1\":{\"579\":1}}],[\"catch\",{\"1\":{\"565\":4,\"810\":1}}],[\"category\",{\"1\":{\"30\":1}}],[\"care\",{\"1\":{\"440\":1}}],[\"canal\",{\"1\":{\"778\":1}}],[\"cancompletecircuit\",{\"1\":{\"390\":1}}],[\"can\",{\"1\":{\"216\":2,\"878\":1,\"977\":1,\"985\":1,\"1010\":1,\"1040\":1,\"1092\":1}}],[\"candidates\",{\"1\":{\"139\":11}}],[\"c参数以实现断点续传\",{\"1\":{\"107\":1}}],[\"cs\",{\"1\":{\"106\":1,\"1047\":1,\"1050\":1,\"1051\":1}}],[\"csv\",{\"1\":{\"59\":1}}],[\"c\",{\"1\":{\"62\":1,\"106\":1,\"168\":8,\"176\":8,\"438\":4,\"506\":1,\"591\":1,\"613\":5,\"636\":5,\"656\":6,\"664\":8,\"679\":3,\"723\":2,\"724\":1,\"725\":1,\"752\":4,\"899\":1,\"912\":1,\"975\":1,\"1025\":1}}],[\"checkpossibility\",{\"1\":{\"727\":1}}],[\"ch\",{\"1\":{\"492\":3,\"935\":1}}],[\"child\",{\"1\":{\"440\":7}}],[\"children\",{\"1\":{\"30\":20}}],[\"characters\",{\"1\":{\"969\":1,\"972\":1}}],[\"charat\",{\"1\":{\"265\":2,\"276\":2,\"287\":2,\"297\":2,\"396\":2,\"438\":4,\"440\":2,\"619\":1,\"685\":2,\"734\":2}}],[\"char\",{\"1\":{\"151\":2,\"168\":2,\"176\":3,\"533\":1,\"619\":2,\"650\":4,\"844\":1,\"845\":1,\"854\":3,\"855\":3,\"856\":1,\"857\":1,\"858\":1,\"860\":1,\"892\":1,\"893\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"938\":1,\"951\":1,\"955\":1,\"1030\":1,\"1048\":2,\"1052\":1,\"1054\":2,\"1070\":3,\"1072\":2,\"1073\":2,\"1087\":2,\"1088\":2,\"1089\":2,\"1090\":2,\"1091\":2}}],[\"changed\",{\"1\":{\"949\":1,\"1018\":1,\"1031\":1}}],[\"changes\",{\"1\":{\"940\":1}}],[\"changeone\",{\"1\":{\"650\":2}}],[\"changelog\",{\"1\":{\"30\":1}}],[\"change\",{\"1\":{\"30\":1,\"899\":1,\"911\":1,\"912\":1,\"932\":1,\"939\":1,\"941\":1,\"979\":1,\"1011\":1,\"1023\":1,\"1024\":1,\"1026\":1,\"1050\":1,\"1057\":1}}],[\"choose\",{\"1\":{\"145\":2}}],[\"countsmaller\",{\"1\":{\"752\":1}}],[\"countsubstrings\",{\"1\":{\"734\":1}}],[\"count\",{\"1\":{\"636\":3,\"650\":2,\"883\":1,\"896\":2,\"940\":2,\"970\":2,\"1047\":1}}],[\"countbit\",{\"1\":{\"491\":1}}],[\"cost\",{\"1\":{\"390\":2}}],[\"coins\",{\"1\":{\"359\":2,\"365\":2}}],[\"coinchange\",{\"1\":{\"359\":1,\"365\":1}}],[\"coin\",{\"1\":{\"358\":1,\"359\":3,\"364\":1,\"365\":3}}],[\"cool必由前一天出售股票转移而来\",{\"1\":{\"340\":1}}],[\"cool\",{\"1\":{\"339\":1,\"342\":4}}],[\"cookbook\",{\"1\":{\"30\":2}}],[\"copying\",{\"0\":{\"962\":1}}],[\"copyright\",{\"1\":{\"30\":1}}],[\"copy\",{\"1\":{\"30\":1,\"636\":10,\"900\":1,\"913\":1,\"1012\":1}}],[\"combined\",{\"1\":{\"1092\":1}}],[\"combine\",{\"1\":{\"991\":1}}],[\"combinationsum4\",{\"1\":{\"349\":1}}],[\"combinationsum2\",{\"1\":{\"139\":1}}],[\"compare\",{\"1\":{\"409\":1,\"605\":1,\"714\":1}}],[\"comparator<int\",{\"1\":{\"409\":1,\"605\":1,\"714\":1}}],[\"computeifabsent\",{\"1\":{\"196\":1,\"597\":2,\"619\":1,\"629\":1}}],[\"component\",{\"1\":{\"30\":1}}],[\"components\",{\"1\":{\"30\":1}}],[\"com\",{\"1\":{\"51\":1,\"625\":11}}],[\"commands\",{\"1\":{\"1011\":2,\"1012\":1,\"1102\":1}}],[\"commandlinetools\",{\"1\":{\"71\":1}}],[\"command+单击\",{\"1\":{\"68\":1}}],[\"command\",{\"0\":{\"986\":1},\"1\":{\"30\":1,\"883\":2,\"979\":1,\"987\":1,\"989\":1,\"990\":1,\"991\":1,\"999\":2,\"1000\":2,\"1010\":1,\"1011\":1,\"1013\":1}}],[\"comment\",{\"1\":{\"30\":2}}],[\"common\",{\"1\":{\"30\":1}}],[\"code\",{\"1\":{\"30\":3,\"579\":1,\"903\":1}}],[\"col\",{\"1\":{\"168\":5,\"176\":5,\"613\":3,\"656\":4}}],[\"column\",{\"1\":{\"168\":2}}],[\"collections\",{\"1\":{\"159\":2,\"196\":1,\"605\":1,\"679\":1,\"752\":1}}],[\"collapsable\",{\"1\":{\"30\":11}}],[\"color\",{\"1\":{\"30\":1}}],[\"colors\",{\"1\":{\"28\":1}}],[\"concat\",{\"1\":{\"835\":1}}],[\"consecutive\",{\"1\":{\"1098\":1}}],[\"consistent\",{\"1\":{\"784\":1}}],[\"consider\",{\"1\":{\"636\":1,\"1011\":1}}],[\"const\",{\"1\":{\"30\":1,\"810\":1}}],[\"connect\",{\"1\":{\"636\":2}}],[\"convert\",{\"1\":{\"629\":1}}],[\"con\",{\"1\":{\"565\":9}}],[\"condition\",{\"1\":{\"565\":1}}],[\"confirm\",{\"1\":{\"1025\":1}}],[\"configure\",{\"1\":{\"1020\":1}}],[\"config\",{\"1\":{\"27\":1,\"30\":7}}],[\"conf\",{\"1\":{\"90\":1,\"97\":1,\"100\":1,\"102\":1}}],[\"containskey\",{\"1\":{\"629\":1}}],[\"contains\",{\"1\":{\"547\":2,\"650\":3}}],[\"container\",{\"1\":{\"30\":1}}],[\"continue\",{\"1\":{\"139\":1,\"151\":1,\"168\":1,\"636\":1,\"810\":1,\"1010\":1}}],[\"contrib\",{\"0\":{\"109\":1},\"1\":{\"110\":1}}],[\"contribution\",{\"1\":{\"30\":1}}],[\"content\",{\"1\":{\"30\":1,\"46\":2,\"981\":1}}],[\"图中为其出生之日的月相\",{\"1\":{\"45\":1}}],[\"图标描述\",{\"1\":{\"25\":1}}],[\"图片隐写\",{\"0\":{\"44\":1}}],[\"图片\",{\"0\":{\"24\":1}}],[\"图表\",{\"0\":{\"16\":1}}],[\"卡片\",{\"0\":{\"23\":1}}],[\"range\",{\"1\":{\"1000\":1,\"1001\":1,\"1003\":1,\"1016\":1,\"1017\":2}}],[\"rr\",{\"1\":{\"777\":1}}],[\"rc\",{\"1\":{\"777\":1}}],[\"r2\",{\"1\":{\"706\":5}}],[\"r1\",{\"1\":{\"706\":5}}],[\"r++\",{\"1\":{\"679\":1,\"760\":2}}],[\"ry\",{\"1\":{\"588\":3,\"597\":3,\"605\":3,\"619\":3,\"636\":4}}],[\"rx\",{\"1\":{\"588\":3,\"596\":1,\"597\":4,\"605\":3,\"619\":3,\"636\":4}}],[\"root\",{\"1\":{\"224\":2}}],[\"rob\",{\"1\":{\"216\":11,\"224\":3}}],[\"row\",{\"1\":{\"168\":12,\"176\":5,\"613\":3,\"636\":1,\"656\":4}}],[\"r\",{\"1\":{\"176\":8,\"613\":5,\"636\":5,\"656\":6,\"664\":8,\"679\":2,\"734\":3,\"760\":7,\"936\":1,\"937\":1,\"941\":1,\"983\":1,\"984\":3}}],[\"rsa\",{\"1\":{\"61\":1}}],[\"relative\",{\"1\":{\"988\":1,\"1034\":1,\"1037\":1}}],[\"release\",{\"1\":{\"579\":1}}],[\"reg\",{\"1\":{\"981\":1}}],[\"register\",{\"1\":{\"975\":1,\"976\":1,\"978\":1,\"979\":1,\"981\":2,\"983\":1,\"1001\":2,\"1002\":1}}],[\"registers\",{\"0\":{\"973\":1},\"1\":{\"977\":1}}],[\"regular\",{\"1\":{\"878\":1,\"1018\":1}}],[\"rectangle\",{\"1\":{\"1100\":1}}],[\"rect\",{\"1\":{\"957\":1}}],[\"reconstructqueue\",{\"1\":{\"714\":1}}],[\"represent\",{\"1\":{\"1006\":1,\"1007\":1,\"1008\":1,\"1009\":1}}],[\"repeat\",{\"1\":{\"856\":1,\"932\":1,\"1013\":1,\"1014\":1,\"1096\":1}}],[\"replace\",{\"1\":{\"30\":1,\"936\":1,\"937\":1,\"1022\":1}}],[\"redo\",{\"1\":{\"941\":1}}],[\"redolog\",{\"1\":{\"778\":1}}],[\"redis\",{\"1\":{\"772\":3,\"773\":1,\"779\":1,\"784\":1,\"785\":1}}],[\"reentrantlock\",{\"1\":{\"565\":2,\"579\":3}}],[\"ref\",{\"1\":{\"437\":1}}],[\"reversepairs\",{\"1\":{\"760\":1}}],[\"reverse\",{\"1\":{\"196\":1,\"636\":1,\"679\":1,\"752\":1}}],[\"remove\",{\"1\":{\"145\":1,\"906\":1,\"1066\":1}}],[\"removelast\",{\"1\":{\"139\":1}}],[\"result\",{\"1\":{\"151\":3,\"168\":3,\"498\":3,\"629\":1}}],[\"res\",{\"1\":{\"139\":3,\"145\":3,\"151\":5,\"159\":3,\"168\":3,\"196\":4,\"208\":7,\"224\":3,\"396\":3,\"440\":3,\"492\":3,\"523\":4,\"597\":4,\"605\":3,\"619\":3,\"629\":3,\"636\":3,\"650\":4,\"656\":3,\"664\":2,\"679\":3,\"706\":4,\"714\":4,\"734\":2,\"745\":4,\"752\":4}}],[\"restart\",{\"1\":{\"88\":1}}],[\"return\",{\"1\":{\"46\":1,\"132\":4,\"139\":2,\"145\":2,\"151\":2,\"159\":1,\"168\":3,\"176\":1,\"188\":1,\"192\":1,\"194\":1,\"196\":1,\"208\":1,\"216\":3,\"224\":3,\"234\":1,\"247\":1,\"258\":3,\"265\":1,\"276\":2,\"287\":3,\"297\":1,\"307\":1,\"318\":1,\"331\":2,\"342\":1,\"349\":1,\"359\":2,\"365\":2,\"377\":1,\"390\":1,\"396\":1,\"409\":4,\"415\":1,\"421\":3,\"438\":2,\"440\":5,\"491\":3,\"492\":1,\"498\":1,\"500\":2,\"523\":1,\"533\":1,\"547\":1,\"588\":3,\"597\":4,\"605\":3,\"613\":3,\"619\":2,\"629\":2,\"636\":2,\"650\":3,\"656\":1,\"664\":3,\"679\":1,\"685\":2,\"692\":2,\"706\":1,\"714\":2,\"727\":3,\"734\":1,\"745\":1,\"752\":1,\"760\":1,\"810\":1}}],[\"readonly\",{\"1\":{\"992\":1}}],[\"read\",{\"1\":{\"46\":2}}],[\"right+1\",{\"1\":{\"760\":1}}],[\"rightfork\",{\"1\":{\"579\":3}}],[\"rightnode\",{\"1\":{\"132\":2}}],[\"righttrees\",{\"1\":{\"132\":2}}],[\"right\",{\"1\":{\"22\":1,\"132\":5,\"216\":2,\"224\":5,\"491\":1,\"636\":1,\"685\":4,\"692\":5,\"745\":8,\"758\":2,\"760\":5,\"915\":1}}],[\"runnable\",{\"1\":{\"565\":10,\"579\":6}}],[\"run\",{\"1\":{\"6\":1,\"12\":1,\"565\":13,\"579\":6,\"999\":1}}],[\"嵌套时用\",{\"1\":{\"20\":1}}],[\"正常使用时用\",{\"1\":{\"20\":1}}],[\"w>\",{\"1\":{\"1035\":1,\"1038\":1,\"1041\":1,\"1062\":1,\"1063\":1,\"1064\":1,\"1065\":1}}],[\"wqall\",{\"1\":{\"997\":1}}],[\"wqa\",{\"1\":{\"997\":1}}],[\"wq\",{\"1\":{\"994\":1}}],[\"write\",{\"1\":{\"989\":1}}],[\"wrapped\",{\"1\":{\"841\":1,\"843\":1}}],[\"window\",{\"1\":{\"1040\":1}}],[\"will\",{\"1\":{\"969\":1,\"1010\":1,\"1054\":1}}],[\"without\",{\"1\":{\"920\":1,\"993\":1,\"998\":1}}],[\"with\",{\"1\":{\"629\":1,\"636\":2,\"810\":1,\"987\":2,\"991\":1,\"1010\":1,\"1011\":1,\"1022\":1,\"1053\":1,\"1074\":1,\"1092\":1}}],[\"w\",{\"1\":{\"846\":1,\"847\":1,\"922\":1,\"952\":1,\"989\":1,\"992\":1,\"1078\":1}}],[\"weight\",{\"1\":{\"596\":2,\"597\":10,\"636\":7}}],[\"webserver\",{\"1\":{\"91\":1,\"101\":1}}],[\"when\",{\"1\":{\"969\":1}}],[\"where\",{\"1\":{\"565\":1}}],[\"which\",{\"1\":{\"976\":1,\"977\":1}}],[\"whitespace\",{\"1\":{\"919\":1,\"920\":1}}],[\"while\",{\"1\":{\"196\":1,\"421\":1,\"427\":1,\"491\":1,\"498\":1,\"547\":1,\"565\":4,\"588\":1,\"597\":1,\"605\":1,\"613\":1,\"619\":1,\"629\":1,\"636\":1,\"650\":2,\"664\":2,\"679\":1,\"685\":1,\"692\":1,\"734\":1,\"745\":1,\"760\":1,\"810\":1}}],[\"whole\",{\"1\":{\"871\":1,\"907\":1,\"911\":1,\"913\":1,\"1007\":1,\"1024\":1,\"1027\":1}}],[\"world\",{\"1\":{\"696\":1,\"697\":1}}],[\"words\",{\"1\":{\"937\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1082\":1,\"1083\":1,\"1084\":1}}],[\"word\",{\"1\":{\"440\":5,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1,\"881\":1,\"882\":1,\"922\":1,\"952\":1,\"965\":1,\"1094\":1,\"1095\":1,\"1096\":1}}],[\"word2\",{\"1\":{\"265\":3,\"270\":1,\"271\":1,\"272\":1,\"273\":1,\"275\":1,\"276\":3}}],[\"word1\",{\"1\":{\"265\":3,\"276\":3}}],[\"workshop\",{\"1\":{\"66\":1,\"70\":1}}],[\"workflow\",{\"1\":{\"10\":1}}],[\"wget\",{\"1\":{\"106\":1}}],[\"wget下载举例\",{\"1\":{\"106\":1}}],[\"wm=1999\",{\"1\":{\"46\":1}}],[\"wm\",{\"1\":{\"46\":4}}],[\"ways\",{\"1\":{\"1003\":1}}],[\"wall\",{\"1\":{\"995\":1}}],[\"wa\",{\"1\":{\"995\":1}}],[\"wantstoeat\",{\"1\":{\"571\":1,\"579\":1}}],[\"wait可由原有保持或由冷静期转移而来\",{\"1\":{\"339\":1}}],[\"wait\",{\"1\":{\"338\":1,\"339\":1,\"342\":5}}],[\"watermark\",{\"1\":{\"46\":3}}],[\"warning\",{\"1\":{\"19\":1}}],[\"two\",{\"1\":{\"1070\":1}}],[\"twosum\",{\"1\":{\"692\":1}}],[\"type\",{\"1\":{\"1010\":1,\"1039\":1,\"1054\":1,\"1096\":1,\"1099\":1,\"1101\":1}}],[\"typed\",{\"1\":{\"951\":1,\"952\":1,\"953\":1}}],[\"typeof可用于检查变量是否声明\",{\"1\":{\"828\":1}}],[\"typeof\",{\"1\":{\"810\":1}}],[\"type=\",{\"1\":{\"119\":1}}],[\"tcp\",{\"1\":{\"797\":1}}],[\"tmp\",{\"1\":{\"760\":9}}],[\"txt\",{\"1\":{\"438\":3}}],[\"together\",{\"1\":{\"1060\":1}}],[\"towards\",{\"1\":{\"856\":1}}],[\"top\",{\"1\":{\"802\":1,\"873\":1,\"887\":1,\"890\":1,\"959\":1}}],[\"top查看占用\",{\"1\":{\"801\":1}}],[\"toarray\",{\"1\":{\"714\":1}}],[\"total\",{\"1\":{\"390\":3}}],[\"to\",{\"1\":{\"179\":1,\"196\":6,\"579\":1,\"629\":1,\"636\":4,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"872\":1,\"873\":1,\"874\":1,\"890\":1,\"899\":1,\"907\":1,\"909\":1,\"910\":1,\"912\":1,\"988\":1,\"991\":1,\"1001\":1,\"1003\":1,\"1015\":1,\"1017\":1,\"1018\":1,\"1019\":1,\"1025\":1,\"1034\":1,\"1037\":1,\"1039\":1,\"1050\":1,\"1053\":1,\"1057\":1,\"1077\":1,\"1096\":2,\"1097\":2,\"1100\":1,\"1101\":2,\"1102\":1}}],[\"tostring\",{\"1\":{\"151\":1}}],[\"tochararray\",{\"1\":{\"151\":1,\"533\":1,\"650\":1}}],[\"things\",{\"1\":{\"979\":1}}],[\"thing\",{\"1\":{\"978\":1}}],[\"this\",{\"1\":{\"145\":1,\"438\":1,\"440\":2,\"565\":1,\"656\":5,\"810\":1}}],[\"that\",{\"1\":{\"961\":1,\"978\":1,\"979\":1,\"1010\":1,\"1018\":1,\"1020\":1,\"1070\":1}}],[\"them\",{\"1\":{\"1001\":1,\"1002\":1}}],[\"theme\",{\"1\":{\"2\":1,\"30\":6}}],[\"then\",{\"1\":{\"968\":1,\"1010\":1,\"1054\":1}}],[\"the\",{\"1\":{\"579\":1,\"636\":1,\"945\":1,\"946\":1,\"947\":1,\"948\":1,\"949\":1,\"959\":1,\"960\":2,\"961\":1,\"968\":1,\"976\":1,\"977\":1,\"978\":1,\"979\":1,\"1002\":1,\"1018\":1,\"1019\":1,\"1022\":2,\"1023\":1,\"1026\":1,\"1029\":1,\"1031\":1,\"1073\":2,\"1077\":1,\"1081\":1,\"1102\":1}}],[\"throw\",{\"1\":{\"810\":1}}],[\"throws\",{\"1\":{\"565\":4,\"579\":1}}],[\"thread\",{\"1\":{\"565\":8}}],[\"tp\",{\"1\":{\"117\":1}}],[\"ttf文件再次安装\",{\"1\":{\"82\":1}}],[\"turn\",{\"1\":{\"1097\":1}}],[\"tunemymusic\",{\"1\":{\"53\":1}}],[\"tutorial\",{\"1\":{\"30\":2}}],[\"t\",{\"1\":{\"46\":1,\"62\":1,\"196\":3,\"252\":1,\"254\":2,\"255\":1,\"256\":6,\"283\":1,\"287\":7,\"487\":2,\"565\":4,\"855\":2,\"930\":1,\"1089\":1,\"1090\":1,\"1092\":1}}],[\"temporarily\",{\"1\":{\"999\":1}}],[\"temp\",{\"1\":{\"679\":5}}],[\"tea\",{\"1\":{\"529\":1,\"530\":1}}],[\"test\",{\"1\":{\"33\":1}}],[\"tex\",{\"1\":{\"30\":1,\"70\":1}}],[\"text\",{\"1\":{\"30\":20,\"918\":1,\"919\":1,\"920\":1,\"921\":1,\"927\":1,\"1000\":1,\"1010\":1,\"1015\":1,\"1018\":1,\"1019\":1,\"1054\":2,\"1073\":1,\"1100\":1,\"1101\":1}}],[\"titles\",{\"1\":{\"1026\":1}}],[\"tickets\",{\"1\":{\"196\":2}}],[\"tiny\",{\"1\":{\"78\":1}}],[\"timeline\",{\"1\":{\"30\":1}}],[\"tip\",{\"1\":{\"19\":1}}],[\"tabonly\",{\"1\":{\"1045\":1}}],[\"tabo\",{\"1\":{\"1045\":1}}],[\"tabprevious\",{\"1\":{\"1044\":1}}],[\"tabp\",{\"1\":{\"1044\":1}}],[\"tabnext\",{\"1\":{\"1043\":1}}],[\"tabnew\",{\"1\":{\"1042\":1}}],[\"tabn\",{\"1\":{\"1043\":1}}],[\"tab\",{\"1\":{\"1042\":1,\"1043\":1,\"1044\":1}}],[\"tabs\",{\"0\":{\"1032\":1},\"1\":{\"1045\":1}}],[\"tag\",{\"1\":{\"930\":1,\"1053\":1}}],[\"tags\",{\"1\":{\"30\":1}}],[\"tan\",{\"1\":{\"529\":1,\"530\":1}}],[\"taken\",{\"1\":{\"1074\":1}}],[\"take\",{\"1\":{\"216\":1}}],[\"target\",{\"1\":{\"139\":6,\"349\":4,\"650\":2,\"692\":3}}],[\"taoge\",{\"1\":{\"51\":1}}],[\"tasklist\",{\"1\":{\"30\":1}}],[\"traditional\",{\"1\":{\"1092\":1}}],[\"traversed\",{\"1\":{\"1073\":1}}],[\"trikies\",{\"0\":{\"942\":1,\"950\":1}}],[\"trie\",{\"0\":{\"439\":1},\"1\":{\"440\":9}}],[\"try\",{\"1\":{\"565\":8,\"810\":1}}],[\"treeset<>\",{\"1\":{\"629\":1,\"752\":1}}],[\"treeset<string>>\",{\"1\":{\"629\":2}}],[\"treen​=i=n−2k+1∑n​treei​\",{\"1\":{\"442\":1}}],[\"treenode\",{\"1\":{\"132\":4,\"224\":2}}],[\"tree\",{\"1\":{\"442\":1}}],[\"true\",{\"1\":{\"30\":11,\"151\":1,\"168\":3,\"176\":4,\"440\":1,\"656\":1,\"664\":2,\"727\":3,\"810\":1}}],[\"troubleshooting\",{\"1\":{\"30\":1}}],[\"ts中配置pagepatterns避免\",{\"1\":{\"27\":1}}],[\"multiple\",{\"0\":{\"1093\":1},\"1\":{\"1011\":2,\"1094\":1}}],[\"multiply\",{\"1\":{\"883\":1}}],[\"much\",{\"1\":{\"960\":1}}],[\"music\",{\"1\":{\"49\":1,\"53\":1,\"57\":1}}],[\"mr\",{\"1\":{\"808\":1}}],[\"mvcc\",{\"1\":{\"777\":1}}],[\"m+j规则编号\",{\"1\":{\"635\":1}}],[\"mlocal\",{\"1\":{\"74\":1,\"77\":1}}],[\"mm\",{\"1\":{\"73\":1}}],[\"mysql\",{\"1\":{\"778\":1,\"779\":1,\"780\":1,\"790\":2}}],[\"my\",{\"1\":{\"62\":1,\"63\":1}}],[\"m\",{\"1\":{\"51\":1,\"265\":5,\"276\":7,\"496\":1,\"605\":7,\"636\":6,\"656\":8,\"679\":4,\"890\":1}}],[\"moving\",{\"0\":{\"1067\":1},\"1\":{\"1092\":1}}],[\"move\",{\"1\":{\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"872\":1,\"873\":1,\"874\":1,\"890\":1,\"1011\":1,\"1012\":1,\"1041\":1,\"1095\":1}}],[\"more\",{\"1\":{\"1025\":1}}],[\"motion\",{\"1\":{\"896\":2,\"975\":1,\"1047\":1,\"1052\":1,\"1073\":1}}],[\"motions\",{\"0\":{\"839\":1}}],[\"mode\",{\"0\":{\"838\":1,\"942\":1,\"950\":1,\"954\":1,\"974\":1,\"982\":1,\"986\":1},\"1\":{\"899\":1,\"935\":1,\"943\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"948\":1,\"949\":1,\"955\":1,\"956\":1,\"959\":1,\"960\":1,\"961\":1,\"985\":1,\"1010\":1,\"1054\":1,\"1097\":1,\"1099\":1,\"1102\":1}}],[\"mode=\",{\"1\":{\"46\":2}}],[\"modp+c\",{\"1\":{\"505\":1}}],[\"modp\",{\"1\":{\"502\":1,\"503\":1,\"505\":2,\"506\":1,\"507\":2,\"508\":1,\"511\":1}}],[\"modp=\",{\"1\":{\"502\":1,\"505\":1,\"506\":1}}],[\"monotonestack\",{\"1\":{\"427\":1}}],[\"money\",{\"1\":{\"216\":2}}],[\"moon\",{\"1\":{\"46\":1}}],[\"make\",{\"1\":{\"1010\":1}}],[\"majorityelement\",{\"1\":{\"706\":1}}],[\"matching\",{\"1\":{\"894\":1,\"1066\":1}}],[\"match\",{\"1\":{\"877\":1,\"879\":1,\"959\":2,\"961\":1}}],[\"mat\",{\"1\":{\"674\":1,\"679\":4}}],[\"math\",{\"1\":{\"216\":3,\"224\":3,\"234\":2,\"247\":5,\"265\":1,\"276\":2,\"297\":1,\"307\":2,\"318\":4,\"331\":5,\"342\":3,\"359\":1,\"365\":1,\"377\":1,\"396\":1,\"547\":1,\"605\":2,\"636\":1,\"685\":1,\"745\":2,\"760\":1,\"817\":1}}],[\"mary\",{\"1\":{\"625\":4}}],[\"mark\",{\"1\":{\"30\":1}}],[\"markdown\",{\"1\":{\"3\":1,\"30\":10,\"1026\":1}}],[\"mailtoidx\",{\"1\":{\"629\":6}}],[\"mails\",{\"1\":{\"629\":1}}],[\"mail\",{\"1\":{\"625\":11,\"629\":3}}],[\"main\",{\"1\":{\"46\":1,\"565\":1}}],[\"mappings\",{\"0\":{\"1055\":1}}],[\"map<integer\",{\"1\":{\"629\":1}}],[\"map<string\",{\"1\":{\"196\":1,\"533\":1,\"597\":1,\"629\":1}}],[\"map\",{\"1\":{\"533\":4,\"597\":5,\"629\":1}}],[\"mac\",{\"1\":{\"71\":1,\"122\":1}}],[\"macos\",{\"0\":{\"60\":1,\"64\":1},\"1\":{\"61\":1,\"82\":1}}],[\"maxarea\",{\"1\":{\"745\":1}}],[\"maxlen\",{\"1\":{\"547\":4}}],[\"maxqueue\",{\"1\":{\"421\":2}}],[\"maxprofit\",{\"1\":{\"307\":1,\"318\":1,\"331\":1,\"342\":1}}],[\"maxsubarraysumcircular\",{\"1\":{\"247\":1}}],[\"maxsum\",{\"1\":{\"246\":1,\"247\":5}}],[\"max⁡\",{\"1\":{\"232\":1}}],[\"maximum\",{\"1\":{\"216\":3}}],[\"max\",{\"1\":{\"41\":1,\"214\":1,\"216\":3,\"224\":3,\"234\":2,\"247\":4,\"265\":1,\"294\":1,\"297\":1,\"304\":1,\"305\":1,\"307\":2,\"313\":1,\"314\":1,\"315\":1,\"316\":1,\"318\":4,\"324\":1,\"325\":1,\"331\":4,\"338\":1,\"339\":1,\"342\":3,\"377\":1,\"396\":1,\"421\":1,\"547\":1,\"636\":1,\"685\":1,\"745\":1}}],[\"middle\",{\"1\":{\"890\":1}}],[\"mid\",{\"1\":{\"491\":1}}],[\"minus\",{\"1\":{\"636\":1}}],[\"minimumeffortpath\",{\"1\":{\"605\":1}}],[\"mindistance\",{\"1\":{\"265\":1,\"276\":1}}],[\"minsum\",{\"1\":{\"246\":1,\"247\":5}}],[\"min\",{\"1\":{\"41\":1,\"145\":1,\"247\":3,\"274\":1,\"275\":2,\"276\":2,\"331\":1,\"358\":1,\"359\":1,\"364\":1,\"365\":1,\"415\":1,\"491\":2,\"523\":1,\"745\":1,\"760\":1}}],[\"migration\",{\"1\":{\"30\":1}}],[\"meaning\",{\"1\":{\"636\":1}}],[\"means\",{\"1\":{\"216\":1,\"1023\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1062\":1,\"1063\":1,\"1064\":1,\"1065\":1}}],[\"merge\",{\"1\":{\"629\":1}}],[\"mermaid\",{\"0\":{\"17\":1},\"1\":{\"30\":1}}],[\"method\",{\"1\":{\"579\":1}}],[\"meta\",{\"1\":{\"30\":1}}],[\"md\",{\"1\":{\"27\":1,\"30\":1}}],[\"说明\",{\"0\":{\"14\":1,\"34\":1,\"35\":1,\"765\":1,\"766\":1}}],[\"服务器即可解决\",{\"1\":{\"116\":1}}],[\"服务器\",{\"0\":{\"83\":1},\"1\":{\"12\":1}}],[\"中心右端要么是其本身\",{\"1\":{\"733\":1}}],[\"中为邻接的不同节点\",{\"1\":{\"667\":1}}],[\"中按已排好的顺序取出拼接即可\",{\"1\":{\"618\":1}}],[\"中间技巧\",{\"0\":{\"488\":1}}],[\"中间的过程\",{\"1\":{\"184\":1}}],[\"中求组合的回溯模版\",{\"1\":{\"150\":1}}],[\"中的出现次数\",{\"1\":{\"279\":1}}],[\"中的\",{\"1\":{\"119\":1}}],[\"中的文件根目录\",{\"1\":{\"102\":1}}],[\"中的步骤\",{\"1\":{\"49\":1}}],[\"中添加\",{\"1\":{\"74\":1}}],[\"中\",{\"1\":{\"53\":1,\"609\":1,\"778\":1}}],[\"中将文字形式的歌单导入至\",{\"1\":{\"53\":1}}],[\"中将歌单转为文字形式\",{\"1\":{\"52\":1}}],[\"中设定的部署分支\",{\"1\":{\"11\":1}}],[\"中最后给出的解决链接\",{\"1\":{\"7\":1}}],[\"仓库的\",{\"1\":{\"11\":1}}],[\"在指定索引处开始删除若干元素\",{\"1\":{\"834\":1}}],[\"在数组头添加\",{\"1\":{\"833\":1}}],[\"在代码第一行加上\",{\"1\":{\"812\":1}}],[\"在右侧维护最大的区间\",{\"1\":{\"758\":1}}],[\"在归并排序中合并两已升序排序的子数组过程中\",{\"1\":{\"758\":1}}],[\"在检测到可能存在的第二次递减时\",{\"1\":{\"726\":1}}],[\"在遍历检查时记录是否已有一次递减发生\",{\"1\":{\"726\":1}}],[\"在遍历数组的每个元素时\",{\"1\":{\"705\":1}}],[\"在遍历过程中若发现某邮箱已经遍历过\",{\"1\":{\"627\":1}}],[\"在保持回文前提下\",{\"1\":{\"684\":1}}],[\"在转至正确组合过程中不可遇到\",{\"1\":{\"645\":1}}],[\"在时间为t时\",{\"1\":{\"608\":1}}],[\"在并查集中用parent\",{\"1\":{\"596\":1}}],[\"在不断联合新变量的过程中就同时进行类似重量并查集的路径压缩\",{\"1\":{\"595\":1}}],[\"在最后一次调用结束之前\",{\"1\":{\"577\":1}}],[\"在吃饭和思考之间一直交替下去\",{\"1\":{\"570\":1}}],[\"在大多情况下\",{\"1\":{\"522\":1}}],[\"在实现树状数组时应与在原数组的基础上向右整体错开一格\",{\"1\":{\"443\":1}}],[\"在没必要用线段树的情景下\",{\"1\":{\"442\":1}}],[\"在给定的文本中寻找\",{\"1\":{\"438\":1}}],[\"在迭代过程中更改起始节点的父节点后无需维护初始父节点和依次经过的父节点的重量\",{\"1\":{\"434\":1}}],[\"在将两节点合并至同一集合时\",{\"1\":{\"430\":1}}],[\"在具体运用时经常需要依照实际情况判断栈内到底是存元素值本身还是存其索引\",{\"1\":{\"426\":1}}],[\"在各片段内遍历字符的同时基于之前的统计将片段末尾往后推\",{\"1\":{\"395\":1}}],[\"在一条环路上有n个加油站\",{\"1\":{\"380\":1}}],[\"在每次更新最远距离之后\",{\"1\":{\"375\":1}}],[\"在每间房仅可偷一次且不偷直接相连的房屋前提下\",{\"1\":{\"219\":1}}],[\"在每间房仅可偷一次且不偷相连的房屋前提下\",{\"1\":{\"211\":1}}],[\"在任何时候最多只能持有一股股票\",{\"1\":{\"334\":1}}],[\"在任意层高扔鸡蛋\",{\"1\":{\"253\":1}}],[\"在开始处理每天的各笔交易前\",{\"1\":{\"330\":1}}],[\"在更新二维\",{\"1\":{\"295\":1}}],[\"在求取过程中直接返回最先满足允许楼高不小于给定值的操作次数即可\",{\"1\":{\"257\":1}}],[\"在回溯时添加的话\",{\"1\":{\"184\":1}}],[\"在回溯全过程中维护动态变化的数组\",{\"1\":{\"157\":1}}],[\"在存在此类点的前提下\",{\"1\":{\"183\":1}}],[\"在本题条件下\",{\"1\":{\"183\":1}}],[\"在必须将每段行程都完成一遍且仅可完成一遍的条件下\",{\"1\":{\"179\":1}}],[\"在选择元素加入全排列时\",{\"1\":{\"157\":1}}],[\"在同层遍历时保证对于多个重复的字符\",{\"1\":{\"150\":1}}],[\"在路由器的\",{\"1\":{\"122\":1}}],[\"在系统设置里换个\",{\"1\":{\"116\":1}}],[\"在安装\",{\"1\":{\"66\":1}}],[\"在此\",{\"1\":{\"52\":1}}],[\"在进行稍长的查找时就会明显过长\",{\"1\":{\"43\":1}}],[\"在网上看到的\",{\"1\":{\"39\":1}}],[\"在\",{\"1\":{\"9\":1,\"53\":1,\"66\":1,\"74\":1,\"96\":1}}],[\"功能中网站基于的分支得改成\",{\"1\":{\"11\":1}}],[\"功能\",{\"1\":{\"9\":1,\"30\":1}}],[\"pid\",{\"1\":{\"801\":1}}],[\"pickrightfork\",{\"1\":{\"571\":1,\"573\":1,\"579\":2}}],[\"pickleftfork\",{\"1\":{\"571\":1,\"573\":1,\"579\":2}}],[\"p\",{\"1\":{\"714\":3,\"902\":1,\"914\":1,\"924\":1,\"968\":2,\"970\":1,\"1039\":1}}],[\"position\",{\"1\":{\"636\":1}}],[\"populated\",{\"1\":{\"1010\":1}}],[\"pop\",{\"1\":{\"421\":1,\"427\":1}}],[\"pointsi​=\",{\"1\":{\"405\":1}}],[\"points\",{\"1\":{\"405\":1,\"409\":6}}],[\"pollfirst\",{\"1\":{\"421\":1}}],[\"polllast\",{\"1\":{\"421\":1}}],[\"poll\",{\"1\":{\"196\":1,\"421\":1,\"619\":1,\"650\":1,\"664\":1,\"791\":1}}],[\"python\",{\"1\":{\"105\":2,\"821\":1}}],[\"philosopher\",{\"1\":{\"571\":1,\"572\":1,\"579\":3}}],[\"php\",{\"1\":{\"98\":1,\"99\":1}}],[\"photo\",{\"1\":{\"30\":1}}],[\"pending\",{\"1\":{\"961\":1}}],[\"peek\",{\"1\":{\"421\":1,\"427\":1}}],[\"peeklast\",{\"1\":{\"421\":1}}],[\"peekfirst\",{\"1\":{\"421\":2}}],[\"perform\",{\"1\":{\"907\":1,\"909\":1,\"1097\":2}}],[\"person\",{\"1\":{\"629\":5}}],[\"permute\",{\"1\":{\"159\":1}}],[\"permutation\",{\"1\":{\"151\":1}}],[\"perl5\",{\"1\":{\"73\":1,\"74\":3,\"77\":3,\"78\":1,\"79\":1}}],[\"perl\",{\"1\":{\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"77\":1,\"79\":2}}],[\"people\",{\"1\":{\"30\":1,\"714\":3}}],[\"pdf\",{\"0\":{\"65\":1},\"1\":{\"66\":1,\"67\":1,\"68\":1}}],[\"protected\",{\"1\":{\"810\":1}}],[\"proxy=$proxy\",{\"1\":{\"108\":1}}],[\"proxy=192\",{\"1\":{\"106\":1}}],[\"proxy=yes\",{\"1\":{\"106\":1,\"108\":1}}],[\"prices\",{\"1\":{\"304\":1,\"305\":1,\"306\":1,\"307\":5,\"313\":1,\"314\":1,\"315\":1,\"316\":1,\"318\":8,\"324\":1,\"325\":1,\"327\":1,\"330\":1,\"331\":10,\"338\":1,\"340\":1,\"342\":5}}],[\"priorityqueue<character>>\",{\"1\":{\"619\":1}}],[\"priorityqueue<>\",{\"1\":{\"196\":1,\"619\":1}}],[\"priorityqueue<string>\",{\"1\":{\"196\":2}}],[\"priorityqueue<string>>\",{\"1\":{\"196\":1}}],[\"private\",{\"1\":{\"97\":1,\"132\":1,\"139\":3,\"145\":4,\"151\":4,\"159\":3,\"168\":7,\"176\":6,\"196\":3,\"216\":1,\"224\":1,\"421\":2,\"438\":2,\"440\":3,\"500\":2,\"565\":4,\"579\":2,\"588\":1,\"597\":4,\"605\":3,\"613\":2,\"619\":3,\"629\":3,\"636\":4,\"650\":1,\"656\":7,\"685\":1,\"810\":1}}],[\"printf\",{\"1\":{\"803\":1}}],[\"printfizzbuzz\",{\"1\":{\"565\":3}}],[\"printfizz\",{\"1\":{\"565\":3}}],[\"printstacktrace\",{\"1\":{\"565\":4}}],[\"println\",{\"1\":{\"565\":4}}],[\"printnumber\",{\"1\":{\"565\":3}}],[\"printbuzz\",{\"1\":{\"565\":3}}],[\"print\",{\"1\":{\"46\":1,\"565\":4}}],[\"pre\",{\"1\":{\"409\":3,\"1010\":1}}],[\"premin\",{\"1\":{\"247\":4}}],[\"premax\",{\"1\":{\"247\":4}}],[\"previous\",{\"1\":{\"216\":2,\"842\":1,\"843\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1,\"856\":1,\"879\":1,\"893\":1,\"1044\":1,\"1071\":1}}],[\"presentation\",{\"1\":{\"30\":1}}],[\"prefix\",{\"1\":{\"30\":20,\"440\":6}}],[\"place\",{\"1\":{\"30\":1,\"949\":1}}],[\"plugin\",{\"0\":{\"1046\":1},\"1\":{\"30\":2}}],[\"plugins\",{\"1\":{\"30\":3}}],[\"pwa\",{\"1\":{\"30\":2}}],[\"putrightfork\",{\"1\":{\"571\":1,\"575\":1,\"579\":2}}],[\"putleftfork\",{\"1\":{\"571\":1,\"575\":1,\"579\":2}}],[\"put\",{\"1\":{\"533\":1,\"629\":1,\"968\":1,\"1001\":1,\"1002\":1,\"1012\":1}}],[\"public\",{\"1\":{\"132\":1,\"139\":1,\"145\":1,\"151\":1,\"159\":1,\"168\":1,\"176\":1,\"196\":1,\"208\":1,\"216\":1,\"224\":1,\"234\":1,\"247\":1,\"258\":1,\"265\":1,\"276\":1,\"287\":1,\"297\":1,\"307\":1,\"318\":1,\"331\":1,\"342\":1,\"349\":1,\"359\":1,\"365\":1,\"377\":1,\"390\":1,\"396\":1,\"409\":2,\"415\":1,\"421\":4,\"427\":1,\"438\":2,\"440\":4,\"523\":1,\"533\":1,\"547\":1,\"565\":14,\"579\":2,\"588\":1,\"597\":4,\"605\":2,\"613\":1,\"619\":1,\"629\":1,\"636\":1,\"650\":1,\"656\":1,\"664\":1,\"679\":1,\"685\":1,\"692\":1,\"706\":1,\"714\":2,\"727\":1,\"734\":1,\"745\":1,\"752\":1,\"760\":1,\"810\":1}}],[\"pure\",{\"1\":{\"30\":1}}],[\"push\",{\"1\":{\"9\":1,\"421\":1,\"427\":1}}],[\"pasting\",{\"0\":{\"962\":1},\"1\":{\"969\":1}}],[\"pasted\",{\"1\":{\"968\":1}}],[\"paste\",{\"1\":{\"902\":1,\"914\":1,\"985\":1}}],[\"password\",{\"1\":{\"46\":2,\"119\":2}}],[\"package\",{\"1\":{\"810\":1}}],[\"pacificatlantic\",{\"1\":{\"656\":1}}],[\"paci\",{\"1\":{\"656\":5}}],[\"pair\",{\"1\":{\"619\":3}}],[\"pairs\",{\"1\":{\"619\":2}}],[\"paragraph\",{\"1\":{\"861\":1,\"862\":1,\"924\":1,\"1053\":1}}],[\"parent\",{\"1\":{\"588\":8,\"597\":12,\"605\":11,\"613\":11,\"619\":13,\"629\":11,\"636\":11}}],[\"partitionlabels\",{\"1\":{\"396\":1}}],[\"partnet\",{\"1\":{\"106\":1}}],[\"patterns\",{\"1\":{\"1066\":1}}],[\"pattern\",{\"1\":{\"875\":1,\"876\":1,\"877\":1,\"878\":1,\"987\":1,\"1016\":1,\"1018\":3}}],[\"pat\",{\"1\":{\"438\":14}}],[\"path\",{\"1\":{\"139\":4,\"145\":6,\"151\":6,\"187\":1,\"191\":1,\"193\":1,\"195\":1,\"988\":1,\"1034\":1,\"1037\":1}}],[\"palette\",{\"1\":{\"30\":1}}],[\"page\",{\"1\":{\"30\":4,\"865\":1,\"866\":1,\"867\":1,\"868\":1}}],[\"pages\",{\"1\":{\"9\":1,\"11\":1}}],[\"pnpm\",{\"1\":{\"6\":1}}],[\"+2d\",{\"1\":{\"1005\":1,\"1006\":1}}],[\"+10d\",{\"1\":{\"1008\":1}}],[\"+1\",{\"1\":{\"358\":1,\"364\":1}}],[\"+nums\",{\"1\":{\"214\":1}}],[\"+=\",{\"1\":{\"208\":1,\"247\":1,\"390\":2,\"498\":2,\"636\":1,\"752\":3,\"760\":2}}],[\"++end\",{\"1\":{\"760\":1}}],[\"++n2\",{\"1\":{\"706\":1}}],[\"++n1\",{\"1\":{\"706\":1}}],[\"++left\",{\"1\":{\"692\":1,\"745\":2}}],[\"++r\",{\"1\":{\"734\":1}}],[\"++right\",{\"1\":{\"685\":1}}],[\"++res\",{\"1\":{\"664\":1,\"734\":1}}],[\"++y\",{\"1\":{\"496\":1}}],[\"++j\",{\"1\":{\"258\":1,\"287\":1,\"297\":1,\"331\":1,\"438\":1,\"605\":1,\"613\":1,\"629\":1,\"636\":3,\"656\":1}}],[\"++k\",{\"1\":{\"208\":1,\"679\":1}}],[\"++c2\",{\"1\":{\"706\":2}}],[\"++c1\",{\"1\":{\"706\":2}}],[\"++count\",{\"1\":{\"650\":1}}],[\"++cur\",{\"1\":{\"547\":1,\"565\":4}}],[\"++curlen\",{\"1\":{\"547\":1}}],[\"++cnt\",{\"1\":{\"377\":1,\"409\":1,\"415\":1,\"491\":1}}],[\"++c\",{\"1\":{\"168\":1,\"438\":1}}],[\"++i\",{\"1\":{\"132\":1,\"139\":1,\"151\":2,\"159\":1,\"168\":2,\"176\":1,\"208\":1,\"216\":1,\"258\":2,\"287\":2,\"307\":1,\"331\":1,\"377\":1,\"390\":1,\"396\":2,\"409\":1,\"438\":1,\"588\":1,\"597\":3,\"605\":2,\"613\":3,\"619\":3,\"629\":2,\"636\":3,\"650\":1,\"656\":3,\"685\":1,\"727\":1,\"734\":1,\"760\":3}}],[\"+\",{\"0\":{\"64\":1,\"109\":1},\"1\":{\"9\":1,\"70\":1,\"132\":1,\"139\":1,\"145\":2,\"159\":1,\"168\":3,\"176\":3,\"208\":1,\"216\":1,\"224\":3,\"234\":1,\"247\":2,\"256\":2,\"258\":4,\"265\":4,\"274\":1,\"275\":3,\"276\":4,\"286\":1,\"287\":9,\"293\":1,\"297\":4,\"304\":1,\"307\":1,\"314\":1,\"316\":1,\"318\":2,\"325\":1,\"331\":2,\"340\":1,\"342\":1,\"349\":2,\"358\":1,\"359\":3,\"364\":1,\"365\":3,\"377\":1,\"390\":1,\"396\":2,\"438\":2,\"491\":2,\"492\":1,\"547\":1,\"565\":4,\"579\":1,\"588\":1,\"605\":1,\"613\":4,\"636\":10,\"650\":5,\"656\":2,\"664\":3,\"679\":2,\"685\":3,\"692\":3,\"727\":3,\"733\":1,\"734\":1,\"752\":2,\"758\":1,\"760\":3,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"892\":1,\"941\":1,\"951\":1,\"952\":1,\"953\":1,\"957\":1,\"1041\":1,\"1062\":1,\"1063\":1,\"1064\":1,\"1065\":1}}],[\"用双指针从两端相向逼近并维护最大储水量\",{\"1\":{\"743\":1}}],[\"用weight\",{\"1\":{\"596\":1}}],[\"用最少数量的箭引爆气球\",{\"0\":{\"403\":1}}],[\"用动态规划解决\",{\"1\":{\"270\":1}}],[\"用于给各变量编号\",{\"1\":{\"597\":1}}],[\"用于快速查询某元素是否属于某集合\",{\"1\":{\"429\":1}}],[\"用于剪枝\",{\"1\":{\"176\":1}}],[\"用于在完成全部填充之后快速结束程序\",{\"1\":{\"175\":1}}],[\"用全排列的回溯模版也挺容易解\",{\"1\":{\"156\":1}}],[\"用前先测速\",{\"1\":{\"116\":1}}],[\"用的很可能不是同一个解释器\",{\"1\":{\"105\":1}}],[\"用\",{\"1\":{\"9\":1,\"75\":1,\"449\":1,\"821\":1}}],[\"发布\",{\"1\":{\"8\":1}}],[\"i|a\",{\"1\":{\"918\":1,\"921\":1}}],[\"i2\",{\"1\":{\"597\":5}}],[\"i1\",{\"1\":{\"597\":5}}],[\"i18n\",{\"1\":{\"30\":2}}],[\"it\",{\"1\":{\"636\":1,\"1096\":1}}],[\"its\",{\"1\":{\"579\":1,\"636\":1}}],[\"item\",{\"1\":{\"415\":3}}],[\"i=j\",{\"1\":{\"536\":1}}],[\"io\",{\"1\":{\"437\":1,\"791\":1}}],[\"i=z∑y​gas\",{\"1\":{\"387\":1}}],[\"i=x∑z​gas\",{\"1\":{\"385\":1}}],[\"iv\",{\"0\":{\"319\":1,\"344\":1},\"1\":{\"336\":1}}],[\"i−j\",{\"1\":{\"232\":2,\"536\":1}}],[\"i−1\",{\"1\":{\"129\":1,\"203\":1,\"206\":2}}],[\"is\",{\"1\":{\"565\":1,\"636\":2,\"976\":1,\"1074\":1}}],[\"isoverflow\",{\"1\":{\"492\":1}}],[\"ispoweroftwo\",{\"1\":{\"491\":1}}],[\"isend\",{\"1\":{\"440\":5}}],[\"isempty\",{\"1\":{\"196\":1,\"421\":3,\"427\":1,\"650\":1,\"664\":1}}],[\"issue\",{\"1\":{\"7\":1}}],[\"i++\",{\"1\":{\"176\":1,\"234\":1,\"265\":1,\"276\":3,\"318\":1,\"342\":1,\"440\":2,\"579\":1}}],[\"i+1\",{\"1\":{\"129\":1,\"203\":1,\"281\":1,\"285\":2,\"286\":2,\"293\":1,\"294\":1}}],[\"iii\",{\"0\":{\"217\":1,\"308\":1,\"516\":1},\"1\":{\"323\":1}}],[\"ii\",{\"0\":{\"124\":1,\"133\":1,\"209\":1,\"299\":1,\"371\":1,\"534\":1,\"686\":1,\"699\":1},\"1\":{\"143\":1,\"150\":1,\"312\":1,\"336\":1,\"450\":1}}],[\"ip\",{\"1\":{\"117\":1,\"122\":2}}],[\"ip$用来指定网络代理\",{\"1\":{\"108\":1}}],[\"i$home\",{\"1\":{\"74\":1}}],[\"i\",{\"1\":{\"51\":1,\"77\":1,\"129\":1,\"132\":5,\"139\":9,\"143\":4,\"151\":14,\"159\":4,\"167\":1,\"168\":7,\"174\":2,\"176\":19,\"179\":1,\"203\":1,\"205\":2,\"206\":3,\"208\":4,\"214\":5,\"216\":3,\"229\":2,\"230\":2,\"231\":2,\"232\":1,\"234\":7,\"258\":10,\"264\":1,\"265\":8,\"270\":2,\"271\":3,\"272\":2,\"273\":3,\"274\":4,\"275\":11,\"276\":17,\"283\":2,\"285\":1,\"286\":2,\"287\":11,\"292\":2,\"293\":2,\"294\":3,\"297\":12,\"301\":1,\"303\":2,\"304\":4,\"305\":4,\"306\":5,\"307\":4,\"310\":1,\"313\":3,\"314\":4,\"315\":5,\"316\":4,\"318\":6,\"321\":1,\"323\":2,\"324\":5,\"325\":5,\"331\":6,\"334\":1,\"338\":4,\"339\":3,\"340\":3,\"342\":4,\"358\":4,\"364\":4,\"377\":5,\"380\":2,\"385\":4,\"387\":6,\"390\":5,\"396\":8,\"405\":1,\"409\":4,\"438\":4,\"440\":6,\"487\":3,\"536\":1,\"579\":3,\"584\":1,\"588\":4,\"591\":3,\"597\":16,\"605\":12,\"608\":2,\"613\":14,\"616\":1,\"619\":13,\"622\":2,\"627\":1,\"629\":10,\"636\":24,\"650\":6,\"656\":13,\"685\":9,\"709\":1,\"727\":8,\"733\":1,\"734\":5,\"748\":3,\"752\":4,\"755\":1,\"758\":2,\"760\":13,\"919\":1,\"943\":1,\"945\":1,\"1025\":1,\"1101\":1}}],[\"id++\",{\"1\":{\"597\":2}}],[\"idx++\",{\"1\":{\"752\":1}}],[\"idxmail\",{\"1\":{\"629\":3}}],[\"idx\",{\"1\":{\"176\":9,\"440\":7,\"629\":2,\"752\":8}}],[\"id=1736483147\",{\"1\":{\"51\":1}}],[\"id\",{\"1\":{\"50\":1,\"51\":1,\"52\":1,\"597\":1,\"605\":5,\"918\":1}}],[\"if\",{\"1\":{\"46\":1,\"132\":2,\"139\":3,\"145\":4,\"151\":2,\"159\":1,\"168\":2,\"176\":3,\"196\":1,\"216\":3,\"224\":1,\"258\":2,\"265\":1,\"276\":2,\"287\":3,\"297\":1,\"331\":1,\"349\":1,\"359\":1,\"365\":1,\"377\":1,\"390\":1,\"396\":1,\"409\":3,\"415\":1,\"421\":2,\"438\":1,\"440\":3,\"491\":1,\"523\":2,\"547\":2,\"565\":4,\"588\":1,\"597\":3,\"605\":4,\"613\":2,\"619\":1,\"629\":1,\"636\":9,\"650\":4,\"656\":2,\"664\":4,\"679\":1,\"685\":1,\"692\":2,\"706\":9,\"727\":4,\"745\":2,\"760\":2,\"810\":1,\"959\":1,\"960\":1,\"961\":1,\"992\":1,\"1011\":1}}],[\"implements\",{\"1\":{\"810\":1}}],[\"import\",{\"1\":{\"30\":1,\"46\":1,\"810\":1,\"886\":1}}],[\"img=925\",{\"1\":{\"46\":1}}],[\"img\",{\"1\":{\"46\":1}}],[\"inner\",{\"1\":{\"919\":1}}],[\"indentation\",{\"1\":{\"905\":1,\"906\":1,\"1026\":1}}],[\"index\",{\"1\":{\"613\":5,\"629\":2}}],[\"in对数组循环得到的元素为字符串\",{\"1\":{\"818\":1}}],[\"in\",{\"0\":{\"974\":1,\"982\":1,\"1046\":1},\"1\":{\"810\":1,\"886\":1,\"959\":1,\"960\":1,\"961\":1,\"967\":1,\"985\":1,\"999\":1,\"1010\":1,\"1022\":1,\"1023\":1,\"1026\":1,\"1033\":1,\"1036\":1,\"1042\":1,\"1054\":1,\"1092\":1,\"1098\":1}}],[\"init\",{\"1\":{\"636\":1}}],[\"input\",{\"1\":{\"529\":1,\"625\":1,\"674\":1,\"696\":1,\"710\":1,\"877\":1,\"1010\":1}}],[\"instead\",{\"1\":{\"1074\":1}}],[\"instanceof可区分数组和对象\",{\"1\":{\"828\":1}}],[\"instanceof\",{\"1\":{\"810\":1}}],[\"install\",{\"1\":{\"30\":1,\"73\":1,\"76\":1}}],[\"insensitive\",{\"1\":{\"1025\":1}}],[\"insert\",{\"0\":{\"950\":1,\"982\":1},\"1\":{\"440\":1,\"899\":1,\"935\":1,\"943\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":2,\"948\":2,\"949\":1,\"985\":1,\"1101\":1}}],[\"inside\",{\"1\":{\"1002\":1}}],[\"inspect\",{\"1\":{\"981\":1}}],[\"include\",{\"1\":{\"97\":1}}],[\"intconsumer\",{\"1\":{\"565\":2}}],[\"interruptedexception\",{\"1\":{\"565\":8,\"579\":1}}],[\"intervalsi​=\",{\"1\":{\"412\":1}}],[\"intervals\",{\"1\":{\"412\":1,\"415\":3}}],[\"interface\",{\"1\":{\"30\":2,\"810\":1}}],[\"integer>\",{\"1\":{\"597\":1,\"629\":1}}],[\"integerbreak\",{\"1\":{\"234\":1}}],[\"integer\",{\"1\":{\"145\":1,\"247\":2,\"415\":1,\"491\":2,\"523\":1,\"565\":1,\"597\":2}}],[\"int\",{\"1\":{\"132\":4,\"139\":6,\"145\":4,\"151\":2,\"159\":5,\"168\":11,\"176\":8,\"208\":6,\"216\":10,\"224\":9,\"234\":6,\"247\":5,\"258\":8,\"265\":6,\"276\":8,\"287\":6,\"297\":6,\"307\":4,\"318\":5,\"331\":9,\"342\":7,\"349\":7,\"359\":7,\"365\":7,\"377\":4,\"390\":6,\"396\":5,\"409\":7,\"415\":5,\"421\":3,\"427\":2,\"438\":8,\"440\":4,\"487\":4,\"491\":5,\"492\":3,\"496\":1,\"498\":2,\"500\":6,\"523\":7,\"547\":7,\"565\":4,\"579\":4,\"588\":12,\"597\":17,\"605\":23,\"613\":20,\"619\":11,\"629\":10,\"636\":33,\"650\":5,\"656\":14,\"664\":12,\"679\":10,\"685\":6,\"692\":7,\"706\":5,\"714\":7,\"727\":2,\"734\":4,\"745\":4,\"752\":11,\"760\":13}}],[\"intro\",{\"1\":{\"30\":6}}],[\"info\",{\"1\":{\"19\":1,\"30\":2}}],[\"icon\",{\"1\":{\"30\":21}}],[\"iconfont\",{\"1\":{\"4\":1}}],[\"编号\",{\"1\":{\"571\":1}}],[\"编辑距离\",{\"0\":{\"266\":1}}],[\"编译\",{\"0\":{\"109\":1}}],[\"编译时报错参考\",{\"1\":{\"7\":1}}],[\"编码映射\",{\"1\":{\"42\":1}}],[\"编写时开本地服务器实时查看修改效果\",{\"1\":{\"6\":1}}],[\"d>\",{\"1\":{\"1096\":1}}],[\"ds\",{\"1\":{\"1047\":1,\"1048\":1,\"1049\":1}}],[\"duplicate\",{\"1\":{\"970\":1}}],[\"dh\",{\"1\":{\"934\":1}}],[\"dlp\",{\"1\":{\"972\":1}}],[\"dl\",{\"1\":{\"933\":1}}],[\"ddp\",{\"1\":{\"971\":2}}],[\"dd\",{\"1\":{\"908\":1}}],[\"d0\",{\"1\":{\"897\":1}}],[\"dt\",{\"1\":{\"897\":1}}],[\"df\",{\"1\":{\"897\":1}}],[\"dfs\",{\"1\":{\"139\":3,\"145\":4,\"151\":3,\"176\":3,\"183\":3,\"184\":1,\"185\":1,\"196\":3,\"221\":2,\"224\":4,\"449\":1,\"656\":6,\"662\":1}}],[\"d5j\",{\"1\":{\"897\":1}}],[\"d\",{\"1\":{\"613\":3,\"636\":3,\"656\":3,\"664\":3,\"865\":1,\"897\":1,\"901\":1,\"910\":1,\"975\":1,\"1001\":1,\"1007\":1,\"1010\":1}}],[\"dj\",{\"1\":{\"592\":2}}],[\"dmodp\",{\"1\":{\"513\":1}}],[\"dmz\",{\"1\":{\"117\":2,\"118\":2,\"122\":2}}],[\"dp\",{\"1\":{\"214\":3,\"229\":1,\"230\":1,\"232\":1,\"234\":5,\"256\":2,\"258\":6,\"265\":7,\"274\":3,\"275\":6,\"276\":10,\"282\":1,\"283\":1,\"285\":1,\"286\":2,\"287\":8,\"293\":1,\"294\":2,\"295\":1,\"297\":8,\"312\":1,\"349\":6,\"358\":2,\"359\":8,\"364\":2,\"365\":8,\"438\":8,\"475\":1,\"477\":1,\"479\":1,\"480\":1,\"481\":2}}],[\"d2\",{\"1\":{\"168\":4}}],[\"d1\",{\"1\":{\"168\":4}}],[\"dirs\",{\"1\":{\"613\":2,\"636\":2,\"656\":2,\"664\":2}}],[\"diningphilosophers\",{\"1\":{\"579\":2}}],[\"different\",{\"1\":{\"969\":1}}],[\"diff\",{\"1\":{\"498\":3}}],[\"dijkstra\",{\"0\":{\"489\":1}}],[\"diag2\",{\"1\":{\"168\":5}}],[\"diag\",{\"1\":{\"168\":2}}],[\"diag1\",{\"1\":{\"168\":5}}],[\"div\",{\"1\":{\"159\":6}}],[\"dispatch\",{\"1\":{\"78\":1}}],[\"discover\",{\"1\":{\"30\":1}}],[\"dist目录下生成静态网页文件\",{\"1\":{\"12\":1}}],[\"dynamic\",{\"1\":{\"159\":5}}],[\"dns\",{\"1\":{\"116\":4}}],[\"do\",{\"1\":{\"810\":1}}],[\"downwards\",{\"1\":{\"861\":1}}],[\"down\",{\"1\":{\"636\":1,\"865\":1,\"867\":1,\"869\":1,\"1098\":1}}],[\"download\",{\"1\":{\"106\":1}}],[\"double\",{\"1\":{\"597\":8,\"907\":1}}],[\"documents\",{\"1\":{\"91\":1}}],[\"documentroot\",{\"1\":{\"91\":1,\"101\":1}}],[\"docs\",{\"0\":{\"1103\":1},\"1\":{\"6\":1,\"12\":1}}],[\"dab\",{\"1\":{\"931\":2}}],[\"dap\",{\"1\":{\"931\":1}}],[\"da\",{\"1\":{\"931\":5}}],[\"das\",{\"1\":{\"931\":1}}],[\"daw\",{\"1\":{\"931\":1}}],[\"data\",{\"1\":{\"650\":7}}],[\"dataset\",{\"1\":{\"106\":1}}],[\"darkmode\",{\"1\":{\"30\":1}}],[\"danger\",{\"1\":{\"19\":1}}],[\"d35400\",{\"1\":{\"28\":1}}],[\"describe\",{\"1\":{\"1018\":1}}],[\"description\",{\"1\":{\"125\":1,\"134\":1,\"141\":1,\"147\":1,\"153\":1,\"161\":1,\"170\":1,\"178\":1,\"200\":1,\"210\":1,\"218\":1,\"226\":1,\"236\":1,\"240\":1,\"249\":1,\"261\":1,\"267\":1,\"278\":1,\"289\":1,\"300\":1,\"309\":1,\"320\":1,\"333\":1,\"345\":1,\"351\":1,\"355\":1,\"361\":1,\"368\":1,\"372\":1,\"379\":1,\"392\":1,\"398\":1,\"404\":1,\"411\":1,\"517\":1,\"526\":1,\"535\":1,\"539\":1,\"543\":1,\"549\":1,\"553\":1,\"557\":1,\"567\":1,\"582\":1,\"590\":1,\"599\":1,\"607\":1,\"615\":1,\"621\":1,\"631\":1,\"639\":1,\"643\":1,\"652\":1,\"658\":1,\"666\":1,\"672\":1,\"681\":1,\"687\":1,\"694\":1,\"700\":1,\"708\":1,\"716\":1,\"720\":1,\"729\":1,\"736\":1,\"740\":1,\"747\":1,\"754\":1,\"762\":1}}],[\"deadends\",{\"1\":{\"650\":2}}],[\"delete\",{\"1\":{\"810\":1,\"910\":1,\"951\":1,\"952\":1,\"953\":1,\"979\":1,\"1001\":1,\"1002\":1,\"1048\":1}}],[\"deletecharat\",{\"1\":{\"151\":1}}],[\"delta\",{\"1\":{\"605\":1,\"636\":2}}],[\"debugger\",{\"1\":{\"810\":1}}],[\"debug\",{\"1\":{\"565\":1}}],[\"deque\",{\"1\":{\"421\":10}}],[\"deque<integer>\",{\"1\":{\"421\":1,\"427\":1}}],[\"define\",{\"1\":{\"1017\":1}}],[\"definesidebarconfig\",{\"1\":{\"30\":2}}],[\"definition\",{\"1\":{\"884\":1,\"885\":1}}],[\"default\",{\"1\":{\"810\":1,\"976\":1}}],[\"def\",{\"1\":{\"46\":2}}],[\"deploy\",{\"1\":{\"30\":1}}],[\"demo\",{\"1\":{\"30\":3}}],[\"details\",{\"1\":{\"19\":1,\"51\":1}}],[\"dev\",{\"1\":{\"6\":1}}],[\"框架\",{\"1\":{\"3\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,Et(t,{fields:[p.heading,p.text,p.customFields],storeFields:[p.heading,p.text,p.customFields]})]));self.onmessage=({data:{query:e,locale:t,options:s}})=>{self.postMessage(kt(e,vt[t],s))};
//# sourceMappingURL=index.js.map
