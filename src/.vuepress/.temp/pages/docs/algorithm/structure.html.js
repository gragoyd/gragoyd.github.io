export const data = JSON.parse("{\"key\":\"v-679aa9e1\",\"path\":\"/docs/algorithm/structure.html\",\"title\":\"数据结构\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"数据结构\",\"icon\":\"float\",\"category\":[\"algorithm\"],\"tag\":[\"structure\"],\"description\":\"链表 [环形链表 II][00] Description 找出链表入环处的节点（有环的话） Solution 先说结论：对于有环的情况，快慢指针会在环内相遇，相遇后拿一个到链表头，俩指针同时同速开始遍历，相遇处即为入环节点 证明：设链表入环前路径长度为 $x$ ，从入环处顺序到快慢指针相遇点路径长度为 $y$ ，环剩余长度为 $z$ 设第一次相遇时，快...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://gragoyd.github.io/docs/algorithm/structure.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Grag's Docs\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"数据结构\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"链表 [环形链表 II][00] Description 找出链表入环处的节点（有环的话） Solution 先说结论：对于有环的情况，快慢指针会在环内相遇，相遇后拿一个到链表头，俩指针同时同速开始遍历，相遇处即为入环节点 证明：设链表入环前路径长度为 $x$ ，从入环处顺序到快慢指针相遇点路径长度为 $y$ ，环剩余长度为 $z$ 设第一次相遇时，快...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Grag\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"structure\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"数据结构\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Grag\\\",\\\"url\\\":\\\"https://github.com/gragoyd\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"链表\",\"slug\":\"链表\",\"link\":\"#链表\",\"children\":[{\"level\":3,\"title\":\"环形链表 II\",\"slug\":\"环形链表-ii\",\"link\":\"#环形链表-ii\",\"children\":[]},{\"level\":3,\"title\":\"相交链表\",\"slug\":\"相交链表\",\"link\":\"#相交链表\",\"children\":[]},{\"level\":3,\"title\":\"旋转链表\",\"slug\":\"旋转链表\",\"link\":\"#旋转链表\",\"children\":[]},{\"level\":3,\"title\":\"回文链表\",\"slug\":\"回文链表\",\"link\":\"#回文链表\",\"children\":[]},{\"level\":3,\"title\":\"合并 K 个升序链表\",\"slug\":\"合并-k-个升序链表\",\"link\":\"#合并-k-个升序链表\",\"children\":[]},{\"level\":3,\"title\":\"奇升偶降链表排序\",\"slug\":\"奇升偶降链表排序\",\"link\":\"#奇升偶降链表排序\",\"children\":[]},{\"level\":3,\"title\":\"LRU 缓存机制\",\"slug\":\"lru-缓存机制\",\"link\":\"#lru-缓存机制\",\"children\":[]}]},{\"level\":2,\"title\":\"队列\",\"slug\":\"队列\",\"link\":\"#队列\",\"children\":[{\"level\":3,\"title\":\"滑动窗口最大值\",\"slug\":\"滑动窗口最大值\",\"link\":\"#滑动窗口最大值\",\"children\":[]}]},{\"level\":2,\"title\":\"栈\",\"slug\":\"栈\",\"link\":\"#栈\",\"children\":[{\"level\":3,\"title\":\"最长有效括号\",\"slug\":\"最长有效括号\",\"link\":\"#最长有效括号\",\"children\":[]},{\"level\":3,\"title\":\"字符串解码\",\"slug\":\"字符串解码\",\"link\":\"#字符串解码\",\"children\":[]},{\"level\":3,\"title\":\"柱状图中最大的矩形\",\"slug\":\"柱状图中最大的矩形\",\"link\":\"#柱状图中最大的矩形\",\"children\":[]},{\"level\":3,\"title\":\"监控二叉树\",\"slug\":\"监控二叉树\",\"link\":\"#监控二叉树\",\"children\":[]}]}],\"readingTime\":{\"minutes\":30.73,\"words\":9219},\"filePathRelative\":\"docs/algorithm/structure.md\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
