export default "{\"documentCount\":1071,\"nextId\":1071,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#0/0\",\"2\":\"v-8daa1a0e#0/1\",\"3\":\"v-8daa1a0e#0/2\",\"4\":\"v-8daa1a0e#0/3\",\"5\":\"v-8daa1a0e#1\",\"6\":\"v-8daa1a0e#1/0\",\"7\":\"v-8daa1a0e#1/1\",\"8\":\"v-8daa1a0e#1/2\",\"9\":\"v-8daa1a0e#1/3\",\"10\":\"v-4a2605fe\",\"11\":\"v-4a2605fe#1\",\"12\":\"v-4a2605fe#1/0\",\"13\":\"v-4a2605fe#2\",\"14\":\"v-4a2605fe#3\",\"15\":\"v-4a2605fe#4\",\"16\":\"v-4a2605fe#4/0\",\"17\":\"v-4a2605fe#4/1\",\"18\":\"v-4a2605fe#5\",\"19\":\"v-4a2605fe#5/0\",\"20\":\"v-4a2605fe#6\",\"21\":\"v-4a2605fe#7\",\"22\":\"v-4a2605fe#7/0\",\"23\":\"v-4a2605fe#8\",\"24\":\"v-4a2605fe#8/0\",\"25\":\"v-4a2605fe#8/1\",\"26\":\"v-7d42e7fb\",\"27\":\"v-7d42e7fb#0/0\",\"28\":\"v-7971eb74\",\"29\":\"v-479edf49\",\"30\":\"v-479edf49#0/0\",\"31\":\"v-9caf75e6\",\"32\":\"v-9caf75e6#1\",\"33\":\"v-9caf75e6#1/0\",\"34\":\"v-5f474719\",\"35\":\"v-5f474719#1\",\"36\":\"v-5f474719#1/0\",\"37\":\"v-5f474719#1/1\",\"38\":\"v-5f474719#1/2\",\"39\":\"v-5f474719#1/3\",\"40\":\"v-5f474719#1/4\",\"41\":\"v-9ad09bde\",\"42\":\"v-9ad09bde#0/0\",\"43\":\"v-9ad09bde#0/1\",\"44\":\"v-2efce1da\",\"45\":\"v-2efce1da#1\",\"46\":\"v-2efce1da#1/0\",\"47\":\"v-2efce1da#1/1\",\"48\":\"v-2efce1da#1/2\",\"49\":\"v-2efce1da#1/3\",\"50\":\"v-2efce1da#1/4\",\"51\":\"v-2efce1da#1/5\",\"52\":\"v-2efce1da#1/6\",\"53\":\"v-2efce1da#1/7\",\"54\":\"v-2efce1da#1/8\",\"55\":\"v-2efce1da#1/9\",\"56\":\"v-2efce1da#1/10\",\"57\":\"v-2efce1da#2\",\"58\":\"v-2efce1da#2/0\",\"59\":\"v-2efce1da#2/1\",\"60\":\"v-2efce1da#2/2\",\"61\":\"v-2efce1da#3\",\"62\":\"v-2efce1da#4\",\"63\":\"v-2efce1da#4/0\",\"64\":\"v-2efce1da#4/1\",\"65\":\"v-2efce1da#4/2\",\"66\":\"v-2efce1da#5\",\"67\":\"v-2efce1da#5/0\",\"68\":\"v-2efce1da#5/1\",\"69\":\"v-2efce1da#5/2\",\"70\":\"v-2efce1da#5/3\",\"71\":\"v-2efce1da#5/4\",\"72\":\"v-2efce1da#5/5\",\"73\":\"v-2efce1da#5/6\",\"74\":\"v-2efce1da#5/7\",\"75\":\"v-2efce1da#5/8\",\"76\":\"v-2efce1da#5/9\",\"77\":\"v-2efce1da#5/10\",\"78\":\"v-2efce1da#6\",\"79\":\"v-2efce1da#6/0\",\"80\":\"v-2efce1da#7\",\"81\":\"v-2efce1da#7/0\",\"82\":\"v-2efce1da#7/1\",\"83\":\"v-2efce1da#7/2\",\"84\":\"v-2efce1da#7/3\",\"85\":\"v-2efce1da#7/4\",\"86\":\"v-2efce1da#7/5\",\"87\":\"v-2efce1da#7/6\",\"88\":\"v-2efce1da#7/7\",\"89\":\"v-2efce1da#7/8\",\"90\":\"v-2efce1da#7/9\",\"91\":\"v-2efce1da#7/10\",\"92\":\"v-2efce1da#7/11\",\"93\":\"v-2efce1da#7/12\",\"94\":\"v-2efce1da#7/13\",\"95\":\"v-2efce1da#7/14\",\"96\":\"v-2efce1da#7/15\",\"97\":\"v-2efce1da#7/16\",\"98\":\"v-2efce1da#7/17\",\"99\":\"v-2efce1da#7/18\",\"100\":\"v-2efce1da#7/19\",\"101\":\"v-2efce1da#8\",\"102\":\"v-2efce1da#8/0\",\"103\":\"v-2efce1da#8/1\",\"104\":\"v-2efce1da#8/2\",\"105\":\"v-2efce1da#8/3\",\"106\":\"v-2efce1da#9\",\"107\":\"v-2efce1da#9/0\",\"108\":\"v-2efce1da#9/1\",\"109\":\"v-2efce1da#9/2\",\"110\":\"v-2efce1da#9/3\",\"111\":\"v-2efce1da#10\",\"112\":\"v-2efce1da#10/0\",\"113\":\"v-2efce1da#10/1\",\"114\":\"v-2efce1da#10/2\",\"115\":\"v-2efce1da#10/3\",\"116\":\"v-2efce1da#10/4\",\"117\":\"v-2efce1da#10/5\",\"118\":\"v-2efce1da#10/6\",\"119\":\"v-2efce1da#10/7\",\"120\":\"v-534edd30\",\"121\":\"v-534edd30#1\",\"122\":\"v-534edd30#1/0\",\"123\":\"v-534edd30#1/1\",\"124\":\"v-534edd30#1/2\",\"125\":\"v-534edd30#1/3\",\"126\":\"v-534edd30#1/4\",\"127\":\"v-534edd30#1/5\",\"128\":\"v-534edd30#1/6\",\"129\":\"v-534edd30#1/7\",\"130\":\"v-534edd30#2\",\"131\":\"v-534edd30#2/8\",\"132\":\"v-534edd30#2/9\",\"133\":\"v-534edd30#2/10\",\"134\":\"v-534edd30#2/11\",\"135\":\"v-534edd30#2/12\",\"136\":\"v-534edd30#2/13\",\"137\":\"v-534edd30#3\",\"138\":\"v-534edd30#3/14\",\"139\":\"v-534edd30#3/15\",\"140\":\"v-534edd30#3/16\",\"141\":\"v-534edd30#3/17\",\"142\":\"v-534edd30#3/18\",\"143\":\"v-534edd30#4\",\"144\":\"v-534edd30#4/19\",\"145\":\"v-534edd30#4/20\",\"146\":\"v-534edd30#4/21\",\"147\":\"v-534edd30#4/22\",\"148\":\"v-534edd30#4/23\",\"149\":\"v-534edd30#5\",\"150\":\"v-534edd30#5/24\",\"151\":\"v-534edd30#5/25\",\"152\":\"v-534edd30#5/26\",\"153\":\"v-534edd30#5/27\",\"154\":\"v-534edd30#5/28\",\"155\":\"v-534edd30#5/29\",\"156\":\"v-534edd30#5/30\",\"157\":\"v-534edd30#6\",\"158\":\"v-534edd30#6/31\",\"159\":\"v-534edd30#6/32\",\"160\":\"v-534edd30#6/33\",\"161\":\"v-534edd30#6/34\",\"162\":\"v-534edd30#6/35\",\"163\":\"v-534edd30#6/36\",\"164\":\"v-534edd30#6/37\",\"165\":\"v-534edd30#6/38\",\"166\":\"v-534edd30#7\",\"167\":\"v-534edd30#7/39\",\"168\":\"v-534edd30#7/40\",\"169\":\"v-534edd30#7/41\",\"170\":\"v-534edd30#7/42\",\"171\":\"v-534edd30#7/43\",\"172\":\"v-534edd30#7/44\",\"173\":\"v-534edd30#7/45\",\"174\":\"v-534edd30#8\",\"175\":\"v-534edd30#8/46\",\"176\":\"v-534edd30#8/47\",\"177\":\"v-534edd30#8/48\",\"178\":\"v-534edd30#8/49\",\"179\":\"v-534edd30#8/50\",\"180\":\"v-534edd30#8/51\",\"181\":\"v-534edd30#8/52\",\"182\":\"v-534edd30#8/53\",\"183\":\"v-534edd30#8/54\",\"184\":\"v-534edd30#8/55\",\"185\":\"v-534edd30#8/56\",\"186\":\"v-534edd30#8/57\",\"187\":\"v-534edd30#8/58\",\"188\":\"v-534edd30#8/59\",\"189\":\"v-534edd30#8/60\",\"190\":\"v-534edd30#8/61\",\"191\":\"v-534edd30#8/62\",\"192\":\"v-534edd30#8/63\",\"193\":\"v-534edd30#8/64\",\"194\":\"v-d843ef0a\",\"195\":\"v-d843ef0a#1\",\"196\":\"v-d843ef0a#2\",\"197\":\"v-d843ef0a#2/0\",\"198\":\"v-d843ef0a#2/1\",\"199\":\"v-d843ef0a#2/2\",\"200\":\"v-d843ef0a#2/3\",\"201\":\"v-d843ef0a#2/4\",\"202\":\"v-d843ef0a#2/5\",\"203\":\"v-d843ef0a#2/6\",\"204\":\"v-d843ef0a#2/7\",\"205\":\"v-d843ef0a#2/8\",\"206\":\"v-d843ef0a#3\",\"207\":\"v-d843ef0a#3/9\",\"208\":\"v-d843ef0a#3/10\",\"209\":\"v-d843ef0a#3/11\",\"210\":\"v-d843ef0a#3/12\",\"211\":\"v-d843ef0a#3/13\",\"212\":\"v-d843ef0a#3/14\",\"213\":\"v-d843ef0a#3/15\",\"214\":\"v-d843ef0a#4\",\"215\":\"v-d843ef0a#4/16\",\"216\":\"v-d843ef0a#4/17\",\"217\":\"v-d843ef0a#4/18\",\"218\":\"v-d843ef0a#4/19\",\"219\":\"v-d843ef0a#4/20\",\"220\":\"v-d843ef0a#4/21\",\"221\":\"v-d843ef0a#4/22\",\"222\":\"v-d843ef0a#5\",\"223\":\"v-d843ef0a#5/23\",\"224\":\"v-d843ef0a#5/24\",\"225\":\"v-d843ef0a#5/25\",\"226\":\"v-d843ef0a#5/26\",\"227\":\"v-d843ef0a#5/27\",\"228\":\"v-d843ef0a#5/28\",\"229\":\"v-d843ef0a#5/29\",\"230\":\"v-d843ef0a#5/30\",\"231\":\"v-d843ef0a#5/31\",\"232\":\"v-d843ef0a#6\",\"233\":\"v-d843ef0a#6/32\",\"234\":\"v-d843ef0a#6/33\",\"235\":\"v-d843ef0a#6/34\",\"236\":\"v-d843ef0a#7\",\"237\":\"v-d843ef0a#7/0\",\"238\":\"v-d843ef0a#7/1\",\"239\":\"v-d843ef0a#7/2\",\"240\":\"v-d843ef0a#7/3\",\"241\":\"v-d843ef0a#7/4\",\"242\":\"v-d843ef0a#7/5\",\"243\":\"v-d843ef0a#7/6\",\"244\":\"v-d843ef0a#7/7\",\"245\":\"v-d843ef0a#8\",\"246\":\"v-d843ef0a#8/8\",\"247\":\"v-d843ef0a#8/9\",\"248\":\"v-d843ef0a#8/10\",\"249\":\"v-d843ef0a#8/11\",\"250\":\"v-d843ef0a#8/12\",\"251\":\"v-d843ef0a#8/13\",\"252\":\"v-d843ef0a#8/14\",\"253\":\"v-d843ef0a#8/15\",\"254\":\"v-d843ef0a#8/16\",\"255\":\"v-d843ef0a#8/17\",\"256\":\"v-d843ef0a#9\",\"257\":\"v-d843ef0a#10\",\"258\":\"v-d843ef0a#10/18\",\"259\":\"v-d843ef0a#10/19\",\"260\":\"v-d843ef0a#10/20\",\"261\":\"v-d843ef0a#10/21\",\"262\":\"v-d843ef0a#10/22\",\"263\":\"v-d843ef0a#11\",\"264\":\"v-d843ef0a#11/23\",\"265\":\"v-d843ef0a#11/24\",\"266\":\"v-d843ef0a#11/25\",\"267\":\"v-d843ef0a#11/26\",\"268\":\"v-d843ef0a#11/27\",\"269\":\"v-d843ef0a#11/28\",\"270\":\"v-d843ef0a#11/29\",\"271\":\"v-d843ef0a#11/30\",\"272\":\"v-d843ef0a#11/31\",\"273\":\"v-d843ef0a#11/32\",\"274\":\"v-d843ef0a#12\",\"275\":\"v-d843ef0a#12/33\",\"276\":\"v-d843ef0a#12/34\",\"277\":\"v-d843ef0a#12/35\",\"278\":\"v-d843ef0a#12/36\",\"279\":\"v-d843ef0a#12/37\",\"280\":\"v-d843ef0a#12/38\",\"281\":\"v-d843ef0a#12/39\",\"282\":\"v-d843ef0a#12/40\",\"283\":\"v-d843ef0a#12/41\",\"284\":\"v-d843ef0a#12/42\",\"285\":\"v-d843ef0a#13\",\"286\":\"v-d843ef0a#13/43\",\"287\":\"v-d843ef0a#13/44\",\"288\":\"v-d843ef0a#13/45\",\"289\":\"v-d843ef0a#13/46\",\"290\":\"v-d843ef0a#13/47\",\"291\":\"v-d843ef0a#13/48\",\"292\":\"v-d843ef0a#13/49\",\"293\":\"v-d843ef0a#13/50\",\"294\":\"v-d843ef0a#13/51\",\"295\":\"v-d843ef0a#14\",\"296\":\"v-d843ef0a#15\",\"297\":\"v-d843ef0a#15/52\",\"298\":\"v-d843ef0a#15/53\",\"299\":\"v-d843ef0a#15/54\",\"300\":\"v-d843ef0a#15/55\",\"301\":\"v-d843ef0a#15/56\",\"302\":\"v-d843ef0a#15/57\",\"303\":\"v-d843ef0a#15/58\",\"304\":\"v-d843ef0a#15/59\",\"305\":\"v-d843ef0a#16\",\"306\":\"v-d843ef0a#16/60\",\"307\":\"v-d843ef0a#16/61\",\"308\":\"v-d843ef0a#16/62\",\"309\":\"v-d843ef0a#16/63\",\"310\":\"v-d843ef0a#16/64\",\"311\":\"v-d843ef0a#16/65\",\"312\":\"v-d843ef0a#16/66\",\"313\":\"v-d843ef0a#16/67\",\"314\":\"v-d843ef0a#16/68\",\"315\":\"v-d843ef0a#16/69\",\"316\":\"v-d843ef0a#17\",\"317\":\"v-d843ef0a#17/70\",\"318\":\"v-d843ef0a#17/71\",\"319\":\"v-d843ef0a#17/72\",\"320\":\"v-d843ef0a#17/73\",\"321\":\"v-d843ef0a#17/74\",\"322\":\"v-d843ef0a#17/75\",\"323\":\"v-d843ef0a#17/76\",\"324\":\"v-d843ef0a#17/77\",\"325\":\"v-d843ef0a#17/78\",\"326\":\"v-d843ef0a#17/79\",\"327\":\"v-d843ef0a#17/80\",\"328\":\"v-d843ef0a#17/81\",\"329\":\"v-d843ef0a#18\",\"330\":\"v-d843ef0a#18/82\",\"331\":\"v-d843ef0a#18/83\",\"332\":\"v-d843ef0a#18/84\",\"333\":\"v-d843ef0a#18/85\",\"334\":\"v-d843ef0a#18/86\",\"335\":\"v-d843ef0a#18/87\",\"336\":\"v-d843ef0a#18/88\",\"337\":\"v-d843ef0a#18/89\",\"338\":\"v-d843ef0a#18/90\",\"339\":\"v-d843ef0a#18/91\",\"340\":\"v-d843ef0a#19\",\"341\":\"v-d843ef0a#20\",\"342\":\"v-d843ef0a#20/92\",\"343\":\"v-d843ef0a#20/93\",\"344\":\"v-d843ef0a#20/94\",\"345\":\"v-d843ef0a#20/95\",\"346\":\"v-d843ef0a#20/96\",\"347\":\"v-d843ef0a#21\",\"348\":\"v-d843ef0a#21/97\",\"349\":\"v-d843ef0a#21/98\",\"350\":\"v-d843ef0a#21/99\",\"351\":\"v-d843ef0a#22\",\"352\":\"v-d843ef0a#22/0\",\"353\":\"v-d843ef0a#22/1\",\"354\":\"v-d843ef0a#22/2\",\"355\":\"v-d843ef0a#22/3\",\"356\":\"v-d843ef0a#22/4\",\"357\":\"v-d843ef0a#23\",\"358\":\"v-d843ef0a#23/5\",\"359\":\"v-d843ef0a#23/6\",\"360\":\"v-d843ef0a#23/7\",\"361\":\"v-d843ef0a#23/8\",\"362\":\"v-d843ef0a#23/9\",\"363\":\"v-36d6919b\",\"364\":\"v-36d6919b#1\",\"365\":\"v-36d6919b#1/0\",\"366\":\"v-36d6919b#1/1\",\"367\":\"v-36d6919b#1/2\",\"368\":\"v-36d6919b#2\",\"369\":\"v-36d6919b#2/0\",\"370\":\"v-36d6919b#2/1\",\"371\":\"v-36d6919b#2/2\",\"372\":\"v-36d6919b#2/3\",\"373\":\"v-36d6919b#2/4\",\"374\":\"v-36d6919b#2/5\",\"375\":\"v-36d6919b#3\",\"376\":\"v-36d6919b#3/6\",\"377\":\"v-36d6919b#3/7\",\"378\":\"v-36d6919b#3/8\",\"379\":\"v-36d6919b#3/9\",\"380\":\"v-36d6919b#3/10\",\"381\":\"v-36d6919b#3/11\",\"382\":\"v-36d6919b#3/12\",\"383\":\"v-36d6919b#3/13\",\"384\":\"v-36d6919b#3/14\",\"385\":\"v-36d6919b#3/15\",\"386\":\"v-36d6919b#3/16\",\"387\":\"v-36d6919b#3/17\",\"388\":\"v-36d6919b#4\",\"389\":\"v-36d6919b#4/18\",\"390\":\"v-36d6919b#4/19\",\"391\":\"v-36d6919b#4/20\",\"392\":\"v-36d6919b#4/21\",\"393\":\"v-36d6919b#4/22\",\"394\":\"v-36d6919b#5\",\"395\":\"v-36d6919b#5/23\",\"396\":\"v-36d6919b#5/24\",\"397\":\"v-36d6919b#5/25\",\"398\":\"v-36d6919b#5/26\",\"399\":\"v-36d6919b#5/27\",\"400\":\"v-36d6919b#6\",\"401\":\"v-36d6919b#6/0\",\"402\":\"v-36d6919b#6/1\",\"403\":\"v-36d6919b#6/2\",\"404\":\"v-36d6919b#6/3\",\"405\":\"v-36d6919b#6/4\",\"406\":\"v-36d6919b#6/5\",\"407\":\"v-36d6919b#7\",\"408\":\"v-36d6919b#7/6\",\"409\":\"v-36d6919b#7/7\",\"410\":\"v-36d6919b#7/8\",\"411\":\"v-36d6919b#7/9\",\"412\":\"v-36d6919b#7/10\",\"413\":\"v-e1eec494\",\"414\":\"v-e1eec494#1\",\"415\":\"v-e1eec494#2\",\"416\":\"v-e1eec494#3\",\"417\":\"v-e1eec494#3/0\",\"418\":\"v-e1eec494#3/1\",\"419\":\"v-e1eec494#4\",\"420\":\"v-e1eec494#5\",\"421\":\"v-e1eec494#6\",\"422\":\"v-e1eec494#6/2\",\"423\":\"v-e1eec494#6/3\",\"424\":\"v-e1eec494#6/4\",\"425\":\"v-e1eec494#7\",\"426\":\"v-e1eec494#7/5\",\"427\":\"v-e1eec494#7/6\",\"428\":\"v-e1eec494#7/7\",\"429\":\"v-e1eec494#7/8\",\"430\":\"v-e1eec494#7/9\",\"431\":\"v-e1eec494#7/10\",\"432\":\"v-e1eec494#7/11\",\"433\":\"v-e1eec494#8\",\"434\":\"v-e1eec494#8/0\",\"435\":\"v-e1eec494#8/1\",\"436\":\"v-e1eec494#9\",\"437\":\"v-e1eec494#9/2\",\"438\":\"v-e1eec494#10\",\"439\":\"v-e1eec494#10/3\",\"440\":\"v-e1eec494#10/4\",\"441\":\"v-e1eec494#10/5\",\"442\":\"v-e1eec494#11\",\"443\":\"v-e1eec494#11/0\",\"444\":\"v-e1eec494#11/1\",\"445\":\"v-e1eec494#11/2\",\"446\":\"v-e1eec494#11/3\",\"447\":\"v-e1eec494#11/4\",\"448\":\"v-e1eec494#12\",\"449\":\"v-e1eec494#13\",\"450\":\"v-e1eec494#14\",\"451\":\"v-e1eec494#14/0\",\"452\":\"v-e1eec494#14/1\",\"453\":\"v-e1eec494#14/2\",\"454\":\"v-e1eec494#14/3\",\"455\":\"v-e1eec494#14/4\",\"456\":\"v-e1eec494#15\",\"457\":\"v-e1eec494#16\",\"458\":\"v-e1eec494#16/0\",\"459\":\"v-e1eec494#16/1\",\"460\":\"v-e1eec494#16/2\",\"461\":\"v-e1eec494#16/3\",\"462\":\"v-e1eec494#16/4\",\"463\":\"v-e1eec494#16/5\",\"464\":\"v-e1eec494#16/6\",\"465\":\"v-e1eec494#16/7\",\"466\":\"v-e1eec494#16/8\",\"467\":\"v-e1eec494#16/9\",\"468\":\"v-e1eec494#16/10\",\"469\":\"v-e1eec494#17\",\"470\":\"v-e1eec494#18\",\"471\":\"v-e1eec494#18/0\",\"472\":\"v-e1eec494#18/1\",\"473\":\"v-e1eec494#18/2\",\"474\":\"v-e1eec494#18/3\",\"475\":\"v-e1eec494#18/4\",\"476\":\"v-e1eec494#18/5\",\"477\":\"v-e1eec494#18/6\",\"478\":\"v-e1eec494#18/7\",\"479\":\"v-e1eec494#19\",\"480\":\"v-e1eec494#20\",\"481\":\"v-e1eec494#20/0\",\"482\":\"v-e1eec494#20/1\",\"483\":\"v-e1eec494#20/2\",\"484\":\"v-e1eec494#20/3\",\"485\":\"v-e1eec494#21\",\"486\":\"v-e1eec494#22\",\"487\":\"v-e1eec494#23\",\"488\":\"v-e1eec494#23/4\",\"489\":\"v-e1eec494#23/5\",\"490\":\"v-e1eec494#24\",\"491\":\"v-e1eec494#24/6\",\"492\":\"v-e1eec494#24/7\",\"493\":\"v-e1eec494#24/8\",\"494\":\"v-e1eec494#25\",\"495\":\"v-e1eec494#25/9\",\"496\":\"v-e1eec494#26\",\"497\":\"v-e1eec494#26/10\",\"498\":\"v-e1eec494#27\",\"499\":\"v-e1eec494#27/11\",\"500\":\"v-e1eec494#27/12\",\"501\":\"v-e1eec494#27/13\",\"502\":\"v-e1eec494#27/14\",\"503\":\"v-e1eec494#27/15\",\"504\":\"v-e1eec494#27/16\",\"505\":\"v-e1eec494#27/17\",\"506\":\"v-e1eec494#27/18\",\"507\":\"v-e1eec494#27/19\",\"508\":\"v-e1eec494#27/20\",\"509\":\"v-e1eec494#27/21\",\"510\":\"v-e1eec494#27/22\",\"511\":\"v-b2eb194a\",\"512\":\"v-b2eb194a#1\",\"513\":\"v-b2eb194a#2\",\"514\":\"v-b2eb194a#2/0\",\"515\":\"v-b2eb194a#2/1\",\"516\":\"v-b2eb194a#2/2\",\"517\":\"v-b2eb194a#2/3\",\"518\":\"v-b2eb194a#2/4\",\"519\":\"v-b2eb194a#2/5\",\"520\":\"v-b2eb194a#2/6\",\"521\":\"v-b2eb194a#3\",\"522\":\"v-b2eb194a#4\",\"523\":\"v-b2eb194a#4/7\",\"524\":\"v-b2eb194a#4/8\",\"525\":\"v-b2eb194a#4/9\",\"526\":\"v-b2eb194a#4/10\",\"527\":\"v-b2eb194a#4/11\",\"528\":\"v-b2eb194a#4/12\",\"529\":\"v-b2eb194a#4/13\",\"530\":\"v-b2eb194a#4/14\",\"531\":\"v-b2eb194a#5\",\"532\":\"v-b2eb194a#5/15\",\"533\":\"v-b2eb194a#5/16\",\"534\":\"v-b2eb194a#5/17\",\"535\":\"v-b2eb194a#6\",\"536\":\"v-b2eb194a#6/0\",\"537\":\"v-b2eb194a#6/1\",\"538\":\"v-b2eb194a#6/2\",\"539\":\"v-b2eb194a#7\",\"540\":\"v-b2eb194a#7/0\",\"541\":\"v-b2eb194a#7/1\",\"542\":\"v-b2eb194a#7/2\",\"543\":\"v-b2eb194a#7/3\",\"544\":\"v-b2eb194a#7/4\",\"545\":\"v-b2eb194a#8\",\"546\":\"v-b2eb194a#8/5\",\"547\":\"v-b2eb194a#8/6\",\"548\":\"v-b2eb194a#9\",\"549\":\"v-b2eb194a#10\",\"550\":\"v-b2eb194a#10/0\",\"551\":\"v-b2eb194a#10/1\",\"552\":\"v-b2eb194a#10/2\",\"553\":\"v-b2eb194a#11\",\"554\":\"v-b2eb194a#11/0\",\"555\":\"v-b2eb194a#11/1\",\"556\":\"v-b2eb194a#11/2\",\"557\":\"v-b2eb194a#11/3\",\"558\":\"v-b2eb194a#11/4\",\"559\":\"v-b2eb194a#11/5\",\"560\":\"v-b2eb194a#11/6\",\"561\":\"v-b2eb194a#11/7\",\"562\":\"v-b2eb194a#11/8\",\"563\":\"v-b2eb194a#12\",\"564\":\"v-b2eb194a#12/9\",\"565\":\"v-b2eb194a#12/10\",\"566\":\"v-b2eb194a#12/11\",\"567\":\"v-b2eb194a#12/12\",\"568\":\"v-b2eb194a#12/13\",\"569\":\"v-b2eb194a#12/14\",\"570\":\"v-b2eb194a#12/15\",\"571\":\"v-b2eb194a#12/16\",\"572\":\"v-b2eb194a#12/17\",\"573\":\"v-b2eb194a#12/18\",\"574\":\"v-b2eb194a#12/19\",\"575\":\"v-b2eb194a#12/20\",\"576\":\"v-b2eb194a#12/21\",\"577\":\"v-b2eb194a#13\",\"578\":\"v-b2eb194a#14\",\"579\":\"v-b2eb194a#14/22\",\"580\":\"v-b2eb194a#14/23\",\"581\":\"v-b2eb194a#14/24\",\"582\":\"v-b2eb194a#14/25\",\"583\":\"v-b2eb194a#14/26\",\"584\":\"v-b2eb194a#14/27\",\"585\":\"v-b2eb194a#14/28\",\"586\":\"v-b2eb194a#15\",\"587\":\"v-b2eb194a#15/29\",\"588\":\"v-b2eb194a#15/30\",\"589\":\"v-b2eb194a#15/31\",\"590\":\"v-b2eb194a#15/32\",\"591\":\"v-b2eb194a#15/33\",\"592\":\"v-b2eb194a#15/34\",\"593\":\"v-b2eb194a#15/35\",\"594\":\"v-b2eb194a#15/36\",\"595\":\"v-b2eb194a#16\",\"596\":\"v-b2eb194a#16/37\",\"597\":\"v-b2eb194a#16/38\",\"598\":\"v-b2eb194a#16/39\",\"599\":\"v-b2eb194a#16/40\",\"600\":\"v-b2eb194a#16/41\",\"601\":\"v-b2eb194a#16/42\",\"602\":\"v-b2eb194a#16/43\",\"603\":\"v-b2eb194a#17\",\"604\":\"v-b2eb194a#17/44\",\"605\":\"v-b2eb194a#17/45\",\"606\":\"v-b2eb194a#17/46\",\"607\":\"v-b2eb194a#17/47\",\"608\":\"v-b2eb194a#17/48\",\"609\":\"v-b2eb194a#17/49\",\"610\":\"v-b2eb194a#17/50\",\"611\":\"v-b2eb194a#18\",\"612\":\"v-b2eb194a#18/51\",\"613\":\"v-b2eb194a#18/52\",\"614\":\"v-b2eb194a#18/53\",\"615\":\"v-b2eb194a#18/54\",\"616\":\"v-b2eb194a#18/55\",\"617\":\"v-b2eb194a#19\",\"618\":\"v-b2eb194a#19/56\",\"619\":\"v-b2eb194a#19/57\",\"620\":\"v-b2eb194a#19/58\",\"621\":\"v-b2eb194a#19/59\",\"622\":\"v-b2eb194a#19/60\",\"623\":\"v-b2eb194a#19/61\",\"624\":\"v-b2eb194a#19/62\",\"625\":\"v-b2eb194a#19/63\",\"626\":\"v-b2eb194a#19/64\",\"627\":\"v-b2eb194a#20\",\"628\":\"v-b2eb194a#20/65\",\"629\":\"v-b2eb194a#20/66\",\"630\":\"v-b2eb194a#20/67\",\"631\":\"v-b2eb194a#20/68\",\"632\":\"v-b2eb194a#20/69\",\"633\":\"v-b2eb194a#20/70\",\"634\":\"v-5732fb76\",\"635\":\"v-5732fb76#1\",\"636\":\"v-5732fb76#1/0\",\"637\":\"v-5732fb76#1/1\",\"638\":\"v-5732fb76#1/2\",\"639\":\"v-5732fb76#2\",\"640\":\"v-5732fb76#2/0\",\"641\":\"v-5732fb76#2/1\",\"642\":\"v-5732fb76#2/2\",\"643\":\"v-5732fb76#2/3\",\"644\":\"v-5732fb76#2/4\",\"645\":\"v-5732fb76#2/5\",\"646\":\"v-5732fb76#2/6\",\"647\":\"v-5732fb76#2/7\",\"648\":\"v-5732fb76#3\",\"649\":\"v-5732fb76#3/8\",\"650\":\"v-5732fb76#3/9\",\"651\":\"v-5732fb76#3/10\",\"652\":\"v-5732fb76#3/11\",\"653\":\"v-5732fb76#3/12\",\"654\":\"v-5732fb76#4\",\"655\":\"v-5732fb76#4/13\",\"656\":\"v-5732fb76#4/14\",\"657\":\"v-5732fb76#4/15\",\"658\":\"v-5732fb76#4/16\",\"659\":\"v-5732fb76#4/17\",\"660\":\"v-5732fb76#4/18\",\"661\":\"v-5732fb76#4/19\",\"662\":\"v-5732fb76#5\",\"663\":\"v-5732fb76#5/20\",\"664\":\"v-5732fb76#5/21\",\"665\":\"v-5732fb76#5/22\",\"666\":\"v-5732fb76#5/23\",\"667\":\"v-eded1812\",\"668\":\"v-eded1812#1\",\"669\":\"v-eded1812#1/0\",\"670\":\"v-eded1812#1/1\",\"671\":\"v-eded1812#1/2\",\"672\":\"v-eded1812#1/3\",\"673\":\"v-eded1812#1/4\",\"674\":\"v-eded1812#1/5\",\"675\":\"v-eded1812#1/6\",\"676\":\"v-eded1812#1/7\",\"677\":\"v-eded1812#2\",\"678\":\"v-eded1812#2/8\",\"679\":\"v-eded1812#2/9\",\"680\":\"v-eded1812#2/10\",\"681\":\"v-eded1812#2/11\",\"682\":\"v-eded1812#2/12\",\"683\":\"v-eded1812#3\",\"684\":\"v-eded1812#3/13\",\"685\":\"v-eded1812#3/14\",\"686\":\"v-eded1812#3/15\",\"687\":\"v-eded1812#3/16\",\"688\":\"v-eded1812#3/17\",\"689\":\"v-eded1812#3/18\",\"690\":\"v-eded1812#4\",\"691\":\"v-eded1812#4/19\",\"692\":\"v-eded1812#4/20\",\"693\":\"v-eded1812#4/21\",\"694\":\"v-eded1812#4/22\",\"695\":\"v-eded1812#4/23\",\"696\":\"v-eded1812#5\",\"697\":\"v-eded1812#5/0\",\"698\":\"v-eded1812#5/1\",\"699\":\"v-eded1812#5/2\",\"700\":\"v-eded1812#5/3\",\"701\":\"v-eded1812#5/4\",\"702\":\"v-eded1812#5/5\",\"703\":\"v-eded1812#5/6\",\"704\":\"v-eded1812#6\",\"705\":\"v-eded1812#6/7\",\"706\":\"v-eded1812#6/8\",\"707\":\"v-eded1812#6/9\",\"708\":\"v-eded1812#6/10\",\"709\":\"v-eded1812#6/11\",\"710\":\"v-eded1812#6/12\",\"711\":\"v-eded1812#6/13\",\"712\":\"v-eded1812#7\",\"713\":\"v-eded1812#7/14\",\"714\":\"v-eded1812#7/15\",\"715\":\"v-eded1812#7/16\",\"716\":\"v-eded1812#8\",\"717\":\"v-eded1812#8/0\",\"718\":\"v-eded1812#8/1\",\"719\":\"v-eded1812#8/2\",\"720\":\"v-eded1812#8/3\",\"721\":\"v-eded1812#8/4\",\"722\":\"v-eded1812#8/5\",\"723\":\"v-eded1812#8/6\",\"724\":\"v-eded1812#8/7\",\"725\":\"v-eded1812#9\",\"726\":\"v-eded1812#9/8\",\"727\":\"v-eded1812#9/9\",\"728\":\"v-eded1812#9/10\",\"729\":\"v-eded1812#9/11\",\"730\":\"v-eded1812#9/12\",\"731\":\"v-eded1812#9/13\",\"732\":\"v-eded1812#10\",\"733\":\"v-eded1812#10/14\",\"734\":\"v-eded1812#10/15\",\"735\":\"v-eded1812#10/16\",\"736\":\"v-eded1812#11\",\"737\":\"v-eded1812#11/0\",\"738\":\"v-eded1812#11/1\",\"739\":\"v-eded1812#11/2\",\"740\":\"v-eded1812#11/3\",\"741\":\"v-eded1812#11/4\",\"742\":\"v-eded1812#11/5\",\"743\":\"v-eded1812#12\",\"744\":\"v-eded1812#12/6\",\"745\":\"v-eded1812#12/7\",\"746\":\"v-eded1812#12/8\",\"747\":\"v-eded1812#12/9\",\"748\":\"v-eded1812#12/10\",\"749\":\"v-eded1812#12/11\",\"750\":\"v-eded1812#13\",\"751\":\"v-eded1812#13/12\",\"752\":\"v-eded1812#13/13\",\"753\":\"v-eded1812#13/14\",\"754\":\"v-eded1812#13/15\",\"755\":\"v-eded1812#13/16\",\"756\":\"v-eded1812#13/17\",\"757\":\"v-eded1812#13/18\",\"758\":\"v-eded1812#14\",\"759\":\"v-eded1812#14/19\",\"760\":\"v-eded1812#14/20\",\"761\":\"v-eded1812#14/21\",\"762\":\"v-662f0bba\",\"763\":\"v-662f0bba#1\",\"764\":\"v-662f0bba#1/0\",\"765\":\"v-e9c246a2\",\"766\":\"v-e9c246a2#1\",\"767\":\"v-e9c246a2#1/0\",\"768\":\"v-e9c246a2#1/1\",\"769\":\"v-e9c246a2#1/2\",\"770\":\"v-e9c246a2#1/3\",\"771\":\"v-e9c246a2#1/4\",\"772\":\"v-e9c246a2#1/5\",\"773\":\"v-e9c246a2#1/6\",\"774\":\"v-e9c246a2#1/7\",\"775\":\"v-e9c246a2#1/8\",\"776\":\"v-e9c246a2#1/9\",\"777\":\"v-e9c246a2#1/10\",\"778\":\"v-e9c246a2#1/11\",\"779\":\"v-e9c246a2#1/12\",\"780\":\"v-e9c246a2#1/13\",\"781\":\"v-e9c246a2#1/14\",\"782\":\"v-e9c246a2#1/15\",\"783\":\"v-e9c246a2#1/16\",\"784\":\"v-e9c246a2#1/17\",\"785\":\"v-e9c246a2#1/18\",\"786\":\"v-e9c246a2#1/19\",\"787\":\"v-e9c246a2#1/20\",\"788\":\"v-e9c246a2#1/21\",\"789\":\"v-e9c246a2#1/22\",\"790\":\"v-e9c246a2#1/23\",\"791\":\"v-e9c246a2#1/24\",\"792\":\"v-e9c246a2#1/25\",\"793\":\"v-e9c246a2#1/26\",\"794\":\"v-e9c246a2#1/27\",\"795\":\"v-e9c246a2#1/28\",\"796\":\"v-e9c246a2#1/29\",\"797\":\"v-e9c246a2#2\",\"798\":\"v-e9c246a2#2/0\",\"799\":\"v-e9c246a2#2/1\",\"800\":\"v-e9c246a2#2/2\",\"801\":\"v-e9c246a2#2/3\",\"802\":\"v-e9c246a2#2/4\",\"803\":\"v-e9c246a2#3\",\"804\":\"v-b89ed4ea\",\"805\":\"v-b89ed4ea#1\",\"806\":\"v-b89ed4ea#2\",\"807\":\"v-b89ed4ea#2/0\",\"808\":\"v-b89ed4ea#2/1\",\"809\":\"v-b89ed4ea#2/2\",\"810\":\"v-b89ed4ea#2/3\",\"811\":\"v-b89ed4ea#2/4\",\"812\":\"v-b89ed4ea#2/5\",\"813\":\"v-b89ed4ea#2/6\",\"814\":\"v-b89ed4ea#2/7\",\"815\":\"v-b89ed4ea#2/8\",\"816\":\"v-b89ed4ea#2/9\",\"817\":\"v-b89ed4ea#2/10\",\"818\":\"v-b89ed4ea#2/11\",\"819\":\"v-b89ed4ea#2/12\",\"820\":\"v-b89ed4ea#2/13\",\"821\":\"v-b89ed4ea#2/14\",\"822\":\"v-b89ed4ea#2/15\",\"823\":\"v-b89ed4ea#2/16\",\"824\":\"v-b89ed4ea#2/17\",\"825\":\"v-b89ed4ea#2/18\",\"826\":\"v-b89ed4ea#2/19\",\"827\":\"v-b89ed4ea#2/20\",\"828\":\"v-b89ed4ea#2/21\",\"829\":\"v-b89ed4ea#2/22\",\"830\":\"v-b89ed4ea#2/23\",\"831\":\"v-b89ed4ea#2/24\",\"832\":\"v-b89ed4ea#2/25\",\"833\":\"v-b89ed4ea#2/26\",\"834\":\"v-b89ed4ea#2/27\",\"835\":\"v-b89ed4ea#2/28\",\"836\":\"v-b89ed4ea#2/29\",\"837\":\"v-b89ed4ea#2/30\",\"838\":\"v-b89ed4ea#2/31\",\"839\":\"v-b89ed4ea#2/32\",\"840\":\"v-b89ed4ea#2/33\",\"841\":\"v-b89ed4ea#2/34\",\"842\":\"v-b89ed4ea#2/35\",\"843\":\"v-b89ed4ea#2/36\",\"844\":\"v-b89ed4ea#2/37\",\"845\":\"v-b89ed4ea#2/38\",\"846\":\"v-b89ed4ea#2/39\",\"847\":\"v-b89ed4ea#2/40\",\"848\":\"v-b89ed4ea#2/41\",\"849\":\"v-b89ed4ea#2/42\",\"850\":\"v-b89ed4ea#2/43\",\"851\":\"v-b89ed4ea#2/44\",\"852\":\"v-b89ed4ea#2/45\",\"853\":\"v-b89ed4ea#2/46\",\"854\":\"v-b89ed4ea#2/47\",\"855\":\"v-b89ed4ea#2/48\",\"856\":\"v-b89ed4ea#2/49\",\"857\":\"v-b89ed4ea#2/50\",\"858\":\"v-b89ed4ea#2/51\",\"859\":\"v-b89ed4ea#2/52\",\"860\":\"v-b89ed4ea#2/53\",\"861\":\"v-b89ed4ea#3\",\"862\":\"v-b89ed4ea#3/54\",\"863\":\"v-b89ed4ea#3/55\",\"864\":\"v-b89ed4ea#3/56\",\"865\":\"v-b89ed4ea#3/57\",\"866\":\"v-b89ed4ea#3/58\",\"867\":\"v-b89ed4ea#3/59\",\"868\":\"v-b89ed4ea#3/60\",\"869\":\"v-b89ed4ea#3/61\",\"870\":\"v-b89ed4ea#3/62\",\"871\":\"v-b89ed4ea#3/63\",\"872\":\"v-b89ed4ea#3/64\",\"873\":\"v-b89ed4ea#3/65\",\"874\":\"v-b89ed4ea#3/66\",\"875\":\"v-b89ed4ea#3/67\",\"876\":\"v-b89ed4ea#3/68\",\"877\":\"v-b89ed4ea#3/69\",\"878\":\"v-b89ed4ea#3/70\",\"879\":\"v-b89ed4ea#3/71\",\"880\":\"v-b89ed4ea#3/72\",\"881\":\"v-b89ed4ea#3/73\",\"882\":\"v-b89ed4ea#3/74\",\"883\":\"v-b89ed4ea#3/75\",\"884\":\"v-b89ed4ea#3/76\",\"885\":\"v-b89ed4ea#3/77\",\"886\":\"v-b89ed4ea#3/78\",\"887\":\"v-b89ed4ea#3/79\",\"888\":\"v-b89ed4ea#3/80\",\"889\":\"v-b89ed4ea#3/81\",\"890\":\"v-b89ed4ea#3/82\",\"891\":\"v-b89ed4ea#3/83\",\"892\":\"v-b89ed4ea#3/84\",\"893\":\"v-b89ed4ea#3/85\",\"894\":\"v-b89ed4ea#3/86\",\"895\":\"v-b89ed4ea#3/87\",\"896\":\"v-b89ed4ea#3/88\",\"897\":\"v-b89ed4ea#3/89\",\"898\":\"v-b89ed4ea#3/90\",\"899\":\"v-b89ed4ea#3/91\",\"900\":\"v-b89ed4ea#3/92\",\"901\":\"v-b89ed4ea#3/93\",\"902\":\"v-b89ed4ea#3/94\",\"903\":\"v-b89ed4ea#3/95\",\"904\":\"v-b89ed4ea#3/96\",\"905\":\"v-b89ed4ea#3/97\",\"906\":\"v-b89ed4ea#3/98\",\"907\":\"v-b89ed4ea#3/99\",\"908\":\"v-b89ed4ea#4\",\"909\":\"v-b89ed4ea#4/100\",\"910\":\"v-b89ed4ea#4/101\",\"911\":\"v-b89ed4ea#4/102\",\"912\":\"v-b89ed4ea#4/103\",\"913\":\"v-b89ed4ea#4/104\",\"914\":\"v-b89ed4ea#4/105\",\"915\":\"v-b89ed4ea#4/106\",\"916\":\"v-b89ed4ea#5\",\"917\":\"v-b89ed4ea#5/0\",\"918\":\"v-b89ed4ea#5/1\",\"919\":\"v-b89ed4ea#5/2\",\"920\":\"v-b89ed4ea#6\",\"921\":\"v-b89ed4ea#6/3\",\"922\":\"v-b89ed4ea#6/4\",\"923\":\"v-b89ed4ea#6/5\",\"924\":\"v-b89ed4ea#6/6\",\"925\":\"v-b89ed4ea#6/7\",\"926\":\"v-b89ed4ea#6/8\",\"927\":\"v-b89ed4ea#6/9\",\"928\":\"v-b89ed4ea#7\",\"929\":\"v-b89ed4ea#7/10\",\"930\":\"v-b89ed4ea#7/11\",\"931\":\"v-b89ed4ea#7/12\",\"932\":\"v-b89ed4ea#7/13\",\"933\":\"v-b89ed4ea#7/14\",\"934\":\"v-b89ed4ea#7/15\",\"935\":\"v-b89ed4ea#7/16\",\"936\":\"v-b89ed4ea#7/17\",\"937\":\"v-b89ed4ea#7/18\",\"938\":\"v-b89ed4ea#7/19\",\"939\":\"v-b89ed4ea#8\",\"940\":\"v-b89ed4ea#9\",\"941\":\"v-b89ed4ea#9/20\",\"942\":\"v-b89ed4ea#9/21\",\"943\":\"v-b89ed4ea#9/22\",\"944\":\"v-b89ed4ea#9/23\",\"945\":\"v-b89ed4ea#9/24\",\"946\":\"v-b89ed4ea#9/25\",\"947\":\"v-b89ed4ea#9/26\",\"948\":\"v-b89ed4ea#10\",\"949\":\"v-b89ed4ea#10/0\",\"950\":\"v-b89ed4ea#10/1\",\"951\":\"v-b89ed4ea#10/2\",\"952\":\"v-b89ed4ea#11\",\"953\":\"v-b89ed4ea#11/3\",\"954\":\"v-b89ed4ea#11/4\",\"955\":\"v-b89ed4ea#11/5\",\"956\":\"v-b89ed4ea#11/6\",\"957\":\"v-b89ed4ea#11/7\",\"958\":\"v-b89ed4ea#11/8\",\"959\":\"v-b89ed4ea#11/9\",\"960\":\"v-b89ed4ea#11/10\",\"961\":\"v-b89ed4ea#11/11\",\"962\":\"v-b89ed4ea#11/12\",\"963\":\"v-b89ed4ea#11/13\",\"964\":\"v-b89ed4ea#11/14\",\"965\":\"v-b89ed4ea#11/15\",\"966\":\"v-b89ed4ea#11/16\",\"967\":\"v-b89ed4ea#11/17\",\"968\":\"v-b89ed4ea#11/18\",\"969\":\"v-b89ed4ea#11/19\",\"970\":\"v-b89ed4ea#11/20\",\"971\":\"v-b89ed4ea#11/21\",\"972\":\"v-b89ed4ea#11/22\",\"973\":\"v-b89ed4ea#11/23\",\"974\":\"v-b89ed4ea#11/24\",\"975\":\"v-b89ed4ea#11/25\",\"976\":\"v-b89ed4ea#11/26\",\"977\":\"v-b89ed4ea#11/27\",\"978\":\"v-b89ed4ea#11/28\",\"979\":\"v-b89ed4ea#11/29\",\"980\":\"v-b89ed4ea#11/30\",\"981\":\"v-b89ed4ea#11/31\",\"982\":\"v-b89ed4ea#11/32\",\"983\":\"v-b89ed4ea#11/33\",\"984\":\"v-b89ed4ea#11/34\",\"985\":\"v-b89ed4ea#11/35\",\"986\":\"v-b89ed4ea#11/36\",\"987\":\"v-b89ed4ea#11/37\",\"988\":\"v-b89ed4ea#11/38\",\"989\":\"v-b89ed4ea#11/39\",\"990\":\"v-b89ed4ea#11/40\",\"991\":\"v-b89ed4ea#11/41\",\"992\":\"v-b89ed4ea#11/42\",\"993\":\"v-b89ed4ea#11/43\",\"994\":\"v-b89ed4ea#11/44\",\"995\":\"v-b89ed4ea#11/45\",\"996\":\"v-b89ed4ea#11/46\",\"997\":\"v-b89ed4ea#11/47\",\"998\":\"v-b89ed4ea#12\",\"999\":\"v-b89ed4ea#12/48\",\"1000\":\"v-b89ed4ea#12/49\",\"1001\":\"v-b89ed4ea#12/50\",\"1002\":\"v-b89ed4ea#12/51\",\"1003\":\"v-b89ed4ea#12/52\",\"1004\":\"v-b89ed4ea#12/53\",\"1005\":\"v-b89ed4ea#12/54\",\"1006\":\"v-b89ed4ea#12/55\",\"1007\":\"v-b89ed4ea#12/56\",\"1008\":\"v-b89ed4ea#12/57\",\"1009\":\"v-b89ed4ea#12/58\",\"1010\":\"v-b89ed4ea#12/59\",\"1011\":\"v-b89ed4ea#12/60\",\"1012\":\"v-b89ed4ea#13\",\"1013\":\"v-b89ed4ea#13/61\",\"1014\":\"v-b89ed4ea#13/62\",\"1015\":\"v-b89ed4ea#13/63\",\"1016\":\"v-b89ed4ea#13/64\",\"1017\":\"v-b89ed4ea#13/65\",\"1018\":\"v-b89ed4ea#13/66\",\"1019\":\"v-b89ed4ea#13/67\",\"1020\":\"v-b89ed4ea#13/68\",\"1021\":\"v-b89ed4ea#14\",\"1022\":\"v-b89ed4ea#14/69\",\"1023\":\"v-b89ed4ea#14/70\",\"1024\":\"v-b89ed4ea#14/71\",\"1025\":\"v-b89ed4ea#14/72\",\"1026\":\"v-b89ed4ea#14/73\",\"1027\":\"v-b89ed4ea#14/74\",\"1028\":\"v-b89ed4ea#14/75\",\"1029\":\"v-b89ed4ea#14/76\",\"1030\":\"v-b89ed4ea#14/77\",\"1031\":\"v-b89ed4ea#14/78\",\"1032\":\"v-b89ed4ea#14/79\",\"1033\":\"v-b89ed4ea#15\",\"1034\":\"v-b89ed4ea#16\",\"1035\":\"v-b89ed4ea#16/80\",\"1036\":\"v-b89ed4ea#16/81\",\"1037\":\"v-b89ed4ea#16/82\",\"1038\":\"v-b89ed4ea#16/83\",\"1039\":\"v-b89ed4ea#16/84\",\"1040\":\"v-b89ed4ea#16/85\",\"1041\":\"v-b89ed4ea#17\",\"1042\":\"v-b89ed4ea#17/0\",\"1043\":\"v-b89ed4ea#17/1\",\"1044\":\"v-b89ed4ea#17/2\",\"1045\":\"v-b89ed4ea#17/3\",\"1046\":\"v-b89ed4ea#17/4\",\"1047\":\"v-b89ed4ea#17/5\",\"1048\":\"v-b89ed4ea#17/6\",\"1049\":\"v-b89ed4ea#17/7\",\"1050\":\"v-b89ed4ea#17/8\",\"1051\":\"v-b89ed4ea#17/9\",\"1052\":\"v-b89ed4ea#17/10\",\"1053\":\"v-b89ed4ea#17/11\",\"1054\":\"v-b89ed4ea#17/12\",\"1055\":\"v-b89ed4ea#17/13\",\"1056\":\"v-b89ed4ea#17/14\",\"1057\":\"v-b89ed4ea#17/15\",\"1058\":\"v-b89ed4ea#17/16\",\"1059\":\"v-b89ed4ea#18\",\"1060\":\"v-b89ed4ea#18/17\",\"1061\":\"v-b89ed4ea#18/18\",\"1062\":\"v-b89ed4ea#18/19\",\"1063\":\"v-b89ed4ea#18/20\",\"1064\":\"v-b89ed4ea#18/21\",\"1065\":\"v-b89ed4ea#18/22\",\"1066\":\"v-b89ed4ea#18/23\",\"1067\":\"v-b89ed4ea#18/24\",\"1068\":\"v-b89ed4ea#18/25\",\"1069\":\"v-147825fb\",\"1070\":\"v-eda1fc4a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,1],\"2\":[null,3],\"3\":[null,3],\"4\":[null,2],\"5\":[1],\"6\":[null,5],\"7\":[null,2],\"8\":[null,9],\"9\":[null,8],\"10\":[1],\"11\":[1],\"12\":[null,1],\"13\":[1],\"14\":[1],\"15\":[1],\"16\":[null,7],\"17\":[null,4],\"18\":[1],\"19\":[null,3],\"20\":[1],\"21\":[1],\"22\":[null,1],\"23\":[1],\"24\":[null,6],\"25\":[null,13],\"26\":[1],\"27\":[null,140],\"28\":[1],\"29\":[1],\"30\":[null,1],\"31\":[1],\"32\":[1],\"33\":[null,1],\"34\":[1],\"35\":[1],\"36\":[null,9],\"37\":[null,4],\"38\":[null,9],\"39\":[null,20],\"40\":[null,2],\"41\":[1],\"42\":[null,3],\"43\":[null,39],\"44\":[1],\"45\":[1],\"46\":[null,6],\"47\":[null,4],\"48\":[null,17],\"49\":[null,7],\"50\":[null,7],\"51\":[null,1],\"52\":[null,1],\"53\":[null,1],\"54\":[null,4],\"55\":[null,1],\"56\":[null,5],\"57\":[1],\"58\":[null,15],\"59\":[null,10],\"60\":[null,7],\"61\":[3],\"62\":[4],\"63\":[null,9],\"64\":[null,3],\"65\":[null,3],\"66\":[1],\"67\":[null,13],\"68\":[null,7],\"69\":[null,4],\"70\":[null,10],\"71\":[null,13],\"72\":[null,7],\"73\":[null,3],\"74\":[null,12],\"75\":[null,14],\"76\":[null,14],\"77\":[null,9],\"78\":[2],\"79\":[null,11],\"80\":[2],\"81\":[null,2],\"82\":[null,4],\"83\":[null,2],\"84\":[null,4],\"85\":[null,4],\"86\":[null,4],\"87\":[null,7],\"88\":[null,4],\"89\":[null,2],\"90\":[null,2],\"91\":[null,5],\"92\":[null,1],\"93\":[null,9],\"94\":[null,12],\"95\":[null,3],\"96\":[null,7],\"97\":[null,9],\"98\":[null,4],\"99\":[null,4],\"100\":[null,1],\"101\":[2],\"102\":[null,7],\"103\":[null,23],\"104\":[null,2],\"105\":[null,7],\"106\":[4],\"107\":[null,4],\"108\":[null,2],\"109\":[null,2],\"110\":[null,1],\"111\":[1],\"112\":[null,6],\"113\":[null,16],\"114\":[null,28],\"115\":[null,11],\"116\":[null,7],\"117\":[null,2],\"118\":[null,3],\"119\":[null,9],\"120\":[1],\"121\":[2],\"122\":[null,1],\"123\":[null,2],\"124\":[null,1],\"125\":[null,5],\"126\":[null,15],\"127\":[null,7],\"128\":[null,7],\"129\":[null,35],\"130\":[2],\"131\":[null,1],\"132\":[null,4],\"133\":[null,1],\"134\":[null,6],\"135\":[null,5],\"136\":[null,38],\"137\":[1],\"138\":[null,1],\"139\":[null,1],\"140\":[null,28],\"141\":[null,22],\"142\":[null,37],\"143\":[4],\"144\":[null,1],\"145\":[null,1],\"146\":[null,1],\"147\":[null,15],\"148\":[null,47],\"149\":[1],\"150\":[null,1],\"151\":[null,1],\"152\":[null,1],\"153\":[null,5],\"154\":[null,11],\"155\":[null,10],\"156\":[null,33],\"157\":[2],\"158\":[null,1],\"159\":[null,5],\"160\":[null,1],\"161\":[null,5],\"162\":[null,13],\"163\":[null,10],\"164\":[null,7],\"165\":[null,54],\"166\":[1],\"167\":[null,1],\"168\":[null,8],\"169\":[null,1],\"170\":[null,3],\"171\":[null,14],\"172\":[null,4],\"173\":[null,52],\"174\":[1],\"175\":[null,1],\"176\":[null,14],\"177\":[null,1],\"178\":[null,7],\"179\":[null,14],\"180\":[null,17],\"181\":[null,15],\"182\":[null,12],\"183\":[null,3],\"184\":[null,4],\"185\":[null,3],\"186\":[null,3],\"187\":[null,3],\"188\":[null,4],\"189\":[null,3],\"190\":[null,4],\"191\":[null,3],\"192\":[null,4],\"193\":[null,42],\"194\":[1],\"195\":[1],\"196\":[1],\"197\":[null,1],\"198\":[null,2],\"199\":[null,1],\"200\":[null,18],\"201\":[null,4],\"202\":[null,6],\"203\":[null,22],\"204\":[null,7],\"205\":[null,22],\"206\":[2],\"207\":[null,1],\"208\":[null,4],\"209\":[null,1],\"210\":[null,12],\"211\":[null,18],\"212\":[null,7],\"213\":[null,39],\"214\":[2],\"215\":[null,1],\"216\":[null,4],\"217\":[null,1],\"218\":[null,9],\"219\":[null,5],\"220\":[null,3],\"221\":[null,28],\"222\":[1],\"223\":[null,1],\"224\":[null,5],\"225\":[null,1],\"226\":[null,24],\"227\":[null,8],\"228\":[null,7],\"229\":[null,11],\"230\":[null,2],\"231\":[null,23],\"232\":[1],\"233\":[null,1],\"234\":[null,3],\"235\":[null,1],\"236\":[1],\"237\":[null,1],\"238\":[null,1],\"239\":[null,1],\"240\":[null,11],\"241\":[null,2],\"242\":[null,4],\"243\":[null,7],\"244\":[null,27],\"245\":[1],\"246\":[null,1],\"247\":[null,10],\"248\":[null,1],\"249\":[null,9],\"250\":[null,5],\"251\":[null,12],\"252\":[null,6],\"253\":[null,11],\"254\":[null,6],\"255\":[null,24],\"256\":[1],\"257\":[1],\"258\":[null,1],\"259\":[null,3],\"260\":[null,1],\"261\":[null,16],\"262\":[null,31],\"263\":[1],\"264\":[null,1],\"265\":[null,3],\"266\":[null,1],\"267\":[null,11],\"268\":[null,12],\"269\":[null,11],\"270\":[null,11],\"271\":[null,9],\"272\":[null,19],\"273\":[null,31],\"274\":[1],\"275\":[null,1],\"276\":[null,4],\"277\":[null,1],\"278\":[null,6],\"279\":[null,10],\"280\":[null,9],\"281\":[null,4],\"282\":[null,14],\"283\":[null,19],\"284\":[null,27],\"285\":[1],\"286\":[null,1],\"287\":[null,1],\"288\":[null,1],\"289\":[null,12],\"290\":[null,14],\"291\":[null,14],\"292\":[null,17],\"293\":[null,3],\"294\":[null,30],\"295\":[1],\"296\":[2],\"297\":[null,1],\"298\":[null,8],\"299\":[null,1],\"300\":[null,6],\"301\":[null,13],\"302\":[null,12],\"303\":[null,26],\"304\":[null,21],\"305\":[2],\"306\":[null,1],\"307\":[null,9],\"308\":[null,1],\"309\":[null,9],\"310\":[null,9],\"311\":[null,11],\"312\":[null,11],\"313\":[null,11],\"314\":[null,4],\"315\":[null,23],\"316\":[2],\"317\":[null,1],\"318\":[null,9],\"319\":[null,1],\"320\":[null,14],\"321\":[null,12],\"322\":[null,13],\"323\":[null,3],\"324\":[null,9],\"325\":[null,5],\"326\":[null,4],\"327\":[null,14],\"328\":[null,32],\"329\":[1],\"330\":[null,1],\"331\":[null,7],\"332\":[null,1],\"333\":[null,14],\"334\":[null,6],\"335\":[null,10],\"336\":[null,9],\"337\":[null,9],\"338\":[null,3],\"339\":[null,27],\"340\":[1],\"341\":[2],\"342\":[null,1],\"343\":[null,4],\"344\":[null,1],\"345\":[null,5],\"346\":[null,22],\"347\":[1],\"348\":[null,1],\"349\":[null,3],\"350\":[null,1],\"351\":[1],\"352\":[null,1],\"353\":[null,5],\"354\":[null,1],\"355\":[null,22],\"356\":[null,27],\"357\":[1],\"358\":[null,1],\"359\":[null,1],\"360\":[null,1],\"361\":[null,22],\"362\":[null,27],\"363\":[1],\"364\":[1],\"365\":[null,1],\"366\":[null,4],\"367\":[null,1],\"368\":[2],\"369\":[null,1],\"370\":[null,5],\"371\":[null,1],\"372\":[null,14],\"373\":[null,4],\"374\":[null,25],\"375\":[1],\"376\":[null,1],\"377\":[null,7],\"378\":[null,6],\"379\":[null,1],\"380\":[null,9],\"381\":[null,6],\"382\":[null,10],\"383\":[null,6],\"384\":[null,8],\"385\":[null,7],\"386\":[null,4],\"387\":[null,24],\"388\":[1],\"389\":[null,1],\"390\":[null,4],\"391\":[null,1],\"392\":[null,11],\"393\":[null,33],\"394\":[1],\"395\":[null,1],\"396\":[null,2],\"397\":[null,3],\"398\":[null,2],\"399\":[null,1],\"400\":[1],\"401\":[null,1],\"402\":[null,11],\"403\":[null,1],\"404\":[null,7],\"405\":[null,6],\"406\":[null,29],\"407\":[1],\"408\":[null,1],\"409\":[null,9],\"410\":[null,1],\"411\":[null,6],\"412\":[null,27],\"413\":[1],\"414\":[1],\"415\":[1],\"416\":[1],\"417\":[null,1],\"418\":[null,39],\"419\":[1],\"420\":[1],\"421\":[1],\"422\":[null,3],\"423\":[null,3],\"424\":[null,21],\"425\":[1],\"426\":[null,3],\"427\":[null,10],\"428\":[null,10],\"429\":[null,14],\"430\":[null,1],\"431\":[null,2],\"432\":[null,3],\"433\":[2],\"434\":[null,10],\"435\":[null,41],\"436\":[3],\"437\":[null,42],\"438\":[1],\"439\":[null,23],\"440\":[null,14],\"441\":[null,5],\"442\":[1],\"443\":[null,3],\"444\":[null,5],\"445\":[null,4],\"446\":[null,7],\"447\":[null,7],\"448\":[1],\"449\":[1],\"450\":[1],\"451\":[null,2],\"452\":[null,2],\"453\":[null,2],\"454\":[null,2],\"455\":[null,4],\"456\":[1],\"457\":[1],\"458\":[null,3],\"459\":[null,2],\"460\":[null,2],\"461\":[null,2],\"462\":[null,2],\"463\":[null,3],\"464\":[null,2],\"465\":[null,2],\"466\":[null,2],\"467\":[null,7],\"468\":[null,3],\"469\":[1],\"470\":[1],\"471\":[null,3],\"472\":[null,3],\"473\":[null,4],\"474\":[null,2],\"475\":[null,1],\"476\":[null,4],\"477\":[null,5],\"478\":[null,6],\"479\":[1],\"480\":[1],\"481\":[null,9],\"482\":[null,4],\"483\":[null,3],\"484\":[null,9],\"485\":[1],\"486\":[3],\"487\":[1],\"488\":[null,42],\"489\":[null,31],\"490\":[1],\"491\":[null,8],\"492\":[null,14],\"493\":[null,13],\"494\":[1],\"495\":[null,19],\"496\":[1],\"497\":[null,12],\"498\":[1],\"499\":[null,5],\"500\":[null,5],\"501\":[null,3],\"502\":[null,7],\"503\":[null,7],\"504\":[null,5],\"505\":[null,7],\"506\":[null,3],\"507\":[null,4],\"508\":[null,5],\"509\":[null,1],\"510\":[null,3],\"511\":[4],\"512\":[1],\"513\":[2],\"514\":[null,1],\"515\":[null,4],\"516\":[null,1],\"517\":[null,10],\"518\":[null,14],\"519\":[null,15],\"520\":[null,24],\"521\":[1],\"522\":[1],\"523\":[null,1],\"524\":[null,2],\"525\":[null,3],\"526\":[null,10],\"527\":[null,8],\"528\":[null,1],\"529\":[null,2],\"530\":[null,31],\"531\":[2],\"532\":[null,1],\"533\":[null,13],\"534\":[null,1],\"535\":[1],\"536\":[null,1],\"537\":[null,3],\"538\":[null,1],\"539\":[1],\"540\":[null,1],\"541\":[null,3],\"542\":[null,4],\"543\":[null,1],\"544\":[null,30],\"545\":[1],\"546\":[null,1],\"547\":[null,6],\"548\":[1],\"549\":[2],\"550\":[null,1],\"551\":[null,2],\"552\":[null,1],\"553\":[1],\"554\":[null,1],\"555\":[null,7],\"556\":[null,5],\"557\":[null,5],\"558\":[null,7],\"559\":[null,2],\"560\":[null,13],\"561\":[null,1],\"562\":[null,77],\"563\":[1],\"564\":[null,1],\"565\":[null,5],\"566\":[null,5],\"567\":[null,3],\"568\":[null,15],\"569\":[null,2],\"570\":[null,4],\"571\":[null,2],\"572\":[null,4],\"573\":[null,2],\"574\":[null,7],\"575\":[null,1],\"576\":[null,57],\"577\":[1],\"578\":[1],\"579\":[null,1],\"580\":[null,2],\"581\":[null,10],\"582\":[null,1],\"583\":[null,5],\"584\":[null,2],\"585\":[null,30],\"586\":[1],\"587\":[null,1],\"588\":[null,15],\"589\":[null,8],\"590\":[null,7],\"591\":[null,1],\"592\":[null,17],\"593\":[null,27],\"594\":[null,62],\"595\":[1],\"596\":[null,1],\"597\":[null,1],\"598\":[null,5],\"599\":[null,1],\"600\":[null,7],\"601\":[null,6],\"602\":[null,54],\"603\":[1],\"604\":[null,1],\"605\":[null,12],\"606\":[null,6],\"607\":[null,1],\"608\":[null,6],\"609\":[null,6],\"610\":[null,38],\"611\":[1],\"612\":[null,1],\"613\":[null,9],\"614\":[null,1],\"615\":[null,14],\"616\":[null,51],\"617\":[1],\"618\":[null,1],\"619\":[null,10],\"620\":[null,9],\"621\":[null,4],\"622\":[null,15],\"623\":[null,1],\"624\":[null,16],\"625\":[null,9],\"626\":[null,72],\"627\":[1],\"628\":[null,1],\"629\":[null,15],\"630\":[null,1],\"631\":[null,5],\"632\":[null,29],\"633\":[null,94],\"634\":[1],\"635\":[2],\"636\":[null,1],\"637\":[null,6],\"638\":[null,1],\"639\":[1],\"640\":[null,1],\"641\":[null,6],\"642\":[null,6],\"643\":[null,1],\"644\":[null,2],\"645\":[null,12],\"646\":[null,5],\"647\":[null,53],\"648\":[1],\"649\":[null,1],\"650\":[null,5],\"651\":[null,1],\"652\":[null,4],\"653\":[null,45],\"654\":[1],\"655\":[null,1],\"656\":[null,5],\"657\":[null,1],\"658\":[null,2],\"659\":[null,9],\"660\":[null,5],\"661\":[null,39],\"662\":[1],\"663\":[null,1],\"664\":[null,7],\"665\":[null,3],\"666\":[null,1],\"667\":[1],\"668\":[1],\"669\":[null,1],\"670\":[null,3],\"671\":[null,13],\"672\":[null,11],\"673\":[null,1],\"674\":[null,2],\"675\":[null,2],\"676\":[null,39],\"677\":[1],\"678\":[null,1],\"679\":[null,1],\"680\":[null,1],\"681\":[null,4],\"682\":[null,44],\"683\":[3],\"684\":[null,1],\"685\":[null,1],\"686\":[null,4],\"687\":[null,1],\"688\":[null,2],\"689\":[null,24],\"690\":[1],\"691\":[null,1],\"692\":[null,4],\"693\":[null,4],\"694\":[null,4],\"695\":[null,1],\"696\":[2],\"697\":[null,1],\"698\":[null,1],\"699\":[null,1],\"700\":[null,4],\"701\":[null,15],\"702\":[null,14],\"703\":[null,34],\"704\":[1],\"705\":[null,1],\"706\":[null,10],\"707\":[null,9],\"708\":[null,9],\"709\":[null,1],\"710\":[null,12],\"711\":[null,29],\"712\":[1],\"713\":[null,1],\"714\":[null,6],\"715\":[null,1],\"716\":[1],\"717\":[null,1],\"718\":[null,1],\"719\":[null,1],\"720\":[null,11],\"721\":[null,7],\"722\":[null,4],\"723\":[null,6],\"724\":[null,24],\"725\":[1],\"726\":[null,1],\"727\":[null,1],\"728\":[null,1],\"729\":[null,5],\"730\":[null,17],\"731\":[null,29],\"732\":[1],\"733\":[null,1],\"734\":[null,12],\"735\":[null,1],\"736\":[1],\"737\":[null,1],\"738\":[null,3],\"739\":[null,1],\"740\":[null,8],\"741\":[null,10],\"742\":[null,24],\"743\":[1],\"744\":[null,1],\"745\":[null,7],\"746\":[null,1],\"747\":[null,8],\"748\":[null,2],\"749\":[null,39],\"750\":[1],\"751\":[null,1],\"752\":[null,9],\"753\":[null,1],\"754\":[null,6],\"755\":[null,24],\"756\":[null,3],\"757\":[null,47],\"758\":[1],\"759\":[null,1],\"760\":[null,1],\"761\":[null,1],\"762\":[1],\"763\":[1],\"764\":[null,1],\"765\":[2],\"766\":[1],\"767\":[null,1],\"768\":[null,3],\"769\":[null,7],\"770\":[null,2],\"771\":[null,2],\"772\":[null,1],\"773\":[null,2],\"774\":[null,7],\"775\":[null,8],\"776\":[null,4],\"777\":[null,2],\"778\":[null,1],\"779\":[null,3],\"780\":[null,2],\"781\":[null,9],\"782\":[null,2],\"783\":[null,1],\"784\":[null,3],\"785\":[null,4],\"786\":[null,4],\"787\":[null,3],\"788\":[null,6],\"789\":[null,2],\"790\":[null,3],\"791\":[null,1],\"792\":[null,2],\"793\":[null,1],\"794\":[null,2],\"795\":[null,2],\"796\":[null,2],\"797\":[3],\"798\":[null,6],\"799\":[null,3],\"800\":[null,4],\"801\":[null,9],\"802\":[null,11],\"803\":[1],\"804\":[2],\"805\":[2],\"806\":[1],\"807\":[null,3],\"808\":[null,4],\"809\":[null,3],\"810\":[null,4],\"811\":[null,3],\"812\":[null,3],\"813\":[null,8],\"814\":[null,6],\"815\":[null,8],\"816\":[null,6],\"817\":[null,8],\"818\":[null,6],\"819\":[null,9],\"820\":[null,7],\"821\":[null,7],\"822\":[null,7],\"823\":[null,8],\"824\":[null,6],\"825\":[null,8],\"826\":[null,5],\"827\":[null,8],\"828\":[null,4],\"829\":[null,4],\"830\":[null,6],\"831\":[null,6],\"832\":[null,7],\"833\":[null,7],\"834\":[null,6],\"835\":[null,6],\"836\":[null,7],\"837\":[null,7],\"838\":[null,5],\"839\":[null,6],\"840\":[null,6],\"841\":[null,6],\"842\":[null,4],\"843\":[null,4],\"844\":[null,7],\"845\":[null,6],\"846\":[null,5],\"847\":[null,6],\"848\":[null,5],\"849\":[null,5],\"850\":[null,6],\"851\":[null,5],\"852\":[null,5],\"853\":[null,5],\"854\":[null,4],\"855\":[null,5],\"856\":[null,4],\"857\":[null,7],\"858\":[null,9],\"859\":[null,8],\"860\":[null,3],\"861\":[1],\"862\":[null,5],\"863\":[null,12],\"864\":[null,2],\"865\":[null,9],\"866\":[null,4],\"867\":[null,2],\"868\":[null,4],\"869\":[null,3],\"870\":[null,8],\"871\":[null,3],\"872\":[null,3],\"873\":[null,8],\"874\":[null,4],\"875\":[null,8],\"876\":[null,8],\"877\":[null,4],\"878\":[null,8],\"879\":[null,5],\"880\":[null,4],\"881\":[null,4],\"882\":[null,4],\"883\":[null,3],\"884\":[null,5],\"885\":[null,7],\"886\":[null,7],\"887\":[null,5],\"888\":[null,2],\"889\":[null,2],\"890\":[null,2],\"891\":[null,5],\"892\":[null,5],\"893\":[null,5],\"894\":[null,6],\"895\":[null,4],\"896\":[null,5],\"897\":[null,10],\"898\":[null,4],\"899\":[null,5],\"900\":[null,6],\"901\":[null,9],\"902\":[null,4],\"903\":[null,5],\"904\":[null,4],\"905\":[null,4],\"906\":[null,6],\"907\":[null,6],\"908\":[3],\"909\":[null,6],\"910\":[null,6],\"911\":[null,9],\"912\":[null,8],\"913\":[null,12],\"914\":[null,12],\"915\":[null,9],\"916\":[3],\"917\":[null,7],\"918\":[null,7],\"919\":[null,7],\"920\":[2],\"921\":[null,4],\"922\":[null,4],\"923\":[null,6],\"924\":[null,3],\"925\":[null,12],\"926\":[null,13],\"927\":[null,14],\"928\":[3],\"929\":[null,4],\"930\":[null,6],\"931\":[null,4],\"932\":[null,4],\"933\":[null,5],\"934\":[null,13],\"935\":[null,15],\"936\":[null,5],\"937\":[null,4],\"938\":[null,4],\"939\":[1],\"940\":[3],\"941\":[null,7],\"942\":[null,7],\"943\":[null,11],\"944\":[null,9],\"945\":[null,15],\"946\":[null,4],\"947\":[null,6],\"948\":[3],\"949\":[null,4],\"950\":[null,5],\"951\":[null,10],\"952\":[3],\"953\":[null,9],\"954\":[null,10],\"955\":[null,7],\"956\":[null,7],\"957\":[null,9],\"958\":[null,7],\"959\":[null,6],\"960\":[null,6],\"961\":[null,6],\"962\":[null,6],\"963\":[null,8],\"964\":[null,8],\"965\":[null,6],\"966\":[null,7],\"967\":[null,10],\"968\":[null,14],\"969\":[null,7],\"970\":[null,3],\"971\":[null,3],\"972\":[null,5],\"973\":[null,5],\"974\":[null,6],\"975\":[null,6],\"976\":[null,26],\"977\":[null,19],\"978\":[null,7],\"979\":[null,4],\"980\":[null,4],\"981\":[null,4],\"982\":[null,6],\"983\":[null,5],\"984\":[null,12],\"985\":[null,5],\"986\":[null,6],\"987\":[null,2],\"988\":[null,13],\"989\":[null,14],\"990\":[null,11],\"991\":[null,14],\"992\":[null,13],\"993\":[null,4],\"994\":[null,2],\"995\":[null,8],\"996\":[null,5],\"997\":[null,10],\"998\":[3],\"999\":[null,6],\"1000\":[null,6],\"1001\":[null,3],\"1002\":[null,6],\"1003\":[null,6],\"1004\":[null,3],\"1005\":[null,10],\"1006\":[null,6],\"1007\":[null,10],\"1008\":[null,7],\"1009\":[null,6],\"1010\":[null,6],\"1011\":[null,7],\"1012\":[5],\"1013\":[null,6],\"1014\":[null,4],\"1015\":[null,3],\"1016\":[null,6],\"1017\":[null,3],\"1018\":[null,6],\"1019\":[null,9],\"1020\":[null,14],\"1021\":[2],\"1022\":[null,4],\"1023\":[null,5],\"1024\":[null,3],\"1025\":[null,3],\"1026\":[null,7],\"1027\":[null,4],\"1028\":[null,6],\"1029\":[null,6],\"1030\":[null,6],\"1031\":[null,6],\"1032\":[null,8],\"1033\":[2],\"1034\":[2],\"1035\":[null,4],\"1036\":[null,10],\"1037\":[null,7],\"1038\":[null,5],\"1039\":[null,12],\"1040\":[null,16],\"1041\":[2],\"1042\":[null,4],\"1043\":[null,9],\"1044\":[null,5],\"1045\":[null,6],\"1046\":[null,8],\"1047\":[null,5],\"1048\":[null,5],\"1049\":[null,6],\"1050\":[null,8],\"1051\":[null,5],\"1052\":[null,6],\"1053\":[null,3],\"1054\":[null,4],\"1055\":[null,3],\"1056\":[null,4],\"1057\":[null,4],\"1058\":[null,17],\"1059\":[2],\"1060\":[null,10],\"1061\":[null,5],\"1062\":[null,14],\"1063\":[null,7],\"1064\":[null,11],\"1065\":[null,7],\"1066\":[null,8],\"1067\":[null,8],\"1068\":[null,10],\"1069\":[1],\"1070\":[1]},\"averageFieldLength\":[1.2053914108183472,8.111505976479602],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"t\":\"网站框架\"},\"2\":{\"t\":\"vuepress-theme-hope\"},\"3\":{\"t\":\"框架 Markdown 增强说明\"},\"4\":{\"t\":\"iconfont 关键词精选图标\"},\"5\":{\"h\":\"本站开发命令记录\",\"a\":\"本站开发命令记录\"},\"6\":{\"t\":\"编写时开本地服务器实时查看修改效果：pnpm run docs:dev\"},\"7\":{\"t\":\"发布：\"},\"8\":{\"t\":\"GitHub：用 Action + Pages 功能，在 push 之后自动编译并部署\"},\"9\":{\"t\":\"服务器：先pnpm run docs:build在src/.vuepress/dist目录下生成静态网页文件，再部署到服务器上\"},\"10\":{\"h\":\"写作参考\"},\"11\":{\"h\":\"说明\",\"a\":\"说明\"},\"12\":{\"t\":\"此目录下的文章为写作语法参考\"},\"13\":{\"h\":\"图表\",\"a\":\"图表\"},\"14\":{\"h\":\"Mermaid\",\"a\":\"mermaid\"},\"15\":{\"h\":\"自定义容器\",\"a\":\"自定义容器\"},\"16\":{\"t\":\"类型：info, note, tip, warning, danger, details\"},\"17\":{\"t\":\"正常使用时用:::标记开头与结尾，嵌套时用::::标记外层的\"},\"18\":{\"h\":\"对齐\",\"a\":\"对齐\"},\"19\":{\"t\":\"::: center, ::: right\"},\"20\":{\"h\":\"卡片\",\"a\":\"卡片\"},\"21\":{\"h\":\"图片\",\"a\":\"图片\"},\"22\":{\"t\":\"图标描述\"},\"23\":{\"h\":\"导入文件\",\"a\":\"导入文件\"},\"24\":{\"t\":\"可在.vuepress/config.ts中配置pagePatterns避免 MD 文件被渲染成页面\"},\"25\":{\"t\":\"// 启用的主题色 $theme-colors: #c0392b, #d35400, #f39c12, #27ae60, #16a085, #2980b9, #8e44ad, #2c3e50, #7f8c8d;\"},\"26\":{\"h\":\"边栏目录样例\"},\"27\":{\"t\":\"import { defineSidebarConfig } from \\\"vuepress-theme-hope\\\"; export const zhSidebarConfig = defineSidebarConfig({ \\\"/zh/\\\": [ \\\"\\\", { text: \\\"指南\\\", icon: \\\"creative\\\", prefix: \\\"guide/\\\", children: [ \\\"get-started/\\\", \\\"interface/\\\", \\\"layout/\\\", \\\"markdown/\\\", \\\"feature/\\\", \\\"blog/\\\", \\\"advanced/\\\", ], }, { text: \\\"配置\\\", icon: \\\"config\\\", prefix: \\\"config/\\\", children: [ \\\"intro\\\", \\\"i18n\\\", \\\"theme/\\\", \\\"plugins/\\\", \\\"frontmatter/\\\", \\\"style\\\", ], }, { text: \\\"教程\\\", icon: \\\"guide\\\", prefix: \\\"cookbook/\\\", children: [\\\"tutorial/\\\", \\\"markdown/\\\", \\\"vuepress/\\\", \\\"advanced/\\\"], }, { text: \\\"迁移\\\", icon: \\\"change\\\", prefix: \\\"migration/\\\", children: [\\\"config\\\", \\\"page\\\", \\\"style\\\"], }, { text: \\\"常见问题\\\", icon: \\\"question\\\", prefix: \\\"faq/\\\", children: [\\\"\\\", \\\"troubleshooting\\\", \\\"common-error\\\", \\\"vite\\\", \\\"safari\\\"], }, \\\"demo\\\", \\\"changelog\\\", \\\"contribution\\\", ], \\\"/zh/guide/\\\": [ { text: \\\"快速上手\\\", icon: \\\"creative\\\", prefix: \\\"get-started/\\\", collapsable: true, children: [\\\"intro\\\", \\\"install\\\", \\\"markdown\\\"], }, { text: \\\"界面\\\", icon: \\\"palette\\\", prefix: \\\"interface/\\\", collapsable: true, children: [ \\\"darkmode\\\", \\\"theme-color\\\", \\\"icon\\\", \\\"code-theme\\\", \\\"accessibility\\\", \\\"pure\\\", \\\"others\\\", ], }, { text: \\\"布局\\\", icon: \\\"layout\\\", prefix: \\\"layout/\\\", collapsable: true, children: [ \\\"navbar\\\", \\\"sidebar\\\", \\\"page\\\", \\\"breadcrumb\\\", \\\"footer\\\", \\\"home\\\", \\\"slides\\\", ], }, { text: \\\"Markdown 增强\\\", icon: \\\"markdown\\\", prefix: \\\"markdown/\\\", collapsable: true, children: [ \\\"intro\\\", \\\"container\\\", \\\"components\\\", \\\"code-group\\\", \\\"align\\\", \\\"sup-sub\\\", \\\"footnote\\\", \\\"mark\\\", \\\"tasklist\\\", \\\"tex\\\", \\\"flowchart\\\", \\\"mermaid\\\", \\\"demo\\\", \\\"presentation\\\", \\\"others\\\", \\\"external\\\", ], }, { text: \\\"功能\\\", icon: \\\"discover\\\", prefix: \\\"feature/\\\", collapsable: true, children: [ \\\"page-info\\\", \\\"comment\\\", \\\"copy-code\\\", \\\"photo-swipe\\\", \\\"meta\\\", \\\"search\\\", \\\"copyright\\\", \\\"encrypt\\\", ], }, { text: \\\"博客\\\", icon: \\\"blog\\\", prefix: \\\"blog/\\\", collapsable: true, children: [ \\\"intro\\\", \\\"blogger\\\", \\\"article\\\", \\\"category-and-tags\\\", \\\"timeline\\\", \\\"home\\\", ], }, { text: \\\"高级功能\\\", icon: \\\"advance\\\", prefix: \\\"advanced/\\\", collapsable: true, children: [\\\"pwa\\\", \\\"feed\\\", \\\"seo\\\", \\\"sitemap\\\"], }, ], \\\"/zh/config/\\\": [ \\\"intro\\\", \\\"i18n\\\", { text: \\\"主题配置\\\", icon: \\\"config\\\", prefix: \\\"theme/\\\", children: [\\\"\\\", \\\"basic\\\", \\\"feature\\\", \\\"layout\\\", \\\"apperance\\\"], }, { text: \\\"插件配置\\\", icon: \\\"plugin\\\", prefix: \\\"plugins/\\\", children: [ \\\"intro\\\", \\\"blog\\\", \\\"comment\\\", \\\"feed\\\", \\\"md-enhance\\\", \\\"pwa\\\", \\\"others\\\", ], }, { text: \\\"Frontmatter 配置\\\", icon: \\\"page\\\", prefix: \\\"frontmatter/\\\", children: [\\\"info\\\", \\\"layout\\\", \\\"plugins\\\"], }, \\\"style\\\", ], \\\"/zh/cookbook/\\\": [ { text: \\\"教程\\\", icon: \\\"guide\\\", prefix: \\\"tutorial/\\\", children: [ \\\"env\\\", \\\"create\\\", \\\"command\\\", \\\"content\\\", \\\"config\\\", \\\"structure\\\", \\\"deploy\\\", ], }, { text: \\\"Markdown\\\", icon: \\\"markdown\\\", prefix: \\\"markdown/\\\", collapsable: true, children: [ \\\"\\\", \\\"demo\\\", { text: \\\"Emoji\\\", icon: \\\"emoji\\\", link: \\\"emoji/\\\", prefix: \\\"emoji/\\\", collapsable: true, children: [\\\"people\\\", \\\"nature\\\", \\\"object\\\", \\\"place\\\", \\\"symbol\\\"], }, ], }, { text: \\\"VuePress\\\", icon: \\\"vue\\\", prefix: \\\"vuepress/\\\", collapsable: true, children: [\\\"\\\", \\\"file\\\", \\\"markdown\\\", \\\"config\\\", \\\"plugin\\\", \\\"theme\\\"], }, { text: \\\"高级\\\", icon: \\\"advance\\\", prefix: \\\"advanced/\\\", collapsable: true, children: [\\\"component\\\", \\\"style\\\", \\\"replace\\\", \\\"extend\\\"], }, ], }); \"},\"28\":{\"h\":\"幻灯片页\"},\"29\":{\"h\":\"测试\"},\"30\":{\"t\":\"test\"},\"31\":{\"h\":\"说明\"},\"32\":{\"h\":\"说明\",\"a\":\"说明\"},\"33\":{\"t\":\"此目录下的文章是一些随笔\"},\"34\":{\"h\":\"假随机数组词造句\"},\"35\":{\"h\":\"假随机数组词造句\",\"a\":\"假随机数组词造句\"},\"36\":{\"t\":\"在网上看到的，利用伪随机算法，通过设置特定的随机种子使生成的一系列特定数字，将数字对应的字符连起来可组成正常语义的词句。种子获取采用暴力搜索方法，一个一个数字试，看哪个数字生成的数字序列符合要求（自定义截止数字）\"},\"37\":{\"t\":\"首先要控制随机数生成的区间，越大的区间随机到想要的数字的概率越低，符合要求的种子越难找，甚至有可能不存在\"},\"38\":{\"t\":\"因为种子参数类型为long，故搜寻空间为Long.MIN_VALUE ~ Long.MAX_VALUE，再考虑到越短的数字看起来越简洁，故按照绝对值从小到大进行搜索\"},\"39\":{\"t\":\"若待生成的词句为纯英文小写，则可利用 ASCII 码进行映射（a ~ z <--> 97 ~ 123），再考虑截止数字与区间的连续性，可取为 96。若待生成的词句为汉字则得用 Unicode 编码映射，但由于字符区间过长，很有可能找不到特定种子，不予实现\"},\"40\":{\"t\":\"在进行稍长的查找时就会明显过长，后续可以考虑将区间分段用多线程分别同时查找\"},\"41\":{\"h\":\"图片隐写\"},\"42\":{\"t\":\"利用隐写技术，将对小熊的生日祝福嵌入图片中，图中为其出生之日的月相\"},\"43\":{\"t\":\"from blind_watermark import WaterMark def embed(): bwm1.read_img('moon.jpg') bwm1.read_wm(content, mode='str') bwm1.embed('embedded.jpg') return len(bwm1.wm_bit) def extract(): extract = bwm1.extract(filename='embedded.jpg', wm_shape=wm_len, mode='str') print(extract) if __name__ == '__main__': bwm1 = WaterMark(password_wm=1999, password_img=925) content = '月亮照回湖心，野鹤奔向闲云，我步入你、n\\\\t 熊宝生日快乐！！！' wm_len = embed() extract() \"},\"44\":{\"h\":\"日常小问题的解决\"},\"45\":{\"h\":\"歌单转移\",\"a\":\"歌单转移\"},\"46\":{\"t\":\"记录将网易云音乐或 QQ 音乐的歌单转移到 Apple Music 中的步骤\"},\"47\":{\"t\":\"以链接形式分享歌单，从链接中得到 ID \"},\"48\":{\"t\":\"如链接为 https://i.y.qq.com/n2/m/share/details/taoge.html?id=1736483147，则 ID 为 1736483147\"},\"49\":{\"t\":\"凭借 ID 在此 项目 的 网站 中将歌单转为文字形式\"},\"50\":{\"t\":\"在 TuneMyMusic 中将文字形式的歌单导入至 Apple Music 中 \"},\"51\":{\"t\":\"选择来源为从文本\"},\"52\":{\"t\":\"粘贴刚刚复制的内容到文本框中\"},\"53\":{\"t\":\"耐心等待歌单转换完成\"},\"54\":{\"t\":\"选择 Apple Music 作为目的地并开始迁移\"},\"55\":{\"t\":\"等待最终移动结果\"},\"56\":{\"t\":\"移动完成后可下载迁移失败的歌曲信息【网络原因下载 CSV 文件较慢】\"},\"57\":{\"h\":\"macOS\",\"a\":\"macos\"},\"58\":{\"t\":\"macOS 13 (Ventura) 内置的 OpenSSH 版本认为 RSA 默认采用的 SHA-1 算法已经不再安全，所以会阻止此类签名算法验证的登陆行为。这篇文章 建议采用目前性能最好且最安全的EdDSA算法。 \"},\"59\":{\"t\":\"生成密钥对：ssh-keygen -t ed25519 -C \\\"my_key_name\\\"\"},\"60\":{\"t\":\"查看密钥对指纹：ssh-keygen -lf my_key_name\"},\"61\":{\"h\":\"macOS + Latex\",\"a\":\"macos-latex\"},\"62\":{\"h\":\"Latex 源码与 PDF 之间相互跳转\",\"a\":\"latex-源码与-pdf-之间相互跳转\"},\"63\":{\"t\":\"在安装 LaTeX Workshop 插件且 PDF 在 VSCode 内置标签页浏览条件下：\"},\"64\":{\"t\":\"源码跳 PDF：option+command+j\"},\"65\":{\"t\":\"PDF 跳源码：command+单击\"},\"66\":{\"h\":\"格式化问题\",\"a\":\"格式化问题\"},\"67\":{\"t\":\"这是 VSCode + Latex 写作环境配置问题，.tex 文件无法通过 latexindent 格式化（LaTex Workshop 插件）\"},\"68\":{\"t\":\"Mac 自带 perl 和 cpan，还需要装有 CommandLineTools\"},\"69\":{\"t\":\"设置 perl 模块路径： \"},\"70\":{\"t\":\"终端执行 PERL_MM_OPT=\\\"INSTALL_BASE=$HOME/.perl5\\\" cpan local::lib\"},\"71\":{\"t\":\"在 .zshrc 中添加 eval \\\"$(perl -I$HOME/.perl5/lib/perl5 -Mlocal::lib=$HOME/.perl5)\\\" 并 source\"},\"72\":{\"t\":\"用 cpanm 安装 latexindent 依赖的包，终端执行： \"},\"73\":{\"t\":\"brew install cpanm\"},\"74\":{\"t\":\"cpanm --local-lib=~/.perl5 local::lib && eval $(perl -I ~/.perl5/lib/perl5/ -Mlocal::lib)\"},\"75\":{\"t\":\"sudo cpanm -l $HOME/.perl5 Log::Log4perl Log::Dispatch::File YAML::Tiny File::HomeDir Unicode::GCString\"},\"76\":{\"t\":\"-l 参数是为了将包指定安装在 perl 所设置的模块路径中，如此 perl 才能使用这些模块；若缺少此参数，则 cpanm 会将模块安装在新建的 $HOME/perl5 路径中\"},\"77\":{\"t\":\"安装时会夹杂 ! Finding XXX on cpanmetadb failed. 提示，这种不用管，只需确认最终提示模块安装成功即可\"},\"78\":{\"h\":\"找不到 STHeiti\",\"a\":\"找不到-stheiti\"},\"79\":{\"t\":\"STHeiti实际上就是华文黑体，但 macOS 上自带的字体文件缺少能被 Latex 所选用的字体宏包所识别的特定样式，故得在网上下载STHeiti.ttf文件再次安装。安装会提示已存在一种样式，选择保留两者即可。\"},\"80\":{\"h\":\"Apache2 服务器\",\"a\":\"apache2-服务器\"},\"81\":{\"t\":\"【参考教程】\"},\"82\":{\"t\":\"【配置 HTTPS 访问教程】\"},\"83\":{\"t\":\"操作服务器 \"},\"84\":{\"t\":\"sudo apachectl -k start\"},\"85\":{\"t\":\"sudo apachectl -k restart\"},\"86\":{\"t\":\"sudo apachectl -k stop\"},\"87\":{\"t\":\"主要配置文件【目录：/etc/apache2/httpd.conf】 \"},\"88\":{\"t\":\"DocumentRoot: /Library/WebServer/Documents\"},\"89\":{\"t\":\"文件根目录，修改时需同时变动两行\"},\"90\":{\"t\":\"这是默认路径，虚拟主机会将其覆盖\"},\"91\":{\"t\":\"ServerName: 127.0.0.1:80\"},\"92\":{\"t\":\"主机域名设置\"},\"93\":{\"t\":\"有时使用 Zerotier 虚拟内网访问时 80 端口不可用，在 Listen 周围添加新的侦听端口 Listen 9999\"},\"94\":{\"t\":\"启用虚拟目录功能：将 #Include /private/etc/apache2/extra/httpd-vhosts.conf 取消注释，再配置虚拟主机配置文件\"},\"95\":{\"t\":\"文件最后配置允许使用 PHP \"},\"96\":{\"t\":\"由于 PHP 是自己用 brew 装的，所以一开始会有签名问题，搜一下报错信息就能找到教程解决\"},\"97\":{\"t\":\"虚拟主机配置文件【目录：/etc/apache2/extra/httpd-vhosts.conf】 \"},\"98\":{\"t\":\"DocumentRoot: /Library/WebServer/Sites\"},\"99\":{\"t\":\"覆盖了 http.conf 中的文件根目录\"},\"100\":{\"t\":\"修改时记得同时改两行\"},\"101\":{\"h\":\"Linux 相关\",\"a\":\"linux-相关\"},\"102\":{\"t\":\"sudo 执行时会自动重置系统变量【如环境路径等变量】，所以 sudo python 跟 python 用的很可能不是同一个解释器\"},\"103\":{\"t\":\"wget下载举例：wget -c http://download.cs.stanford.edu/orion/partnet_dataset/sem_seg_h5.zip -e use_proxy=yes -e http_proxy=192.168.0.107:20172\"},\"104\":{\"t\":\"添加-c参数以实现断点续传\"},\"105\":{\"t\":\"-e use_proxy=yes -e http_proxy=$proxy_ip$用来指定网络代理\"},\"106\":{\"h\":\"OpenCV + OpenCV_contrib 编译\",\"a\":\"opencv-opencv-contrib-编译\"},\"107\":{\"t\":\"主要问题是实际编译后某些 contrib 的扩展库文件需要手动拷贝到安装路径中去，否则使用时无法导入\"},\"108\":{\"t\":\"参考博客 1\"},\"109\":{\"t\":\"参考博客 2\"},\"110\":{\"t\":\"问题解决博客\"},\"111\":{\"h\":\"网络连接问题\",\"a\":\"网络连接问题\"},\"112\":{\"t\":\"教研室用 Zerotier 组的虚拟内网，但用移动的垃圾宽带会连不上，可能有几种问题：\"},\"113\":{\"t\":\"学校宿舍校园移动宽带连不上，因为移动劫持了，在系统设置里换个 DNS 服务器即可解决，用前先测速，一般用阿里云的223.6.6.6，也不必费心设啥国外的 DNS，因为虽然国内所有 DNS 都有域名审查与拦截，但即使设成国外 DNS 也能拦下来再回个假的，详见此 论文。\"},\"114\":{\"t\":\"老家也是移动宽带连不上，师弟给我科普，是因为移动是个大内网，下属一个片区用一个公网 IP，入户宽带仅是内网地址，路由器是二阶内网，其下的子网才是主机，再加上教研室也是移动网，于是俩主机之间经过了无数层，并且移动会屏蔽端口，导致俩主机之间无法通信。现状是移动光猫 H2-3 搭配 TP-LINK 路由器，采用光猫软路由搭配路由器自动获取地址方式上网，解决方案就是利用 DMZ 把主机暴露出去，但实测保持软路由并直接在光猫上启用 DMZ 并不可行，所以只能采用光猫桥接搭配路由器拨号上网的方式，步骤如下： \"},\"115\":{\"t\":\"先利用超级管理帐密登陆光猫管理界面，关闭 QOS，开 UPNP，开 DMZ 并将 DMZ 指向本机，最后将上网模式由软路由改为桥接，重启光猫。 \"},\"116\":{\"t\":\"改桥接之前先记录软路由方式中的宽带帐密（检查密码框元素把 type=\\\"password\\\"中的 password 删掉会车即可看到密码）\"},\"117\":{\"t\":\"上述开关并不在同一处，需要到处找\"},\"118\":{\"t\":\"登陆路由器管理界面，将上网方式改为宽带拨号上网并填入宽带帐密，等待连接成功\"},\"119\":{\"t\":\"在路由器的 DMZ 主机应用中开启 DMZ 并指向本机 IP（可以顺便绑定下 IP 和 MAC）\"},\"120\":{\"h\":\"回溯\"},\"121\":{\"h\":\"不同的二叉搜索树 II\",\"a\":\"不同的二叉搜索树-ii\"},\"122\":{\"t\":\"Description\"},\"123\":{\"t\":\"给定整数n，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\"},\"124\":{\"t\":\"Solution\"},\"125\":{\"t\":\"不同的二叉搜索树 只是要求统计不同搜索树的数量，但此题需要将所有树实际构造出来，故得用回溯方式。\"},\"126\":{\"t\":\"回溯时按照遍历根节点递归分左右子树的思路依旧：对于节点序列 1,⋯,n ，可以遍历取特定数 i 作为根节点，则左右子树节点序列为 1,⋯,(i−1) 和 (i+1),⋯,n ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。\"},\"127\":{\"t\":\"对于我来说此题较难的地方在于构建回溯的代码形式，回溯函数的返回值不应是一般的单个节点，而应是各子树的根节点列表，因为左右子树的笛卡尔积会导致即使单个值作为根节点，因为左右子树的结构不同，也常会实际构造多棵树。\"},\"128\":{\"t\":\"由于回溯函数返回的是以某范围的值为根节点的所有种类的搜索树，故对于上一层来说，只需要模拟笛卡尔积的运算即可，也就是说对于特定的值，以其为根节点的所有种类的搜索树的构造就是，每次从返回的左右子搜索树列表中挑选一对有别于之前的，拼成一颗新搜索树再加到本级回溯函数的返回列表中即可\"},\"129\":{\"t\":\"class Solution { public List<TreeNode> generateTrees(int n) { if (n == 0) return new ArrayList<>(); return build(1, n); } private List<TreeNode> build(int left, int right) { List<TreeNode> allTrees = new ArrayList<>(); if (left > right) { allTrees.add(null); return allTrees; } for (int i = left; i <= right; ++i) { List<TreeNode> leftTrees = build(left, i - 1); List<TreeNode> rightTrees = build(i + 1, right); for (TreeNode leftNode : leftTrees) { for (TreeNode rightNode : rightTrees) { TreeNode node = new TreeNode(i); node.left = leftNode; node.right = rightNode; allTrees.add(node); } } } return allTrees; } } \"},\"130\":{\"h\":\"组合总和 II\",\"a\":\"组合总和-ii\"},\"131\":{\"t\":\"Description\"},\"132\":{\"t\":\"给定目标值和含重复数字的数组，找出数组中所有和为目标值的不同子集。数组中的每个数字在每个子集中只能使用一次，但重复数字可以一起使用\"},\"133\":{\"t\":\"Solution\"},\"134\":{\"t\":\"此题与基础的同一集合中求不同组合所不同的是可以含重复数字，因为不同的重复数字在回溯时不算同一个，但在最后求得组合结果时显然会因为数值相同算作重复，所以考虑先排序数组，将重复的数字并在一起在相邻的层进行连续处理。\"},\"135\":{\"t\":\"鉴于重复的组合是因为同层遍历时用了个体不同但数值相同的数，所以具体实现的时候只需要在同层遍历时进行判断，限定相同的数只能在最开始的时候用一次即可。并且由于下一层不关注起始索引之前的路径，所以也并不会影响到寻找需要同时用到多个重复数的子集\"},\"136\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private LinkedList<Integer> path = new LinkedList<>(); public List<List<Integer>> combinationSum2(int[] candidates, int target) { Arrays.sort(candidates); dfs(candidates, target, 0); return res; } private void dfs(int[] candidates, int target, int start) { if (target == 0) { res.add(new ArrayList<>(path)); return; } for (int i = start; i < candidates.length; ++i) { if (i > start && candidates[i] == candidates[i - 1]) continue; if (target < candidates[i]) break; path.add(candidates[i]); dfs(candidates, target - candidates[i], i + 1); path.removeLast(); } } } \"},\"137\":{\"h\":\"递增子序列\",\"a\":\"递增子序列\"},\"138\":{\"t\":\"Description\"},\"139\":{\"t\":\"Solution\"},\"140\":{\"t\":\"乍一看能套用 组合总和 II 的模版，但由于此题求递增子序列要求元素相对位置不能变，所以无法通过排序将重复数字并到一块，即使通过改变同层遍历的重复判定条件为if (i > start && (nums[i] == nums[i - 1] || nums[i] == nums[start]))也只能滤掉起始索引为首个重复值的分块连续重复值情况（如1, 2, 3, 1, 1）。而对于分块连续重复值的起始索引不是重复值的情况，若想完全去除同层重复，则需要确保当前遍历到的值与之前所有值都不同，因为路径也无法提供同层的帮助，故做到这点势必会导致增加额外的开销，要么每次遍历查找费时，要么用哈希表费空间（其实也能接受），所以此题再强行套用上述模版已不再是最优方案。\"},\"141\":{\"t\":\"所以引入另一套更为通用的模版思想，即一层仅考虑当前位置数字的选择与否，若不选则直接进入下一层递归，若选则按回溯规则在下一层递归前后进行处理和反处理。对于此题，递增子序列的合法性由仅把不小于路径末尾的值加入来保证，而导致重复序列的原因是原数组中可能存在不连续分布的重复值，鉴于选取的子序列也不一定在原数组中连续，故以上一个选取的数（路径末尾值）作为前一个数，与当前数进行选取与否的考虑。具体来说，导致重复的原因是选了前一个数没选当前数和没选前一个数选了当前数这两种情况实质上等效，所以需要加上限制条件禁止其中一种。鉴于存在连续多个重复值的情况，令限制条件为仅当前一个数与当前数不同时才考虑不选当前数（若相同则必选当前数，因为前一个数可能因为其再前一个数不同而没选）。因为此思路是一路做选择直到数据末尾，会自然涵盖所有情况，所以递归终止条件为递归到达数据末尾\"},\"142\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private List<Integer> path = new ArrayList<>(); private int[] nums; public List<List<Integer>> findSubsequences(int[] nums) { this.nums = nums; dfs(0, Integer.MIN_VALUE); return res; } private void dfs(int cur, int last) { if (cur == nums.length) { if (path.size() > 1) res.add(new ArrayList<>(path)); return; } if (last <= nums[cur]) { // choose path.add(nums[cur]); dfs(cur + 1, nums[cur]); path.remove(path.size() - 1); } if (last != nums[cur]) // not choose dfs(cur + 1, last); } } \"},\"143\":{\"h\":\"剑指 Offer 38. 字符串的排列\",\"a\":\"剑指-offer-38-字符串的排列\"},\"144\":{\"t\":\"Description\"},\"145\":{\"t\":\"求给定含重复字符的字符串所有字符的所有排列\"},\"146\":{\"t\":\"Solution\"},\"147\":{\"t\":\"类比之前 组合总和 II 中求组合的回溯模版，此题是求所有排列而非所有组合，即每个位置都是从本次排列所有还未使用的字符中挑选一个，所以在每层回溯函数中待选的字符并不需要从某个起始索引开始，而是从头开始选一个未使用的，所以需要标记数组来记录本次排列哪些字符已经用过。此外还有不同的重复字符多次排列的结果重复问题，因为原始集合中含重复值，故参考组合的处理方式，先将字符按字典序排序以把相同字符并到一起，在同层遍历时保证对于多个重复的字符，只会用还未使用的部分中最左边的那个\"},\"148\":{\"t\":\"class Solution { private List<String> res = new ArrayList<>(); private StringBuilder path = new StringBuilder(); private boolean[] used; public String[] permutation(String s) { used = new boolean[s.length()]; char[] str = s.toCharArray(); Arrays.sort(str); dfs(str); String[] result = new String[res.size()]; for (int i = 0; i < res.size(); ++i) result[i] = res.get(i); return result; } private void dfs(char[] str) { if (path.length() == str.length) { res.add(path.toString()); return; } for (int i = 0; i < str.length; ++i) { if (used[i] || (i > 0 && str[i - 1] == str[i] && !used[i - 1])) continue; used[i] = true; path.append(str[i]); dfs(str); path.deleteCharAt(path.length() - 1); used[i] = false; } } } \"},\"149\":{\"h\":\"全排列\",\"a\":\"全排列\"},\"150\":{\"t\":\"Description\"},\"151\":{\"t\":\"求给定不含重复元素的数组的全排列\"},\"152\":{\"t\":\"Solution\"},\"153\":{\"t\":\"此题不含重复元素，比含重复元素的要少排序和回溯判重步骤，用全排列的回溯模版也挺容易解，但还有另一种不需要标记数组的回溯解法。\"},\"154\":{\"t\":\"在回溯全过程中维护动态变化的数组，该数组被一个标记索引分为两部分，左边为已经填入的元素，右边为待填入的元素，其本身所指为当前待填的位置。在选择元素加入全排列时，每次都从右边选一个，将标记索引指向的数与选中的数互换，如此来保证进入下一层时标记索引左侧的数都是已选择的，等回溯时再换回来撤销处理。\"},\"155\":{\"t\":\"具体来说，标记索引初始时在最左边，每向下一层就向右移动一位；而在同一层中，另起一个索引变量用来遍历标记索引右侧所有元素，遍历过程中将标记索引与当前元素换位置，然后进入下一层，回溯时再换回来。当标记索引移动到最右边时就达成了一种全排列，将当前排列复制一份加入到答案中\"},\"156\":{\"t\":\"class Solution { private List<List<Integer>> res = new ArrayList<>(); private List<Integer> dynamic = new ArrayList<>(); public List<List<Integer>> permute(int[] nums) { for (int num : nums) dynamic.add(num); backtrack(nums, 0); return res; } private void backtrack(int[] nums, int div) { if (div == nums.length) res.add(new ArrayList<>(dynamic)); for (int i = div; i < nums.length; ++i) { Collections.swap(dynamic, i, div); backtrack(nums, div + 1); Collections.swap(dynamic, i, div); } } } \"},\"157\":{\"h\":\"N 皇后\",\"a\":\"n-皇后\"},\"158\":{\"t\":\"Description\"},\"159\":{\"t\":\"将n个皇后放入n*n的棋盘中，要求一行、一列、一条斜线内都只能存在一个皇后\"},\"160\":{\"t\":\"Solution\"},\"161\":{\"t\":\"标准的回溯搜索题，就是一个一个格子往后试验，放置成功的话就进入下一层继续搜索，但此题有几个针对性的小技巧和几个需要注意的点。\"},\"162\":{\"t\":\"每个到一个格子都需要进行放置的合法性检查，若每次都进行行、列和两种方向斜线（斜杠和反斜杠两种方向）的遍历查找肯定很慢，由题目条件可知每行、每列、每条斜线有且仅有一个皇后，所以应当存储并维护每行、每列、每条斜线的放置状态，这样对于每个格子都可快速判断能否放置，从而在大量的搜索中节约大量时间。\"},\"163\":{\"t\":\"行和列很容易解决状态记录的编号问题，但两种方向的斜线就稍显麻烦。只需要把每行每列的索引写标出来再画出斜线，就会意识到很像坐标系中的一次函数，实际上，斜杠方向同一斜线上所有格子行和列相加为相同值，反斜杠方向同一斜线上所有格子行和列相减为相同值。所以我们可以将两种方向的斜线分开编号，以上述的特定值来区分各斜线。\"},\"164\":{\"t\":\"对于各皇后具体放置位置的记录，实际上可以仅用一维数组存储（第i行的皇后在第queens[i]列），并且这样记录也恰好契合每层搜索基于行的形式，即同层仅进行列的遍历以寻找能放置的格子而不同层搜索不同行\"},\"165\":{\"t\":\"class Solution { private List<List<String>> result = new ArrayList<>(); private int[] queens; // column of each row private boolean[] col; // column has queen? private boolean[] diag1; // diag-1 has queen? private boolean[] diag2; // diag-2 has queen? public List<List<String>> solveNQueens(int n) { queens = new int[n]; col = new boolean[n]; diag1 = new boolean[2 * n - 1]; diag2 = new boolean[2 * n - 1]; backtrack(0, n); return result; } private void backtrack(int row, int n) { if (row == n) { result.add(getBoard(n)); return; } for (int c = 0; c < n; ++c) { int d1 = row - c + n - 1; int d2 = row + c; if (col[c] || diag1[d1] || diag2[d2]) continue; col[c] = true; diag1[d1] = true; diag2[d2] = true; queens[row] = c; backtrack(row + 1, n); col[c] = false; diag1[d1] = false; diag2[d2] = false; } } private List<String> getBoard(int n) { List<String> res = new ArrayList<>(); char[] row = new char[n]; for (int i = 0; i < n; ++i) row[i] = '.'; for (int i = 0; i < n; ++i) { row[queens[i]] = 'Q'; res.add(String.valueOf(row)); row[queens[i]] = '.'; } return res; } } \"},\"166\":{\"h\":\"解数独\",\"a\":\"解数独\"},\"167\":{\"t\":\"Description\"},\"168\":{\"t\":\"解9*9数独，要求每行、每列、每宫（3*3格子组成）都含数字1~9且无重复\"},\"169\":{\"t\":\"Solution\"},\"170\":{\"t\":\"标准的回溯搜索题，但有几个点。\"},\"171\":{\"t\":\"回溯需要对大量的格子反复进行某数能否放置的检查，临时遍历每行、每列、每宫会耗费大量时间，故应存储并维护每行、每列、每宫内各数字是否已存在的状态以便快速查询，例如row[i][k]标识第i行中是否已存在数字k，squ[i][j][k]标识第i行的第j列个宫内是否已存在数字k。\"},\"172\":{\"t\":\"可以在初始因维护上述状态而进行格子遍历时顺便将待填充的格子的位置记下来，以便后续能只对这些位置进行快速搜索而无需遍历其他已填充格子。还可以添加全局类型的是否完成标志，用于在完成全部填充之后快速结束程序\"},\"173\":{\"t\":\"class Solution { // 记录某行/列/宫是否已存在某数 private boolean[][] row = new boolean[9][9]; private boolean[][] col = new boolean[9][9]; private boolean[][][] squ = new boolean[3][3][9]; // 记录需填充坐标，节省遍历时间 private List<int[]> empty = new ArrayList<>(); private boolean finished = false;// 用于剪枝 public void solveSudoku(char[][] board) { for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { if (board[i][j] == '.') empty.add(new int[] { i, j }); else { int idx = board[i][j] - '0' - 1; row[i][idx] = col[j][idx] = true; squ[i / 3][j / 3][idx] = true; } } } dfs(board, 0); } private void dfs(char[][] board, int idx) { if (idx == empty.size()) { finished = true; return; } int r = empty.get(idx)[0]; int c = empty.get(idx)[1]; for (int i = 0; !finished && i < 9; ++i) { if (!row[r][i] && !col[c][i] && !squ[r / 3][c / 3][i]) { board[r][c] = (char) (i + '0' + 1); row[r][i] = col[c][i] = squ[r / 3][c / 3][i] = true; dfs(board, idx + 1); row[r][i] = col[c][i] = squ[r / 3][c / 3][i] = false; } } } } \"},\"174\":{\"h\":\"重新安排行程\",\"a\":\"重新安排行程\"},\"175\":{\"t\":\"Description\"},\"176\":{\"t\":\"给定一组起点-终点对tickets，其中tickets[i] = [from, to]表示该段的起点和终点，在必须将每段行程都完成一遍且仅可完成一遍的条件下，规划出依次经过的点，求字典序最小的规划。要求规划的起始点必须是点\\\"JFK\\\"。给定数据保证至少存在一种合理规划\"},\"177\":{\"t\":\"Solution\"},\"178\":{\"t\":\"看题干是一道图论题，给出的条件构成一个连通有向图，且最多只存在一个节点的出度为零，题目要求的规划实际上是求该图的欧拉路径【从某节点出发沿有向边方向不重复地遍历图中所有的边】，并且求的是路径沿途节点名字典序最小的那条。\"},\"179\":{\"t\":\"我们在搜索之前，可以将给定数据整理成拓扑排序那般的哈希表，以节点为键以其所有下游节点列表为值，考虑到题目要求字典序，那么向下游搜索的时候肯定优先选字典序小，故下游节点可用优先队列存储，每次出队的就是剩余下游节点中字典序最小的。其实用优先队列的话还要考虑向下搜索发现此路不通时回溯的操作，是否需要将出队的元素再添加回来，如果需要像普通回溯那样添加回来，那下次搜索出队的依旧是该节点，导致其他下游节点永不被进入搜索而死循环，所以加下来从整体考虑是否会有这个问题。\"},\"180\":{\"t\":\"对于有向图的 DFS 来说，如果搜到了无下游节点的节点就会进行回溯。在本题条件下，从给定的起点开始按字典序优先进行 DFS，若不存在出度为零的节点则可以顺畅地按照字典序优先完成 DFS 得到规划，重点考虑存在导致搜索进入死胡同的节点，该点必须为规划的终点，即使此条件下路径的字典序不是最小的。在存在此类点的前提下，也分两种情况，一是按照字典序优先该点恰好排在最后，皆大欢喜，所以实际需要考虑的只有该点出现在搜索中间某处的情况。\"},\"181\":{\"t\":\"仔细思考死胡同节点在 DFS 中间的过程，可以发现依次为向下深入到死胡同节点、回溯到有其他下游节点的节点、深入其他下游节点完成其他所有边的遍历这几个阶段，所以解决问题的关键其实将节点添加入规划的时机，不是在向下深入时而是在回溯时添加。在回溯时添加的话，可以发现顺序是死胡同节点向上到有其他下游节点的节点、其他能正常完成搜索的节点的逆序回溯，所以整个规划中节点添加的顺序恰好为字典序的逆序，最后只需将规划逆序即可，并且也不存在需要像普通回溯那般撤销处理的操作，也就不存在之前讨论的问题了\"},\"182\":{\"t\":\"例如tickets = [[\\\"JFK\\\", \\\"NRT\\\"], [\\\"JFK\\\", \\\"KUL\\\"], [\\\"NRT\\\", \\\"JFK\\\"]]，按照字典序 DFS 时就会先进入\\\"KUL\\\"这个死胡同节点，但是按照回溯时添加的解法，实际获得逆序规划的过程就是：\"},\"183\":{\"t\":\"JFK -> KUL\"},\"184\":{\"t\":\"path.add(KUL)\"},\"185\":{\"t\":\"KUL return JFK\"},\"186\":{\"t\":\"JFK -> NRT\"},\"187\":{\"t\":\"NRT -> JFK\"},\"188\":{\"t\":\"path.add(JFK)\"},\"189\":{\"t\":\"JFK return NRT\"},\"190\":{\"t\":\"path.add(NRT)\"},\"191\":{\"t\":\"NRT return JFK\"},\"192\":{\"t\":\"path.add(JFK)\"},\"193\":{\"t\":\"class Solution { private Map<String, PriorityQueue<String>> aim = new HashMap<>(); private List<String> res = new ArrayList<>(); public List<String> findItinerary(List<List<String>> tickets) { for (List<String> t : tickets) { PriorityQueue<String> to = aim.computeIfAbsent(t.get(0), x -> new PriorityQueue<>()); to.add(t.get(1)); } dfs(\\\"JFK\\\"); Collections.reverse(res); return res; } private void dfs(String cur) { PriorityQueue<String> to = aim.get(cur); if (to != null) while (!to.isEmpty()) dfs(to.poll()); res.add(cur); } } \"},\"194\":{\"h\":\"动态规划\"},\"195\":{\"h\":\"基本类型\",\"a\":\"基本类型\"},\"196\":{\"h\":\"不同的二叉搜索树\",\"a\":\"不同的二叉搜索树\"},\"197\":{\"t\":\"Description\"},\"198\":{\"t\":\"给定整数n，求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\"},\"199\":{\"t\":\"Solution\"},\"200\":{\"t\":\"对于节点序列 1,⋯,n ，可以遍历取特定数 i 作为根节点，则左右子树节点序列为 1,⋯,(i−1) 和 (i+1),⋯,n ，则可以继续递归遍历尝试构建搜索子树，且如此构建的树的唯一性由根节点的不同来保证。由于原问题可以分解为俩规模较小的子问题，且子问题的解可复用，故考虑用动态规划求解，定义：\"},\"201\":{\"t\":\"G(n) 代表序列长度为 n 的不同搜索树数量\"},\"202\":{\"t\":\"F(i,n) 代表以 i 为根节点且长度为 n 的不同搜索树数量\"},\"203\":{\"t\":\"显然有 G(n)=i=1∑n​F(i,n) ，且边界条件 G(0)=G(1)=1 。而对于以 i 为根节点的搜索树来说，其不同子树结构数量为左右子树节点集合的笛卡尔积，即 F(i,n)=G(i−1)⋅G(n−i) ，故最终得到 G(n)=i=1∑n​G(i−1)⋅G(n−i) ，计算答案时只需从小到大计算 G(n) 即可\"},\"204\":{\"t\":\"实际上上述推导的函数为卡塔兰数 Cn​，其简便计算的定义为 Cn+1​=n+22(2n+1)​Cn​,C0​=1\"},\"205\":{\"t\":\"class Solution { public int numTrees(int n) { int[] res = new int[n + 1]; res[0] = res[1] = 1; for (int k = 2; k <= n; ++k) for (int i = 1; i <= k; ++i) res[k] += res[i - 1] * res[k - i]; return res[n]; } } \"},\"206\":{\"h\":\"打家劫舍 II\",\"a\":\"打家劫舍-ii\"},\"207\":{\"t\":\"Description\"},\"208\":{\"t\":\"给定代表每个房屋存放金额的非负整数数组，房屋首尾相连成环，在每间房仅可偷一次且不偷相连的房屋前提下，求能够偷窃到的最高金额\"},\"209\":{\"t\":\"Solution\"},\"210\":{\"t\":\"因为成环且不能抢相邻的，所以抢第一间和最后一间就不能都抢，实际上可以拆成俩子问题，即在[0, n-2]和[1, n-1]范围内分别计算抢的最大金额，再取较大者作为最终答案。\"},\"211\":{\"t\":\"对于单个子问题，就是经典的范围动态规划，令dp[i]为遍历到i时获得的最大金额（不管抢不抢i），则有dp[i] = max(dp[i-1], dp[i-2]+nums[i])，即取抢和不抢的较大者。但这涉及到前俩的初始化值，即使将 dp 数组降维压缩也稍显麻烦。\"},\"212\":{\"t\":\"较简单的形式是仅基于上一间房屋的俩状态来思考抢还是不抢当前房屋，先将抢的最大收益算出来存着，再基于上一房屋的状态更新不抢的最大收益，最后用缓存更新抢的收益。如此遍历到最后一间，最大收益即为抢和不抢俩状态的较大者，代码如下\"},\"213\":{\"t\":\"class Solution { public int rob(int[] nums) { if (nums.length == 1) return nums[0]; return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1)); } private int rob(int[] nums, int left, int right) { int rob = 0; // maximum money can get if rob current house int unrob = 0; // maximum money can get if unrob current house for (int i = left; i <= right; ++i) { int curRob = unrob + nums[i]; // rob current house, means unrob previous one unrob = Math.max(unrob, rob); // unrob current house, take maximum of rob and unrob previous one rob = curRob; } return Math.max(rob, unrob); } } \"},\"214\":{\"h\":\"打家劫舍 III\",\"a\":\"打家劫舍-iii\"},\"215\":{\"t\":\"Description\"},\"216\":{\"t\":\"给定代表每个房屋存放金额的非负节点值二叉树，从根节点开始往下抢，在每间房仅可偷一次且不偷直接相连的房屋前提下，求能够偷窃到的最高金额\"},\"217\":{\"t\":\"Solution\"},\"218\":{\"t\":\"对于树自然想到 DFS 自底向上返回遍历，可令 DFS 函数返回值为含俩元素的数组，元素分别代表以当前节点为根的树，抢与不抢根节点的最大收益。对于函数内部返回值的计算：\"},\"219\":{\"t\":\"抢当前节点，则不可抢其左右子节点，最大收益为当前节点值、不抢左子节点作为根节点的最大收益、不抢右子节点作为根节点的最大收益这三者之和\"},\"220\":{\"t\":\"不抢当前节点，则子节点抢不抢都行，最大收益为以左子节点为根节点的最大收益与以右子节点为根节点的最大收益这二者之和\"},\"221\":{\"t\":\"class Solution { public int rob(TreeNode root) { int[] res = dfs(root); return Math.max(res[0], res[1]); } private int[] dfs(TreeNode node) { if (node == null) return new int[2]; int[] left = dfs(node.left); int[] right = dfs(node.right); int rob = node.val + left[1] + right[1]; int unrob = Math.max(left[0], left[1]) + Math.max(right[0], right[1]); return new int[] { rob, unrob }; } } \"},\"222\":{\"h\":\"整数拆分\",\"a\":\"整数拆分\"},\"223\":{\"t\":\"Description\"},\"224\":{\"t\":\"给定一个大于 1 的正整数，将其拆分为两个及以上正整数之和，求拆分出的正整数之积的最大值\"},\"225\":{\"t\":\"Solution\"},\"226\":{\"t\":\"给定正整数拆为俩数之和，可以打住直接求俩数之积，也可将俩数继续往下拆分。因正整数对应的最大乘积取决于比其小的正整数对应的最大乘积，故用动态规划来做，令dp[i]表示将正整数i拆分成至少两个正整数的和所对应的最大乘积，0 和 1 都不可拆，故初始条件dp[0] = dp[1] = 0。当i > 1时，设其拆成j和i-j，其中1 <= j < i：\"},\"227\":{\"t\":\"若i-j继续拆分，则dp[i] = j*dp[i-j]\"},\"228\":{\"t\":\"若i-j打住不继续拆，则dp[i] = j*(i-j)\"},\"229\":{\"t\":\"故此种拆分情况下有dp[i] = max⁡(j*(i−j), j*dp[i−j])，所以对于i的拆分的最大乘积为遍历所有j的最大值，最终答案为dp[n]。\"},\"230\":{\"t\":\"此题有利用数学证明的极简算法，详见官方题解\"},\"231\":{\"t\":\"class Solution { public int integerBreak(int n) { int[] dp = new int[n + 1]; for (int i = 2; i <= n; i++) for (int j = 1; j < i; j++) dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j])); return dp[n]; } } \"},\"232\":{\"h\":\"最长递增子序列\",\"a\":\"最长递增子序列\"},\"233\":{\"t\":\"Description\"},\"234\":{\"t\":\"求给定整数数组中最长严格递增子序列（可以不连续）的长度\"},\"235\":{\"t\":\"Solution\"},\"236\":{\"h\":\"环形子数组的最大和\",\"a\":\"环形子数组的最大和\"},\"237\":{\"t\":\"Description\"},\"238\":{\"t\":\"求给定环形整数数组的最大子数组和\"},\"239\":{\"t\":\"Solution\"},\"240\":{\"t\":\"很容易联想到普通数组求 最大子数组和 的题目，所以自然需要考虑分割问题进行套用。整个数组的总和固定，当将环分割为两个子数组后，若一个子数组的和恰为最大，那另一子数组的和自然为最小。回到环形数组中，实际上也就只有两种情况：\"},\"241\":{\"t\":\"最大和子数组不跨越原数组首尾，这就退化为普通数组求最大子数组和\"},\"242\":{\"t\":\"最大和子数组跨越原数组首尾，这种情况则说明与之相对的最小和子数组不跨越原数组首尾，即变成求普通数组的最小子数组和的问题，最后用原数组总和减去最小和即为最大和\"},\"243\":{\"t\":\"所以貌似只需要同时求出不成环的原数组的最大和与最小和，最终答案为max(maxSum, sum - minSum)，但实际上若数组全为负数就会导致此法失效，所以最后应进行此情况的判断\"},\"244\":{\"t\":\"class Solution { public int maxSubarraySumCircular(int[] nums) { int sum = 0, preMax = 0, preMin = 0; int maxSum = Integer.MIN_VALUE, minSum = Integer.MAX_VALUE; for (int num : nums) { sum += num; preMax = num + Math.max(0, preMax); maxSum = Math.max(maxSum, preMax); preMin = num + Math.min(0, preMin); minSum = Math.min(minSum, preMin); } return sum == minSum ? maxSum : Math.max(maxSum, sum - minSum); } } \"},\"245\":{\"h\":\"鸡蛋掉落\",\"a\":\"鸡蛋掉落\"},\"246\":{\"t\":\"Description\"},\"247\":{\"t\":\"有k枚鸡蛋和n层高的楼，且存在属于[0, n]区间的楼层f使得使得鸡蛋只有从高于f的楼层扔下才会碎，每次操作可以取一枚未碎的鸡蛋并把它从[1, n]楼层区间扔下，仅可重复使用未碎的鸡蛋，求一定能确定出具体楼层f的最小操作次数\"},\"248\":{\"t\":\"Solution\"},\"249\":{\"t\":\"换个角度思考，若允许进行t次操作且有k个鸡蛋，那一定能确定出具体楼层f的楼高n最高可以是多少？令dp[t][k]为允许进行t次操作且有k个鸡蛋的条件下楼高n的最大值，则只需在所有dp值中找出满足不小于n所对应的最小t值。\"},\"250\":{\"t\":\"考虑转移方程，在任意层高扔鸡蛋，一定消耗一次操作次数，但分鸡蛋有没有碎两种情况：\"},\"251\":{\"t\":\"鸡蛋碎了，则待确定楼层在此次扔鸡蛋的下方，且对应dp[t-1][k-1]，即转移到的子问题为“允许t-1次操作且有k-1枚鸡蛋”，故允许下方有dp[t-1][k-1]层\"},\"252\":{\"t\":\"鸡蛋没碎，同理可得允许上方有dp[t-1][k]层\"},\"253\":{\"t\":\"故总转移方程为dp[t][k] = 1 + dp[t-1][k] + dp[t-1][k-1]，边界条件为：t >= 1时有dp[t][1] = t，k >= 1时有dp[1][k] = 1。\"},\"254\":{\"t\":\"显然最大操作次数不会大于楼高，故只需求出dp[n][k]内的所有值，在求取过程中直接返回最先满足允许楼高不小于给定值的操作次数即可\"},\"255\":{\"t\":\"class Solution { public int superEggDrop(int k, int n) { if (n == 1) return 1; int[][] dp = new int[n + 1][k + 1]; for (int i = 1; i <= k; ++i) dp[1][i] = 1; for (int i = 2; i <= n; ++i) { for (int j = 1; j <= k; ++j) dp[i][j] = 1 + dp[i - 1][j] + dp[i - 1][j - 1]; if (dp[i][k] >= n) return i; } return -1; } } \"},\"256\":{\"h\":\"字符串问题\",\"a\":\"字符串问题\"},\"257\":{\"h\":\"两个字符串的删除操作\",\"a\":\"两个字符串的删除操作\"},\"258\":{\"t\":\"Description\"},\"259\":{\"t\":\"给定两个单词，每次都可删除其中一个单词的任意一个字符，求使两单词相同的最小操作次数\"},\"260\":{\"t\":\"Solution\"},\"261\":{\"t\":\"目标是通过删除导致两单词不同的字符来使其相同，若从删除的反面——留存字符思考，实际上就是求两字符串的最长相同子串，并且由于每次删除的字符位置可任选，所以最长相同子串的字符可不在原字符串中连续。可通过二维动态规划来解决，令dp[i][j]为前一单词的前i个字符与后一单词的前j个字符中的最长公共子序列的长度，转移状态方程需考虑俩字符串各自遍历到的字符是否相同，若相同则公共子序列加一，若不同则从上一状态（有两种）取最大转移而来\"},\"262\":{\"t\":\"class Solution { public int minDistance(String word1, String word2) { int M = word1.length(), N = word2.length(); int[][] dp = new int[M + 1][N + 1]; for (int i = 1; i <= M; i++) for (int j = 1; j <= N; j++) if (word1.charAt(i - 1) == word2.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1] + 1; else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); return M + N - 2 * dp[M][N]; } } \"},\"263\":{\"h\":\"编辑距离\",\"a\":\"编辑距离\"},\"264\":{\"t\":\"Description\"},\"265\":{\"t\":\"给定两个单词，每次编辑可对一个单词进行单个字符的插入或删除或替换，求将一单词转换成另一单词的最少编辑次数\"},\"266\":{\"t\":\"Solution\"},\"267\":{\"t\":\"用动态规划解决，令dp[i][j]为word1前i个字符与word2前j个字符之间的编辑距离，相对于其来说，若word1[i] != word2[j]，则：\"},\"268\":{\"t\":\"由dp[i-1][j-1]转换而来表示在word1前i-1个字符与word2前j-1个字符完成编辑的基础上，对word1[i]进行替换操作使word1[i] == word2[j]\"},\"269\":{\"t\":\"由dp[i][j-1]转换而来表示在word1前i个字符与word2前j-1个字符完成编辑的基础上，对word2[j]进行插入操作使word1[i] == word2[j]\"},\"270\":{\"t\":\"由dp[i-1][j]转换而来表示在word1前i-1个字符与word2前j个字符完成编辑的基础上，对word1[i]进行删除操作使word1[i] == word2[j]\"},\"271\":{\"t\":\"显然此时最短编辑距离为dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])。\"},\"272\":{\"t\":\"当word1[i] == word2[j]时，有dp[i][j] = min(dp[i - 1][j - 1], 1 + min(dp[i - 1][j], dp[i][j - 1]))，考虑编辑距离的实际意义，显然两仅相差一个字符的单词的编辑距离至多为一，即有dp[i-1][j-1] <= 1 + dp[i-1][j]且dp[i-1][j-1] <= 1 + dp[i][j-1]，故最终有dp[i][j] = dp[i-1][j-1]\"},\"273\":{\"t\":\"class Solution { public int minDistance(String word1, String word2) { int M = word1.length(), N = word2.length(); if (M * N == 0) return N + M; int[][] dp = new int[M + 1][N + 1]; for (int i = 1; i <= M; i++) dp[i][0] = i; for (int i = 1; i <= N; i++) dp[0][i] = i; for (int i = 1; i <= M; i++) for (int j = 1; j <= N; j++) if (word1.charAt(i - 1) == word2.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1]; else dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])); return dp[M][N]; } } \"},\"274\":{\"h\":\"不同的子序列\",\"a\":\"不同的子序列\"},\"275\":{\"t\":\"Description\"},\"276\":{\"t\":\"给定字符串s和t，求t在s的子序列（可不连续）中的出现次数\"},\"277\":{\"t\":\"Solution\"},\"278\":{\"t\":\"令dp[i+1][j+1]表示t的前i个字符在s的前j个字符的子序列中出现的次数。有边缘条件：\"},\"279\":{\"t\":\"dp[0][j] = 1, 0 <= j <= s.length(): 空串是任意串的子序列，且仅出现一次\"},\"280\":{\"t\":\"dp[i][0] = 0, 0 < i <= t.length(): 任意非空串都不是空串的子序列\"},\"281\":{\"t\":\"处理每一行时，即对于固定的t的前i个字符来说，考虑s的前j个字符：\"},\"282\":{\"t\":\"若t[i] != s[j]，则含新增字符s[j]的s前j个字符的子序列中不可能恰出现t的前i个字符，故次数应延用s前j-1个字符的次数，即dp[i+1][j+1] = dp[i+1][j]\"},\"283\":{\"t\":\"若t[i] == s[j]，则显然可分为子序列中是否含s[j]两种情况，不含的话同上，含的话就相当于s的前j-1个字符和t的前i-1个字符的所有子序列都新增一个相同字符，其出现次数不变，故综合起来dp[i+1][j+1] = dp[i+1][j] + dp[i][j]\"},\"284\":{\"t\":\"class Solution { public int numDistinct(String s, String t) { if (s.length() * t.length() == 0) return 0; if (s.length() < t.length()) return 0; int[][] dp = new int[t.length() + 1][s.length() + 1]; for (int i = 0; i < s.length(); ++i) dp[0][i] = 1; for (int i = 0; i < t.length(); ++i) for (int j = 0; j < s.length(); ++j) if (t.charAt(i) == s.charAt(j)) dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j]; else dp[i + 1][j + 1] = dp[i + 1][j]; return dp[t.length()][s.length()]; } } \"},\"285\":{\"h\":\"最长回文子序列\",\"a\":\"最长回文子序列\"},\"286\":{\"t\":\"Description\"},\"287\":{\"t\":\"给定字符串中最长回文子序列的长度\"},\"288\":{\"t\":\"Solution\"},\"289\":{\"t\":\"令dp[i][j]表示字符串s中以s[i]和s[j]为左右边界（含）的最长回文子序列长度，由于子序列中的字符可以不在原串中连续，故虽然枚举的是两端，但应该考虑充分利用已计算的数据：\"},\"290\":{\"t\":\"当s[i] == s[j]时，此新边界必都可以用来扩展原来其内部的最长回文子序列，故有dp[i][j] = dp[i+1][j-1] + 2\"},\"291\":{\"t\":\"当s[i] != s[j]时，此两字符必不能同时用于扩展其内部的最长回文子序列，故应延用某侧较短边界内含最长回文子序列的较大值，即dp[i][j] = max(dp[i+1][j], dp[i][j-1])\"},\"292\":{\"t\":\"由上述转移方程结合实际语义来看，为确保能够成功转移，在更新二维 dp 数组的某个值时，应确保其正下方、左侧、左下方的值已经是有效的，故整体的循环应从下至上、从左至右，再考虑枚举边界不应重复，故只能枚举整个二维数组的右上三角区域，并且每次大循环开始前需确保对角线上的值已初始化（按语义应为 1），如此也可避免枚举左下三角的边缘条件的不便。\"},\"293\":{\"t\":\"此题还有另一种思考方式，即逆序拷贝原字符串，则回文问题就变成了求两字符串的最长公共子序列问题\"},\"294\":{\"t\":\"class Solution { public int longestPalindromeSubseq(String s) { int n = s.length(); int[][] dp = new int[n][n]; for (int i = n - 1; i >= 0; --i) { dp[i][i] = 1; for (int j = i + 1; j < n; ++j) { if (s.charAt(i) == s.charAt(j)) dp[i][j] = dp[i + 1][j - 1] + 2; else dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]); } } return dp[0][n - 1]; } } \"},\"295\":{\"h\":\"股票问题\",\"a\":\"股票问题\"},\"296\":{\"h\":\"买卖股票的最佳时机 II\",\"a\":\"买卖股票的最佳时机-ii\"},\"297\":{\"t\":\"Description\"},\"298\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，求能获得的最大利润\"},\"299\":{\"t\":\"Solution\"},\"300\":{\"t\":\"令sell[i]和keep[i]分别表示第i天交易完后未持有和持有股票的最大利润，则：\"},\"301\":{\"t\":\"对于sell状态，可以是原本就未持有，也可以是通过将持有股票卖掉从keep转换而来，故sell[i] = max(sell[i-1], keep[i-1] + prices[i])\"},\"302\":{\"t\":\"对于keep状态，可以是原本就持有，也可以是通过买入股票从sell转换而来，故keep[i] = max(keep[i-1], sell[i-1] - prices[i])\"},\"303\":{\"t\":\"边缘状态是第 0 天的利润，显然sell[0] = 0，而持有状态则表示以第 0 天价格购入了股票，故利润keep[0] = -prices[0]。最后一天卖掉股票一定比持有股票的利润更大，故答案为sell[n-1]。由于转移方程仅与上一天状态相关，故可将数组压缩为单一变量，并且在每天更新时无需将先更新的值用临时变量暂存，比如先更新了keep[i]，则后续更新sell[i]时转移方程中就会从keep[i]转移而非之前的keep[i-1]，但这并没影响，因为按照实际意义来看，从keep[i]转移代表从当天的持有到卖出，显然利润为零\"},\"304\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int sell = 0, keep = -prices[0]; for (int i = 1; i < prices.length; ++i) { keep = Math.max(keep, sell - prices[i]); sell = Math.max(sell, keep + prices[i]); } return sell; } } \"},\"305\":{\"h\":\"买卖股票的最佳时机 III\",\"a\":\"买卖股票的最佳时机-iii\"},\"306\":{\"t\":\"Description\"},\"307\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成两笔交易，求能获得的最大利润\"},\"308\":{\"t\":\"Solution\"},\"309\":{\"t\":\"主要框架与 买卖股票的最佳时机 II 类似，但由于能进行多笔交易且限制了交易上限，故应对每次交易单独进行 dp，且多笔交易之间的买卖关系需联合考虑：\"},\"310\":{\"t\":\"第一笔买入的keep1只能是由原有keep1保持或者当天买入转移而来，故keep1[i] = max(keep1[i-1], - prices[i])\"},\"311\":{\"t\":\"第一次卖出但未进行第二次买入的sell1只能是由原有sell1保持或者由当天卖出转移而来，故sell1[i] = max(sell1[i-1], keep1[i-1] + prices[i])\"},\"312\":{\"t\":\"已第一次卖出且第二次买入的keep2只能是由原有keep2保持或者当天买入由sell1[i-1]转移而来，故keep2[i] = max(keep2[i-1], sell1[i-1] - prices[i])\"},\"313\":{\"t\":\"第二笔卖出的sell2只能是由原有sell2保持或者当天卖出转移而来，故sell2[i] = max(sell2[i-1], keep2[i-1] + prices[i])\"},\"314\":{\"t\":\"最后利润最大的显然是sell2[n-1]，再进行空间压缩可得代码\"},\"315\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int k1 = -prices[0], k2 = -prices[0]; int s1 = 0, s2 = 0; for (int i = 1; i < prices.length; i++) { k1 = Math.max(k1, -prices[i]); s1 = Math.max(s1, k1 + prices[i]); k2 = Math.max(k2, s1 - prices[i]); s2 = Math.max(s2, k2 + prices[i]); } return s2; } } \"},\"316\":{\"h\":\"买卖股票的最佳时机 IV\",\"a\":\"买卖股票的最佳时机-iv\"},\"317\":{\"t\":\"Description\"},\"318\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。每一天都可决定是否购买和/或出售股票，但在任何时候最多只能持有一股股票，且最多只能完成k笔交易，求能获得的最大利润\"},\"319\":{\"t\":\"Solution\"},\"320\":{\"t\":\"主要思想与 买卖股票的最佳时机 III 类似，只是将交易上限定为k，只需联合考虑各笔交易即可：令keep[i][j]表示第i天第j笔交易完成后持有股票的最大利润，令sell[i][j]表示第i天第j笔交易完成后未持有股票的最大利润，则：\"},\"321\":{\"t\":\"第i天第j笔持有的keep[i][j]只能是由原有保持或者当天由上一笔未持有状态买入转移而来，故keep[i][j] = max(keep[i-1][j], sell[i-1][j-1] - prices[i])\"},\"322\":{\"t\":\"第i天第j笔未持有的sell[i][j]只能是由原有保持或者当天由本笔交易卖出转移而来，故sell[i][j] = max(sell[i-1][j], keep[i-1][j] + prices[i])\"},\"323\":{\"t\":\"除了常规的空间压缩之外，还有些细节需要注意：\"},\"324\":{\"t\":\"一笔交易产生实质买卖利润至少需要两天，即买卖若在同一天则无意义，故应最多只需要进行min(k, prices.length / 2)笔交易即可确保获得最大利润 \"},\"325\":{\"t\":\"注意由此运算导致的特殊测试用例错误，如prices.length == 1\"},\"326\":{\"t\":\"每天开始处理各笔交易前都需要将第 0 笔交易初始化，且初始化需联合考虑前一天处理过后的利润\"},\"327\":{\"t\":\"基于上一条，在开始处理每天的各笔交易前，需将每笔的持有利润都设为- prices[0]，而不能仅设置第 0 笔交易后状态为持有的利润，否则最后计算出的总利润可能会超出实际能获得的，因为对交易次数进行优化之后实际上强制每天都进行模拟买卖，若亏损则再强制等效于未进行买卖，故对于每一笔交易来说都有可能强制将本为负的买卖利润强行拉至 0（数组初始化的值）导致利润虚高，进而向后累积\"},\"328\":{\"t\":\"class Solution { public int maxProfit(int k, int[] prices) { if (k * prices.length == 0 || prices.length == 1) return 0; k = Math.min(k, prices.length / 2); int[] sell = new int[k]; int[] keep = new int[k]; Arrays.fill(keep, -prices[0]); for (int i = 1; i < prices.length; ++i) { keep[0] = Math.max(keep[0], -prices[i]); sell[0] = Math.max(sell[0], keep[0] + prices[i]); for (int j = 1; j < k; ++j) { keep[j] = Math.max(keep[j], sell[j - 1] - prices[i]); sell[j] = Math.max(sell[j], keep[j] + prices[i]); } } return sell[k - 1]; } } \"},\"329\":{\"h\":\"最佳买卖股票时机含冷冻期\",\"a\":\"最佳买卖股票时机含冷冻期\"},\"330\":{\"t\":\"Description\"},\"331\":{\"t\":\"给定表示每天股价的数组prices，其中prices[i]表示某支股票第i天的价格。在任何时候最多只能持有一股股票，不限制交易次数但不可在卖出股票的下一天买入，求能获得的最大利润\"},\"332\":{\"t\":\"Solution\"},\"333\":{\"t\":\"此题看似与 买卖股票的最佳时机 IV 相似，都能完成多笔交易，但由于存在冷冻期，所以无法像那题一样在一天内完成无数笔交易，故实际上可以将每笔交易都割裂开来计算，也无需为多笔交易单独设置变量维度，此题应视作 买卖股票的最佳时机 II 变化而来的，只需在其基础上增加一状态变量即可。\"},\"334\":{\"t\":\"利用状态机模型归纳后考虑设置三种状态：持有股票keep、未持有但在冷静期cool、未持有且不在冷静期wait，则第i天能获得的最大利润为：\"},\"335\":{\"t\":\"keep可由原有保持或前一天买入转移而来，故keep[i] = max(keep[i-1], wait[i-1] - prices[i])\"},\"336\":{\"t\":\"wait可由原有保持或由冷静期转移而来，故wait[i] = max(wait[i-1], cool[i-1])\"},\"337\":{\"t\":\"cool必由前一天出售股票转移而来，故cool[i] = keep[i-1] + prices[i]\"},\"338\":{\"t\":\"显然能进行空间压缩，需注意的是压缩之后每天的仨变量都是相互依赖的，故必须得先缓存至少一个变量的值\"},\"339\":{\"t\":\"class Solution { public int maxProfit(int[] prices) { int keep = -prices[0];// 持有股票 int cool = 0;// 未持有，但在冷静期 int wait = 0;// 未持有，且不在冷静期 for (int i = 1; i < prices.length; i++) { int newWait = Math.max(cool, wait); cool = keep + prices[i]; keep = Math.max(keep, wait - prices[i]); wait = newWait; } return Math.max(cool, wait); } } \"},\"340\":{\"h\":\"背包问题\",\"a\":\"背包问题\"},\"341\":{\"h\":\"组合总和 IV\",\"a\":\"组合总和-iv\"},\"342\":{\"t\":\"Description\"},\"343\":{\"t\":\"给定目标值和元素各异的数组，求出数组中总和为目标值的组合的个数（元素可重复使用）\"},\"344\":{\"t\":\"Solution\"},\"345\":{\"t\":\"此类问题可以用回溯把每种组合模拟出来统计，但大可不必，因为只需求出数量，故可看作与顺序相关的完全背包问题，直接套用模版\"},\"346\":{\"t\":\"class Solution { public int combinationSum4(int[] nums, int target) { int[] dp = new int[target + 1]; dp[0] = 1; for (int j = 1; j <= target; j++) for (int num : nums) if (j >= num) dp[j] = dp[j] + dp[j - num]; return dp[target]; } } \"},\"347\":{\"h\":\"目标和\",\"a\":\"目标和\"},\"348\":{\"t\":\"Description\"},\"349\":{\"t\":\"给定非负整数数组和目标值，向数组中的每个元素前添加正负号，求添加完后数组和为目标值的添加方法数\"},\"350\":{\"t\":\"Solution\"},\"351\":{\"h\":\"零钱兑换\",\"a\":\"零钱兑换\"},\"352\":{\"t\":\"Description\"},\"353\":{\"t\":\"给定代表硬币面额的整数数组与目标值，求恰凑成总金额所需的最少的硬币个数。每种硬币数量无限，若无法凑成则返回-1\"},\"354\":{\"t\":\"详情\"},\"355\":{\"t\":\"令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令dp[i]为恰凑成总金额i的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为dp[i] = min(dp[i], dp[i - coin] + 1)，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为dp[0] = 0，最后只需检查目标值的硬币数是否变为了小于预设值的数即可\"},\"356\":{\"t\":\"class Solution { public int coinChange(int[] coins, int amount) { if (amount == 0) return 0; int[] dp = new int[amount + 1]; Arrays.fill(dp, amount + 1); dp[0] = 0; for (int coin : coins) for (int j = coin; j <= amount; j++) dp[j] = Math.min(dp[j], dp[j - coin] + 1); return dp[amount] > amount ? -1 : dp[amount]; } } \"},\"357\":{\"h\":\"完全平方数\",\"a\":\"完全平方数\"},\"358\":{\"t\":\"Description\"},\"359\":{\"t\":\"求和为给定整数的完全平方数的最少数量\"},\"360\":{\"t\":\"详情\"},\"361\":{\"t\":\"令目标值为背包容量，每种硬币无限则是完全背包问题，与顺序无关故外层遍历硬币，令dp[i]为恰凑成总金额i的硬币数。由于需要硬币数量最少，令凑成某金额的硬币数为价值，显然越小越好，转移方程为dp[i] = min(dp[i], dp[i - coin] + 1)，故初始条件应将硬币数设为不能达到的大数（目标值 +1），边缘条件为dp[0] = 0，最后只需检查目标值的硬币数是否变为了小于预设值的数即可\"},\"362\":{\"t\":\"class Solution { public int coinChange(int[] coins, int amount) { if (amount == 0) return 0; int[] dp = new int[amount + 1]; Arrays.fill(dp, amount + 1); dp[0] = 0; for (int coin : coins) for (int j = coin; j <= amount; j++) dp[j] = Math.min(dp[j], dp[j - coin] + 1); return dp[amount] > amount ? -1 : dp[amount]; } } \"},\"363\":{\"h\":\"贪心\"},\"364\":{\"h\":\"跳跃游戏\",\"a\":\"跳跃游戏\"},\"365\":{\"t\":\"Description\"},\"366\":{\"t\":\"给定非负整数数组，数组中的每个元素代表能从该位置往右移动的最大长度，初始位于数组的第一个下标，判断能否到达最后一个下标\"},\"367\":{\"t\":\"Solution\"},\"368\":{\"h\":\"跳跃游戏 II\",\"a\":\"跳跃游戏-ii\"},\"369\":{\"t\":\"Description\"},\"370\":{\"t\":\"给定非负整数数组，数组中的每个元素代表能从该位置往右移动的最大长度，初始位于数组的第一个下标，给定数组保证能到达最后一个下标，求到达最后一个下标的最少移动次数\"},\"371\":{\"t\":\"Solution\"},\"372\":{\"t\":\"显然若想达到最少移动次数，每次都移动可达的最大长度并不一定最优，最远可达位置可以通过遍历数组每个元素时来更新，但需要关注的是哪些情况是需要实际移动才行的，显然是当遍历到远于上次移动的最远可达位置时，所以还需要记录上一次最远可达位置（即本次需要实际开始移动的位置），在每次更新最远距离之后，需要判断是否已经到下一个移动起始点了，如果到了才更新移动次数和移动起始点，因为到达下一个移动起始点才意味着需要实际移动一次来确保到达该位置，还没到下一个移动起始点时仍属于上次移动的覆盖范围，无需实际移动一次。\"},\"373\":{\"t\":\"需要注意的是，由于最远距离的更新与移动次数的更新是异步的，所以不可简单通过每次更新后判断是否已经可达最后下标来直接结束，因为此时答案可能还未更新\"},\"374\":{\"t\":\"class Solution { public int jump(int[] nums) { int cnt = 0, far = 0, old = 0; for (int i = 0; i < nums.length - 1; ++i) { far = Math.max(far, i + nums[i]); if (i == old) { ++cnt; old = far; } } return cnt; } } \"},\"375\":{\"h\":\"加油站\",\"a\":\"加油站\"},\"376\":{\"t\":\"Description\"},\"377\":{\"t\":\"在一条环路上有n个加油站，给定两个整数数组gas和cost，其中gas[i]为i处加油站提供的汽油补给量，从加油站i开往加油站i+1需要消耗汽油的量为cost[i]。\"},\"378\":{\"t\":\"现在驾驶一辆油箱容量无限的汽车从某个加油站出发，开始时油箱为空，若可以绕环路行驶一周则返回出发时加油站的编号（此情况保证解唯一），否则返回-1\"},\"379\":{\"t\":\"Solution\"},\"380\":{\"t\":\"先考虑有解的情况，题目隐含的限制条件是在任意一个加油站时油箱含量都不能为负，所以只需要在遍历时累加每个加油站的补给量与到下个加油站的消耗量之差，这个累加值即为油箱含量，若到某个加油站后为负，则说明前段旅程总消耗量为负，前一段旅程的起点不可能是解，应将邮箱清空从当前加油站的下一个加油站开始统计。\"},\"381\":{\"t\":\"下面证明为啥上一段途径的每个加油站也都不可能是解。假设从 x 出发最远只能到 y ，则有\"},\"382\":{\"t\":\"⎩⎨⎧​i=x∑y​gas[i]<i=x∑y​cost[i]i=x∑z​gas[i]≥i=x∑z​cost[i]​,x<y,∀z∈[x,y)​\"},\"383\":{\"t\":\"所以对于 ∀z∈(x,y] 有：\"},\"384\":{\"t\":\"i=z∑y​gas[i]​=i=x∑y​gas[i]−i=x∑z−1​gas[i]<i=x∑y​cost[i]−i=x∑z−1​cost[i]=i=z∑y​cost[i]​\"},\"385\":{\"t\":\"即从 [xy] 范围内任意加油站都不能达到 y 的下一个加油站，更不可能作为解。\"},\"386\":{\"t\":\"再回过头来考虑是否有解的问题，显然若全程的累加量为负，则不能绕完一整圈，所以只需在遍历时额外增加一个不会阶段性重置的统计变量即可\"},\"387\":{\"t\":\"class Solution { public int canCompleteCircuit(int[] gas, int[] cost) { int start = 0, total = 0, sum = 0; for (int i = 0; i < gas.length; ++i) { int cur = gas[i] - cost[i]; total += cur; sum += cur; if (sum < 0) { start = i + 1; sum = 0; } } return total < 0 ? -1 : start; } } \"},\"388\":{\"h\":\"划分字母区间\",\"a\":\"划分字母区间\"},\"389\":{\"t\":\"Description\"},\"390\":{\"t\":\"给定只含小写字母的字符串，要求将其划分为尽可能多的片段，且同一字母最多出现在一个片段中，返回一个表示每个字符串片段的长度的列表\"},\"391\":{\"t\":\"Solution\"},\"392\":{\"t\":\"按题目要求，需要令各划分的片段尽可能地短，所以得按照片段长度下限来划分，即片段内所有字母在字符串内所有的出现都在此片段内，所以自然需要先遍历一遍统计各字母的出现频率，由于是从头往后划分，只需要记录遍历到的字母最后一次出现的位置即可。统计完成后再次遍历字符串，在各片段内遍历字符的同时基于之前的统计将片段末尾往后推，当遍历到末尾时即表示此片段内所有字母在字符串内所有的出现都在此片段内，再从下一字符开始进行下一片段的划分\"},\"393\":{\"t\":\"class Solution { public List<Integer> partitionLabels(String s) { int[] last = new int[26]; for (int i = 0; i < s.length(); ++i) last[s.charAt(i) - 'a'] = i; List<Integer> res = new ArrayList<>(); int start = 0, end = 0; for (int i = 0; i < s.length(); ++i) { end = Math.max(end, last[s.charAt(i) - 'a']); if (i == end) { res.add(end - start + 1); start = end + 1; } } return res; } } \"},\"394\":{\"h\":\"摆动序列\",\"a\":\"摆动序列\"},\"395\":{\"t\":\"Description\"},\"396\":{\"t\":\"求给定数组中摆动子序列的最大长度。\"},\"397\":{\"t\":\"摆动序列指连续数字之间的差严格地在正数和负数之间交替（仅有一个元素或者含两个不等元素的序列也视作摆动序列）。\"},\"398\":{\"t\":\"子序列可以不在原始数组中连续，但需确保序列中各元素的相对位置与原来一致\"},\"399\":{\"t\":\"Solution\"},\"400\":{\"h\":\"用最少数量的箭引爆气球\",\"a\":\"用最少数量的箭引爆气球\"},\"401\":{\"t\":\"Description\"},\"402\":{\"t\":\"给定数组 points ，其中 pointsi​=[starti​,endi​] 表示气球 i 水平直径覆盖了范围 [starti​,endi​] ，每支箭可从任意位置射出并引爆覆盖范围包含该位置的所有气球，求引爆所有气球的最少弓箭数量\"},\"403\":{\"t\":\"Solution\"},\"404\":{\"t\":\"显然每支箭都得引爆尽可能多的气球。我们从左向右考虑所有气球的右边界，如果一支箭擦着所有气球中右边界最靠左的右边界将其引爆，那么一定是引爆了尽可能多的气球，因为这支箭在保证引爆原有必须得引爆的气球的同时，尽可能多地引爆了右侧的气球。\"},\"405\":{\"t\":\"继续往右考虑，若上一支箭右侧还有其他未引爆气球的左边界，则必须得加多一支箭，我们可以将此箭等效到其右边界，如此这支箭就能同样在保证引爆此气球的同时尽可能多地引爆右侧的气球，所以一直重复此过程即可\"},\"406\":{\"t\":\"class Solution { public int findMinArrowShots(int[][] points) { Arrays.sort(points, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { if (o1[1] < o2[1]) return -1; if (o1[1] > o2[1]) return 1; return 0; } }); int cnt = 1; for (int pre = points[0][1], i = 1; i < points.length; ++i) if (pre < points[i][0]) { ++cnt; pre = points[i][1]; } return cnt; } } \"},\"407\":{\"h\":\"无重叠区间\",\"a\":\"无重叠区间\"},\"408\":{\"t\":\"Description\"},\"409\":{\"t\":\"给定一个区间的集合 intervals ，其中 intervalsi​=[starti​,endi​] ，求使剩余区间互不重叠所需移除区间的最小数量（仅端点重合不算重合）\"},\"410\":{\"t\":\"Solution\"},\"411\":{\"t\":\"贪心思想。从左向右考虑区间，最优剩余最左侧的区间右端点必须是所有区间右端点最靠左的，然后将其右侧所有重叠区间都去除，则剩余区间为与原始问题相同的子问题，重复上述步骤即可\"},\"412\":{\"t\":\"class Solution { public int eraseOverlapIntervals(int[][] intervals) { Arrays.sort(intervals, (o1, o2) -> o1[1] - o2[1]); int cnt = 0; int end = Integer.MIN_VALUE; for (int[] item : intervals) { if (item[0] < end) ++cnt; else end = item[1]; } return cnt; } } \"},\"413\":{\"h\":\"算法讲解\"},\"414\":{\"h\":\"反转链表\",\"a\":\"反转链表\"},\"415\":{\"h\":\"队列和栈相互实现\",\"a\":\"队列和栈相互实现\"},\"416\":{\"h\":\"单调队列\",\"a\":\"单调队列\"},\"417\":{\"t\":\"貌似单调队列的作用常可以用优先队列来替代\"},\"418\":{\"t\":\"class MaxQueue { // O(1) 时间复杂度获取队列元素最大值 private Queue<Integer> queue; // 存储队列元素 private Deque<Integer> deque; // 存储队列元素最大值 public MaxQueue() { queue = new LinkedList<>(); deque = new LinkedList<>(); } public int max_value() { return deque.isEmpty() ? -1 : deque.peekFirst(); } public void push_back(int value) { queue.offer(value); while (!deque.isEmpty() && deque.peekLast() < value) deque.pollLast(); deque.offerLast(value); } public int pop_front() { if (queue.isEmpty()) return -1; if (deque.peekFirst().equals(queue.peek())) deque.pollFirst(); return queue.poll(); } } \"},\"419\":{\"h\":\"非递归遍历二叉树\",\"a\":\"非递归遍历二叉树\"},\"420\":{\"h\":\"遍历图\",\"a\":\"遍历图\"},\"421\":{\"h\":\"单调栈\",\"a\":\"单调栈\"},\"422\":{\"t\":\"单调栈的思想与单调队列类似，即在入栈前将栈内不满足单调性的元素都出栈，确保当前元素入栈后整体保持原有单调性\"},\"423\":{\"t\":\"单调栈的思想不难，但用到它的题一般不简单，在具体运用时经常需要依照实际情况判断栈内到底是存元素值本身还是存其索引\"},\"424\":{\"t\":\"class Solution { public void MonotoneStack(int[] nums) { Deque<Integer> stk = new ArrayDeque<>(); for (int num : nums) { while (!stk.isEmpty() && stk.peek() < num) stk.pop(); stk.push(num); } } } \"},\"425\":{\"h\":\"并查集\",\"a\":\"并查集\"},\"426\":{\"t\":\"并查集构建若干集合的缓存，用于快速查询某元素是否属于某集合，或者是俩元素是否属于同一集合\"},\"427\":{\"t\":\"具体实现是在内部用数组记录节点的父节点，初始时默认各节点独立成集合（父节点都是自己），后续通过更改父节点值来将节点连至父节点（类似用数组存储的链表）。在将两节点合并至同一集合时，先找到代表各自集合的根节点，再将两根节点连接成父子关系，根据连接规则的不同可分为两种：\"},\"428\":{\"t\":\"高度并查集：维护存储各节点的高度（自己和所有子节点的数量）的数组。因为集合高度就是查找集合根节点的最多迭代次数，所以合并原则是令合并后集合的高度最小，即两集合的根节点合并时高度大的为最终根节点，如此可确保合并后集合高度不会大于原有的两集合。若两集合高度一样则随机确立父子关系，但需注意更新最终根节点的高度\"},\"429\":{\"t\":\"重量并查集：维护存储各节点的重量（自己和所有子节点的数量）的数组。合并原则是重量小的集合归入重量大的集合中去，即令小重量根节点成为大重量根节点的子节点。但仅如此的话对主要影响并查集查询速度的集合高度并并无优化，所以在每次迭代查找父节点时都可以顺便进行路径压缩，令起始节点归根（降低其高度），即在每次向根节点迭代的时候不断地更改起始节点的父节点直到根节点。这样一来每个节点查询过后都能成为根节点的直接子节点，而根节点的直接子节点是可以直接找到判定的，所以重量并查集的节点从第二次查询开始会变得非常快\"},\"430\":{\"t\":\"关于重量并查集路径压缩的两点注意\"},\"431\":{\"t\":\"在迭代过程中更改起始节点的父节点后无需维护初始父节点和依次经过的父节点的重量，因为当前集合在后续合并时只会用到根节点的重量\"},\"432\":{\"t\":\"路径压缩不适用于高度并查集，因为遍历更改后根节点的高度可能会变，需要重新计算\"},\"433\":{\"h\":\"KMP 算法\",\"a\":\"kmp-算法\"},\"434\":{\"t\":\"ref: https://labuladong.gitee.io/algo/3/28/97/\"},\"435\":{\"t\":\"class KMP { private String pat; // 待寻找的串 private int[][] dp; // pat 的状态转移信息 // 预计算 pat 串的状态转移信息 public KMP(String pat) { this.pat = pat; dp = new int[pat.length()][256]; // 256 是假设字符范围是 ASCII 表 dp[0][pat.charAt(0)] = 1; int X = 0; for (int j = 1; j < pat.length(); ++j) { for (int c = 0; c < 256; ++c) dp[j][c] = dp[X][c]; dp[j][pat.charAt(j)] = j + 1; X = dp[X][pat.charAt(j)]; } } // 在给定的文本中寻找 pat 首次出现的位置 public int search(String txt) { int j = 0; for (int i = 0; i < txt.length(); ++i) { j = dp[j][txt.charAt(i)]; if (j == pat.length()) return i - pat.length() + 1; } return -1; } } \"},\"436\":{\"h\":\"前缀树（Trie）\",\"a\":\"前缀树-trie\"},\"437\":{\"t\":\"class Trie { private Trie[] child; private boolean isEnd; public Trie() { child = new Trie[26]; isEnd = false; } public void insert(String word) { Trie node = this; for (int i = 0; i < word.length(); i++) { int idx = word.charAt(i) - 'a'; if (node.child[idx] == null) node.child[idx] = new Trie(); node = node.child[idx]; } node.isEnd = true; } public boolean search(String word) { Trie res = searchPrefix(word); return res != null && res.isEnd; } public boolean startsWith(String prefix) { return searchPrefix(prefix) != null; } // search and return if exists prefix // not care isEnd private Trie searchPrefix(String prefix) { Trie node = this; for (int i = 0; i < prefix.length(); i++) { int idx = prefix.charAt(i) - 'a'; if (node.child[idx] == null) return null; node = node.child[idx]; } return node; } } \"},\"438\":{\"h\":\"树状数组\",\"a\":\"树状数组\"},\"439\":{\"t\":\"对于简单区间上的更新以及求和问题，在没必要用线段树的情景下，可以基于原数组构建树状数组 tree，其每个元素首先都相当于叶节点，但又同时是其前若干节点的根节点，故某节点的值最终为以其为根的子树所有节点值之和，具体来说有 treen​=i=n−2k+1∑n​treei​，其中 k 为 n 的二进制中从最低位到高位连续零的长度，实际上 2k 可通过函数 lowBit(n)=n&(−n) 来计算，此函数亦可用于获取最低有效位。\"},\"440\":{\"t\":\"对原数组的区间查询可转化为对树状数组的若干节点查询来解决，对原数组某值的更新可通过更新树状数组对应节点及其所有父节点来实现。查询和更新的复杂度都为 O(log2​N)，具体实现见代码。需要注意的是，更新和查询的循环中，为避免索引更新死循环，在实现树状数组时应与在原数组的基础上向右整体错开一格，通过空置索引 0 的位置来避免卡死。\"},\"441\":{\"t\":\"树状数组的应用形式在更新和查询方面都分别有单点和区间两种，单点更新、单点查询普通数组即可完成，其余三种情况如下：\"},\"442\":{\"h\":\"拓扑排序\",\"a\":\"拓扑排序\"},\"443\":{\"t\":\"有向图的拓扑排序是指满足上游节点一定排在下游节点前面的一种全节点排列，并且有：\"},\"444\":{\"t\":\"若有向图中存在环，则其不存在拓扑排序（环中节点顺序亦先亦后，与排序中确定的先后矛盾）\"},\"445\":{\"t\":\"若为有向无环图，则其拓扑排序可能不止一种（如无边图的任意节点排列都是拓扑排序）\"},\"446\":{\"t\":\"所以对于有先后制约关系的遍历搜索可以套用拓扑排序模版，用 DFS 或 BFS 都可以实现。\"},\"447\":{\"t\":\"例题为 课程表 II：给定所有必须得上的课的先修关系，求一种修完所有课的顺序（存在的话）\"},\"448\":{\"h\":\"二分查找\",\"a\":\"二分查找\"},\"449\":{\"h\":\"回溯\",\"a\":\"回溯\"},\"450\":{\"h\":\"适用问题\",\"a\":\"适用问题\"},\"451\":{\"t\":\"组合问题：若干数字中按⼀定规则找出若干个数的集合\"},\"452\":{\"t\":\"排列问题：若干数字按⼀定规则全排列的不同排列方式数量\"},\"453\":{\"t\":\"切割问题：⼀个字符串按⼀定规则有⼏种切割⽅式\"},\"454\":{\"t\":\"⼦集问题：若干数字的集合⾥有多少符合条件的⼦集\"},\"455\":{\"t\":\"棋盘问题：N 皇后，解数独等等\"},\"456\":{\"h\":\"模版\",\"a\":\"模版\"},\"457\":{\"h\":\"实现要点\",\"a\":\"实现要点\"},\"458\":{\"t\":\"添加一条答案路径时必须由当前路径列表新建一个列表来添加，否则每次添加的都是贯穿回溯全过程的唯一的列表指针，最后一无所有\"},\"459\":{\"t\":\"每层是否需要起始索引： \"},\"460\":{\"t\":\"对于组合问题： \"},\"461\":{\"t\":\"若在同一集合中求组合，则需起始索引控制各层循环的起始位置\"},\"462\":{\"t\":\"若是多个互不影响的集合取组合，则无需起始索引\"},\"463\":{\"t\":\"对于排列问题：每层都是从头开始搜索而无需起始索引，且\"},\"464\":{\"t\":\"是否需要标记数组标记当前层回溯路径中已存在哪些元素： \"},\"465\":{\"t\":\"若元素可重复使用，则无需标记数组\"},\"466\":{\"t\":\"若元素仅可使用一次，则需要标记\"},\"467\":{\"t\":\"实际上标记数组已经在功能上包含起始索引了，但起始索引能在下一层遍历选取时，先标记数组一步进行剪枝，进一步减少无效搜索；或者对于有序数组，因为每次下一层搜索都是基于当前层右边起始的，所以起始索引可以完全替代标记数组\"},\"468\":{\"t\":\"若题目仅要求求出不同组合的个数，可考虑用动态规划来做，避免实际模拟每一种组合\"},\"469\":{\"h\":\"动态规划\",\"a\":\"动态规划\"},\"470\":{\"h\":\"思考流程\",\"a\":\"思考流程\"},\"471\":{\"t\":\"明确问题存在哪几种状态；问题场景如何做状态选择，进而转换状态\"},\"472\":{\"t\":\"确定 dp 数组以及下标的含义\"},\"473\":{\"t\":\"根据【选择】的过程，确定递推公式\"},\"474\":{\"t\":\"dp 数组如何初始化\"},\"475\":{\"t\":\"确定遍历顺序\"},\"476\":{\"t\":\"举例推导 dp 数组，进行问题模拟\"},\"477\":{\"t\":\"出错的情况，将 dp 数组打印出来，保证程序处理流程如设想运行\"},\"478\":{\"t\":\"优化：若每一 dp 状态仅与上一个状态有关，则可将 dp 数组进行降维压缩\"},\"479\":{\"h\":\"背包问题\",\"a\":\"背包问题\"},\"480\":{\"h\":\"排序算法\",\"a\":\"排序算法\"},\"481\":{\"t\":\"Arrays.sort()看数据情况（联合考虑数据数量及其有序程度等）使用传统插入排序、成对插入排序、单轴快排、双轴快排、归并排序的一种或几种\"},\"482\":{\"t\":\"省略堆排序，因其无法利用现代操作系统的局部性原理进行缓存很少使用堆排序（数组元素很少和相邻的元素进行比较和交换）\"},\"483\":{\"t\":\"方便起见，定义用于交换数组两指定位置值的函数如下：\"},\"484\":{\"t\":\"void swap(int[] nums, int i, int j) { int t = nums[i]; nums[i] = nums[j]; nums[j] = t; } \"},\"485\":{\"h\":\"中间技巧\",\"a\":\"中间技巧\"},\"486\":{\"h\":\"Dijkstra 算法 - 知乎\",\"a\":\"dijkstra-算法-知乎\"},\"487\":{\"h\":\"二进制相关\",\"a\":\"二进制相关\"},\"488\":{\"t\":\"// 求正数的平均数时，采用无符号位移可解决溢出问题（因最高位补 0） int mid = (left + right) >>> 1; // 获取整数二进制表示种最低位的 1 // 注：不适用于 Integer.MIN_VALUE，它最低有效位为其本身 n & (-n) n & (~x + 1) // 消除整数二进制表示中最低位的 1 // 注：不适用于 Integer.MIN_VALUE，其最低有效位为负号位 n & (n - 1) // 统计整数的二进制表示中 1 的位数 int countBit(int num){ int cnt = 0; while(num != 0){ n &= n - 1; ++cnt; } return cnt; } // 判断是否为 2 的幂次方（即判断二进制表示中是否只有一个 1） boolean isPowerOfTwo(int num){ if(num <= 0) return false; return (num & (num - 1)) == 0; } \"},\"489\":{\"t\":\"// 交换两不同值变量的值【若两值相同则会出现 0 的错误】 a = a ^ b; // a1 = a0 ^ b0 b = a ^ b; // b1 = a1 ^ b0 = a0 ^ b0 ^ b0 = a0 a = a ^ b; // a2 = a1 ^ b1 = a0 ^ b0 ^ a0 = b0 // 判断两数相加是否溢出：若相加结果的符号同时与两加数异号则发生溢出 boolean isOverflow(int a, int b){ int res = a + b; return (res ^ a) < 0 && res ^ b < 0; } // 字符转换 ch | ' ' // 大小写 --> 小写 ch & '_' // 大小写 --> 大写 ch ^ ' ' // 大小写变换 \"},\"490\":{\"h\":\"计算组合数\",\"a\":\"计算组合数\"},\"491\":{\"t\":\"Cnm​​=m!(n−m)!n!​=m!n(n−1)⋯(n−m+1)​=1n​⋅2n−1​⋯mn−m+1​​\"},\"492\":{\"t\":\"对于上述最后的形式，若逐项除再相乘，不一定能保证每一项都是整数，直接计算会损失精度。但代码实现时基于已累乘结果，先乘下一项的分子，再除下一项的分母，则必可保证累乘结果始终为整数，因为在除分母k的时候，分子已经是连续的k个数相乘，其中必含分母的倍数。实际上分母不一定要逆序相乘，顺序亦可，代码如下\"},\"493\":{\"t\":\"long ans = 1; for (int x = n, y = 1; y <= m; --x, ++y) ans = ans * x / y; \"},\"494\":{\"h\":\"生成连续完全平方数\",\"a\":\"生成连续完全平方数\"},\"495\":{\"t\":\"ArrayList<Integer> getSerialSquare(int n){ ArrayList<Integer> result = new ArrayList<>(); int cur = 1, diff = 3; while(cur <= n){ result.add(cur); cur += diff; diff += 2; } return result; } \"},\"496\":{\"h\":\"求最大公约数和最小公倍数\",\"a\":\"求最大公约数和最小公倍数\"},\"497\":{\"t\":\"// 最大公约数 private int gcd(int x, int y) { return y == 0 ? x : gcd(y, x % y); } // 最小公倍数 private int lcm(int x, int y){ return x * y / gcd(x, y); } \"},\"498\":{\"h\":\"取余运算规则\",\"a\":\"取余运算规则\"},\"499\":{\"t\":\"(a±b)modp=(amodp±bmodp)modp\"},\"500\":{\"t\":\"abmodp=(amodp)∗(bmodp)modp\"},\"501\":{\"t\":\"abmodp=(amodp)bmodp\"},\"502\":{\"t\":\"[(a+b)modp+c]modp=[a+(b+c)modp]modp\"},\"503\":{\"t\":\"[(abmodp)c]modp=[a(bcmodp)]modp\"},\"504\":{\"t\":\"[(a+b)modp]cmodp=(acmodp+bcmodp)modp\"},\"505\":{\"t\":\"若a≡bmodp,则对于∀c,都有(a+c)≡(b+c)modp\"},\"506\":{\"t\":\"若a≡bmodp,则对于∀c,都有ac≡bcmodp\"},\"507\":{\"t\":\"若a≡bmodp,c≡dmodp,则有：\"},\"508\":{\"t\":\"(a±c)≡(b±d)modp\"},\"509\":{\"t\":\"ac≡bdmodp\"},\"510\":{\"t\":\"a/c≡b/dmodp\"},\"511\":{\"h\":\"二进制&哈希&多线程&并查集\"},\"512\":{\"h\":\"二进制\",\"a\":\"二进制\"},\"513\":{\"h\":\"只出现一次的数字 III\",\"a\":\"只出现一次的数字-iii\"},\"514\":{\"t\":\"Description\"},\"515\":{\"t\":\"给定整型数组，其中有两个数只出现一次，其余数都出现两次，找出两个只出现一次的数\"},\"516\":{\"t\":\"详情\"},\"517\":{\"t\":\"首先考虑简化版的问题，若只有一个数只出现一次，则只需要对整个数组进行异或操作，所得即为该数，因为其他数都两两异或为 0 了，而任何数与 0 异或都为其本身。\"},\"518\":{\"t\":\"所以只需要将原数组分为类似上述简化问题的两组再进行组内异或即可，具体来说分组需要确保两个只出现一次的数分到不同组，且其余数的两次出现都分到同一组。为达此目的，首先对原始数组进行全体异或，结果等同于两个只出现一次的数的异或，则任取一位为 1 的二进制位，表示在该位上两数是不同的，以该位的值来对所有数进行分组，可以确保两数被分到不同组，且其他数的两次出现都分到同一组。\"},\"519\":{\"t\":\"为方便起见，上述作为分组标准的数取全体异或的结果的最低位的 1。在大多情况下，结合补码知识，取最低有效位的方式为x & -x，但有一个特殊情况，当x为 −231 时，取负操作会导致溢出，考虑到其补码表示为“负零”，故其最低有效为为其本身\"},\"520\":{\"t\":\"class Solution { public int[] singleNumber(int[] nums) { int x = 0; for (int n : nums) x ^= n; if (x != Integer.MIN_VALUE) x &= -x; int[] res = new int[2]; for (int n : nums) if ((n & x) == 0) res[0] ^= n; else res[1] ^= n; return res; } } \"},\"521\":{\"h\":\"哈希\",\"a\":\"哈希\"},\"522\":{\"h\":\"字母异位词分组\",\"a\":\"字母异位词分组\"},\"523\":{\"t\":\"Description\"},\"524\":{\"t\":\"字母异位词是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次\"},\"525\":{\"t\":\"将字符串数组中的字母异位词组合在一起，如：\"},\"526\":{\"t\":\"input: strs = [\\\"eat\\\", \\\"tea\\\", \\\"tan\\\", \\\"ate\\\", \\\"nat\\\", \\\"bat\\\"]\"},\"527\":{\"t\":\"output: [[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\"},\"528\":{\"t\":\"Solution\"},\"529\":{\"t\":\"同种异位词字母排序后一致，可作为键来收集同种异位词\"},\"530\":{\"t\":\"class Solution { public List<List<String>> groupAnagrams(String[] strs) { Map<String, List<String>> map = new HashMap<>(); for (String str : strs) { char[] s = str.toCharArray(); Arrays.sort(s); String string = new String(s); List<String> list = map.getOrDefault(string, new ArrayList<>()); list.add(str); map.put(string, list); } return new ArrayList<List<String>>(map.values()); } } \"},\"531\":{\"h\":\"存在重复元素 II\",\"a\":\"存在重复元素-ii\"},\"532\":{\"t\":\"Description\"},\"533\":{\"t\":\"对于整数数组 nums 和整数 k ，判断数组中是否存在：(i=j)&{nums[i]=nums[j]}&[abs(i−j)≤k]\"},\"534\":{\"t\":\"Solution\"},\"535\":{\"h\":\"寻找重复的子树\",\"a\":\"寻找重复的子树\"},\"536\":{\"t\":\"Description\"},\"537\":{\"t\":\"找出二叉树中所有重复的子树（同种重复子树找任一棵的根节点即可）\"},\"538\":{\"t\":\"Solution1\"},\"539\":{\"h\":\"最长连续序列\",\"a\":\"最长连续序列\"},\"540\":{\"t\":\"Description\"},\"541\":{\"t\":\"求无序数组中最长数字连续子序列（不要求序列数字在原数组中也连续）的长度\"},\"542\":{\"t\":\"要求时间复杂度为 O(n)\"},\"543\":{\"t\":\"Solution\"},\"544\":{\"t\":\"class Solution { public int longestConsecutive(int[] nums) { int maxLen = 0; if (nums.length != 0) { Set<Integer> set = new HashSet<>(); for (int num : nums) set.add(num); for (int num : set) { if (!set.contains(num - 1)) { int curLen = 1; int cur = num; while (set.contains(cur + 1)) { ++curLen; ++cur; } maxLen = Math.max(maxLen, curLen); } } } return maxLen; } } \"},\"545\":{\"h\":\"缺失的第一个正数\",\"a\":\"缺失的第一个正数\"},\"546\":{\"t\":\"Description\"},\"547\":{\"t\":\"找出给定的无序整形数组中缺失的最小正整数，要求时间复杂度为O(n)且空间复杂度为O(1)\"},\"548\":{\"h\":\"多线程\",\"a\":\"多线程\"},\"549\":{\"h\":\"交替打印 FooBar\",\"a\":\"交替打印-foobar\"},\"550\":{\"t\":\"Description\"},\"551\":{\"t\":\"确保在多线程调用下，俩函数交替执行打印\"},\"552\":{\"t\":\"Solution\"},\"553\":{\"h\":\"交替打印字符串\",\"a\":\"交替打印字符串\"},\"554\":{\"t\":\"Description\"},\"555\":{\"t\":\"实现多线程版本从 1 ~ n 输出代表相应数字的字符串的程序，依据以下规则调用相应函数进行输出：\"},\"556\":{\"t\":\"若可被 3 整除，调用fizz()输出fizz\"},\"557\":{\"t\":\"若可被 5 整除，调用buzz()输出buzz\"},\"558\":{\"t\":\"若可同时被 3 和 5 整除，调用fizzbuzz()输出fizzbuzz\"},\"559\":{\"t\":\"其他情况调用number()输出该数\"},\"560\":{\"t\":\"比如当n = 15时输出1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz\"},\"561\":{\"t\":\"Solution\"},\"562\":{\"t\":\"class FizzBuzz { private ReentrantLock lock = new ReentrantLock(); private Condition con = lock.newCondition(); private volatile int cur = 1; private int n; public FizzBuzz(int n) { this.n = n; } // printFizz.run() outputs \\\"fizz\\\". public void fizz(Runnable printFizz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 == 0 && cur % 5 != 0) { printFizz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printBuzz.run() outputs \\\"buzz\\\". public void buzz(Runnable printBuzz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 5 == 0 && cur % 3 != 0) { printBuzz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printFizzBuzz.run() outputs \\\"fizzbuzz\\\". public void fizzbuzz(Runnable printFizzBuzz) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 == 0 && cur % 5 == 0) { printFizzBuzz.run(); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // printNumber.accept(x) outputs \\\"x\\\", where x is an integer. public void number(IntConsumer printNumber) throws InterruptedException { lock.lock(); try { while (cur <= n) { if (cur % 3 != 0 && cur % 5 != 0) { printNumber.accept(cur); ++cur; con.signalAll(); } else con.await(); } } finally { lock.unlock(); } } // for local debug public static void main(String[] args) { FizzBuzz fb = new FizzBuzz(30); // number new Thread(new Runnable() { @Override public void run() { try { fb.number(new IntConsumer() { @Override public void accept(int value) { System.out.print(value); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // fizzbuzz new Thread(new Runnable() { @Override public void run() { try { fb.fizzbuzz(new Runnable() { @Override public void run() { System.out.print(\\\"fizzbuzz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // fizz new Thread(new Runnable() { @Override public void run() { try { fb.fizz(new Runnable() { @Override public void run() { System.out.print(\\\"fizz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); // buzz new Thread(new Runnable() { @Override public void run() { try { fb.buzz(new Runnable() { @Override public void run() { System.out.print(\\\"buzz\\\"); System.out.println(\\\"\\\\t\\\" + Thread.currentThread().getName()); } }); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); } } \"},\"563\":{\"h\":\"哲学家进餐\",\"a\":\"哲学家进餐\"},\"564\":{\"t\":\"Description\"},\"565\":{\"t\":\"5 个哲学家围坐在圆桌前，每人面前一盘意面，两哲学家之间都有一把叉子，哲学家只会在思考和进餐两种行为间交替\"},\"566\":{\"t\":\"哲学家只有同时拿到左边和右边的叉子才能吃面，而同一根叉子在同一时间只能被一个哲学家使用，哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子\"},\"567\":{\"t\":\"利用多线程实现进餐规则，使得每个哲学家都能在不知道别人什么时候想吃东西或思考的情况下，在吃饭和思考之间一直交替下去\"},\"568\":{\"t\":\"哲学家从 0 ~ 4 编号，请实现函数void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)，其中：\"},\"569\":{\"t\":\"philosopher 哲学家的编号\"},\"570\":{\"t\":\"pickLeftFork 和 pickRightFork 表示拿起左边或右边的叉子\"},\"571\":{\"t\":\"eat 表示吃面\"},\"572\":{\"t\":\"putLeftFork 和 putRightFork 表示放下左边或右边的叉子\"},\"573\":{\"t\":\"由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调\"},\"574\":{\"t\":\"给 5 个线程代表 5 个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数\"},\"575\":{\"t\":\"Solution\"},\"576\":{\"t\":\"class DiningPhilosophers { // 每个叉子相当于锁 private ReentrantLock[] fork = new ReentrantLock[5]; // 同时进餐人数上限【五人同时拿叉子会死锁】 private Semaphore eatLimit = new Semaphore(4); public DiningPhilosophers() { for (int i = 0; i < 5; i++) { fork[i] = new ReentrantLock(); } } // call the run() method of any runnable to execute its code public void wantsToEat(int philosopher, Runnable pickLeftFork, Runnable pickRightFork, Runnable eat, Runnable putLeftFork, Runnable putRightFork) throws InterruptedException { eatLimit.acquire();// 申请就餐名额 int leftFork = philosopher; int rightFork = (philosopher + 1) % 5; fork[leftFork].lock();// 占据叉子 fork[rightFork].lock(); pickLeftFork.run();// 拿起叉子 pickRightFork.run(); eat.run(); putLeftFork.run();// 放下叉子 putRightFork.run(); fork[leftFork].unlock();// 释放叉子 fork[rightFork].unlock(); eatLimit.release(); } } \"},\"577\":{\"h\":\"并查集\",\"a\":\"并查集\"},\"578\":{\"h\":\"冗余连接\",\"a\":\"冗余连接\"},\"579\":{\"t\":\"Description\"},\"580\":{\"t\":\"给定无环连通无向图的所有边和一条冗余的边，找出那条冗余边\"},\"581\":{\"t\":\"设所有节点为1 ~ n，边的信息由长度为n的二维数组edges给出：edges[i] = [ai, bi]表示节点ai和bi之间存在一条边\"},\"582\":{\"t\":\"Solution\"},\"583\":{\"t\":\"无环连通无向图若有n个节点，则必有且仅有n-1条边，故有且仅有唯一一条冗余边，该边令图出现了环\"},\"584\":{\"t\":\"使用并查集随着遍历边的信息逐渐联合各节点，当某条边的两节点都已经在联合集中则说明该边冗余\"},\"585\":{\"t\":\"class Solution { public int[] findRedundantConnection(int[][] edges) { int n = edges.length; int[] parent = new int[n + 1]; for (int i = 1; i <= n; ++i) parent[i] = i; for (int[] edge : edges) { int rx = find(parent, edge[0]); int ry = find(parent, edge[1]); if (rx == ry) return edge; parent[rx] = ry; } return null; } private int find(int[] parent, int x) { while (parent[x] != x) x = parent[x]; return x; } } \"},\"586\":{\"h\":\"除法求值\",\"a\":\"除法求值\"},\"587\":{\"t\":\"Description\"},\"588\":{\"t\":\"'[[\\\"a\\\",\\\"c\\\"],[\\\"b\\\",\\\"a\\\"],[\\\"a\\\",\\\"e\\\"],[\\\"a\\\",\\\"a\\\"],[\\\"x\\\",\\\"x\\\"]]' 给定字符串变量对数组equations和一个实数值数组values作为已知条件，即equations[i] = [Ai, Bi]和values[i]共同表示条件Ai / Bi = values[i]\"},\"589\":{\"t\":\"另有一些以数组queries表示的问题，其中第j个问题queries[j] = [Cj, Dj]表示问题Cj / Dj = ?，根据已知条件推出结果\"},\"590\":{\"t\":\"若存在无法推出的答案则用-1.0表示，保证输入有效（不存在除 0）且不存在矛盾\"},\"591\":{\"t\":\"Solution\"},\"592\":{\"t\":\"此类存在许多传递关系并需要记录的需求适合用并查集，A / B = x可看作A -> B的传递关系，其倍数关系用额外的权重数组记录，存在传递关系的若干变量视作在同一集合中，通过并查集的链式传递效果可以消去若干已知中间变量而求出问题的答案，在不断联合新变量的过程中就同时进行类似重量并查集的路径压缩，迭代压缩时累乘更新起始节点到各中间父节点的权重值，表示消去链式条件的中间变量，如此构建的并查集的所有节点都直接连接于根节点，其权重都更新到除以根节点变量的结果，即把问题中对零散变量相除求值转化为除相同额外变量，确保后续查询的效率\"},\"593\":{\"t\":\"具体实现时，先给字符串变量编号以便并查集处理，在并查集中用parent[A]=B表示A/B的链式关系，其结果（传递关系权重）用weight[A]表示。合并节点时的权重更新参考平行四边形四条边的关系，如把X所在集合向Y所在集合联合，设X/Y=v，X根节点为rx，Y根节点为ry，则显然有weight[rx] = v * weight[Y] / weight[X]。查询时可以仅考虑所有节点直接相连于同一根节点，因为即使最后一次联合之后可能有节点不直接与根节点相连，但实际查询时会先进行带路径压缩操作的搜索，故查得结果时必所有节点都已直接相连与根节点\"},\"594\":{\"t\":\"class Solution { private int id = 0; // 用于给各变量编号，语法要求不能为局部变量 public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) { UnionFind uf = new UnionFind(2 * equations.size()); Map<String, Integer> map = new HashMap<>(2 * equations.size()); for (int i = 0; i < equations.size(); ++i) { int i1 = map.computeIfAbsent(equations.get(i).get(0), x -> id++); int i2 = map.computeIfAbsent(equations.get(i).get(1), x -> id++); uf.union(i1, i2, values[i]); } double[] res = new double[queries.size()]; for (int i = 0; i < queries.size(); ++i) { Integer i1 = map.get(queries.get(i).get(0)); Integer i2 = map.get(queries.get(i).get(1)); if (i1 == null || i2 == null) res[i] = -1.0d; else res[i] = uf.query(i1, i2); } return res; } private class UnionFind { private int[] parent; private double[] weight; UnionFind(int size) { parent = new int[size]; weight = new double[size]; for (int i = 0; i < size; ++i) { parent[i] = i; weight[i] = 1.0d; } } public double query(int x, int y) { if (find(x) == find(y)) return weight[x] / weight[y]; return -1.0d; } public void union(int x, int y, double value) { int rx = find(x); int ry = find(y); if (rx != ry) { parent[rx] = ry; // 仅需考虑节点高不大于 2 的情况，因为 find() 时已压缩 weight[rx] = value * weight[y] / weight[x]; } } public int find(int x) { while (parent[x] != parent[parent[x]]) { weight[x] *= weight[parent[x]]; parent[x] = parent[parent[x]]; } return parent[x]; } } } \"},\"595\":{\"h\":\"最小体力消耗路径\",\"a\":\"最小体力消耗路径\"},\"596\":{\"t\":\"Description\"},\"597\":{\"t\":\"求从给定矩阵的左上角到右下角的所有连通路径中路径差值的最小值\"},\"598\":{\"t\":\"路径差值：路径可上下左右四方向连通，某一路径上所有两两相邻元素差值（绝对值）的最大值为该路径的差值\"},\"599\":{\"t\":\"Solution\"},\"600\":{\"t\":\"将所有相邻元素差值当作节点的边长进行排序，按从小到大拿边连接节点，当某条边连接后左上角和右下角变为连通，则该边即为所求，因为边是从小到大启用的，所以该边是当前连通路径的最大边，且对于全局来说最先连通的路径一定是差值最小的\"},\"601\":{\"t\":\"因为要反复判断某两点是否连通，故采用并查集实现，矩阵格子编号采用顺序计数方式，边的记录形式需同时包含两节点的编号和边长（差值）\"},\"602\":{\"t\":\"class Solution { private int[] parent; public int minimumEffortPath(int[][] heights) { int m = heights.length, n = heights[0].length; parent = new int[m * n]; for (int i = 0; i < m * n; ++i) parent[i] = i; List<int[]> edges = new ArrayList<>(2 * m * n - m - n); for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { int id = i * n + j; if (i > 0) edges.add(new int[] { id - n, id, Math.abs(heights[i][j] - heights[i - 1][j]) }); if (j > 0) edges.add(new int[] { id - 1, id, Math.abs(heights[i][j] - heights[i][j - 1]) }); } } Collections.sort(edges, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { return o1[2] - o2[2]; } }); int res = 0; for (int[] edge : edges) { union(edge[0], edge[1], edge[2]); if (find(0) == find(m * n - 1)) { res = edge[2]; break; } } return res; } private void union(int x, int y, int delta) { int rx = find(x); int ry = find(y); if (rx != ry) parent[rx] = ry; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } } \"},\"603\":{\"h\":\"水位上升的泳池中游泳\",\"a\":\"水位上升的泳池中游泳\"},\"604\":{\"t\":\"Description\"},\"605\":{\"t\":\"给定方形矩阵grid表示泳池，其中grid[i][j]表示位置(i, j)的池底高度。由于注水，在时间为t时，水池中的水位为t。当某块池底不高于泳池水位时认为其可达，可从周围可达的上下左右连通块游向该块。求何时泳池左上角到右下角才是连通的\"},\"606\":{\"t\":\"注意：此题数据集各池底高度各不相同，且在[0, n*n)中\"},\"607\":{\"t\":\"Solution\"},\"608\":{\"t\":\"这题与 [最小体力消耗路径](#最小体力消耗路径 09) 十分相似，都是按照一定条件将网格内的格子逐渐分别连通，同时每次检查给定端点是否变为连通\"},\"609\":{\"t\":\"考虑到数据集的特殊性，可以首先将索引与高度关系反转存储以备查询，随后每次时间增长时，都聚焦于高度数值等同于时刻的块，根据实际语义可以将其与四周不高于它的块连通，直到某时刻的操作令两角变得连通即为所求\"},\"610\":{\"t\":\"class Solution { private int[] parent; public int swimInWater(int[][] grid) { int n = grid.length; int size = n * n; int[][] dirs = { { 0, -1 }, { 0, 1 }, { -1, 0 }, { 1, 0 } }; parent = new int[size]; for (int i = 0; i < size; ++i) parent[i] = i; int[] index = new int[size]; for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) index[grid[i][j]] = i * n + j; for (int i = 0; i < size; ++i) { int row = index[i] / n; int col = index[i] % n; for (int[] d : dirs) { int r = row + d[0]; int c = col + d[1]; if (r >= 0 && r < n && c >= 0 && c < n && grid[r][c] <= grid[row][col]) parent[find(r * n + c)] = find(index[i]); } if (find(0) == find(size - 1)) return i; } return -1; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } } \"},\"611\":{\"h\":\"交换字符串中的元素\",\"a\":\"交换字符串中的元素\"},\"612\":{\"t\":\"Description\"},\"613\":{\"t\":\"给定字符串和其中若干索引对的数组pairs，其中pairs[i] = [a, b]表示字符串中的两个索引，可以任意多次交换索引对中任意一对索引处的字符，求在经过若干次交换后字符串能达到的按字典序最小的字符串\"},\"614\":{\"t\":\"Solution\"},\"615\":{\"t\":\"索引对实质上是连通两索引，所有索引对即表示某些索引连通成若干集合，不在索引对中的位置表示不可调换。所以先由并查集将所有索引对的信息翻译成字符串中的若干连通位置的集合，同一集合内的字符可以任意调换（直接按字典序排列），考虑到字符的可重复性，显然可以用字符对象的优先队列直接一步到位，各集合间用根节点位置来区分，所以用哈希表存各优先队列。最后拼成结果字符串时，各个位置都从其连通集合（即根节点对应的优先队列）中按已排好的顺序取出拼接即可\"},\"616\":{\"t\":\"class Solution { private int[] parent; public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) { parent = new int[s.length()]; for (int i = 0; i < s.length(); ++i) parent[i] = i; for (List<Integer> pair : pairs) union(pair.get(0), pair.get(1)); HashMap<Integer, PriorityQueue<Character>> sets = new HashMap<>(); for (int i = 0; i < s.length(); ++i) // 此处必须用 find(i)，因为还有一节点未直接与根节点相连 sets.computeIfAbsent(find(i), x -> new PriorityQueue<>()).offer(s.charAt(i)); char[] res = new char[s.length()]; for (int i = 0; i < s.length(); ++i) res[i] = sets.get(parent[i]).poll(); // 此处可直接用 parent 索引 return String.valueOf(res); } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { int rx = find(x); int ry = find(y); if (rx != ry) parent[rx] = ry; } } \"},\"617\":{\"h\":\"合并账户\",\"a\":\"合并账户\"},\"618\":{\"t\":\"Description\"},\"619\":{\"t\":\"给定一个列表accounts，其中的accounts[i]是字符串列表，其中第一个元素accounts[i][0]为人名（账户），后续元素为账户下的若干邮箱。\"},\"620\":{\"t\":\"一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。现在按实际的人来合并这些账户：若两个账户含相同邮箱地址，则认为两账户属于同一个人。但是即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。\"},\"621\":{\"t\":\"合并账户后的返回格式：不同账户间顺序随意，每个账户内的第一个元素是名称，其余元素是按字典序排列的邮箱地址\"},\"622\":{\"t\":\"input:accounts = [[\\\"John\\\", \\\"johnsmith@mail.com\\\", \\\"john00@mail.com\\\"], [\\\"John\\\", \\\"johnnybravo@mail.com\\\"], [\\\"John\\\", \\\"johnsmith@mail.com\\\", \\\"john_newyork@mail.com\\\"], [\\\"Mary\\\", \\\"mary@mail.com\\\"]] output:[[\\\"John\\\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'], [\\\"John\\\", \\\"johnnybravo@mail.com\\\"], [\\\"Mary\\\", \\\"mary@mail.com\\\"]]\"},\"623\":{\"t\":\"Solution\"},\"624\":{\"t\":\"针对不同账户（列表）间的合并，可以将accounts[i]视为独立区域，针对所有索引建立并查集，在遍历过程中若发现某邮箱已经遍历过，则将此时正遍历的账户与已存在邮箱所对应的账户进行合并，由此可见遍历时需要存储各邮箱对应的账户，又考虑到账户可能同名，故采用索引来避免直接使用人名，即遍历时用哈希表存邮箱 - 索引对，遍历完之后实际上完成了邮箱的去重和合并主体标记。\"},\"625\":{\"t\":\"接下来就是实际上的合并，此时暂且还是用索引当作合并标识，遍历上一步构建的哈希表，将所有邮箱按合并标识进行合并。考虑到邮箱第一次出现的账户索引可能不是合并的主体标识，所以得到邮箱对应的索引后还需要经过并查集找到可以作为合并标识的根。由于题目要求账户内邮箱需要排序，容器使用TreeSet。完成之后只需要将答案整理成要求的返回格式即可\"},\"626\":{\"t\":\"class Solution { private int[] parent; public List<List<String>> accountsMerge(List<List<String>> accounts) { parent = new int[accounts.size()]; for (int i = 0; i < accounts.size(); ++i) parent[i] = i; // all mails -> index, and union accounts[i] Map<String, Integer> mailToIdx = new HashMap<>(); for (int i = 0; i < accounts.size(); ++i) { List<String> accs = accounts.get(i); for (int j = 1; j < accs.size(); ++j) { if (mailToIdx.containsKey(accs.get(j))) union(i, mailToIdx.get(accs.get(j))); else mailToIdx.put(accs.get(j), i); } } // merge accounts to index(person) with sort Map<Integer, TreeSet<String>> idxMail = new HashMap<>(); for (String mail : mailToIdx.keySet()) { int idx = find(mailToIdx.get(mail)); idxMail.computeIfAbsent(idx, k -> new TreeSet<>()).add(mail); } // just convert result List<List<String>> res = new ArrayList<>(); for (Map.Entry<Integer, TreeSet<String>> entry : idxMail.entrySet()) { List<String> person = new ArrayList<>(); person.add(accounts.get(entry.getKey()).get(0)); person.addAll(entry.getValue()); res.add(person); } return res; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { parent[find(x)] = find(y); } } \"},\"627\":{\"h\":\"打砖块\",\"a\":\"打砖块\"},\"628\":{\"t\":\"Description\"},\"629\":{\"t\":\"给定二维网格，其值为1表示砖块，0表示空白，某砖块稳定（不会掉落）是指其直接或间接（上下左右）与网格顶部相连，再给定若干表示依次消除的位置，若消除的位置本就无砖块则无事发生，否则指定位置砖块消失，从而导致相邻位置的砖块可能不再与网格顶部直接或间接相连而不稳定（掉落），砖块掉落就立即从网格内消失而不会落到其他砖块上。求因每次的消除而掉落的砖块数量\"},\"630\":{\"t\":\"Solution\"},\"631\":{\"t\":\"这实际上是一个求不断断开某些节点后连通量的问题，需要逆向思维，每次因消除而减少的连通数量，等效于逆序填补时增加的连通数量，由此利用并查集实现\"},\"632\":{\"t\":\"具体实现时，并查集位置使用i*m+j规则编号，再额外多一个m*n编号表示顶部。由于需要时刻查询连通集合内节点数量，故需要维护各根节点的节点数量。开始时需将网格数据复制一份，保留原有数据，留备每次填充时先查询，若原本该位置就无砖块则填充后连通数量也必无变化。首先将所有消除一并执行，再将剩余的砖块连通成若干集合（分为与顶部相连的稳定集合与其他集合）。连通时由于是从左上往右下进行遍历，故每次只需考虑向左上的连通。完成之后就开始按消除顺序的逆序进行填充，每次填充前先记录稳定集合的砖块数量，再进行填充后的四周连通，此时需注意考虑填充位置与顶部的特殊连通，完成后再次获取此时稳定集合的砖块数量，则变化量减一（剪掉消除/填充的那块）即为正向消除的本次掉落数量，又因为变化量有减一的操作，考虑变化量为零的情况，需要进行保护性修正。最后别忘了在网格中实际地将其标为砖块\"},\"633\":{\"t\":\"class Solution { private int[] parent; private int[] weight; public int[] hitBricks(int[][] grid, int[][] hits) { int[][] dirs = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } }; int m = grid.length, n = grid[0].length; int size = m * n; // init union find set, with [size] as ceiling parent = new int[size + 1]; weight = new int[size + 1]; for (int i = 0; i <= size; ++i) { parent[i] = i; weight[i] = 1; } // copy grid, because grid is useful later int[][] copy = new int[m][n]; for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) copy[i][j] = grid[i][j]; // hit all for (int[] hit : hits) copy[hit[0]][hit[1]] = 0; // union ceiling for (int j = 0; j < n; ++j) if (copy[0][j] == 1) union(j, size); // union other sets, from left-up to right-down for (int i = 1; i < m; ++i) for (int j = 0; j < n; ++j) if (copy[i][j] == 1) { if (copy[i - 1][j] == 1) union(i * n + j, (i - 1) * n + j); if (j > 0 && copy[i][j - 1] == 1) union(i * n + j, i * n + j - 1); } // fill with reverse order int[] res = new int[hits.length]; for (int i = hits.length - 1; i >= 0; --i) { int x = hits[i][0], y = hits[i][1]; if (grid[x][y] == 0) // no meaning continue; // connect count to ceiling before filling int origin = weight[find(size)]; // union the hit position to ceiling if its row == 0 if (x == 0) union(y, size); // fill and union it arround for (int[] d : dirs) { int r = x + d[0], c = y + d[1]; if (r >= 0 && r < m && c >= 0 && c < n && copy[r][c] == 1) union(x * n + y, r * n + c); } // connect count to ceiling after filling int filled = weight[find(size)]; // delta count minus one is answer, but consider delta == 0 res[i] = Math.max(0, filled - origin - 1); copy[x][y] = 1; } return res; } private int find(int x) { while (parent[x] != parent[parent[x]]) parent[x] = parent[parent[x]]; return parent[x]; } private void union(int x, int y) { int rx = find(x); int ry = find(y); if (rx != ry) { parent[rx] = ry; weight[ry] += weight[rx]; } } } \"},\"634\":{\"h\":\"搜索\"},\"635\":{\"h\":\"01 矩阵\",\"a\":\"_01-矩阵\"},\"636\":{\"t\":\"Description\"},\"637\":{\"t\":\"矩阵值为 0 或 1，找出各 1 最近的 0\"},\"638\":{\"t\":\"Solution\"},\"639\":{\"h\":\"打开转盘锁\",\"a\":\"打开转盘锁\"},\"640\":{\"t\":\"Description\"},\"641\":{\"t\":\"四位转盘锁初始为0000，每个转盘可转转为0 ~ 9（0与9相邻），但每次只能转一个转盘的相邻数字\"},\"642\":{\"t\":\"另外给定若干转盘数位组合，在转至正确组合过程中不可遇到，问在此限制下解开锁的最少转动次数（无法解开则次数为-1）\"},\"643\":{\"t\":\"Solution\"},\"644\":{\"t\":\"不可简单地通过判断各位是否从两种方向转至正确位数是否都被限制来直接断定，因为某些位被限制的同时只需要至少其他一位不同即可绕过\"},\"645\":{\"t\":\"故还是得通过搜索来判断，因为求最少转动次数，故用 BFS。对于每种组合，不同转动结果有 8 种，过程类似于图搜索，将搜索过的组合缓存标记（可以直接并在给定的限制组合集中）\"},\"646\":{\"t\":\"值得一提的是在实现时，需要判断若0000本身就在限制组合中，则直接返回，否则需要将所有组合都搜一遍，达到极端最坏情况\"},\"647\":{\"t\":\"class Solution { public int openLock(String[] deadends, String target) { Set<String> set = new HashSet<>(); for (String s : deadends) set.add(s); int count = 0; Queue<String> que = new LinkedList<>(); if (!set.contains(\\\"0000\\\")) que.offer(\\\"0000\\\"); while (!que.isEmpty()) { int size = que.size(); while (size-- > 0) { String cur = que.poll(); if (target.equals(cur)) return count; if (!set.contains(cur)) { set.add(cur); for (String s : changeOne(cur)) if (!set.contains(s)) que.add(s); } } ++count; } return -1; } private ArrayList<String> changeOne(String src) { ArrayList<String> res = new ArrayList<>(); char[] data = src.toCharArray(); for (int i = 0; i < 4; ++i) { int cur = data[i] - '0'; data[i] = (char) ('0' + ((cur + 1) % 10)); res.add(String.valueOf(data)); data[i] = (char) ('0' + ((cur + 9) % 10)); res.add(String.valueOf(data)); data[i] = (char) ('0' + cur); } return res; } } \"},\"648\":{\"h\":\"太平洋大西洋水流问题\",\"a\":\"太平洋大西洋水流问题\"},\"649\":{\"t\":\"Description\"},\"650\":{\"t\":\"设矩阵左和上边界为太平洋，右和下边界为大西洋，矩阵元素表示海拔，其位置上的水可向四周等高或更低位置流，求所有能使水流向两个大洋的位置\"},\"651\":{\"t\":\"Solution\"},\"652\":{\"t\":\"若从各位置往边界搜固然可达，但在回溯过程中途径的位置复用性极差，故应从边界的各位置开始往高的地势搜同时记录位置向该大洋的可达性，最后遍历各位置收集可达两洋的位置\"},\"653\":{\"t\":\"class Solution { private int[][] dirs = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } }; private int[][] heights; private int m; private int n; private boolean[][] paci; private boolean[][] atla; public List<List<Integer>> pacificAtlantic(int[][] heights) { this.heights = heights; this.m = heights.length; this.n = heights[0].length; this.paci = new boolean[m][n]; this.atla = new boolean[m][n]; List<List<Integer>> res = new ArrayList<>(); for (int i = 0; i < m; ++i) { dfs(i, 0, paci); dfs(i, n - 1, atla); } for (int i = 0; i < n; ++i) { dfs(0, i, paci); dfs(m - 1, i, atla); } for (int i = 0; i < m; ++i) for (int j = 0; j < n; ++j) if (paci[i][j] && atla[i][j]) res.add(Arrays.asList(i, j)); return res; } private void dfs(int row, int col, boolean[][] ocean) { ocean[row][col] = true; for (int[] d : dirs) { int r = row + d[0]; int c = col + d[1]; if (r >= 0 && r < m && c >= 0 && c < n && heights[r][c] >= heights[row][col] && !ocean[r][c]) dfs(r, c, ocean); } } } \"},\"654\":{\"h\":\"二进制矩阵中的最短路径\",\"a\":\"二进制矩阵中的最短路径\"},\"655\":{\"t\":\"Description\"},\"656\":{\"t\":\"求总左上角沿全 0 路径到右下角的最短路径长度（可以斜着走）\"},\"657\":{\"t\":\"Solution\"},\"658\":{\"t\":\"求最短路径用 BFS\"},\"659\":{\"t\":\"搜索时用另一矩阵记录当前位置是否被访问过。之所以 BFS 也能像 DFS 回溯那般用矩阵记录，是因为若即将遍历的位置已经被访问过，则说明存在不长于当前路径的另一更优路径，当前路径再经过已经访问过的位置也无意义\"},\"660\":{\"t\":\"值得注意的是实现时需确保位置入队同时标记为已访问，不可在出队寻找相邻下一位置时再标记，因为即使同一批入队，因为相邻位置的相邻位置可以是同一个，很可能会造成同一位置重复入队情况\"},\"661\":{\"t\":\"class Solution { public int shortestPathBinaryMatrix(int[][] grid) { if (grid[0][0] == 0) { int res = 1; int n = grid.length; if (n == 1) return 1; boolean[][] visited = new boolean[n][n]; int[][] dirs = { { -1, -1 }, { -1, 0 }, { -1, 1 }, { 0, -1 }, { 0, 0 }, { 0, 1 }, { 1, -1 }, { 1, 0 }, { 1, 1 } }; Queue<int[]> que = new LinkedList<>(); que.offer(new int[] { 0, 0 }); visited[0][0] = true; while (!que.isEmpty()) { int size = que.size(); while (size-- > 0) { int[] cur = que.poll(); for (int[] d : dirs) { int r = cur[0] + d[0]; int c = cur[1] + d[1]; if (r >= 0 && r < n && c >= 0 && c < n && grid[r][c] == 0 && !visited[r][c]) { if (r == n - 1 && c == n - 1) return res + 1; visited[r][c] = true; que.offer(new int[] { r, c }); } } } ++res; } } return -1; } } \"},\"662\":{\"h\":\"判断二分图\",\"a\":\"判断二分图\"},\"663\":{\"t\":\"Description\"},\"664\":{\"t\":\"给定无向图和连接情况数组（二维数组graph[u]中为邻接的不同节点），但不保证图连通（可能存在节点之间无连通路径的情况），判断该图是否为二分图\"},\"665\":{\"t\":\"二分图：所有节点分为两个独立集合，每条边连接的俩节点都属于不同集合\"},\"666\":{\"t\":\"Solution\"},\"667\":{\"h\":\"模拟\"},\"668\":{\"h\":\"对角线遍历\",\"a\":\"对角线遍历\"},\"669\":{\"t\":\"Description\"},\"670\":{\"t\":\"按对角线遍历矩阵，如：\"},\"671\":{\"t\":\"input: mat = [[1,2,3],[4,5,6],[7,8,9]]\"},\"672\":{\"t\":\"output: [1,2,4,7,5,3,6,8,9]\"},\"673\":{\"t\":\"Solution\"},\"674\":{\"t\":\"先假设每条斜线都从右上至左下遍历，再依据奇偶按需逆序\"},\"675\":{\"t\":\"可进一步实时遍历判断方向与斜线收尾的方法，未记录\"},\"676\":{\"t\":\"class Solution { public int[] findDiagonalOrder(int[][] mat) { ArrayList<Integer> temp = new ArrayList<>(); int m = mat.length, n = mat[0].length; int[] res = new int[m * n]; int cnt = 0; for (int k = 0; k < m + n - 1; ++k) { temp.clear(); int r = k < n ? 0 : k - n + 1; int c = k < n ? k : n - 1; while (r < m && c >= 0) temp.add(mat[r++][c--]); if (k % 2 == 0) Collections.reverse(temp); for (int num : temp) res[cnt++] = num; } return res; } } \"},\"677\":{\"h\":\"最长回文子串\",\"a\":\"最长回文子串\"},\"678\":{\"t\":\"Description\"},\"679\":{\"t\":\"找出给定字符串中最长的回文子串\"},\"680\":{\"t\":\"Solution\"},\"681\":{\"t\":\"枚举每个字符，在保持回文前提下，以其为中心向两端扩展，扩展期间维护最大回文串位置\"},\"682\":{\"t\":\"class Solution { public String longestPalindrome(String s) { int start = 0, end = 0; for (int i = 0; i < s.length(); ++i) { // 考虑初始回文串为 1 和 2 字符的边界情况 int len = Math.max(expand(s, i, i), expand(s, i, i + 1)); if (len > end - start) { // 当回文串由 2 字符拓展而来时，i-len/2 会导致左边界多减一 start = i - (len - 1) / 2; end = i + len / 2; } } return s.substring(start, end + 1); } private int expand(String s, int left, int right) { while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) { --left; ++right; } // 此时的俩边界为多拓展了一次的，故返回时将长度 -2 return right - left - 1; } } \"},\"683\":{\"h\":\"两数之和 II - 输入有序数组\",\"a\":\"两数之和-ii-输入有序数组\"},\"684\":{\"t\":\"Description\"},\"685\":{\"t\":\"找出非递减数组中和为给定值的两个数的下标\"},\"686\":{\"t\":\"要求空间复杂度为 O(1)\"},\"687\":{\"t\":\"Solution\"},\"688\":{\"t\":\"因为数组有序，故可以用双指针由两端逐渐逼近\"},\"689\":{\"t\":\"class Solution { public int[] twoSum(int[] numbers, int target) { int left = 0, right = numbers.length - 1; while (left < right) { int sum = numbers[left] + numbers[right]; if (sum < target) ++left; else if (sum > target) --right; else return new int[] { left + 1, right + 1 }; } return new int[] { -1, -1 }; } } \"},\"690\":{\"h\":\"翻转单词顺序\",\"a\":\"翻转单词顺序\"},\"691\":{\"t\":\"Description\"},\"692\":{\"t\":\"将给定英文句子字符串的单词逆序（需除掉一切多余空格），如：\"},\"693\":{\"t\":\"input: \\\" hello world! \\\"\"},\"694\":{\"t\":\"output: \\\"world! hello\\\"\"},\"695\":{\"t\":\"Solution\"},\"696\":{\"h\":\"求众数 II\",\"a\":\"求众数-ii\"},\"697\":{\"t\":\"Description\"},\"698\":{\"t\":\"求非空数组中所有出现次数大于数组长度三分之一的元素\"},\"699\":{\"t\":\"Solution\"},\"700\":{\"t\":\"此类求多数元素的问题考虑用摩尔投票法，其实质就是不同元素对拼消耗，最后多数元素肯定会相应剩下。\"},\"701\":{\"t\":\"例如 N 个元素中求出现次数大于 N÷k 的元素，故先拟定 k−1 个可能存在的候选多数元素【符合条件的最多只可能有 k−1 个】，每次取 k−1 个不同元素进行抵消，最后若有剩下的候选元素，则对每种进行计数核查是否符合要求。\"},\"702\":{\"t\":\"具体实现是设若干候选变量及其相应计数变量，在遍历数组的每个元素时，若当前元素与某个剩余的变量相同（且相应计数非零），则将其计数加一；若与各候选变量都不同，则伺机选取坑位占据，以备接下来的一组抵消，若此时发现无坑位，则说明已凑够一组不同元素，立即进行抵消。遍历完之后若有剩余候选变量，再到原数组中统计其次数是否达标，最终确认答案\"},\"703\":{\"t\":\"class Solution { public List<Integer> majorityElement(int[] nums) { int r1 = 0, c1 = 0, r2 = 0, c2 = 0; for (int num : nums) { if (c1 > 0 && num == r1) ++c1; else if (c2 > 0 && num == r2) ++c2; else if (c1 == 0) { r1 = num; ++c1; } else if (c2 == 0) { r2 = num; ++c2; } else { --c1; --c2; } } List<Integer> res = new ArrayList<>(); if (c1 > 0 || c2 > 0) { int n1 = 0, n2 = 0; for (int num : nums) { if (num == r1) ++n1; else if (num == r2) ++n2; } if (n1 > nums.length / 3) res.add(r1); if (n2 > nums.length / 3) res.add(r2); } return res; } } \"},\"704\":{\"h\":\"根据身高重建队列\",\"a\":\"根据身高重建队列\"},\"705\":{\"t\":\"Description\"},\"706\":{\"t\":\"给定一群人的乱序的属性数组，其中各元素 [hi​,ki​] 表示第 i 个人的身高为 hi​ 且前面恰有 ki​ 个人的身高不低于 hi​ ，将属性数组重建为有序的并返回\"},\"707\":{\"t\":\"input: [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\"},\"708\":{\"t\":\"output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\"},\"709\":{\"t\":\"Solution\"},\"710\":{\"t\":\"分为两个部分来考虑，以什么顺序从原数组中抽出来人，还有将抽出来的人怎么插入新建的队列中去。实际上新建的队列只需对各人的第二属性负责即可，那么显然如果将人从高到低逐渐插入新队列，就不会对已插入的人的第二属性产生影响，并且当前插入者的第二属性恰好就是插入新队列的索引位置，由此可得从原数组中抽人的第一顺序应当是其第一属性（身高），当身高相同时考虑第二属性，因为其表示的是前面有多少个的问题，所以只需稍加试验即可得应按照升序进行抽取\"},\"711\":{\"t\":\"class Solution { public int[][] reconstructQueue(int[][] people) { Arrays.sort(people, new Comparator<int[]>() { @Override public int compare(int[] o1, int[] o2) { return o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]; } }); List<int[]> res = new LinkedList<>(); for (int[] p : people) res.add(p[1], p); return res.toArray(new int[res.size()][]); } } \"},\"712\":{\"h\":\"分发糖果\",\"a\":\"分发糖果\"},\"713\":{\"t\":\"Description\"},\"714\":{\"t\":\"若干人站成一排，给定代表各位评分的整数数组，依据评分给每人发糖果，要求每人至少发一个，并且相邻两人评分更高的分给更多糖果，求满足要求的最少糖果数\"},\"715\":{\"t\":\"Solution\"},\"716\":{\"h\":\"非递减数列\",\"a\":\"非递减数列\"},\"717\":{\"t\":\"Description\"},\"718\":{\"t\":\"判断给定数组是否能在最多改变一个元素条件下成为非递减的\"},\"719\":{\"t\":\"Solution\"},\"720\":{\"t\":\"能变成非递减数组的话，原数组最多只能有一次递减发生。考虑发生递减的连续的三个元素a, b, c，其中a <= b且b > c，实际上只有两种情况：\"},\"721\":{\"t\":\"a <= c：既可将b降至c，也可将c升至b。但应尽可能使紧接着c的元素满足非递减，所以应将b降至c\"},\"722\":{\"t\":\"a > c: 只有将c升至a一种方式\"},\"723\":{\"t\":\"在遍历检查时记录是否已有一次递减发生，若已发生则直接返回。基于此可知，在检测到可能存在的第二次递减时，一定用不到第一次递减的b元素，故上述第一种情况下无需实际地改变b的值\"},\"724\":{\"t\":\"class Solution { public boolean checkPossibility(int[] nums) { if (nums.length == 1) return true; boolean one = nums[0] > nums[1]; for (int i = 1; i < nums.length - 1; ++i) { if (nums[i] > nums[i + 1]) { if (one) return false; one = true; if (nums[i - 1] > nums[i + 1]) nums[i + 1] = nums[i]; } } return true; } } \"},\"725\":{\"h\":\"回文子串\",\"a\":\"回文子串\"},\"726\":{\"t\":\"Description\"},\"727\":{\"t\":\"求给定字符串所有回文子串的数量\"},\"728\":{\"t\":\"Solution\"},\"729\":{\"t\":\"枚举所有可能的回文子串中心，将各中心向两侧尽可能延伸，以此枚举所有回文子串，时间复杂度比直接枚举子串两端再判断是否回文要低。\"},\"730\":{\"t\":\"回文子串的中心有单字符和双字符两种，需要分开讨论扩展。枚举所有中心时有个小技巧：对于每个字符作为中心左端，中心右端要么是其本身，要么是右侧的下一个字符，故索引呈现强烈的奇偶规律性，可以将中心的左右端点并在一个循环中进行枚举，归纳可得共需枚举2*n-1次，左端点为i/2再取整，右端点为i/2 + i%2\"},\"731\":{\"t\":\"class Solution { public int countSubstrings(String s) { int res = 0; for (int i = 0; i < 2 * s.length() - 1; ++i) { int l = i >> 1, r = (i >> 1) + (i & 1); while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) { --l; ++r; ++res; } } return res; } } \"},\"732\":{\"h\":\"找出游戏的获胜者\",\"a\":\"找出游戏的获胜者\"},\"733\":{\"t\":\"Description\"},\"734\":{\"t\":\"n个人围成一圈，顺时针编号1 ~ n，从 1 号开始（含 1 号）往后数第k个淘汰，再从淘汰位置的下一个开始数，求如此淘汰到只剩最后一人的编号\"},\"735\":{\"t\":\"Solution\"},\"736\":{\"h\":\"盛最多水的容器\",\"a\":\"盛最多水的容器\"},\"737\":{\"t\":\"Description\"},\"738\":{\"t\":\"给定表示每个位置高度的整型数组，仅可选其中两条线与地面构成容器，求存储水的最大量\"},\"739\":{\"t\":\"Solution\"},\"740\":{\"t\":\"用双指针从两端相向逼近并维护最大储水量。指针如何移动？因为指针是相向移动的，故每次移动横向距离减小，而储水量的高取决于二者高度的较小值，故移动较高的指针必不可能获得更大的储水量，移动高度低的指针才有可能。\"},\"741\":{\"t\":\"当二者一样高时可以同时移动两个指针，因为若只移动一个的话，不管新位置高度如何，横向距离变小且最小高度不会变大，储水量必变小。更进一步，移动的那个指针即使一直移到紧挨另一个，也不可能会获得更大的储水量，必须一个移动后另一个也移动才可能，故合并为两指针同时相向移动\"},\"742\":{\"t\":\"class Solution { public int maxArea(int[] height) { int res = 0; int left = 0, right = height.length - 1; while (left < right) { res = Math.max(res, (right - left) * Math.min(height[left], height[right])); if (height[left] < height[right]) ++left; else if (height[left] > height[right]) --right; else { ++left; --right; } } return res; } } \"},\"743\":{\"h\":\"计算右侧小于当前元素的个数\",\"a\":\"计算右侧小于当前元素的个数\"},\"744\":{\"t\":\"Description\"},\"745\":{\"t\":\"给定整型数组nums，要求计算新数组counts，其中counts[i]的值是nums[i]右侧小于nums[i]的元素的数量\"},\"746\":{\"t\":\"详情\"},\"747\":{\"t\":\"可以转化为单点更新、区间查询型的离散化树状数组的应用。将原数组去重再排序并由此建立树状数组，从右至左遍历原数组的同时维护树状数组，并查询小于当前遍历值的所有数的数量和（因为是从右向左遍历的原数组，故树状数组中各值的数量即为当前遍历值右侧的数据）\"},\"748\":{\"t\":\"还有基于归并排序变种的解法，见官方题解\"},\"749\":{\"t\":\"class Solution { public List<Integer> countSmaller(int[] nums) { List<Integer> res = new ArrayList<>(); Set<Integer> set = new TreeSet<>(); for (int n : nums) set.add(n); int[] a = new int[set.size()]; int idx = 0; for (int n : set) a[idx++] = n; int[] c = new int[a.length + 1]; for (int i = nums.length - 1; i >= 0; --i) { idx = Arrays.binarySearch(a, nums[i]) + 1; int sum = 0; for (int j = idx - 1; j > 0; j -= j & -j) sum += c[j]; res.add(sum); for (; idx < c.length; idx += idx & -idx) c[idx] += 1; } Collections.reverse(res); return res; } } \"},\"750\":{\"h\":\"翻转对\",\"a\":\"翻转对\"},\"751\":{\"t\":\"Description\"},\"752\":{\"t\":\"求给定数组nums所含翻转对的数量，其中翻转对指满足i < j && nums[i] > 2*nums[j]的索引对\"},\"753\":{\"t\":\"Solution\"},\"754\":{\"t\":\"求翻转对与归并排序过程十分契合，不断合并已排序子数组的过程中，可以顺便求出索引恰分别在左右子数组中的翻转对数量，而索引分布在同一子数组范围内的翻转对则在前一轮排序时已求出，故可借助整个归并排序过程逐渐求出所有翻转对。\"},\"755\":{\"t\":\"在归并排序中合并两已升序排序的子数组过程中，设分别处于左右子数组的索引分别为i和j，本次待归并的总范围为[left, right]且2*len == right-left+1，右子数组起始索引为left+len，对于固定的nums[i]，在右侧维护最大的区间[left+len, end)，使得end处的元素为区间向右扩展遇到的首个不满足与nums[i]组成翻转对的元素，则对于i作为翻转对的左元素的情况来说，归并范围内本次需新增的数量为end - (left + len)，遍历左子数组中所有元素即可累加出所有新增翻转对数量，并且考虑到左右子数组的有序性，end在全过程随i单调不减。\"},\"756\":{\"t\":\"本题还可用树状数组配合离散化来解，官方题解不好，可参考民间题解\"},\"757\":{\"t\":\"class Solution { public int reversePairs(int[] nums) { int cnt = 0; int[] tmp = new int[nums.length]; for (int len = 1; len < nums.length; len <<= 1) { for (int left = 0; left < nums.length - len; left += len << 1) { int right = Math.min(nums.length - 1, left + (len << 1) - 1); for (int i = left; i <= right; ++i) tmp[i] = nums[i]; int l = left, r = left + len; int end = r; // [r, end) for (int i = l; i < r; ++i) { while (end <= right && (long) tmp[i] > (long) tmp[end] << 1) ++end; // end 随 i 单调不减 cnt += end - r; // end 最大是 right+1，恰表示开区间个数 } for (int i = left; i <= right; ++i) { if (l == left + len) nums[i] = tmp[r++]; else if (r > right || tmp[l] <= tmp[r]) nums[i] = tmp[l++]; else nums[i] = tmp[r++]; } } } return cnt; } } \"},\"758\":{\"h\":\"旋转数组\",\"a\":\"旋转数组\"},\"759\":{\"t\":\"Description\"},\"760\":{\"t\":\"将给定数组向右轮转k个位置\"},\"761\":{\"t\":\"Solution\"},\"762\":{\"h\":\"说明\"},\"763\":{\"h\":\"说明\",\"a\":\"说明\"},\"764\":{\"t\":\"此目录下的文章都是关于工作的\"},\"765\":{\"h\":\"Java 知识点\"},\"766\":{\"h\":\"记录一些杂的知识点\",\"a\":\"记录一些杂的知识点\"},\"767\":{\"t\":\"线程池\"},\"768\":{\"t\":\"AQS(AbstractQueuedSyncronizer)\"},\"769\":{\"t\":\"Redis 的 SDS、Redis 的 zset 底层（跳表）、Redis 的 list 底层\"},\"770\":{\"t\":\"Redis 过期删除策略和内存淘汰策略\"},\"771\":{\"t\":\"B+ 树插入删除操作\"},\"772\":{\"t\":\"二叉树插入节点后再平衡操作\"},\"773\":{\"t\":\"数据库索引及其结构、索引失效场景\"},\"774\":{\"t\":\"RC 与 RR 的 MVCC 实现、当前读与快照读\"},\"775\":{\"t\":\"MySQL 中 RedoLog 与 BinLog 一致性问题、Canal 原理\"},\"776\":{\"t\":\"MySQL 与 Redis 一致性问题\"},\"777\":{\"t\":\"MySQL 的锁\"},\"778\":{\"t\":\"数据库迁移时如何确保数据一致性\"},\"779\":{\"t\":\"基于 Lock+Condition 实现自定义阻塞队列\"},\"780\":{\"t\":\"HashMap 为什么线程不安全\"},\"781\":{\"t\":\"Redis 缓存穿透、缓存击穿、缓存雪崩、(一致性哈希算法、jump consistent hash)\"},\"782\":{\"t\":\"Redis 持久化\"},\"783\":{\"t\":\"抽象类与接口\"},\"784\":{\"t\":\"synchronized 原理、Lock 原理\"},\"785\":{\"t\":\"死锁的产生、防止、避免、检测和解除\"},\"786\":{\"t\":\"synchronized 原理、Java 常用锁的使用\"},\"787\":{\"t\":\"MySQL 日志分类及简介、MySQL 事务日志\"},\"788\":{\"t\":\"操作系统 IO 模型、select & poll & epoll\"},\"789\":{\"t\":\"http & https\"},\"790\":{\"t\":\"BIO & NIO & AIO\"},\"791\":{\"t\":\"操作系统文件读写流程\"},\"792\":{\"t\":\"Java 实现线程安全的三种方式及如何保证线程安全\"},\"793\":{\"t\":\"粘包及其解决方案\"},\"794\":{\"t\":\"TCP 的可靠性\"},\"795\":{\"t\":\"Kafka 消费流程\"},\"796\":{\"t\":\"策略模式、观察者模式\"},\"797\":{\"h\":\"代码上线后 CPU 占用高排查过程\",\"a\":\"代码上线后-cpu-占用高排查过程\"},\"798\":{\"t\":\"top查看占用 CPU 占用高的 PID（进程号）\"},\"799\":{\"t\":\"top -Hp 进程号查看该进程下所有线程的占用情况\"},\"800\":{\"t\":\"printf \\\"%x\\\\n\\\" 线程号获取目标线程的十六进制表示\"},\"801\":{\"t\":\"jstack 进程号 | grep -A 30 线程号的十六进制表示输出该线程状态的前 30 行，定位到具体代码问题\"},\"802\":{\"t\":\"可额外执行jstat -gcutil 进程号 统计间隔毫秒数 统计次数（缺省则一直统计）来查看进程 GC 的持续变化情况，若其中的FGC列很大且一直增大则确认 Full GC\"},\"803\":{\"h\":\"单例模式\",\"a\":\"单例模式\"},\"804\":{\"h\":\"Vim 简明教程\"},\"805\":{\"h\":\"Normal Mode\",\"a\":\"normal-mode\"},\"806\":{\"h\":\"Motions\",\"a\":\"motions\"},\"807\":{\"t\":\"j: next line\"},\"808\":{\"t\":\"gj: next wrapped line\"},\"809\":{\"t\":\"k: previous line\"},\"810\":{\"t\":\"gk: previous wrapped line\"},\"811\":{\"t\":\"h: back char\"},\"812\":{\"t\":\"l: next char\"},\"813\":{\"t\":\"w: next word, separated by space and symbol\"},\"814\":{\"t\":\"W: next word, separated by space\"},\"815\":{\"t\":\"e: word end, separated by space and symbol\"},\"816\":{\"t\":\"E: word end, separated by space\"},\"817\":{\"t\":\"b: previous word, separated by space and symbol\"},\"818\":{\"t\":\"B: previous word, separated by space\"},\"819\":{\"t\":\"ge: previous word end, separated by space and symbol\"},\"820\":{\"t\":\"gE: previous word end, separated by space\"},\"821\":{\"t\":\"f{char} / F{char}: find char after / behind cursor\"},\"822\":{\"t\":\"t{char} / T{char}: until char after / behind cursor\"},\"823\":{\"t\":\"; / ,: repeat last char search towards next / previous\"},\"824\":{\"t\":\"0: to first char of line\"},\"825\":{\"t\":\"^: to first non-blank char of line\"},\"826\":{\"t\":\"$: to end of line\"},\"827\":{\"t\":\"g_: to non-blank char end of line\"},\"828\":{\"t\":\"}: jump paragraph downwards\"},\"829\":{\"t\":\"{: jump paragraph upwards\"},\"830\":{\"t\":\"[{: goto start of cursor block\"},\"831\":{\"t\":\"]}: goto end of cursor block\"},\"832\":{\"t\":\"Ctrl + D: move down half page\"},\"833\":{\"t\":\"Ctrl + U: move up half page\"},\"834\":{\"t\":\"Ctrl + F: move down page\"},\"835\":{\"t\":\"Ctrl + B: move up page\"},\"836\":{\"t\":\"Ctrl + E: move down one line\"},\"837\":{\"t\":\"Ctrl + Y: move up one line\"},\"838\":{\"t\":\"n%: goto n% of whole file\"},\"839\":{\"t\":\"zz: move cursor line to center\"},\"840\":{\"t\":\"zt: move cursor line to top\"},\"841\":{\"t\":\"zb: move cursor line to bottom\"},\"842\":{\"t\":\"/{pattern}: search forward\"},\"843\":{\"t\":\"?{pattern}: search backward \"},\"844\":{\"t\":\"<Enter>: end pattern input and start match\"},\"845\":{\"t\":\"{pattern} can be regular expression\"},\"846\":{\"t\":\"n / N: next / previous match\"},\"847\":{\"t\":\"/<Enter> / ?<Enter>: last forward / backward search\"},\"848\":{\"t\":\"*: search crusor word forward\"},\"849\":{\"t\":\"#: search crusor word backward\"},\"850\":{\"t\":\"{count}{command}: multiply effect of command\"},\"851\":{\"t\":\"gd: goto local variable definition\"},\"852\":{\"t\":\"gD: goto global variable definition\"},\"853\":{\"t\":\"gf: goto file in import\"},\"854\":{\"t\":\"gg: goto file top\"},\"855\":{\"t\":\"{line}gg: goto special line\"},\"856\":{\"t\":\"G: goto file end\"},\"857\":{\"t\":\"{line}G / :{line}<Enter>: goto start of {line}\"},\"858\":{\"t\":\"+ / <Enter>: goto non-blank char of next line\"},\"859\":{\"t\":\"-: goto non-blank char of previous line\"},\"860\":{\"t\":\"%: goto matching ({[]})\"},\"861\":{\"h\":\"Operators\",\"a\":\"operators\"},\"862\":{\"t\":\"{opeartor}{count}{motion} / {count}{operator}{motion}\"},\"863\":{\"t\":\"eg: d5j, df', dt', d/hello, ggdG, 3c/hello, ggyG, gUw, 4f\\\", d0\"},\"864\":{\"t\":\"Operators: \"},\"865\":{\"t\":\"c: change [cut and switch to insert mode]\"},\"866\":{\"t\":\"y: yank (copy)\"},\"867\":{\"t\":\"d: cut\"},\"868\":{\"t\":\"p: paste after cursor\"},\"869\":{\"t\":\"=: format code\"},\"870\":{\"t\":\"g~: switch uppercase or lowercase [gU or gu]\"},\"871\":{\"t\":\">: add indentation\"},\"872\":{\"t\":\"<: remove indentation\"},\"873\":{\"t\":\"Double operator to perform on whole line. \"},\"874\":{\"t\":\"eg: dd, cc, g~~\"},\"875\":{\"t\":\"Capitalize operator to perform stronger or alternate. \"},\"876\":{\"t\":\"D: delete from cursor to end of line\"},\"877\":{\"t\":\"cc: change whole line\"},\"878\":{\"t\":\"C: change from cursor to end of line\"},\"879\":{\"t\":\"Y / yy: copy whole line\"},\"880\":{\"t\":\"P: paste before cursor\"},\"881\":{\"t\":\">>: shift line right\"},\"882\":{\"t\":\"<<: shift line left\"},\"883\":{\"t\":\"==: format line\"},\"884\":{\"t\":\"{i|a}{text-object-id}\"},\"885\":{\"t\":\"i: inner [text object and whitespace]\"},\"886\":{\"t\":\"a: around [text object without whitespace]\"},\"887\":{\"t\":\"{operator}{i|a}{text-object}\"},\"888\":{\"t\":\"w: word\"},\"889\":{\"t\":\"s: sentence\"},\"890\":{\"t\":\"p: paragraph\"},\"891\":{\"t\":\"b / (: block surrounded by ()\"},\"892\":{\"t\":\"B / {: block surrounded by {}\"},\"893\":{\"t\":\"\\\" / ': quoted text [also `]\"},\"894\":{\"t\":\"< / >: block surrounded by <>\"},\"895\":{\"t\":\"[ / ]: block surrounded by []\"},\"896\":{\"t\":\"t: tag [for HTML]\"},\"897\":{\"t\":\"eg: daw, ciw, das, da\\\", ci\\\", dap, dab / da( / da), daB / da{ / da}\"},\"898\":{\"t\":\".: repeat last change\"},\"899\":{\"t\":\"x / dl: cut cursor char\"},\"900\":{\"t\":\"X / dh: cut char before cursor\"},\"901\":{\"t\":\"s / ch: cut cursor char and switch insert mode\"},\"902\":{\"t\":\"r: replace cursor char\"},\"903\":{\"t\":\"R: replace words after cursor\"},\"904\":{\"t\":\"~: switch char case\"},\"905\":{\"t\":\"u: undo last change\"},\"906\":{\"t\":\"{count}u: undo last count changes\"},\"907\":{\"t\":\"Crtl + R: redo last change\"},\"908\":{\"h\":\"NORMAL mode trikies\",\"a\":\"normal-mode-trikies\"},\"909\":{\"t\":\"i: goto INSERT mode before cursor\"},\"910\":{\"t\":\"a: goto INSERT mode after cursor\"},\"911\":{\"t\":\"I: goto INSERT mode at the beginning of line\"},\"912\":{\"t\":\"A: goto INSERT mode at the line end\"},\"913\":{\"t\":\"o: insert a new line below the current line and goto INSERT mode\"},\"914\":{\"t\":\"O: insert a new line above the current line and goto INSERT mode\"},\"915\":{\"t\":\"gi: goto INSERT mode at the last place changed\"},\"916\":{\"h\":\"INSERT mode trikies\",\"a\":\"insert-mode-trikies\"},\"917\":{\"t\":\"Ctrl + h: delete last char typed\"},\"918\":{\"t\":\"Ctrl + w: delete last word typed\"},\"919\":{\"t\":\"Ctrl + u: delete last line typed\"},\"920\":{\"h\":\"VISUAL mode\",\"a\":\"visual-mode\"},\"921\":{\"t\":\"v: VISUAL mode - char\"},\"922\":{\"t\":\"V: VISUAL mode - linewise\"},\"923\":{\"t\":\"Ctrl + V: VISUAL - rect block\"},\"924\":{\"t\":\"gn / gN: \"},\"925\":{\"t\":\"select the match in VISUAL mode if cursor on top of search match\"},\"926\":{\"t\":\"extend current selection until the end of the next much if in VISUAL mode\"},\"927\":{\"t\":\"operate on the next match if in Operator-pending mode, that's {operator}gn\"},\"928\":{\"h\":\"Copying and Pasting\",\"a\":\"copying-and-pasting\"},\"929\":{\"t\":\"yl: yanka a letter\"},\"930\":{\"t\":\"yh: yanka a letter before cursor\"},\"931\":{\"t\":\"yaw: yank a word\"},\"932\":{\"t\":\"yas: yank a sentence\"},\"933\":{\"t\":\"yi(: yank all in (\"},\"934\":{\"t\":\"gp / gP: same as p / P, then put cursor after the pasted selection\"},\"935\":{\"t\":\"yank characters or lines will be different when pasting, around cursor or at new line.\"},\"936\":{\"t\":\"yy{count}p: duplicate count lines\"},\"937\":{\"t\":\"ddp / ddP: swap lines\"},\"938\":{\"t\":\"xp / dlp: swap characters\"},\"939\":{\"h\":\"Registers\",\"a\":\"registers\"},\"940\":{\"h\":\"in NORMAL mode\",\"a\":\"in-normal-mode\"},\"941\":{\"t\":\"\\\"{register name}{y / d / c}{motion}\"},\"942\":{\"t\":\"\\\": the unnamed register which is default\"},\"943\":{\"t\":\"a ~ z: the named registers which can be used explicitly\"},\"944\":{\"t\":\"0: yank register that store the last thing yanked\"},\"945\":{\"t\":\"1 ~ 9: cut register that store the last 9 things cut by delete or change command\"},\"946\":{\"t\":\"eg: \\\"ayas -> \\\"ap\"},\"947\":{\"t\":\":reg {register}: inspect specific register content\"},\"948\":{\"h\":\"in INSERT mode\",\"a\":\"in-insert-mode\"},\"949\":{\"t\":\"Ctrl-R {register}\"},\"950\":{\"t\":\"eg: Ctrl-R \\\", Ctrl-R a, Ctrl-R 0\"},\"951\":{\"t\":\"can paste a line just after cursor in INSERT mode\"},\"952\":{\"h\":\"Command-line mode\",\"a\":\"command-line-mode\"},\"953\":{\"t\":\"Ex command: start with : and search pattern: start with / or ?\"},\"954\":{\"t\":\":e / :edit {relative-path-to-file}: open or create file\"},\"955\":{\"t\":\":w / :write: save file (soft command)\"},\"956\":{\"t\":\":q / :quit: close file (soft command)\"},\"957\":{\"t\":\"!: combine with other soft command to force execute\"},\"958\":{\"t\":\":w!: save file even if readonly\"},\"959\":{\"t\":\":q!: close file without saving\"},\"960\":{\"t\":\":wq: save and close file\"},\"961\":{\"t\":\":wa / :wall: save all files\"},\"962\":{\"t\":\":qa / :qall: close all files\"},\"963\":{\"t\":\":wqa / :wqall: save and close all files\"},\"964\":{\"t\":\":qa! / :qall!: close all files without saving\"},\"965\":{\"t\":\":![command]: run command in shell temporarily\"},\"966\":{\"t\":\":[range]command[options]: text-editing Ex command\"},\"967\":{\"t\":\":[range]d [register]: delete lines and put them to register \"},\"968\":{\"t\":\"eg: 10,12d a: delete lines 10 ~ 12 and put them inside the a register\"},\"969\":{\"t\":\"some ways to express range extremes \"},\"970\":{\"t\":\"numbers: :10,12d\"},\"971\":{\"t\":\"offsets: :10,+2d\"},\"972\":{\"t\":\". represent current line: :.,+2d\"},\"973\":{\"t\":\"% represent whole line: :%d\"},\"974\":{\"t\":\"0 represent beginning of file: :0,+10d\"},\"975\":{\"t\":\"$ represent end of file: :.,$d\"},\"976\":{\"t\":\"after make text selection in VISUAL mode and then type :, line area will pre-populated with :'<,'> so that can continue input command like d\"},\"977\":{\"t\":\"Ex commands allow apply command over multiple lines with no move of cursor. If need change multiple lines, consider using Ex commands.\"},\"978\":{\"t\":\"useful Ex commands: :yank, :put, :copy, :move\"},\"979\":{\"t\":\"@:: repeat last command\"},\"980\":{\"t\":\"@@: repeat again after @:\"},\"981\":{\"t\":\":substitute: to substitute text\"},\"982\":{\"t\":\":[range]s/{pattern}/{substitute}/{flags}\"},\"983\":{\"t\":\"range: define range to apply substitute\"},\"984\":{\"t\":\"pattern: search pattern that describe the text to be changed. /{pattern} support regular expression\"},\"985\":{\"t\":\"substitute: the text to be substitute\"},\"986\":{\"t\":\"flags: set options that configure substitution\"},\"987\":{\"t\":\"eg: \"},\"988\":{\"t\":\":s/led/gold: replace the first occurrence of led in the current line with gold\"},\"989\":{\"t\":\":s/led/gold/g: change all occurrences in the current line (g means global)\"},\"990\":{\"t\":\":%s/led/gold/g: change all occurrences for whole file\"},\"991\":{\"t\":\"more flags: i for case insensitive search, c to confirm each and every substitution\"},\"992\":{\"t\":\":%s/^#//: change the indentation level of all titles in markdown file \"},\"993\":{\"t\":\"%: for whole file\"},\"994\":{\"t\":\"s: substitute\"},\"995\":{\"t\":\"^#: any # at the beginning of a line\"},\"996\":{\"t\":\"//: for an empty char\"},\"997\":{\"t\":\"VSCodeVim setting has changed, Vim:Gdefault opposite the /g flag\"},\"998\":{\"h\":\"Splits and Tabs\",\"a\":\"splits-and-tabs\"},\"999\":{\"t\":\"open file in horizontal split: \"},\"1000\":{\"t\":\":sp {relative-path-to-file}\"},\"1001\":{\"t\":\"<Ctrl-W> S\"},\"1002\":{\"t\":\"open file in vertical split: \"},\"1003\":{\"t\":\":vsp {relative-path-to-file}\"},\"1004\":{\"t\":\"<Ctrl-W> V\"},\"1005\":{\"t\":\"After creating split, type CMD-P to open new file\"},\"1006\":{\"t\":\"A split window can be split again\"},\"1007\":{\"t\":\"<Ctrl-W> + h / j / k / l: move between splits\"},\"1008\":{\"t\":\":tabnew {file}: open file in new tab\"},\"1009\":{\"t\":\":tabn / :tabnext: goto next tab\"},\"1010\":{\"t\":\":tabp / :tabprevious: goto previous tab\"},\"1011\":{\"t\":\":tabo / :tabonly: close all other tabs\"},\"1012\":{\"h\":\"Vim-surround built-in plugin\",\"a\":\"vim-surround-built-in-plugin\"},\"1013\":{\"t\":\"ds / cs / ys{count}{motion}\"},\"1014\":{\"t\":\"ds{char}: delete surrounding char\"},\"1015\":{\"t\":\"eg: ds'\"},\"1016\":{\"t\":\"cs{old}{new}: change surrounding old to new\"},\"1017\":{\"t\":\"eg: cs'\\\"\"},\"1018\":{\"t\":\"ys{motion}{char}: add surrounding \"},\"1019\":{\"t\":\"eg: ysaptli>: to surround paragraph with an <li> tag\"},\"1020\":{\"t\":\"in VISUAL mode, select text then type S{char}, selection text will be surrounded by char\"},\"1021\":{\"h\":\"Custom mappings\",\"a\":\"custom-mappings\"},\"1022\":{\"t\":\"setting name: vim.normalModeKeyBindingsNonRescursive\"},\"1023\":{\"t\":\"leader key: \\\\ change to <Space>\"},\"1024\":{\"t\":\"J means 5j\"},\"1025\":{\"t\":\"K means 5k\"},\"1026\":{\"t\":\"<Leader> - j means J: join lines together\"},\"1027\":{\"t\":\"switch between splits: \"},\"1028\":{\"t\":\"<Ctrl-h> means <Ctrl-w> + h\"},\"1029\":{\"t\":\"<Ctrl-j> means <Ctrl-w> + j\"},\"1030\":{\"t\":\"<Ctrl-k> means <Ctrl-w> + k\"},\"1031\":{\"t\":\"<Ctrl-l> means <Ctrl-w> + l\"},\"1032\":{\"t\":\":noh: remove highlights matching patterns of search\"},\"1033\":{\"h\":\"Moving faster\",\"a\":\"moving-faster\"},\"1034\":{\"h\":\"Vim-Sneak\",\"a\":\"vim-sneak\"},\"1035\":{\"t\":\"setting name: vim.sneak\"},\"1036\":{\"t\":\"s{char}{char}: cursor goto first occurrence of that two char sequence\"},\"1037\":{\"t\":\"; for next occurrence or , for previous one\"},\"1038\":{\"t\":\"S{char}{char}: similar but backward\"},\"1039\":{\"t\":\"{operator}z{char}{char}: apply operator over the text traversed by the sneak motion\"},\"1040\":{\"t\":\"vim-sneak use z instead of s with other operators, because s is already taken by vim-surround\"},\"1041\":{\"h\":\"Vim-EasyMotion\",\"a\":\"vim-easymotion\"},\"1042\":{\"t\":\"setting name: vim.easymotion\"},\"1043\":{\"t\":\"All the key below need to add <leader><leader> first\"},\"1044\":{\"t\":\"w: goto start of words\"},\"1045\":{\"t\":\"b: goto start of words backwards\"},\"1046\":{\"t\":\"bdw: goto start of words everywhere (USELESS)\"},\"1047\":{\"t\":\"The bd stands for bidirectional\"},\"1048\":{\"t\":\"e: goto end of words\"},\"1049\":{\"t\":\"ge: goto end of words backwords\"},\"1050\":{\"t\":\"bdw: goto end of words everywhere (USELESS)\"},\"1051\":{\"t\":\"j: goto beginning of lines\"},\"1052\":{\"t\":\"k: goto beginning of lines backwards\"},\"1053\":{\"t\":\"f{char}: find char\"},\"1054\":{\"t\":\"F{char}: find char backwards\"},\"1055\":{\"t\":\"t{char}: until char\"},\"1056\":{\"t\":\"T{char}: until char backwards\"},\"1057\":{\"t\":\"s{char}: search char everywhere\"},\"1058\":{\"t\":\"In VSCodeVim, EasyMotion only support moving around but can't be combined with operators. Traditional Vim support.\"},\"1059\":{\"h\":\"Multiple cursors\",\"a\":\"multiple-cursors\"},\"1060\":{\"t\":\"steps of add multiple cursors based on word search:\"},\"1061\":{\"t\":\"move cursor on aim word\"},\"1062\":{\"t\":\"type <CMD-D> / gb to add cursor, and repeat it to auto select same word\"},\"1063\":{\"t\":\"perform actions or turn to NORMAL mode to perform\"},\"1064\":{\"t\":\"steps of extend cursors up or down in consecutive lines:\"},\"1065\":{\"t\":\"type <Ctrl-V> for VISUAL-block mode\"},\"1066\":{\"t\":\"use j / k to select rectangle of text\"},\"1067\":{\"t\":\"type I to insert or A to append text\"},\"1068\":{\"t\":\"alternatively, use any NORMAL mode commands to operate the selection\"},\"1069\":{\"h\":\"Docs\"},\"1070\":{\"h\":\"Algorithm\"}},\"dirtCount\":0,\"index\":[[\"`\",{\"1\":{\"893\":1}}],[\"简明教程\",{\"0\":{\"804\":1}}],[\"缺省则一直统计\",{\"1\":{\"802\":1}}],[\"缺失的第一个正数\",{\"0\":{\"545\":1}}],[\"定位到具体代码问题\",{\"1\":{\"801\":1}}],[\"定义用于交换数组两指定位置值的函数如下\",{\"1\":{\"483\":1}}],[\"定义\",{\"1\":{\"200\":1}}],[\"行\",{\"1\":{\"801\":1}}],[\"行和列很容易解决状态记录的编号问题\",{\"1\":{\"163\":1}}],[\"线程号的十六进制表示输出该线程状态的前\",{\"1\":{\"801\":1}}],[\"线程号获取目标线程的十六进制表示\",{\"1\":{\"800\":1}}],[\"线程池\",{\"1\":{\"767\":1}}],[\"占用高的\",{\"1\":{\"798\":1}}],[\"占用高排查过程\",{\"0\":{\"797\":1}}],[\"占据叉子\",{\"1\":{\"576\":1}}],[\"观察者模式\",{\"1\":{\"796\":1}}],[\"策略模式\",{\"1\":{\"796\":1}}],[\"消费流程\",{\"1\":{\"795\":1}}],[\"消除整数二进制表示中最低位的\",{\"1\":{\"488\":1}}],[\"粘包及其解决方案\",{\"1\":{\"793\":1}}],[\"粘贴刚刚复制的内容到文本框中\",{\"1\":{\"52\":1}}],[\"操作系统文件读写流程\",{\"1\":{\"791\":1}}],[\"操作系统\",{\"1\":{\"788\":1}}],[\"操作服务器\",{\"1\":{\"83\":1}}],[\"事务日志\",{\"1\":{\"787\":1}}],[\"日志分类及简介\",{\"1\":{\"787\":1}}],[\"日常小问题的解决\",{\"0\":{\"44\":1}}],[\"常用锁的使用\",{\"1\":{\"786\":1}}],[\"常见问题\",{\"1\":{\"27\":1}}],[\"检测和解除\",{\"1\":{\"785\":1}}],[\"检查密码框元素把\",{\"1\":{\"116\":1}}],[\"避免\",{\"1\":{\"785\":1}}],[\"避免实际模拟每一种组合\",{\"1\":{\"468\":1}}],[\"防止\",{\"1\":{\"785\":1}}],[\"死锁的产生\",{\"1\":{\"785\":1}}],[\"抽象类与接口\",{\"1\":{\"783\":1}}],[\"持久化\",{\"1\":{\"782\":1}}],[\"持有股票\",{\"1\":{\"339\":1}}],[\"持有股票keep\",{\"1\":{\"334\":1}}],[\"缓存雪崩\",{\"1\":{\"781\":1}}],[\"缓存击穿\",{\"1\":{\"781\":1}}],[\"缓存穿透\",{\"1\":{\"781\":1}}],[\"原理\",{\"1\":{\"775\":1,\"784\":2,\"786\":1}}],[\"原数组最多只能有一次递减发生\",{\"1\":{\"720\":1}}],[\"数据库迁移时如何确保数据一致性\",{\"1\":{\"778\":1}}],[\"数据库索引及其结构\",{\"1\":{\"773\":1}}],[\"数组元素很少和相邻的元素进行比较和交换\",{\"1\":{\"482\":1}}],[\"数组进行降维压缩\",{\"1\":{\"478\":1}}],[\"数组打印出来\",{\"1\":{\"477\":1}}],[\"数组\",{\"1\":{\"476\":1}}],[\"数组如何初始化\",{\"1\":{\"474\":1}}],[\"数组以及下标的含义\",{\"1\":{\"472\":1}}],[\"数组中的每个元素代表能从该位置往右移动的最大长度\",{\"1\":{\"366\":1,\"370\":1}}],[\"数组中的每个数字在每个子集中只能使用一次\",{\"1\":{\"132\":1}}],[\"数组初始化的值\",{\"1\":{\"327\":1}}],[\"数组的某个值时\",{\"1\":{\"292\":1}}],[\"数组降维压缩也稍显麻烦\",{\"1\":{\"211\":1}}],[\"树插入删除操作\",{\"1\":{\"771\":1}}],[\"树状数组的应用形式在更新和查询方面都分别有单点和区间两种\",{\"1\":{\"441\":1}}],[\"树状数组\",{\"0\":{\"438\":1}}],[\"过期删除策略和内存淘汰策略\",{\"1\":{\"770\":1}}],[\"过程类似于图搜索\",{\"1\":{\"645\":1}}],[\"底层\",{\"1\":{\"769\":2}}],[\"知识点\",{\"0\":{\"765\":1}}],[\"知乎\",{\"0\":{\"486\":1}}],[\"旋转数组\",{\"0\":{\"758\":1}}],[\"恰表示开区间个数\",{\"1\":{\"757\":1}}],[\"随\",{\"1\":{\"757\":1}}],[\"随后每次时间增长时\",{\"1\":{\"609\":1}}],[\"官方题解不好\",{\"1\":{\"756\":1}}],[\"本题还可用树状数组配合离散化来解\",{\"1\":{\"756\":1}}],[\"本次待归并的总范围为\",{\"1\":{\"755\":1}}],[\"本站开发命令记录\",{\"0\":{\"5\":1}}],[\"翻转对\",{\"0\":{\"750\":1}}],[\"翻转单词顺序\",{\"0\":{\"690\":1}}],[\"见官方题解\",{\"1\":{\"748\":1}}],[\"区间查询型的离散化树状数组的应用\",{\"1\":{\"747\":1}}],[\"区间的楼层f使得使得鸡蛋只有从高于f的楼层扔下才会碎\",{\"1\":{\"247\":1}}],[\"必须一个移动后另一个也移动才可能\",{\"1\":{\"741\":1}}],[\"储水量必变小\",{\"1\":{\"741\":1}}],[\"横向距离变小且最小高度不会变大\",{\"1\":{\"741\":1}}],[\"移动的那个指针即使一直移到紧挨另一个\",{\"1\":{\"741\":1}}],[\"移动高度低的指针才有可能\",{\"1\":{\"740\":1}}],[\"移动完成后可下载迁移失败的歌曲信息\",{\"1\":{\"56\":1}}],[\"盛最多水的容器\",{\"0\":{\"736\":1}}],[\"往后数第k个淘汰\",{\"1\":{\"734\":1}}],[\"号\",{\"1\":{\"734\":1}}],[\"号开始\",{\"1\":{\"734\":1}}],[\"顺时针编号1\",{\"1\":{\"734\":1}}],[\"顺序亦可\",{\"1\":{\"492\":1}}],[\"归并范围内本次需新增的数量为end\",{\"1\":{\"755\":1}}],[\"归并排序的一种或几种\",{\"1\":{\"481\":1}}],[\"归纳可得共需枚举2\",{\"1\":{\"730\":1}}],[\"枚举所有中心时有个小技巧\",{\"1\":{\"730\":1}}],[\"枚举所有可能的回文子串中心\",{\"1\":{\"729\":1}}],[\"枚举每个字符\",{\"1\":{\"681\":1}}],[\"既可将b降至c\",{\"1\":{\"721\":1}}],[\"能变成非递减数组的话\",{\"1\":{\"720\":1}}],[\"非递减数列\",{\"0\":{\"716\":1}}],[\"非递归遍历二叉树\",{\"0\":{\"419\":1}}],[\"身高\",{\"1\":{\"710\":1}}],[\"立即进行抵消\",{\"1\":{\"702\":1}}],[\"符合条件的最多只可能有\",{\"1\":{\"701\":1}}],[\"符合要求的种子越难找\",{\"1\":{\"37\":1}}],[\"输入有序数组\",{\"0\":{\"683\":1}}],[\"输出该数\",{\"1\":{\"559\":1}}],[\"输出buzz\",{\"1\":{\"557\":1}}],[\"输出fizzbuzz\",{\"1\":{\"558\":1}}],[\"输出fizz\",{\"1\":{\"556\":1}}],[\"输出代表相应数字的字符串的程序\",{\"1\":{\"555\":1}}],[\"扩展期间维护最大回文串位置\",{\"1\":{\"681\":1}}],[\"未记录\",{\"1\":{\"675\":1}}],[\"未持有\",{\"1\":{\"339\":2}}],[\"未持有且不在冷静期wait\",{\"1\":{\"334\":1}}],[\"未持有但在冷静期cool\",{\"1\":{\"334\":1}}],[\"值得注意的是实现时需确保位置入队同时标记为已访问\",{\"1\":{\"660\":1}}],[\"值得一提的是在实现时\",{\"1\":{\"646\":1}}],[\"右子数组起始索引为left+len\",{\"1\":{\"755\":1}}],[\"右侧小于nums\",{\"1\":{\"745\":1}}],[\"右端点为i\",{\"1\":{\"730\":1}}],[\"右和下边界为大西洋\",{\"1\":{\"650\":1}}],[\"右边为待填入的元素\",{\"1\":{\"154\":1}}],[\"太平洋大西洋水流问题\",{\"0\":{\"648\":1}}],[\"达到极端最坏情况\",{\"1\":{\"646\":1}}],[\"种\",{\"1\":{\"645\":1}}],[\"种子获取采用暴力搜索方法\",{\"1\":{\"36\":1}}],[\"问在此限制下解开锁的最少转动次数\",{\"1\":{\"642\":1}}],[\"问题场景如何做状态选择\",{\"1\":{\"471\":1}}],[\"问题解决博客\",{\"1\":{\"110\":1}}],[\"四位转盘锁初始为0000\",{\"1\":{\"641\":1}}],[\"矩阵元素表示海拔\",{\"1\":{\"650\":1}}],[\"矩阵值为\",{\"1\":{\"637\":1}}],[\"矩阵\",{\"0\":{\"635\":1}}],[\"矩阵格子编号采用顺序计数方式\",{\"1\":{\"601\":1}}],[\"搜索时用另一矩阵记录当前位置是否被访问过\",{\"1\":{\"659\":1}}],[\"搜索\",{\"0\":{\"634\":1}}],[\"搜一下报错信息就能找到教程解决\",{\"1\":{\"96\":1}}],[\"又因为变化量有减一的操作\",{\"1\":{\"632\":1}}],[\"又考虑到账户可能同名\",{\"1\":{\"624\":1}}],[\"填充的那块\",{\"1\":{\"632\":1}}],[\"剪掉消除\",{\"1\":{\"632\":1}}],[\"连通时由于是从左上往右下进行遍历\",{\"1\":{\"632\":1}}],[\"留备每次填充时先查询\",{\"1\":{\"632\":1}}],[\"留存字符思考\",{\"1\":{\"261\":1}}],[\"保留原有数据\",{\"1\":{\"632\":1}}],[\"保证输入有效\",{\"1\":{\"590\":1}}],[\"保证程序处理流程如设想运行\",{\"1\":{\"477\":1}}],[\"砖块掉落就立即从网格内消失而不会落到其他砖块上\",{\"1\":{\"629\":1}}],[\"掉落\",{\"1\":{\"629\":1}}],[\"某砖块稳定\",{\"1\":{\"629\":1}}],[\"某一路径上所有两两相邻元素差值\",{\"1\":{\"598\":1}}],[\"打开转盘锁\",{\"0\":{\"639\":1}}],[\"打砖块\",{\"0\":{\"627\":1}}],[\"打家劫舍\",{\"0\":{\"206\":1,\"214\":1}}],[\"完成后再次获取此时稳定集合的砖块数量\",{\"1\":{\"632\":1}}],[\"完成之后就开始按消除顺序的逆序进行填充\",{\"1\":{\"632\":1}}],[\"完成之后只需要将答案整理成要求的返回格式即可\",{\"1\":{\"625\":1}}],[\"完全平方数\",{\"0\":{\"357\":1}}],[\"容器使用treeset\",{\"1\":{\"625\":1}}],[\"接下来就是实际上的合并\",{\"1\":{\"625\":1}}],[\"针对所有索引建立并查集\",{\"1\":{\"624\":1}}],[\"针对不同账户\",{\"1\":{\"624\":1}}],[\"视为独立区域\",{\"1\":{\"624\":1}}],[\"间的合并\",{\"1\":{\"624\":1}}],[\"它们也可能属于不同的人\",{\"1\":{\"620\":1}}],[\"它最低有效位为其本身\",{\"1\":{\"488\":1}}],[\"账户\",{\"1\":{\"619\":1}}],[\"索引失效场景\",{\"1\":{\"773\":1}}],[\"索引对\",{\"1\":{\"624\":1}}],[\"索引对实质上是连通两索引\",{\"1\":{\"615\":1}}],[\"索引\",{\"1\":{\"616\":1}}],[\"各个位置都从其连通集合\",{\"1\":{\"615\":1}}],[\"各集合间用根节点位置来区分\",{\"1\":{\"615\":1}}],[\"直到某时刻的操作令两角变得连通即为所求\",{\"1\":{\"609\":1}}],[\"直接按字典序排列\",{\"1\":{\"615\":1}}],[\"直接计算会损失精度\",{\"1\":{\"492\":1}}],[\"直接套用模版\",{\"1\":{\"345\":1}}],[\"十分相似\",{\"1\":{\"608\":1}}],[\"水池中的水位为t\",{\"1\":{\"605\":1}}],[\"水位上升的泳池中游泳\",{\"0\":{\"603\":1}}],[\"水平直径覆盖了范围\",{\"1\":{\"402\":1}}],[\"差值\",{\"1\":{\"601\":1}}],[\"绝对值\",{\"1\":{\"598\":1}}],[\"语法要求不能为局部变量\",{\"1\":{\"594\":1}}],[\"合并账户后的返回格式\",{\"1\":{\"621\":1}}],[\"合并账户\",{\"0\":{\"617\":1}}],[\"合并节点时的权重更新参考平行四边形四条边的关系\",{\"1\":{\"593\":1}}],[\"合并原则是重量小的集合归入重量大的集合中去\",{\"1\":{\"429\":1}}],[\"传递关系权重\",{\"1\":{\"593\":1}}],[\"迭代压缩时累乘更新起始节点到各中间父节点的权重值\",{\"1\":{\"592\":1}}],[\"另外给定若干转盘数位组合\",{\"1\":{\"642\":1}}],[\"另有一些以数组queries表示的问题\",{\"1\":{\"589\":1}}],[\"另起一个索引变量用来遍历标记索引右侧所有元素\",{\"1\":{\"155\":1}}],[\"共同表示条件ai\",{\"1\":{\"588\":1}}],[\"除法求值\",{\"0\":{\"586\":1}}],[\"除了常规的空间压缩之外\",{\"1\":{\"323\":1}}],[\"冗余连接\",{\"0\":{\"578\":1}}],[\"释放叉子\",{\"1\":{\"576\":1}}],[\"放下叉子\",{\"1\":{\"576\":1}}],[\"放置成功的话就进入下一层继续搜索\",{\"1\":{\"161\":1}}],[\"拿起叉子\",{\"1\":{\"576\":1}}],[\"申请就餐名额\",{\"1\":{\"576\":1}}],[\"五人同时拿叉子会死锁\",{\"1\":{\"576\":1}}],[\"请你使用类的同一个对象来模拟这个过程\",{\"1\":{\"574\":1}}],[\"请实现函数void\",{\"1\":{\"568\":1}}],[\"个人的身高不低于\",{\"1\":{\"706\":1}}],[\"个人的身高为\",{\"1\":{\"706\":1}}],[\"个不同元素进行抵消\",{\"1\":{\"701\":1}}],[\"个\",{\"1\":{\"701\":1}}],[\"个可能存在的候选多数元素\",{\"1\":{\"701\":1}}],[\"个元素中求出现次数大于\",{\"1\":{\"701\":1}}],[\"个哲学家\",{\"1\":{\"574\":1}}],[\"个哲学家围坐在圆桌前\",{\"1\":{\"565\":1}}],[\"个线程代表\",{\"1\":{\"574\":1}}],[\"使得end处的元素为区间向右扩展遇到的首个不满足与nums\",{\"1\":{\"755\":1}}],[\"使得每个哲学家都能在不知道别人什么时候想吃东西或思考的情况下\",{\"1\":{\"567\":1}}],[\"使用并查集随着遍历边的信息逐渐联合各节点\",{\"1\":{\"584\":1}}],[\"使用传统插入排序\",{\"1\":{\"481\":1}}],[\"哲学家的编号\",{\"1\":{\"569\":1}}],[\"哲学家从\",{\"1\":{\"568\":1}}],[\"哲学家可以拿起左边或者右边的叉子\",{\"1\":{\"566\":1}}],[\"哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面\",{\"1\":{\"566\":1}}],[\"哲学家只有同时拿到左边和右边的叉子才能吃面\",{\"1\":{\"566\":1}}],[\"哲学家只会在思考和进餐两种行为间交替\",{\"1\":{\"565\":1}}],[\"哲学家进餐\",{\"0\":{\"563\":1}}],[\"7\",{\"1\":{\"560\":1,\"671\":1,\"672\":1,\"707\":2,\"708\":2}}],[\"7f8c8d\",{\"1\":{\"25\":1}}],[\"4f\",{\"1\":{\"863\":1}}],[\"4\",{\"1\":{\"560\":1,\"568\":1,\"576\":1,\"647\":1,\"671\":1,\"672\":1,\"707\":2,\"708\":2}}],[\"调用buzz\",{\"1\":{\"557\":1}}],[\"调用fizzbuzz\",{\"1\":{\"558\":1}}],[\"调用fizz\",{\"1\":{\"556\":1}}],[\"5k\",{\"1\":{\"1025\":1}}],[\"5j\",{\"1\":{\"1024\":1}}],[\"5\",{\"1\":{\"557\":1,\"558\":1,\"562\":4,\"565\":1,\"574\":2,\"576\":3,\"671\":1,\"672\":1,\"707\":2,\"708\":2}}],[\"依据评分给每人发糖果\",{\"1\":{\"714\":1}}],[\"依据以下规则调用相应函数进行输出\",{\"1\":{\"555\":1}}],[\"依赖的包\",{\"1\":{\"72\":1}}],[\"俩函数交替执行打印\",{\"1\":{\"551\":1}}],[\"交换字符串中的元素\",{\"0\":{\"611\":1}}],[\"交换两不同值变量的值\",{\"1\":{\"489\":1}}],[\"交替打印字符串\",{\"0\":{\"553\":1}}],[\"交替打印\",{\"0\":{\"549\":1}}],[\"寻找重复的子树\",{\"0\":{\"535\":1}}],[\"≤k\",{\"1\":{\"533\":1}}],[\"同一集合内的字符可以任意调换\",{\"1\":{\"615\":1}}],[\"同时每次检查给定端点是否变为连通\",{\"1\":{\"608\":1}}],[\"同时进餐人数上限\",{\"1\":{\"576\":1}}],[\"同种重复子树找任一棵的根节点即可\",{\"1\":{\"537\":1}}],[\"同种异位词字母排序后一致\",{\"1\":{\"529\":1}}],[\"同理可得允许上方有dp\",{\"1\":{\"252\":1}}],[\"字母异位词是由重新排列源单词的字母得到的一个新单词\",{\"1\":{\"524\":1}}],[\"字母异位词分组\",{\"0\":{\"522\":1}}],[\"字符拓展而来时\",{\"1\":{\"682\":1}}],[\"字符的边界情况\",{\"1\":{\"682\":1}}],[\"字符转换\",{\"1\":{\"489\":1}}],[\"字符串问题\",{\"0\":{\"256\":1}}],[\"字符串的排列\",{\"0\":{\"143\":1}}],[\"负零\",{\"1\":{\"519\":1}}],[\"结合补码知识\",{\"1\":{\"519\":1}}],[\"结果等同于两个只出现一次的数的异或\",{\"1\":{\"518\":1}}],[\"异或都为其本身\",{\"1\":{\"517\":1}}],[\"了\",{\"1\":{\"517\":1}}],[\"多线程\",{\"0\":{\"511\":1,\"548\":1}}],[\"哈希\",{\"0\":{\"511\":1,\"521\":1}}],[\"≡\",{\"1\":{\"505\":1,\"508\":1}}],[\"∗\",{\"1\":{\"500\":1}}],[\"生成连续完全平方数\",{\"0\":{\"494\":1}}],[\"生成密钥对\",{\"1\":{\"59\":1}}],[\"分发糖果\",{\"0\":{\"712\":1}}],[\"分为两个部分来考虑\",{\"1\":{\"710\":1}}],[\"分为与顶部相连的稳定集合与其他集合\",{\"1\":{\"632\":1}}],[\"分子已经是连续的k个数相乘\",{\"1\":{\"492\":1}}],[\"分别表示第i天交易完后未持有和持有股票的最大利润\",{\"1\":{\"300\":1}}],[\"计算右侧小于当前元素的个数\",{\"0\":{\"743\":1}}],[\"计算组合数\",{\"0\":{\"490\":1}}],[\"计算答案时只需从小到大计算\",{\"1\":{\"203\":1}}],[\"大写\",{\"1\":{\"489\":1}}],[\"大小写变换\",{\"1\":{\"489\":1}}],[\"大小写\",{\"1\":{\"489\":2}}],[\"小写\",{\"1\":{\"489\":1}}],[\"|\",{\"1\":{\"489\":1,\"801\":1}}],[\"||\",{\"1\":{\"140\":1,\"148\":1,\"165\":2,\"328\":1,\"594\":1,\"703\":1,\"757\":1}}],[\"^=\",{\"1\":{\"520\":3}}],[\"^\",{\"1\":{\"489\":13,\"825\":1,\"992\":1,\"995\":1}}],[\"判断给定数组是否能在最多改变一个元素条件下成为非递减的\",{\"1\":{\"718\":1}}],[\"判断该图是否为二分图\",{\"1\":{\"664\":1}}],[\"判断二分图\",{\"0\":{\"662\":1}}],[\"判断数组中是否存在\",{\"1\":{\"533\":1}}],[\"判断两数相加是否溢出\",{\"1\":{\"489\":1}}],[\"判断是否为\",{\"1\":{\"488\":1}}],[\"判断能否到达最后一个下标\",{\"1\":{\"366\":1}}],[\"统计次数\",{\"1\":{\"802\":1}}],[\"统计间隔毫秒数\",{\"1\":{\"802\":1}}],[\"统计整数的二进制表示中\",{\"1\":{\"488\":1}}],[\"统计完成后再次遍历字符串\",{\"1\":{\"392\":1}}],[\"注意\",{\"1\":{\"606\":1}}],[\"注意由此运算导致的特殊测试用例错误\",{\"1\":{\"325\":1}}],[\"注\",{\"1\":{\"488\":2}}],[\"获取整数二进制表示种最低位的\",{\"1\":{\"488\":1}}],[\"采用无符号位移可解决溢出问题\",{\"1\":{\"488\":1}}],[\"采用光猫软路由搭配路由器自动获取地址方式上网\",{\"1\":{\"114\":1}}],[\"二叉树插入节点后再平衡操作\",{\"1\":{\"772\":1}}],[\"二分图\",{\"1\":{\"665\":1}}],[\"二分查找\",{\"0\":{\"448\":1}}],[\"二维数组graph\",{\"1\":{\"664\":1}}],[\"二进制矩阵中的最短路径\",{\"0\":{\"654\":1}}],[\"二进制\",{\"0\":{\"511\":1,\"512\":1}}],[\"二进制相关\",{\"0\":{\"487\":1}}],[\"方便起见\",{\"1\":{\"483\":1}}],[\"省略堆排序\",{\"1\":{\"482\":1}}],[\"双轴快排\",{\"1\":{\"481\":1}}],[\"成对插入排序\",{\"1\":{\"481\":1}}],[\"联合考虑数据数量及其有序程度等\",{\"1\":{\"481\":1}}],[\"排序算法\",{\"0\":{\"480\":1}}],[\"排列问题\",{\"1\":{\"452\":1}}],[\"状态仅与上一个状态有关\",{\"1\":{\"478\":1}}],[\"优化\",{\"1\":{\"478\":1}}],[\"出错的情况\",{\"1\":{\"477\":1}}],[\"出发最远只能到\",{\"1\":{\"381\":1}}],[\"举例推导\",{\"1\":{\"476\":1}}],[\"根据身高重建队列\",{\"0\":{\"704\":1}}],[\"根据实际语义可以将其与四周不高于它的块连通\",{\"1\":{\"609\":1}}],[\"根据已知条件推出结果\",{\"1\":{\"589\":1}}],[\"根据\",{\"1\":{\"473\":1}}],[\"根据连接规则的不同可分为两种\",{\"1\":{\"427\":1}}],[\"确保后续查询的效率\",{\"1\":{\"592\":1}}],[\"确保在多线程调用下\",{\"1\":{\"551\":1}}],[\"确保当前元素入栈后整体保持原有单调性\",{\"1\":{\"422\":1}}],[\"确定遍历顺序\",{\"1\":{\"475\":1}}],[\"确定递推公式\",{\"1\":{\"473\":1}}],[\"确定\",{\"1\":{\"472\":1}}],[\"明确问题存在哪几种状态\",{\"1\":{\"471\":1}}],[\"思考流程\",{\"0\":{\"470\":1}}],[\"实现线程安全的三种方式及如何保证线程安全\",{\"1\":{\"792\":1}}],[\"实现自定义阻塞队列\",{\"1\":{\"779\":1}}],[\"实现\",{\"1\":{\"774\":1}}],[\"实现多线程版本从\",{\"1\":{\"555\":1}}],[\"实现要点\",{\"0\":{\"457\":1}}],[\"实际获得逆序规划的过程就是\",{\"1\":{\"182\":1}}],[\"实际上只有两种情况\",{\"1\":{\"720\":1}}],[\"实际上新建的队列只需对各人的第二属性负责即可\",{\"1\":{\"710\":1}}],[\"实际上分母不一定要逆序相乘\",{\"1\":{\"492\":1}}],[\"实际上标记数组已经在功能上包含起始索引了\",{\"1\":{\"467\":1}}],[\"实际上就是求两字符串的最长相同子串\",{\"1\":{\"261\":1}}],[\"实际上也就只有两种情况\",{\"1\":{\"240\":1}}],[\"实际上可以拆成俩子问题\",{\"1\":{\"210\":1}}],[\"实际上可以仅用一维数组存储\",{\"1\":{\"164\":1}}],[\"实际上上述推导的函数为卡塔兰数\",{\"1\":{\"204\":1}}],[\"实际上\",{\"1\":{\"163\":1,\"439\":1}}],[\"模型\",{\"1\":{\"788\":1}}],[\"模拟\",{\"0\":{\"667\":1}}],[\"模版\",{\"0\":{\"456\":1}}],[\"模块路径\",{\"1\":{\"69\":1}}],[\"棋盘问题\",{\"1\":{\"455\":1}}],[\"⼦集问题\",{\"1\":{\"454\":1}}],[\"⼀个字符串按⼀定规则有⼏种切割⽅式\",{\"1\":{\"453\":1}}],[\"切割问题\",{\"1\":{\"453\":1}}],[\"适用问题\",{\"0\":{\"450\":1}}],[\"存在传递关系的若干变量视作在同一集合中\",{\"1\":{\"592\":1}}],[\"存在重复元素\",{\"0\":{\"531\":1}}],[\"存在的话\",{\"1\":{\"447\":1}}],[\"存储队列元素最大值\",{\"1\":{\"418\":1}}],[\"存储队列元素\",{\"1\":{\"418\":1}}],[\"课程表\",{\"1\":{\"447\":1}}],[\"例题为\",{\"1\":{\"447\":1}}],[\"例如\",{\"1\":{\"701\":1}}],[\"例如tickets\",{\"1\":{\"182\":1}}],[\"例如row\",{\"1\":{\"171\":1}}],[\"环中节点顺序亦先亦后\",{\"1\":{\"444\":1}}],[\"环形子数组的最大和\",{\"0\":{\"236\":1}}],[\"拓扑排序\",{\"0\":{\"442\":1}}],[\"单例模式\",{\"0\":{\"803\":1}}],[\"单轴快排\",{\"1\":{\"481\":1}}],[\"单点查询普通数组即可完成\",{\"1\":{\"441\":1}}],[\"单点更新\",{\"1\":{\"441\":1}}],[\"单调不减\",{\"1\":{\"757\":1}}],[\"单调栈的思想不难\",{\"1\":{\"423\":1}}],[\"单调栈的思想与单调队列类似\",{\"1\":{\"422\":1}}],[\"单调栈\",{\"0\":{\"421\":1}}],[\"单调队列\",{\"0\":{\"416\":1}}],[\"通过并查集的链式传递效果可以消去若干已知中间变量而求出问题的答案\",{\"1\":{\"592\":1}}],[\"通过空置索引\",{\"1\":{\"440\":1}}],[\"通过设置特定的随机种子使生成的一系列特定数字\",{\"1\":{\"36\":1}}],[\"更进一步\",{\"1\":{\"741\":1}}],[\"更新和查询的循环中\",{\"1\":{\"440\":1}}],[\"更不可能作为解\",{\"1\":{\"385\":1}}],[\"查询时可以仅考虑所有节点直接相连于同一根节点\",{\"1\":{\"593\":1}}],[\"查询和更新的复杂度都为\",{\"1\":{\"440\":1}}],[\"查看密钥对指纹\",{\"1\":{\"60\":1}}],[\"来查看进程\",{\"1\":{\"802\":1}}],[\"来计算\",{\"1\":{\"439\":1}}],[\"来说\",{\"1\":{\"180\":1}}],[\"−231\",{\"1\":{\"519\":1}}],[\"−n\",{\"1\":{\"439\":1}}],[\"−i=x∑z−1​cost\",{\"1\":{\"384\":1}}],[\"−i=x∑z−1​gas\",{\"1\":{\"384\":1}}],[\"前缀树\",{\"0\":{\"436\":1}}],[\"前一段旅程的起点不可能是解\",{\"1\":{\"380\":1}}],[\"首先将所有消除一并执行\",{\"1\":{\"632\":1}}],[\"首先对原始数组进行全体异或\",{\"1\":{\"518\":1}}],[\"首先考虑简化版的问题\",{\"1\":{\"517\":1}}],[\"首先要控制随机数生成的区间\",{\"1\":{\"37\":1}}],[\"首次出现的位置\",{\"1\":{\"435\":1}}],[\"表\",{\"1\":{\"435\":1}}],[\"表示第\",{\"1\":{\"706\":1}}],[\"表示第i天第j笔交易完成后未持有股票的最大利润\",{\"1\":{\"320\":1}}],[\"表示第i天第j笔交易完成后持有股票的最大利润\",{\"1\":{\"320\":1}}],[\"表示字符串中的两个索引\",{\"1\":{\"613\":1}}],[\"表示字符串s中以s\",{\"1\":{\"289\":1}}],[\"表示位置\",{\"1\":{\"605\":1}}],[\"表示\",{\"1\":{\"593\":1}}],[\"表示消去链式条件的中间变量\",{\"1\":{\"592\":1}}],[\"表示问题cj\",{\"1\":{\"589\":1}}],[\"表示节点ai和bi之间存在一条边\",{\"1\":{\"581\":1}}],[\"表示放下左边或右边的叉子\",{\"1\":{\"572\":1}}],[\"表示吃面\",{\"1\":{\"571\":1}}],[\"表示拿起左边或右边的叉子\",{\"1\":{\"570\":1}}],[\"表示在该位上两数是不同的\",{\"1\":{\"518\":1}}],[\"表示气球\",{\"1\":{\"402\":1}}],[\"表示某支股票第i天的价格\",{\"1\":{\"298\":1,\"307\":1,\"318\":1,\"331\":1}}],[\"表示t的前i个字符在s的前j个字符的子序列中出现的次数\",{\"1\":{\"278\":1}}],[\"表示将正整数i拆分成至少两个正整数的和所对应的最大乘积\",{\"1\":{\"226\":1}}],[\"表示该段的起点和终点\",{\"1\":{\"176\":1}}],[\"串的状态转移信息\",{\"1\":{\"435\":1}}],[\"预计算\",{\"1\":{\"435\":1}}],[\"待寻找的串\",{\"1\":{\"435\":1}}],[\"降低其高度\",{\"1\":{\"429\":1}}],[\"维护存储各节点的重量\",{\"1\":{\"429\":1}}],[\"维护存储各节点的高度\",{\"1\":{\"428\":1}}],[\"高度并查集\",{\"1\":{\"428\":1}}],[\"高级\",{\"1\":{\"27\":1}}],[\"高级功能\",{\"1\":{\"27\":1}}],[\"后续元素为账户下的若干邮箱\",{\"1\":{\"619\":1}}],[\"后续通过更改父节点值来将节点连至父节点\",{\"1\":{\"427\":1}}],[\"后续可以考虑将区间分段用多线程分别同时查找\",{\"1\":{\"40\":1}}],[\"父节点都是自己\",{\"1\":{\"427\":1}}],[\"初始时默认各节点独立成集合\",{\"1\":{\"427\":1}}],[\"初始位于数组的第一个下标\",{\"1\":{\"366\":1,\"370\":1}}],[\"具体实现是设若干候选变量及其相应计数变量\",{\"1\":{\"702\":1}}],[\"具体实现是在内部用数组记录节点的父节点\",{\"1\":{\"427\":1}}],[\"具体实现时\",{\"1\":{\"593\":1,\"632\":1}}],[\"具体实现见代码\",{\"1\":{\"440\":1}}],[\"具体来说分组需要确保两个只出现一次的数分到不同组\",{\"1\":{\"518\":1}}],[\"具体来说有\",{\"1\":{\"439\":1}}],[\"具体来说\",{\"1\":{\"141\":1,\"155\":1}}],[\"或者对于有序数组\",{\"1\":{\"467\":1}}],[\"或者是俩元素是否属于同一集合\",{\"1\":{\"426\":1}}],[\"或\",{\"1\":{\"446\":1,\"637\":1}}],[\"或出售股票\",{\"1\":{\"298\":1,\"307\":1,\"318\":1}}],[\"遍历左子数组中所有元素即可累加出所有新增翻转对数量\",{\"1\":{\"755\":1}}],[\"遍历完之后若有剩余候选变量\",{\"1\":{\"702\":1}}],[\"遍历完之后实际上完成了邮箱的去重和合并主体标记\",{\"1\":{\"624\":1}}],[\"遍历上一步构建的哈希表\",{\"1\":{\"625\":1}}],[\"遍历图\",{\"0\":{\"420\":1}}],[\"遍历过程中将标记索引与当前元素换位置\",{\"1\":{\"155\":1}}],[\"貌似单调队列的作用常可以用优先队列来替代\",{\"1\":{\"417\":1}}],[\"队列和栈相互实现\",{\"0\":{\"415\":1}}],[\"反转链表\",{\"0\":{\"414\":1}}],[\"反斜杠方向同一斜线上所有格子行和列相减为相同值\",{\"1\":{\"163\":1}}],[\"算法\",{\"0\":{\"433\":1,\"486\":1}}],[\"算法讲解\",{\"0\":{\"413\":1}}],[\"算法已经不再安全\",{\"1\":{\"58\":1}}],[\"然后将其右侧所有重叠区间都去除\",{\"1\":{\"411\":1}}],[\"然后进入下一层\",{\"1\":{\"155\":1}}],[\"无法解开则次数为\",{\"1\":{\"642\":1}}],[\"无环连通无向图若有n个节点\",{\"1\":{\"583\":1}}],[\"无重叠区间\",{\"0\":{\"407\":1}}],[\"无需实际移动一次\",{\"1\":{\"372\":1}}],[\"继续往右考虑\",{\"1\":{\"405\":1}}],[\"尽可能多地引爆了右侧的气球\",{\"1\":{\"404\":1}}],[\"子序列可以不在原始数组中连续\",{\"1\":{\"398\":1}}],[\"仅可选其中两条线与地面构成容器\",{\"1\":{\"738\":1}}],[\"仅可重复使用未碎的鸡蛋\",{\"1\":{\"247\":1}}],[\"仅需考虑节点高不大于\",{\"1\":{\"594\":1}}],[\"仅端点重合不算重合\",{\"1\":{\"409\":1}}],[\"仅有一个元素或者含两个不等元素的序列也视作摆动序列\",{\"1\":{\"397\":1}}],[\"摆动序列指连续数字之间的差严格地在正数和负数之间交替\",{\"1\":{\"397\":1}}],[\"摆动序列\",{\"0\":{\"394\":1}}],[\"返回一个表示每个字符串片段的长度的列表\",{\"1\":{\"390\":1}}],[\"划分字母区间\",{\"0\":{\"388\":1}}],[\"范围内任意加油站都不能达到\",{\"1\":{\"385\":1}}],[\"范围内分别计算抢的最大金额\",{\"1\":{\"210\":1}}],[\"∀z∈\",{\"1\":{\"382\":1,\"383\":1}}],[\"​=1n​⋅2n−1​⋯mn−m+1​​\",{\"1\":{\"491\":1}}],[\"​=m\",{\"1\":{\"491\":1}}],[\"​=i=x∑y​gas\",{\"1\":{\"384\":1}}],[\"​\",{\"1\":{\"382\":2,\"384\":1}}],[\"​cn​\",{\"1\":{\"204\":1}}],[\"≥i=x∑z​cost\",{\"1\":{\"382\":1}}],[\"⎩⎨⎧​i=x∑y​gas\",{\"1\":{\"382\":1}}],[\"假设从\",{\"1\":{\"381\":1}}],[\"假随机数组词造句\",{\"0\":{\"34\":1,\"35\":1}}],[\"下面证明为啥上一段途径的每个加油站也都不可能是解\",{\"1\":{\"381\":1}}],[\"下属一个片区用一个公网\",{\"1\":{\"114\":1}}],[\"应将邮箱清空从当前加油站的下一个加油站开始统计\",{\"1\":{\"380\":1}}],[\"应确保其正下方\",{\"1\":{\"292\":1}}],[\"题目隐含的限制条件是在任意一个加油站时油箱含量都不能为负\",{\"1\":{\"380\":1}}],[\"题目要求的规划实际上是求该图的欧拉路径\",{\"1\":{\"178\":1}}],[\"现在按实际的人来合并这些账户\",{\"1\":{\"620\":1}}],[\"现在驾驶一辆油箱容量无限的汽车从某个加油站出发\",{\"1\":{\"378\":1}}],[\"现状是移动光猫\",{\"1\":{\"114\":1}}],[\"加油站\",{\"0\":{\"375\":1}}],[\"跳表\",{\"1\":{\"769\":1}}],[\"跳跃游戏\",{\"0\":{\"364\":1,\"368\":1}}],[\"跳源码\",{\"1\":{\"65\":1}}],[\"贪心思想\",{\"1\":{\"411\":1}}],[\"贪心\",{\"0\":{\"363\":1}}],[\"与\",{\"1\":{\"774\":1,\"775\":1,\"776\":1}}],[\"与网格顶部相连\",{\"1\":{\"629\":1}}],[\"与排序中确定的先后矛盾\",{\"1\":{\"444\":1}}],[\"与顺序无关故外层遍历硬币\",{\"1\":{\"355\":1,\"361\":1}}],[\"与当前数进行选取与否的考虑\",{\"1\":{\"141\":1}}],[\"详情\",{\"1\":{\"354\":1,\"360\":1,\"516\":1,\"746\":1}}],[\"详见官方题解\",{\"1\":{\"230\":1}}],[\"详见此\",{\"1\":{\"113\":1}}],[\"零钱兑换\",{\"0\":{\"351\":1}}],[\"向数组中的每个元素前添加正负号\",{\"1\":{\"349\":1}}],[\"元素可重复使用\",{\"1\":{\"343\":1}}],[\"元素分别代表以当前节点为根的树\",{\"1\":{\"218\":1}}],[\"背包问题\",{\"0\":{\"340\":1,\"479\":1}}],[\"变化而来的\",{\"1\":{\"333\":1}}],[\"进程号查看该进程下所有线程的占用情况\",{\"1\":{\"799\":1}}],[\"进程号\",{\"1\":{\"798\":1,\"801\":1,\"802\":1}}],[\"进而转换状态\",{\"1\":{\"471\":1}}],[\"进而向后累积\",{\"1\":{\"327\":1}}],[\"进一步减少无效搜索\",{\"1\":{\"467\":1}}],[\"进行问题模拟\",{\"1\":{\"476\":1}}],[\"进行删除操作使word1\",{\"1\":{\"270\":1}}],[\"进行插入操作使word1\",{\"1\":{\"269\":1}}],[\"进行替换操作使word1\",{\"1\":{\"268\":1}}],[\"否则需要将所有组合都搜一遍\",{\"1\":{\"646\":1}}],[\"否则指定位置砖块消失\",{\"1\":{\"629\":1}}],[\"否则每次添加的都是贯穿回溯全过程的唯一的列表指针\",{\"1\":{\"458\":1}}],[\"否则返回\",{\"1\":{\"378\":1}}],[\"否则最后计算出的总利润可能会超出实际能获得的\",{\"1\":{\"327\":1}}],[\"否则使用时无法导入\",{\"1\":{\"107\":1}}],[\"需除掉一切多余空格\",{\"1\":{\"692\":1}}],[\"需要分开讨论扩展\",{\"1\":{\"730\":1}}],[\"需要判断若0000本身就在限制组合中\",{\"1\":{\"646\":1}}],[\"需要判断是否已经到下一个移动起始点了\",{\"1\":{\"372\":1}}],[\"需要进行保护性修正\",{\"1\":{\"632\":1}}],[\"需要逆向思维\",{\"1\":{\"631\":1}}],[\"需要重新计算\",{\"1\":{\"432\":1}}],[\"需要令各划分的片段尽可能地短\",{\"1\":{\"392\":1}}],[\"需要注意的是\",{\"1\":{\"373\":1,\"440\":1}}],[\"需要到处找\",{\"1\":{\"117\":1}}],[\"需注意的是压缩之后每天的仨变量都是相互依赖的\",{\"1\":{\"338\":1}}],[\"需将每笔的持有利润都设为\",{\"1\":{\"327\":1}}],[\"基于\",{\"1\":{\"779\":1}}],[\"基于此可知\",{\"1\":{\"723\":1}}],[\"基于上一条\",{\"1\":{\"327\":1}}],[\"基本类型\",{\"0\":{\"195\":1}}],[\"笔交易后状态为持有的利润\",{\"1\":{\"327\":1}}],[\"笔交易初始化\",{\"1\":{\"326\":1}}],[\"笔交易即可确保获得最大利润\",{\"1\":{\"324\":1}}],[\"已第一次卖出且第二次买入的keep2只能是由原有keep2保持或者当天买入由sell1\",{\"1\":{\"312\":1}}],[\"第i天第j笔未持有的sell\",{\"1\":{\"322\":1}}],[\"第i天第j笔持有的keep\",{\"1\":{\"321\":1}}],[\"第i行的皇后在第queens\",{\"1\":{\"164\":1}}],[\"第二笔卖出的sell2只能是由原有sell2保持或者当天卖出转移而来\",{\"1\":{\"313\":1}}],[\"第一次卖出但未进行第二次买入的sell1只能是由原有sell1保持或者由当天卖出转移而来\",{\"1\":{\"311\":1}}],[\"第一笔买入的keep1只能是由原有keep1保持或者当天买入转移而来\",{\"1\":{\"310\":1}}],[\"比如当n\",{\"1\":{\"560\":1}}],[\"比如先更新了keep\",{\"1\":{\"303\":1}}],[\"比含重复元素的要少排序和回溯判重步骤\",{\"1\":{\"153\":1}}],[\"天价格购入了股票\",{\"1\":{\"303\":1}}],[\"天的利润\",{\"1\":{\"303\":1}}],[\"买卖股票的最佳时机\",{\"0\":{\"296\":1,\"305\":1,\"316\":1},\"1\":{\"309\":1,\"320\":1,\"333\":2}}],[\"股票问题\",{\"0\":{\"295\":1}}],[\"按对角线遍历矩阵\",{\"1\":{\"670\":1}}],[\"按从小到大拿边连接节点\",{\"1\":{\"600\":1}}],[\"按题目要求\",{\"1\":{\"392\":1}}],[\"按语义应为\",{\"1\":{\"292\":1}}],[\"按照字典序\",{\"1\":{\"182\":1}}],[\"左端点为i\",{\"1\":{\"730\":1}}],[\"左下方的值已经是有效的\",{\"1\":{\"292\":1}}],[\"左侧\",{\"1\":{\"292\":1}}],[\"左边为已经填入的元素\",{\"1\":{\"154\":1}}],[\"含\",{\"1\":{\"289\":1,\"734\":1}}],[\"含的话就相当于s的前j\",{\"1\":{\"283\":1}}],[\"两数之和\",{\"0\":{\"683\":1}}],[\"两哲学家之间都有一把叉子\",{\"1\":{\"565\":1}}],[\"两种情况\",{\"1\":{\"283\":1}}],[\"两个字符串的删除操作\",{\"0\":{\"257\":1}}],[\"处理每一行时\",{\"1\":{\"281\":1}}],[\"任意非空串都不是空串的子序列\",{\"1\":{\"280\":1}}],[\"空串是任意串的子序列\",{\"1\":{\"279\":1}}],[\"时间复杂度比直接枚举子串两端再判断是否回文要低\",{\"1\":{\"729\":1}}],[\"时间复杂度获取队列元素最大值\",{\"1\":{\"418\":1}}],[\"时已压缩\",{\"1\":{\"594\":1}}],[\"时转移方程中就会从keep\",{\"1\":{\"303\":1}}],[\"时\",{\"1\":{\"272\":1,\"290\":1,\"291\":1,\"519\":1}}],[\"时就会先进入\",{\"1\":{\"182\":1}}],[\"转移方程为dp\",{\"1\":{\"355\":1,\"361\":1}}],[\"转移而来\",{\"1\":{\"312\":1}}],[\"转移而非之前的keep\",{\"1\":{\"303\":1}}],[\"转移代表从当天的持有到卖出\",{\"1\":{\"303\":1}}],[\"转移状态方程需考虑俩字符串各自遍历到的字符是否相同\",{\"1\":{\"261\":1}}],[\"转换而来表示在word1前i个字符与word2前j\",{\"1\":{\"269\":1}}],[\"转换而来表示在word1前i\",{\"1\":{\"268\":1,\"270\":1}}],[\"相似\",{\"1\":{\"333\":1}}],[\"相对于其来说\",{\"1\":{\"267\":1}}],[\"相关\",{\"0\":{\"101\":1}}],[\"取负操作会导致溢出\",{\"1\":{\"519\":1}}],[\"取最低有效位的方式为x\",{\"1\":{\"519\":1}}],[\"取最大转移而来\",{\"1\":{\"261\":1}}],[\"取余运算规则\",{\"0\":{\"498\":1}}],[\"取消注释\",{\"1\":{\"94\":1}}],[\"目标值\",{\"1\":{\"355\":1,\"361\":1}}],[\"目标和\",{\"0\":{\"347\":1}}],[\"目标是通过删除导致两单词不同的字符来使其相同\",{\"1\":{\"261\":1}}],[\"目录\",{\"1\":{\"87\":1,\"97\":1}}],[\"内的所有值\",{\"1\":{\"254\":1}}],[\"内置标签页浏览条件下\",{\"1\":{\"63\":1}}],[\"内置的\",{\"1\":{\"58\":1}}],[\"显然可以用字符对象的优先队列直接一步到位\",{\"1\":{\"615\":1}}],[\"显然每支箭都得引爆尽可能多的气球\",{\"1\":{\"404\":1}}],[\"显然若全程的累加量为负\",{\"1\":{\"386\":1}}],[\"显然若想达到最少移动次数\",{\"1\":{\"372\":1}}],[\"显然是当遍历到远于上次移动的最远可达位置时\",{\"1\":{\"372\":1}}],[\"显然越小越好\",{\"1\":{\"355\":1,\"361\":1}}],[\"显然能进行空间压缩\",{\"1\":{\"338\":1}}],[\"显然利润为零\",{\"1\":{\"303\":1}}],[\"显然sell\",{\"1\":{\"303\":1}}],[\"显然两仅相差一个字符的单词的编辑距离至多为一\",{\"1\":{\"272\":1}}],[\"显然此时最短编辑距离为dp\",{\"1\":{\"271\":1}}],[\"显然最大操作次数不会大于楼高\",{\"1\":{\"254\":1}}],[\"显然有\",{\"1\":{\"203\":1}}],[\"边的记录形式需同时包含两节点的编号和边长\",{\"1\":{\"601\":1}}],[\"边的信息由长度为n的二维数组edges给出\",{\"1\":{\"581\":1}}],[\"边缘条件为dp\",{\"1\":{\"355\":1,\"361\":1}}],[\"边缘状态是第\",{\"1\":{\"303\":1}}],[\"边界条件为\",{\"1\":{\"253\":1}}],[\"边栏目录样例\",{\"0\":{\"26\":1}}],[\"层\",{\"1\":{\"251\":1,\"252\":1}}],[\"允许t\",{\"1\":{\"251\":1}}],[\"鸡蛋没碎\",{\"1\":{\"252\":1}}],[\"鸡蛋碎了\",{\"1\":{\"251\":1}}],[\"鸡蛋掉落\",{\"0\":{\"245\":1}}],[\"考虑发生递减的连续的三个元素a\",{\"1\":{\"720\":1}}],[\"考虑初始回文串为\",{\"1\":{\"682\":1}}],[\"考虑变化量为零的情况\",{\"1\":{\"632\":1}}],[\"考虑到邮箱第一次出现的账户索引可能不是合并的主体标识\",{\"1\":{\"625\":1}}],[\"考虑到字符的可重复性\",{\"1\":{\"615\":1}}],[\"考虑到数据集的特殊性\",{\"1\":{\"609\":1}}],[\"考虑到其补码表示为\",{\"1\":{\"519\":1}}],[\"考虑到题目要求字典序\",{\"1\":{\"179\":1}}],[\"考虑s的前j个字符\",{\"1\":{\"281\":1}}],[\"考虑编辑距离的实际意义\",{\"1\":{\"272\":1}}],[\"考虑转移方程\",{\"1\":{\"250\":1}}],[\"换个角度思考\",{\"1\":{\"249\":1}}],[\"楼层区间扔下\",{\"1\":{\"247\":1}}],[\"有向图的拓扑排序是指满足上游节点一定排在下游节点前面的一种全节点排列\",{\"1\":{\"443\":1}}],[\"有\",{\"1\":{\"383\":1}}],[\"有边缘条件\",{\"1\":{\"278\":1}}],[\"有dp\",{\"1\":{\"272\":1}}],[\"有两种\",{\"1\":{\"261\":1}}],[\"有k枚鸡蛋和n层高的楼\",{\"1\":{\"247\":1}}],[\"有时使用\",{\"1\":{\"93\":1}}],[\"回文子串的中心有单字符和双字符两种\",{\"1\":{\"730\":1}}],[\"回文子串\",{\"0\":{\"725\":1}}],[\"回到环形数组中\",{\"1\":{\"240\":1}}],[\"回溯那般用矩阵记录\",{\"1\":{\"659\":1}}],[\"回溯到有其他下游节点的节点\",{\"1\":{\"181\":1}}],[\"回溯需要对大量的格子反复进行某数能否放置的检查\",{\"1\":{\"171\":1}}],[\"回溯时再换回来\",{\"1\":{\"155\":1}}],[\"回溯时按照遍历根节点递归分左右子树的思路依旧\",{\"1\":{\"126\":1}}],[\"回溯函数的返回值不应是一般的单个节点\",{\"1\":{\"127\":1}}],[\"回溯\",{\"0\":{\"120\":1,\"449\":1}}],[\"整除\",{\"1\":{\"556\":1,\"557\":1,\"558\":1}}],[\"整个数组的总和固定\",{\"1\":{\"240\":1}}],[\"整数拆分\",{\"0\":{\"222\":1}}],[\"很可能会造成同一位置重复入队情况\",{\"1\":{\"660\":1}}],[\"很容易联想到普通数组求\",{\"1\":{\"240\":1}}],[\"很有可能找不到特定种子\",{\"1\":{\"39\":1}}],[\"设分别处于左右子数组的索引分别为i和j\",{\"1\":{\"755\":1}}],[\"设矩阵左和上边界为太平洋\",{\"1\":{\"650\":1}}],[\"设x\",{\"1\":{\"593\":1}}],[\"设所有节点为1\",{\"1\":{\"581\":1}}],[\"设其拆成j和i\",{\"1\":{\"226\":1}}],[\"设置\",{\"1\":{\"69\":1}}],[\"当前读与快照读\",{\"1\":{\"774\":1}}],[\"当前路径再经过已经访问过的位置也无意义\",{\"1\":{\"659\":1}}],[\"当二者一样高时可以同时移动两个指针\",{\"1\":{\"741\":1}}],[\"当身高相同时考虑第二属性\",{\"1\":{\"710\":1}}],[\"当回文串由\",{\"1\":{\"682\":1}}],[\"当某块池底不高于泳池水位时认为其可达\",{\"1\":{\"605\":1}}],[\"当某条边连接后左上角和右下角变为连通\",{\"1\":{\"600\":1}}],[\"当某条边的两节点都已经在联合集中则说明该边冗余\",{\"1\":{\"584\":1}}],[\"当x为\",{\"1\":{\"519\":1}}],[\"当遍历到末尾时即表示此片段内所有字母在字符串内所有的出现都在此片段内\",{\"1\":{\"392\":1}}],[\"当s\",{\"1\":{\"290\":1,\"291\":1}}],[\"当word1\",{\"1\":{\"272\":1}}],[\"当将环分割为两个子数组后\",{\"1\":{\"240\":1}}],[\"当i\",{\"1\":{\"226\":1}}],[\"当标记索引移动到最右边时就达成了一种全排列\",{\"1\":{\"155\":1}}],[\"因最高位补\",{\"1\":{\"488\":1}}],[\"因其无法利用现代操作系统的局部性原理进行缓存很少使用堆排序\",{\"1\":{\"482\":1}}],[\"因正整数对应的最大乘积取决于比其小的正整数对应的最大乘积\",{\"1\":{\"226\":1}}],[\"因为是从右向左遍历的原数组\",{\"1\":{\"747\":1}}],[\"因为若只移动一个的话\",{\"1\":{\"741\":1}}],[\"因为指针是相向移动的\",{\"1\":{\"740\":1}}],[\"因为其表示的是前面有多少个的问题\",{\"1\":{\"710\":1}}],[\"因为其他数都两两异或为\",{\"1\":{\"517\":1}}],[\"因为数组有序\",{\"1\":{\"688\":1}}],[\"因为相邻位置的相邻位置可以是同一个\",{\"1\":{\"660\":1}}],[\"因为即使同一批入队\",{\"1\":{\"660\":1}}],[\"因为即使最后一次联合之后可能有节点不直接与根节点相连\",{\"1\":{\"593\":1}}],[\"因为求最少转动次数\",{\"1\":{\"645\":1}}],[\"因为某些位被限制的同时只需要至少其他一位不同即可绕过\",{\"1\":{\"644\":1}}],[\"因为人们可能具有相同的名称\",{\"1\":{\"620\":1}}],[\"因为还有一节点未直接与根节点相连\",{\"1\":{\"616\":1}}],[\"因为要反复判断某两点是否连通\",{\"1\":{\"601\":1}}],[\"因为边是从小到大启用的\",{\"1\":{\"600\":1}}],[\"因为\",{\"1\":{\"594\":1}}],[\"因为在除分母k的时候\",{\"1\":{\"492\":1}}],[\"因为每次下一层搜索都是基于当前层右边起始的\",{\"1\":{\"467\":1}}],[\"因为遍历更改后根节点的高度可能会变\",{\"1\":{\"432\":1}}],[\"因为当前集合在后续合并时只会用到根节点的重量\",{\"1\":{\"431\":1}}],[\"因为集合高度就是查找集合根节点的最多迭代次数\",{\"1\":{\"428\":1}}],[\"因为这支箭在保证引爆原有必须得引爆的气球的同时\",{\"1\":{\"404\":1}}],[\"因为此时答案可能还未更新\",{\"1\":{\"373\":1}}],[\"因为此思路是一路做选择直到数据末尾\",{\"1\":{\"141\":1}}],[\"因为到达下一个移动起始点才意味着需要实际移动一次来确保到达该位置\",{\"1\":{\"372\":1}}],[\"因为只需求出数量\",{\"1\":{\"345\":1}}],[\"因为对交易次数进行优化之后实际上强制每天都进行模拟买卖\",{\"1\":{\"327\":1}}],[\"因为按照实际意义来看\",{\"1\":{\"303\":1}}],[\"因为成环且不能抢相邻的\",{\"1\":{\"210\":1}}],[\"因为原始集合中含重复值\",{\"1\":{\"147\":1}}],[\"因为前一个数可能因为其再前一个数不同而没选\",{\"1\":{\"141\":1}}],[\"因为路径也无法提供同层的帮助\",{\"1\":{\"140\":1}}],[\"因为不同的重复数字在回溯时不算同一个\",{\"1\":{\"134\":1}}],[\"因为左右子树的结构不同\",{\"1\":{\"127\":1}}],[\"因为左右子树的笛卡尔积会导致即使单个值作为根节点\",{\"1\":{\"127\":1}}],[\"因为虽然国内所有\",{\"1\":{\"113\":1}}],[\"因为移动劫持了\",{\"1\":{\"113\":1}}],[\"因为种子参数类型为long\",{\"1\":{\"38\":1}}],[\"抢当前节点\",{\"1\":{\"219\":1}}],[\"抢与不抢根节点的最大收益\",{\"1\":{\"218\":1}}],[\"函数返回值为含俩元素的数组\",{\"1\":{\"218\":1}}],[\"代码上线后\",{\"0\":{\"797\":1}}],[\"代码如下\",{\"1\":{\"212\":1,\"492\":1}}],[\"代表以\",{\"1\":{\"202\":1}}],[\"代表序列长度为\",{\"1\":{\"201\":1}}],[\"最终确认答案\",{\"1\":{\"702\":1}}],[\"最终答案为max\",{\"1\":{\"243\":1}}],[\"最终答案为dp\",{\"1\":{\"229\":1}}],[\"最近的\",{\"1\":{\"637\":1}}],[\"最小体力消耗路径\",{\"0\":{\"595\":1},\"1\":{\"608\":2}}],[\"最小公倍数\",{\"1\":{\"497\":1}}],[\"最优剩余最左侧的区间右端点必须是所有区间右端点最靠左的\",{\"1\":{\"411\":1}}],[\"最远可达位置可以通过遍历数组每个元素时来更新\",{\"1\":{\"372\":1}}],[\"最佳买卖股票时机含冷冻期\",{\"0\":{\"329\":1}}],[\"最长回文子串\",{\"0\":{\"677\":1}}],[\"最长回文子序列\",{\"0\":{\"285\":1}}],[\"最长连续序列\",{\"0\":{\"539\":1}}],[\"最长递增子序列\",{\"0\":{\"232\":1}}],[\"最大是\",{\"1\":{\"757\":1}}],[\"最大公约数\",{\"1\":{\"497\":1}}],[\"最大和子数组跨越原数组首尾\",{\"1\":{\"242\":1}}],[\"最大和子数组不跨越原数组首尾\",{\"1\":{\"241\":1}}],[\"最大子数组和\",{\"1\":{\"240\":1}}],[\"最大收益为以左子节点为根节点的最大收益与以右子节点为根节点的最大收益这二者之和\",{\"1\":{\"220\":1}}],[\"最大收益为当前节点值\",{\"1\":{\"219\":1}}],[\"最大收益即为抢和不抢俩状态的较大者\",{\"1\":{\"212\":1}}],[\"最后若有剩下的候选元素\",{\"1\":{\"701\":1}}],[\"最后多数元素肯定会相应剩下\",{\"1\":{\"700\":1}}],[\"最后遍历各位置收集可达两洋的位置\",{\"1\":{\"652\":1}}],[\"最后别忘了在网格中实际地将其标为砖块\",{\"1\":{\"632\":1}}],[\"最后拼成结果字符串时\",{\"1\":{\"615\":1}}],[\"最后一无所有\",{\"1\":{\"458\":1}}],[\"最后一天卖掉股票一定比持有股票的利润更大\",{\"1\":{\"303\":1}}],[\"最后只需检查目标值的硬币数是否变为了小于预设值的数即可\",{\"1\":{\"355\":1,\"361\":1}}],[\"最后只需将规划逆序即可\",{\"1\":{\"181\":1}}],[\"最后利润最大的显然是sell2\",{\"1\":{\"314\":1}}],[\"最后用原数组总和减去最小和即为最大和\",{\"1\":{\"242\":1}}],[\"最后用缓存更新抢的收益\",{\"1\":{\"212\":1}}],[\"最后将上网模式由软路由改为桥接\",{\"1\":{\"115\":1}}],[\"较简单的形式是仅基于上一间房屋的俩状态来思考抢还是不抢当前房屋\",{\"1\":{\"212\":1}}],[\"令起始节点归根\",{\"1\":{\"429\":1}}],[\"令凑成某金额的硬币数为价值\",{\"1\":{\"355\":1,\"361\":1}}],[\"令目标值为背包容量\",{\"1\":{\"355\":1,\"361\":1}}],[\"令keep\",{\"1\":{\"320\":1}}],[\"令sell\",{\"1\":{\"300\":1,\"320\":1}}],[\"令dp\",{\"1\":{\"211\":1,\"226\":1,\"249\":1,\"261\":1,\"267\":1,\"278\":1,\"289\":1,\"355\":1,\"361\":1}}],[\"令限制条件为仅当前一个数与当前数不同时才考虑不选当前数\",{\"1\":{\"141\":1}}],[\"房屋首尾相连成环\",{\"1\":{\"208\":1}}],[\"⋅g\",{\"1\":{\"203\":2}}],[\"动态规划\",{\"0\":{\"194\":1,\"469\":1}}],[\"xp\",{\"1\":{\"938\":1}}],[\"x根节点为rx\",{\"1\":{\"593\":1}}],[\"x可看作a\",{\"1\":{\"592\":1}}],[\"xy\",{\"1\":{\"385\":1}}],[\"x<y\",{\"1\":{\"382\":1}}],[\"x\",{\"1\":{\"193\":1,\"381\":1,\"382\":1,\"383\":1,\"435\":4,\"493\":3,\"497\":6,\"519\":1,\"520\":6,\"562\":3,\"585\":6,\"588\":2,\"593\":1,\"594\":16,\"602\":8,\"610\":6,\"616\":9,\"626\":8,\"633\":14,\"800\":1,\"899\":1,\"900\":1}}],[\"xxx\",{\"1\":{\"77\":1}}],[\"深入其他下游节点完成其他所有边的遍历这几个阶段\",{\"1\":{\"181\":1}}],[\"仔细思考死胡同节点在\",{\"1\":{\"181\":1}}],[\"皆大欢喜\",{\"1\":{\"180\":1}}],[\"该边令图出现了环\",{\"1\":{\"583\":1}}],[\"该点必须为规划的终点\",{\"1\":{\"180\":1}}],[\"该数组被一个标记索引分为两部分\",{\"1\":{\"154\":1}}],[\"得到规划\",{\"1\":{\"180\":1}}],[\"那么显然如果将人从高到低逐渐插入新队列\",{\"1\":{\"710\":1}}],[\"那么一定是引爆了尽可能多的气球\",{\"1\":{\"404\":1}}],[\"那么向下游搜索的时候肯定优先选字典序小\",{\"1\":{\"179\":1}}],[\"那一定能确定出具体楼层f的楼高n最高可以是多少\",{\"1\":{\"249\":1}}],[\"那另一子数组的和自然为最小\",{\"1\":{\"240\":1}}],[\"那下次搜索出队的依旧是该节点\",{\"1\":{\"179\":1}}],[\"我们可以将此箭等效到其右边界\",{\"1\":{\"405\":1}}],[\"我们从左向右考虑所有气球的右边界\",{\"1\":{\"404\":1}}],[\"我们在搜索之前\",{\"1\":{\"179\":1}}],[\"我步入你\",{\"1\":{\"43\":1}}],[\"且2\",{\"1\":{\"755\":1}}],[\"且前面恰有\",{\"1\":{\"706\":1}}],[\"且相应计数非零\",{\"1\":{\"702\":1}}],[\"且在\",{\"1\":{\"606\":1}}],[\"且对于全局来说最先连通的路径一定是差值最小的\",{\"1\":{\"600\":1}}],[\"且对应dp\",{\"1\":{\"251\":1}}],[\"且不存在矛盾\",{\"1\":{\"590\":1}}],[\"且不在冷静期\",{\"1\":{\"339\":1}}],[\"且空间复杂度为o\",{\"1\":{\"547\":1}}],[\"且其他数的两次出现都分到同一组\",{\"1\":{\"518\":1}}],[\"且其余数的两次出现都分到同一组\",{\"1\":{\"518\":1}}],[\"且\",{\"1\":{\"463\":1}}],[\"且同一字母最多出现在一个片段中\",{\"1\":{\"390\":1}}],[\"且初始化需联合考虑前一天处理过后的利润\",{\"1\":{\"326\":1}}],[\"且多笔交易之间的买卖关系需联合考虑\",{\"1\":{\"309\":1}}],[\"且最多只能完成k笔交易\",{\"1\":{\"318\":1}}],[\"且最多只能完成两笔交易\",{\"1\":{\"307\":1}}],[\"且最多只存在一个节点的出度为零\",{\"1\":{\"178\":1}}],[\"且仅出现一次\",{\"1\":{\"279\":1}}],[\"且dp\",{\"1\":{\"272\":1}}],[\"且存在属于\",{\"1\":{\"247\":1}}],[\"且边界条件\",{\"1\":{\"203\":1}}],[\"且子问题的解可复用\",{\"1\":{\"200\":1}}],[\"且如此构建的树的唯一性由根节点的不同来保证\",{\"1\":{\"126\":1,\"200\":1}}],[\"给\",{\"1\":{\"574\":1}}],[\"给出的条件构成一个连通有向图\",{\"1\":{\"178\":1}}],[\"给定表示每个位置高度的整型数组\",{\"1\":{\"738\":1}}],[\"给定表示每天股价的数组prices\",{\"1\":{\"298\":1,\"307\":1,\"318\":1,\"331\":1}}],[\"给定无向图和连接情况数组\",{\"1\":{\"664\":1}}],[\"给定无环连通无向图的所有边和一条冗余的边\",{\"1\":{\"580\":1}}],[\"给定二维网格\",{\"1\":{\"629\":1}}],[\"给定方形矩阵grid表示泳池\",{\"1\":{\"605\":1}}],[\"给定整型数组nums\",{\"1\":{\"745\":1}}],[\"给定整型数组\",{\"1\":{\"515\":1}}],[\"给定整数n\",{\"1\":{\"123\":1,\"198\":1}}],[\"给定所有必须得上的课的先修关系\",{\"1\":{\"447\":1}}],[\"给定只含小写字母的字符串\",{\"1\":{\"390\":1}}],[\"给定两个整数数组gas和cost\",{\"1\":{\"377\":1}}],[\"给定两个单词\",{\"1\":{\"259\":1,\"265\":1}}],[\"给定数组\",{\"1\":{\"402\":1}}],[\"给定数组保证能到达最后一个下标\",{\"1\":{\"370\":1}}],[\"给定数据保证至少存在一种合理规划\",{\"1\":{\"176\":1}}],[\"给定非负整数数组\",{\"1\":{\"366\":1,\"370\":1}}],[\"给定非负整数数组和目标值\",{\"1\":{\"349\":1}}],[\"给定代表各位评分的整数数组\",{\"1\":{\"714\":1}}],[\"给定代表硬币面额的整数数组与目标值\",{\"1\":{\"353\":1}}],[\"给定代表每个房屋存放金额的非负节点值二叉树\",{\"1\":{\"216\":1}}],[\"给定代表每个房屋存放金额的非负整数数组\",{\"1\":{\"208\":1}}],[\"给定目标值和元素各异的数组\",{\"1\":{\"343\":1}}],[\"给定目标值和含重复数字的数组\",{\"1\":{\"132\":1}}],[\"给定字符串和其中若干索引对的数组pairs\",{\"1\":{\"613\":1}}],[\"给定字符串变量对数组equations和一个实数值数组values作为已知条件\",{\"1\":{\"588\":1}}],[\"给定字符串中最长回文子序列的长度\",{\"1\":{\"287\":1}}],[\"给定字符串s和t\",{\"1\":{\"276\":1}}],[\"给定正整数拆为俩数之和\",{\"1\":{\"226\":1}}],[\"给定一群人的乱序的属性数组\",{\"1\":{\"706\":1}}],[\"给定一个列表accounts\",{\"1\":{\"619\":1}}],[\"给定一个区间的集合\",{\"1\":{\"409\":1}}],[\"给定一个大于\",{\"1\":{\"224\":1}}],[\"给定一组起点\",{\"1\":{\"176\":1}}],[\"看数据情况\",{\"1\":{\"481\":1}}],[\"看题干是一道图论题\",{\"1\":{\"178\":1}}],[\"看哪个数字生成的数字序列符合要求\",{\"1\":{\"36\":1}}],[\"规划出依次经过的点\",{\"1\":{\"176\":1}}],[\"终点对tickets\",{\"1\":{\"176\":1}}],[\"终端执行\",{\"1\":{\"70\":1,\"72\":1}}],[\"重量并查集\",{\"1\":{\"429\":1}}],[\"重复上述步骤即可\",{\"1\":{\"411\":1}}],[\"重点考虑存在导致搜索进入死胡同的节点\",{\"1\":{\"180\":1}}],[\"重新安排行程\",{\"0\":{\"174\":1}}],[\"重启光猫\",{\"1\":{\"115\":1}}],[\"节省遍历时间\",{\"1\":{\"173\":1}}],[\"宫是否已存在某数\",{\"1\":{\"173\":1}}],[\"记录一些杂的知识点\",{\"0\":{\"766\":1}}],[\"记录需填充坐标\",{\"1\":{\"173\":1}}],[\"记录某行\",{\"1\":{\"173\":1}}],[\"记录将网易云音乐或\",{\"1\":{\"46\":1}}],[\"还有基于归并排序变种的解法\",{\"1\":{\"748\":1}}],[\"还有将抽出来的人怎么插入新建的队列中去\",{\"1\":{\"710\":1}}],[\"还有些细节需要注意\",{\"1\":{\"323\":1}}],[\"还没到下一个移动起始点时仍属于上次移动的覆盖范围\",{\"1\":{\"372\":1}}],[\"还可以添加全局类型的是否完成标志\",{\"1\":{\"172\":1}}],[\"还需要装有\",{\"1\":{\"68\":1}}],[\"j>\",{\"1\":{\"1029\":1}}],[\"join\",{\"1\":{\"1026\":1}}],[\"johnnybravo\",{\"1\":{\"622\":2}}],[\"john00\",{\"1\":{\"622\":2}}],[\"johnsmith\",{\"1\":{\"622\":3}}],[\"john\",{\"1\":{\"622\":7}}],[\"jstack\",{\"1\":{\"801\":1}}],[\"java\",{\"0\":{\"765\":1},\"1\":{\"786\":1,\"792\":1}}],[\"just\",{\"1\":{\"626\":1,\"951\":1}}],[\"jump\",{\"1\":{\"374\":1,\"781\":1,\"828\":1,\"829\":1}}],[\"j+1\",{\"1\":{\"278\":1,\"282\":1,\"283\":1}}],[\"j++\",{\"1\":{\"173\":1,\"231\":1,\"262\":1,\"273\":1,\"346\":1,\"356\":1,\"362\":1}}],[\"j打住不继续拆\",{\"1\":{\"228\":1}}],[\"j继续拆分\",{\"1\":{\"227\":1}}],[\"jfk\",{\"1\":{\"176\":1,\"182\":3,\"183\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"j\",{\"1\":{\"171\":1,\"173\":7,\"226\":2,\"227\":2,\"228\":2,\"229\":2,\"231\":6,\"255\":5,\"261\":1,\"262\":8,\"267\":2,\"268\":2,\"269\":3,\"270\":2,\"271\":4,\"272\":11,\"273\":9,\"279\":2,\"282\":3,\"283\":4,\"284\":8,\"289\":2,\"290\":3,\"291\":4,\"294\":8,\"320\":2,\"321\":4,\"322\":4,\"328\":8,\"346\":6,\"356\":5,\"362\":5,\"435\":11,\"484\":3,\"533\":1,\"589\":1,\"602\":8,\"605\":2,\"610\":4,\"626\":5,\"633\":18,\"653\":5,\"749\":6,\"752\":2,\"807\":1,\"1007\":1,\"1024\":1,\"1026\":2,\"1029\":1,\"1051\":1,\"1066\":1}}],[\"jpg\",{\"1\":{\"43\":3}}],[\"临时遍历每行\",{\"1\":{\"171\":1}}],[\"都聚焦于高度数值等同于时刻的块\",{\"1\":{\"609\":1}}],[\"都是按照一定条件将网格内的格子逐渐分别连通\",{\"1\":{\"608\":1}}],[\"都有ac≡bcmodp\",{\"1\":{\"506\":1}}],[\"都有\",{\"1\":{\"505\":1}}],[\"都有域名审查与拦截\",{\"1\":{\"113\":1}}],[\"都可以实现\",{\"1\":{\"446\":1}}],[\"都能完成多笔交易\",{\"1\":{\"333\":1}}],[\"都不可拆\",{\"1\":{\"226\":1}}],[\"都含数字1~9且无重复\",{\"1\":{\"168\":1}}],[\"解9\",{\"1\":{\"168\":1}}],[\"解数独等等\",{\"1\":{\"455\":1}}],[\"解数独\",{\"0\":{\"166\":1}}],[\"解决方案就是利用\",{\"1\":{\"114\":1}}],[\"列表\",{\"1\":{\"624\":1}}],[\"列\",{\"1\":{\"164\":1,\"173\":1}}],[\"列和两种方向斜线\",{\"1\":{\"162\":1}}],[\"斜杠方向同一斜线上所有格子行和列相加为相同值\",{\"1\":{\"163\":1}}],[\"斜杠和反斜杠两种方向\",{\"1\":{\"162\":1}}],[\"就不会对已插入的人的第二属性产生影响\",{\"1\":{\"710\":1}}],[\"就是经典的范围动态规划\",{\"1\":{\"211\":1}}],[\"就是一个一个格子往后试验\",{\"1\":{\"161\":1}}],[\"就会意识到很像坐标系中的一次函数\",{\"1\":{\"163\":1}}],[\"从右至左遍历原数组的同时维护树状数组\",{\"1\":{\"747\":1}}],[\"从\",{\"1\":{\"734\":1}}],[\"从而导致相邻位置的砖块可能不再与网格顶部直接或间接相连而不稳定\",{\"1\":{\"629\":1}}],[\"从而在大量的搜索中节约大量时间\",{\"1\":{\"162\":1}}],[\"从左向右考虑区间\",{\"1\":{\"411\":1}}],[\"从左至右\",{\"1\":{\"292\":1}}],[\"从加油站i开往加油站i+1需要消耗汽油的量为cost\",{\"1\":{\"377\":1}}],[\"从keep\",{\"1\":{\"303\":1}}],[\"从根节点开始往下抢\",{\"1\":{\"216\":1}}],[\"从给定的起点开始按字典序优先进行\",{\"1\":{\"180\":1}}],[\"从某节点出发沿有向边方向不重复地遍历图中所有的边\",{\"1\":{\"178\":1}}],[\"从链接中得到\",{\"1\":{\"47\":1}}],[\"由此可得从原数组中抽人的第一顺序应当是其第一属性\",{\"1\":{\"710\":1}}],[\"由此可见遍历时需要存储各邮箱对应的账户\",{\"1\":{\"624\":1}}],[\"由此利用并查集实现\",{\"1\":{\"631\":1}}],[\"由上述转移方程结合实际语义来看\",{\"1\":{\"292\":1}}],[\"由dp\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"由题目条件可知每行\",{\"1\":{\"162\":1}}],[\"由于需要时刻查询连通集合内节点数量\",{\"1\":{\"632\":1}}],[\"由于需要硬币数量最少\",{\"1\":{\"355\":1,\"361\":1}}],[\"由于题目要求账户内邮箱需要排序\",{\"1\":{\"625\":1}}],[\"由于注水\",{\"1\":{\"605\":1}}],[\"由于哲学家不是在吃面就是在想着啥时候吃面\",{\"1\":{\"573\":1}}],[\"由于是从头往后划分\",{\"1\":{\"392\":1}}],[\"由于最远距离的更新与移动次数的更新是异步的\",{\"1\":{\"373\":1}}],[\"由于转移方程仅与上一天状态相关\",{\"1\":{\"303\":1}}],[\"由于子序列中的字符可以不在原串中连续\",{\"1\":{\"289\":1}}],[\"由于原问题可以分解为俩规模较小的子问题\",{\"1\":{\"200\":1}}],[\"由于回溯函数返回的是以某范围的值为根节点的所有种类的搜索树\",{\"1\":{\"128\":1}}],[\"由于\",{\"1\":{\"96\":1}}],[\"标识第i行的第j列个宫内是否已存在数字k\",{\"1\":{\"171\":1}}],[\"标识第i行中是否已存在数字k\",{\"1\":{\"171\":1}}],[\"标准的回溯搜索题\",{\"1\":{\"161\":1,\"170\":1}}],[\"标记索引初始时在最左边\",{\"1\":{\"155\":1}}],[\"标记外层的\",{\"1\":{\"17\":1}}],[\"标记开头与结尾\",{\"1\":{\"17\":1}}],[\"要求计算新数组counts\",{\"1\":{\"745\":1}}],[\"要求每人至少发一个\",{\"1\":{\"714\":1}}],[\"要求每行\",{\"1\":{\"168\":1}}],[\"要求空间复杂度为\",{\"1\":{\"686\":1}}],[\"要求时间复杂度为o\",{\"1\":{\"547\":1}}],[\"要求时间复杂度为\",{\"1\":{\"542\":1}}],[\"要求将其划分为尽可能多的片段\",{\"1\":{\"390\":1}}],[\"要求规划的起始点必须是点\",{\"1\":{\"176\":1}}],[\"要求一行\",{\"1\":{\"159\":1}}],[\"要么是右侧的下一个字符\",{\"1\":{\"730\":1}}],[\"要么用哈希表费空间\",{\"1\":{\"140\":1}}],[\"要么每次遍历查找费时\",{\"1\":{\"140\":1}}],[\"皇后\",{\"0\":{\"157\":1},\"1\":{\"455\":1}}],[\"每条边连接的俩节点都属于不同集合\",{\"1\":{\"665\":1}}],[\"每条斜线的放置状态\",{\"1\":{\"162\":1}}],[\"每条斜线有且仅有一个皇后\",{\"1\":{\"162\":1}}],[\"每个转盘可转转为0\",{\"1\":{\"641\":1}}],[\"每个账户内的第一个元素是名称\",{\"1\":{\"621\":1}}],[\"每个叉子相当于锁\",{\"1\":{\"576\":1}}],[\"每个到一个格子都需要进行放置的合法性检查\",{\"1\":{\"162\":1}}],[\"每人面前一盘意面\",{\"1\":{\"565\":1}}],[\"每层都是从头开始搜索而无需起始索引\",{\"1\":{\"463\":1}}],[\"每层是否需要起始索引\",{\"1\":{\"459\":1}}],[\"每支箭可从任意位置射出并引爆覆盖范围包含该位置的所有气球\",{\"1\":{\"402\":1}}],[\"每种硬币无限则是完全背包问题\",{\"1\":{\"355\":1,\"361\":1}}],[\"每种硬币数量无限\",{\"1\":{\"353\":1}}],[\"每天开始处理各笔交易前都需要将第\",{\"1\":{\"326\":1}}],[\"每一天都可决定是否购买和\",{\"1\":{\"298\":1,\"307\":1,\"318\":1}}],[\"每宫内各数字是否已存在的状态以便快速查询\",{\"1\":{\"171\":1}}],[\"每宫会耗费大量时间\",{\"1\":{\"171\":1}}],[\"每宫\",{\"1\":{\"168\":1}}],[\"每列\",{\"1\":{\"162\":2,\"168\":1,\"171\":2}}],[\"每向下一层就向右移动一位\",{\"1\":{\"155\":1}}],[\"每次取\",{\"1\":{\"701\":1}}],[\"每次填充前先记录稳定集合的砖块数量\",{\"1\":{\"632\":1}}],[\"每次因消除而减少的连通数量\",{\"1\":{\"631\":1}}],[\"每次编辑可对一个单词进行单个字符的插入或删除或替换\",{\"1\":{\"265\":1}}],[\"每次都移动可达的最大长度并不一定最优\",{\"1\":{\"372\":1}}],[\"每次都可删除其中一个单词的任意一个字符\",{\"1\":{\"259\":1}}],[\"每次都从右边选一个\",{\"1\":{\"154\":1}}],[\"每次操作可以取一枚未碎的鸡蛋并把它从\",{\"1\":{\"247\":1}}],[\"每次出队的就是剩余下游节点中字典序最小的\",{\"1\":{\"179\":1}}],[\"每次从返回的左右子搜索树列表中挑选一对有别于之前的\",{\"1\":{\"128\":1}}],[\"等效于逆序填补时增加的连通数量\",{\"1\":{\"631\":1}}],[\"等回溯时再换回来撤销处理\",{\"1\":{\"154\":1}}],[\"等待连接成功\",{\"1\":{\"118\":1}}],[\"等待最终移动结果\",{\"1\":{\"55\":1}}],[\"全排列\",{\"0\":{\"149\":1}}],[\"类似用数组存储的链表\",{\"1\":{\"427\":1}}],[\"类似\",{\"1\":{\"309\":1,\"320\":1}}],[\"类比之前\",{\"1\":{\"147\":1}}],[\"类型\",{\"1\":{\"16\":1}}],[\"求翻转对与归并排序过程十分契合\",{\"1\":{\"754\":1}}],[\"求存储水的最大量\",{\"1\":{\"738\":1}}],[\"求如此淘汰到只剩最后一人的编号\",{\"1\":{\"734\":1}}],[\"求满足要求的最少糖果数\",{\"1\":{\"714\":1}}],[\"求非空数组中所有出现次数大于数组长度三分之一的元素\",{\"1\":{\"698\":1}}],[\"求众数\",{\"0\":{\"696\":1}}],[\"求最短路径用\",{\"1\":{\"658\":1}}],[\"求最大公约数和最小公倍数\",{\"0\":{\"496\":1}}],[\"求总左上角沿全\",{\"1\":{\"656\":1}}],[\"求所有能使水流向两个大洋的位置\",{\"1\":{\"650\":1}}],[\"求因每次的消除而掉落的砖块数量\",{\"1\":{\"629\":1}}],[\"求在经过若干次交换后字符串能达到的按字典序最小的字符串\",{\"1\":{\"613\":1}}],[\"求何时泳池左上角到右下角才是连通的\",{\"1\":{\"605\":1}}],[\"求从给定矩阵的左上角到右下角的所有连通路径中路径差值的最小值\",{\"1\":{\"597\":1}}],[\"求无序数组中最长数字连续子序列\",{\"1\":{\"541\":1}}],[\"求正数的平均数时\",{\"1\":{\"488\":1}}],[\"求一种修完所有课的顺序\",{\"1\":{\"447\":1}}],[\"求一定能确定出具体楼层f的最小操作次数\",{\"1\":{\"247\":1}}],[\"求使剩余区间互不重叠所需移除区间的最小数量\",{\"1\":{\"409\":1}}],[\"求使两单词相同的最小操作次数\",{\"1\":{\"259\":1}}],[\"求引爆所有气球的最少弓箭数量\",{\"1\":{\"402\":1}}],[\"求到达最后一个下标的最少移动次数\",{\"1\":{\"370\":1}}],[\"求和为给定整数的完全平方数的最少数量\",{\"1\":{\"359\":1}}],[\"求恰凑成总金额所需的最少的硬币个数\",{\"1\":{\"353\":1}}],[\"求恰由n个节点组成且节点值从1到n互不相同的二叉搜索树数量\",{\"1\":{\"123\":1,\"198\":1}}],[\"求添加完后数组和为目标值的添加方法数\",{\"1\":{\"349\":1}}],[\"求出数组中总和为目标值的组合的个数\",{\"1\":{\"343\":1}}],[\"求能获得的最大利润\",{\"1\":{\"298\":1,\"307\":1,\"318\":1,\"331\":1}}],[\"求能够偷窃到的最高金额\",{\"1\":{\"208\":1,\"216\":1}}],[\"求t在s的子序列\",{\"1\":{\"276\":1}}],[\"求将一单词转换成另一单词的最少编辑次数\",{\"1\":{\"265\":1}}],[\"求拆分出的正整数之积的最大值\",{\"1\":{\"224\":1}}],[\"求字典序最小的规划\",{\"1\":{\"176\":1}}],[\"求给定数组nums所含翻转对的数量\",{\"1\":{\"752\":1}}],[\"求给定数组中摆动子序列的最大长度\",{\"1\":{\"396\":1}}],[\"求给定字符串所有回文子串的数量\",{\"1\":{\"727\":1}}],[\"求给定环形整数数组的最大子数组和\",{\"1\":{\"238\":1}}],[\"求给定整数数组中最长严格递增子序列\",{\"1\":{\"234\":1}}],[\"求给定不含重复元素的数组的全排列\",{\"1\":{\"151\":1}}],[\"求给定含重复字符的字符串所有字符的所有排列\",{\"1\":{\"145\":1}}],[\"剑指\",{\"0\":{\"143\":1}}],[\"会导致左边界多减一\",{\"1\":{\"682\":1}}],[\"会自然涵盖所有情况\",{\"1\":{\"141\":1}}],[\"会将模块安装在新建的\",{\"1\":{\"76\":1}}],[\"鉴于存在连续多个重复值的情况\",{\"1\":{\"141\":1}}],[\"鉴于选取的子序列也不一定在原数组中连续\",{\"1\":{\"141\":1}}],[\"鉴于重复的组合是因为同层遍历时用了个体不同但数值相同的数\",{\"1\":{\"135\":1}}],[\"即为正向消除的本次掉落数量\",{\"1\":{\"632\":1}}],[\"即遍历时用哈希表存邮箱\",{\"1\":{\"624\":1}}],[\"即根节点对应的优先队列\",{\"1\":{\"615\":1}}],[\"即把问题中对零散变量相除求值转化为除相同额外变量\",{\"1\":{\"592\":1}}],[\"即equations\",{\"1\":{\"588\":1}}],[\"即判断二进制表示中是否只有一个\",{\"1\":{\"488\":1}}],[\"即令小重量根节点成为大重量根节点的子节点\",{\"1\":{\"429\":1}}],[\"即两集合的根节点合并时高度大的为最终根节点\",{\"1\":{\"428\":1}}],[\"即片段内所有字母在字符串内所有的出现都在此片段内\",{\"1\":{\"392\":1}}],[\"即从\",{\"1\":{\"385\":1}}],[\"即本次需要实际开始移动的位置\",{\"1\":{\"372\":1}}],[\"即买卖若在同一天则无意义\",{\"1\":{\"324\":1}}],[\"即逆序拷贝原字符串\",{\"1\":{\"293\":1}}],[\"即dp\",{\"1\":{\"282\":1,\"291\":1}}],[\"即对于固定的t的前i个字符来说\",{\"1\":{\"281\":1}}],[\"即有dp\",{\"1\":{\"272\":1}}],[\"即转移到的子问题为\",{\"1\":{\"251\":1}}],[\"即变成求普通数组的最小子数组和的问题\",{\"1\":{\"242\":1}}],[\"即取抢和不抢的较大者\",{\"1\":{\"211\":1}}],[\"即在每次向根节点迭代的时候不断地更改起始节点的父节点直到根节点\",{\"1\":{\"429\":1}}],[\"即在入栈前将栈内不满足单调性的元素都出栈\",{\"1\":{\"422\":1}}],[\"即在\",{\"1\":{\"210\":1}}],[\"即可\",{\"1\":{\"203\":1}}],[\"即\",{\"1\":{\"203\":1}}],[\"即使将\",{\"1\":{\"211\":1}}],[\"即使此条件下路径的字典序不是最小的\",{\"1\":{\"180\":1}}],[\"即使通过改变同层遍历的重复判定条件为if\",{\"1\":{\"140\":1}}],[\"即同层仅进行列的遍历以寻找能放置的格子而不同层搜索不同行\",{\"1\":{\"164\":1}}],[\"即每个位置都是从本次排列所有还未使用的字符中挑选一个\",{\"1\":{\"147\":1}}],[\"即一层仅考虑当前位置数字的选择与否\",{\"1\":{\"141\":1}}],[\"其位置上的水可向四周等高或更低位置流\",{\"1\":{\"650\":1}}],[\"其值为1表示砖块\",{\"1\":{\"629\":1}}],[\"其结果\",{\"1\":{\"593\":1}}],[\"其权重都更新到除以根节点变量的结果\",{\"1\":{\"592\":1}}],[\"其倍数关系用额外的权重数组记录\",{\"1\":{\"592\":1}}],[\"其他情况调用number\",{\"1\":{\"559\":1}}],[\"其他能正常完成搜索的节点的逆序回溯\",{\"1\":{\"181\":1}}],[\"其余元素是按字典序排列的邮箱地址\",{\"1\":{\"621\":1}}],[\"其余数都出现两次\",{\"1\":{\"515\":1}}],[\"其余三种情况如下\",{\"1\":{\"441\":1}}],[\"其最低有效位为负号位\",{\"1\":{\"488\":1}}],[\"其每个元素首先都相当于叶节点\",{\"1\":{\"439\":1}}],[\"其出现次数不变\",{\"1\":{\"283\":1}}],[\"其中翻转对指满足i\",{\"1\":{\"752\":1}}],[\"其中counts\",{\"1\":{\"745\":1}}],[\"其中a\",{\"1\":{\"720\":1}}],[\"其中各元素\",{\"1\":{\"706\":1}}],[\"其中第一个元素accounts\",{\"1\":{\"619\":1}}],[\"其中第j个问题queries\",{\"1\":{\"589\":1}}],[\"其中的accounts\",{\"1\":{\"619\":1}}],[\"其中pairs\",{\"1\":{\"613\":1}}],[\"其中prices\",{\"1\":{\"298\":1,\"307\":1,\"318\":1,\"331\":1}}],[\"其中grid\",{\"1\":{\"605\":1}}],[\"其中gas\",{\"1\":{\"377\":1}}],[\"其中有两个数只出现一次\",{\"1\":{\"515\":1}}],[\"其中必含分母的倍数\",{\"1\":{\"492\":1}}],[\"其中\",{\"1\":{\"402\":1,\"409\":1,\"439\":1,\"568\":1}}],[\"其中1\",{\"1\":{\"226\":1}}],[\"其中tickets\",{\"1\":{\"176\":1}}],[\"其简便计算的定义为\",{\"1\":{\"204\":1}}],[\"其不同子树结构数量为左右子树节点集合的笛卡尔积\",{\"1\":{\"203\":1}}],[\"其实质就是不同元素对拼消耗\",{\"1\":{\"700\":1}}],[\"其实用优先队列的话还要考虑向下搜索发现此路不通时回溯的操作\",{\"1\":{\"179\":1}}],[\"其实也能接受\",{\"1\":{\"140\":1}}],[\"其本身所指为当前待填的位置\",{\"1\":{\"154\":1}}],[\"其下的子网才是主机\",{\"1\":{\"114\":1}}],[\"而索引分布在同一子数组范围内的翻转对则在前一轮排序时已求出\",{\"1\":{\"754\":1}}],[\"而储水量的高取决于二者高度的较小值\",{\"1\":{\"740\":1}}],[\"而同一根叉子在同一时间只能被一个哲学家使用\",{\"1\":{\"566\":1}}],[\"而任何数与\",{\"1\":{\"517\":1}}],[\"而根节点的直接子节点是可以直接找到判定的\",{\"1\":{\"429\":1}}],[\"而不能仅设置第\",{\"1\":{\"327\":1}}],[\"而持有状态则表示以第\",{\"1\":{\"303\":1}}],[\"而对于以\",{\"1\":{\"203\":1}}],[\"而对于分块连续重复值的起始索引不是重复值的情况\",{\"1\":{\"140\":1}}],[\"而在同一层中\",{\"1\":{\"155\":1}}],[\"而是从头开始选一个未使用的\",{\"1\":{\"147\":1}}],[\"而导致重复序列的原因是原数组中可能存在不连续分布的重复值\",{\"1\":{\"141\":1}}],[\"而应是各子树的根节点列表\",{\"1\":{\"127\":1}}],[\"乍一看能套用\",{\"1\":{\"140\":1}}],[\"递增子序列的合法性由仅把不小于路径末尾的值加入来保证\",{\"1\":{\"141\":1}}],[\"递增子序列\",{\"0\":{\"137\":1}}],[\"限定相同的数只能在最开始的时候用一次即可\",{\"1\":{\"135\":1}}],[\"此时的俩边界为多拓展了一次的\",{\"1\":{\"682\":1}}],[\"此时需注意考虑填充位置与顶部的特殊连通\",{\"1\":{\"632\":1}}],[\"此时暂且还是用索引当作合并标识\",{\"1\":{\"625\":1}}],[\"此处可直接用\",{\"1\":{\"616\":1}}],[\"此处必须用\",{\"1\":{\"616\":1}}],[\"此类求多数元素的问题考虑用摩尔投票法\",{\"1\":{\"700\":1}}],[\"此类存在许多传递关系并需要记录的需求适合用并查集\",{\"1\":{\"592\":1}}],[\"此类问题可以用回溯把每种组合模拟出来统计\",{\"1\":{\"345\":1}}],[\"此函数亦可用于获取最低有效位\",{\"1\":{\"439\":1}}],[\"此情况保证解唯一\",{\"1\":{\"378\":1}}],[\"此两字符必不能同时用于扩展其内部的最长回文子序列\",{\"1\":{\"291\":1}}],[\"此新边界必都可以用来扩展原来其内部的最长回文子序列\",{\"1\":{\"290\":1}}],[\"此外还有不同的重复字符多次排列的结果重复问题\",{\"1\":{\"147\":1}}],[\"此题数据集各池底高度各不相同\",{\"1\":{\"606\":1}}],[\"此题应视作\",{\"1\":{\"333\":1}}],[\"此题看似与\",{\"1\":{\"333\":1}}],[\"此题还有另一种思考方式\",{\"1\":{\"293\":1}}],[\"此题有利用数学证明的极简算法\",{\"1\":{\"230\":1}}],[\"此题不含重复元素\",{\"1\":{\"153\":1}}],[\"此题是求所有排列而非所有组合\",{\"1\":{\"147\":1}}],[\"此题与基础的同一集合中求不同组合所不同的是可以含重复数字\",{\"1\":{\"134\":1}}],[\"此目录下的文章都是关于工作的\",{\"1\":{\"764\":1}}],[\"此目录下的文章是一些随笔\",{\"1\":{\"33\":1}}],[\"此目录下的文章为写作语法参考\",{\"1\":{\"12\":1}}],[\"找出游戏的获胜者\",{\"0\":{\"732\":1}}],[\"找出非递减数组中和为给定值的两个数的下标\",{\"1\":{\"685\":1}}],[\"找出给定字符串中最长的回文子串\",{\"1\":{\"679\":1}}],[\"找出给定的无序整形数组中缺失的最小正整数\",{\"1\":{\"547\":1}}],[\"找出各\",{\"1\":{\"637\":1}}],[\"找出那条冗余边\",{\"1\":{\"580\":1}}],[\"找出二叉树中所有重复的子树\",{\"1\":{\"537\":1}}],[\"找出两个只出现一次的数\",{\"1\":{\"515\":1}}],[\"找出数组中所有和为目标值的不同子集\",{\"1\":{\"132\":1}}],[\"找不到\",{\"0\":{\"78\":1}}],[\"组成翻转对的元素\",{\"1\":{\"755\":1}}],[\"组合问题\",{\"1\":{\"451\":1}}],[\"组合总和\",{\"0\":{\"130\":1,\"341\":1},\"1\":{\"140\":1,\"147\":1}}],[\"组的虚拟内网\",{\"1\":{\"112\":1}}],[\"拼成一颗新搜索树再加到本级回溯函数的返回列表中即可\",{\"1\":{\"128\":1}}],[\"以此枚举所有回文子串\",{\"1\":{\"729\":1}}],[\"以什么顺序从原数组中抽出来人\",{\"1\":{\"710\":1}}],[\"以备接下来的一组抵消\",{\"1\":{\"702\":1}}],[\"以其为中心向两端扩展\",{\"1\":{\"681\":1}}],[\"以其为根节点的所有种类的搜索树的构造就是\",{\"1\":{\"128\":1}}],[\"以该位的值来对所有数进行分组\",{\"1\":{\"518\":1}}],[\"以节点为键以其所有下游节点列表为值\",{\"1\":{\"179\":1}}],[\"以便后续能只对这些位置进行快速搜索而无需遍历其他已填充格子\",{\"1\":{\"172\":1}}],[\"以上述的特定值来区分各斜线\",{\"1\":{\"163\":1}}],[\"以链接形式分享歌单\",{\"1\":{\"47\":1}}],[\"作为前一个数\",{\"1\":{\"141\":1}}],[\"作为根节点\",{\"1\":{\"126\":1,\"200\":1}}],[\"作为目的地并开始迁移\",{\"1\":{\"54\":1}}],[\"⋯\",{\"1\":{\"126\":3,\"200\":3,\"491\":1}}],[\"对角线遍历\",{\"0\":{\"668\":1}}],[\"对原数组某值的更新可通过更新树状数组对应节点及其所有父节点来实现\",{\"1\":{\"440\":1}}],[\"对原数组的区间查询可转化为对树状数组的若干节点查询来解决\",{\"1\":{\"440\":1}}],[\"对word2\",{\"1\":{\"269\":1}}],[\"对word1\",{\"1\":{\"268\":1,\"270\":1}}],[\"对于固定的nums\",{\"1\":{\"755\":1}}],[\"对于每个字符作为中心左端\",{\"1\":{\"730\":1}}],[\"对于每种组合\",{\"1\":{\"645\":1}}],[\"对于整数数组\",{\"1\":{\"533\":1}}],[\"对于上述最后的形式\",{\"1\":{\"492\":1}}],[\"对于排列问题\",{\"1\":{\"463\":1}}],[\"对于组合问题\",{\"1\":{\"460\":1}}],[\"对于简单区间上的更新以及求和问题\",{\"1\":{\"439\":1}}],[\"对于keep状态\",{\"1\":{\"302\":1}}],[\"对于sell状态\",{\"1\":{\"301\":1}}],[\"对于函数内部返回值的计算\",{\"1\":{\"218\":1}}],[\"对于树自然想到\",{\"1\":{\"218\":1}}],[\"对于单个子问题\",{\"1\":{\"211\":1}}],[\"对于有向图的\",{\"1\":{\"180\":1}}],[\"对于各皇后具体放置位置的记录\",{\"1\":{\"164\":1}}],[\"对于此题\",{\"1\":{\"141\":1}}],[\"对于我来说此题较难的地方在于构建回溯的代码形式\",{\"1\":{\"127\":1}}],[\"对于节点序列\",{\"1\":{\"126\":1,\"200\":1}}],[\"对齐\",{\"0\":{\"18\":1}}],[\"只有将c升至a一种方式\",{\"1\":{\"722\":1}}],[\"只要条件允许\",{\"1\":{\"566\":1}}],[\"只出现一次的数字\",{\"0\":{\"513\":1}}],[\"只能是由原有保持或者当天由本笔交易卖出转移而来\",{\"1\":{\"322\":1}}],[\"只能是由原有保持或者当天由上一笔未持有状态买入转移而来\",{\"1\":{\"321\":1}}],[\"只是将交易上限定为k\",{\"1\":{\"320\":1}}],[\"只是要求统计不同搜索树的数量\",{\"1\":{\"125\":1}}],[\"只会用还未使用的部分中最左边的那个\",{\"1\":{\"147\":1}}],[\"只需在其基础上增加一状态变量即可\",{\"1\":{\"333\":1}}],[\"只需联合考虑各笔交易即可\",{\"1\":{\"320\":1}}],[\"只需要记录遍历到的字母最后一次出现的位置即可\",{\"1\":{\"392\":1}}],[\"只需要把每行每列的索引写标出来再画出斜线\",{\"1\":{\"163\":1}}],[\"只需要模拟笛卡尔积的运算即可\",{\"1\":{\"128\":1}}],[\"只需确认最终提示模块安装成功即可\",{\"1\":{\"77\":1}}],[\"不断合并已排序子数组的过程中\",{\"1\":{\"754\":1}}],[\"不管新位置高度如何\",{\"1\":{\"741\":1}}],[\"不管抢不抢i\",{\"1\":{\"211\":1}}],[\"不可在出队寻找相邻下一位置时再标记\",{\"1\":{\"660\":1}}],[\"不可简单地通过判断各位是否从两种方向转至正确位数是否都被限制来直接断定\",{\"1\":{\"644\":1}}],[\"不会掉落\",{\"1\":{\"629\":1}}],[\"不同转动结果有\",{\"1\":{\"645\":1}}],[\"不同账户间顺序随意\",{\"1\":{\"621\":1}}],[\"不同的子序列\",{\"0\":{\"274\":1}}],[\"不同的二叉搜索树\",{\"0\":{\"121\":1,\"196\":1},\"1\":{\"125\":1}}],[\"不在索引对中的位置表示不可调换\",{\"1\":{\"615\":1}}],[\"不存在除\",{\"1\":{\"590\":1}}],[\"不要求序列数字在原数组中也连续\",{\"1\":{\"541\":1}}],[\"不一定能保证每一项都是整数\",{\"1\":{\"492\":1}}],[\"不适用于\",{\"1\":{\"488\":2}}],[\"不限制交易次数但不可在卖出股票的下一天买入\",{\"1\":{\"331\":1}}],[\"不含的话同上\",{\"1\":{\"283\":1}}],[\"不抢当前节点\",{\"1\":{\"220\":1}}],[\"不抢右子节点作为根节点的最大收益这三者之和\",{\"1\":{\"219\":1}}],[\"不抢左子节点作为根节点的最大收益\",{\"1\":{\"219\":1}}],[\"不是在向下深入时而是在回溯时添加\",{\"1\":{\"181\":1}}],[\"不予实现\",{\"1\":{\"39\":1}}],[\"登陆路由器管理界面\",{\"1\":{\"118\":1}}],[\"上下左右\",{\"1\":{\"629\":1}}],[\"上述作为分组标准的数取全体异或的结果的最低位的\",{\"1\":{\"519\":1}}],[\"上述开关并不在同一处\",{\"1\":{\"117\":1}}],[\"上自带的字体文件缺少能被\",{\"1\":{\"79\":1}}],[\"删掉会车即可看到密码\",{\"1\":{\"116\":1}}],[\"改桥接之前先记录软路由方式中的宽带帐密\",{\"1\":{\"116\":1}}],[\"指针如何移动\",{\"1\":{\"740\":1}}],[\"指向本机\",{\"1\":{\"115\":1}}],[\"指南\",{\"1\":{\"27\":1}}],[\"开始时需将网格数据复制一份\",{\"1\":{\"632\":1}}],[\"开始时油箱为空\",{\"1\":{\"378\":1}}],[\"开\",{\"1\":{\"115\":2}}],[\"关于重量并查集路径压缩的两点注意\",{\"1\":{\"430\":1}}],[\"关闭\",{\"1\":{\"115\":1}}],[\"关键词精选图标\",{\"1\":{\"4\":1}}],[\"先假设每条斜线都从右上至左下遍历\",{\"1\":{\"674\":1}}],[\"先给字符串变量编号以便并查集处理\",{\"1\":{\"593\":1}}],[\"先乘下一项的分子\",{\"1\":{\"492\":1}}],[\"先标记数组一步进行剪枝\",{\"1\":{\"467\":1}}],[\"先找到代表各自集合的根节点\",{\"1\":{\"427\":1}}],[\"先考虑有解的情况\",{\"1\":{\"380\":1}}],[\"先将抢的最大收益算出来存着\",{\"1\":{\"212\":1}}],[\"先将字符按字典序排序以把相同字符并到一起\",{\"1\":{\"147\":1}}],[\"先利用超级管理帐密登陆光猫管理界面\",{\"1\":{\"115\":1}}],[\"先pnpm\",{\"1\":{\"9\":1}}],[\"步骤如下\",{\"1\":{\"114\":1}}],[\"把主机暴露出去\",{\"1\":{\"114\":1}}],[\"搭配\",{\"1\":{\"114\":1}}],[\"3c\",{\"1\":{\"863\":1}}],[\"30\",{\"1\":{\"562\":1,\"801\":2}}],[\"3格子组成\",{\"1\":{\"168\":1}}],[\"38\",{\"0\":{\"143\":1}}],[\"3\",{\"1\":{\"114\":1,\"140\":1,\"168\":1,\"173\":10,\"434\":1,\"495\":1,\"556\":1,\"558\":1,\"562\":4,\"671\":1,\"672\":1,\"703\":2}}],[\"导致利润虚高\",{\"1\":{\"327\":1}}],[\"导致其他下游节点永不被进入搜索而死循环\",{\"1\":{\"179\":1}}],[\"导致重复的原因是选了前一个数没选当前数和没选前一个数选了当前数这两种情况实质上等效\",{\"1\":{\"141\":1}}],[\"导致俩主机之间无法通信\",{\"1\":{\"114\":1}}],[\"导入文件\",{\"0\":{\"23\":1}}],[\"于是俩主机之间经过了无数层\",{\"1\":{\"114\":1}}],[\"路径到右下角的最短路径长度\",{\"1\":{\"656\":1}}],[\"路径可上下左右四方向连通\",{\"1\":{\"598\":1}}],[\"路径差值\",{\"1\":{\"598\":1}}],[\"路径压缩不适用于高度并查集\",{\"1\":{\"432\":1}}],[\"路径末尾值\",{\"1\":{\"141\":1}}],[\"路径中\",{\"1\":{\"76\":1}}],[\"路由器\",{\"1\":{\"114\":1}}],[\"路由器是二阶内网\",{\"1\":{\"114\":1}}],[\"入户宽带仅是内网地址\",{\"1\":{\"114\":1}}],[\"是因为若即将遍历的位置已经被访问过\",{\"1\":{\"659\":1}}],[\"是因为移动是个大内网\",{\"1\":{\"114\":1}}],[\"是指其直接或间接\",{\"1\":{\"629\":1}}],[\"是字符串列表\",{\"1\":{\"619\":1}}],[\"是否需要标记数组标记当前层回溯路径中已存在哪些元素\",{\"1\":{\"464\":1}}],[\"是否需要将出队的元素再添加回来\",{\"1\":{\"179\":1}}],[\"是假设字符范围是\",{\"1\":{\"435\":1}}],[\"是自己用\",{\"1\":{\"96\":1}}],[\"师弟给我科普\",{\"1\":{\"114\":1}}],[\"老家也是移动宽带连不上\",{\"1\":{\"114\":1}}],[\"论文\",{\"1\":{\"113\":1}}],[\"也不可能会获得更大的储水量\",{\"1\":{\"741\":1}}],[\"也不必费心设啥国外的\",{\"1\":{\"113\":1}}],[\"也能像\",{\"1\":{\"659\":1}}],[\"也能拦下来再回个假的\",{\"1\":{\"113\":1}}],[\"也无需为多笔交易单独设置变量维度\",{\"1\":{\"333\":1}}],[\"也可将c升至b\",{\"1\":{\"721\":1}}],[\"也可将俩数继续往下拆分\",{\"1\":{\"226\":1}}],[\"也可以是通过买入股票从sell转换而来\",{\"1\":{\"302\":1}}],[\"也可以是通过将持有股票卖掉从keep转换而来\",{\"1\":{\"301\":1}}],[\"也就不存在之前讨论的问题了\",{\"1\":{\"181\":1}}],[\"也就是说对于特定的值\",{\"1\":{\"128\":1}}],[\"也分两种情况\",{\"1\":{\"180\":1}}],[\"也只能滤掉起始索引为首个重复值的分块连续重复值情况\",{\"1\":{\"140\":1}}],[\"也常会实际构造多棵树\",{\"1\":{\"127\":1}}],[\"6\",{\"1\":{\"113\":3,\"671\":1,\"672\":1,\"707\":1,\"708\":1}}],[\"一致性哈希算法\",{\"1\":{\"781\":1}}],[\"一致性问题\",{\"1\":{\"775\":1,\"776\":1}}],[\"一定用不到第一次递减的b元素\",{\"1\":{\"723\":1}}],[\"一定消耗一次操作次数\",{\"1\":{\"250\":1}}],[\"一个人最初可以拥有任意数量的账户\",{\"1\":{\"620\":1}}],[\"一个一个数字试\",{\"1\":{\"36\":1}}],[\"一笔交易产生实质买卖利润至少需要两天\",{\"1\":{\"324\":1}}],[\"一是按照字典序优先该点恰好排在最后\",{\"1\":{\"180\":1}}],[\"一条斜线内都只能存在一个皇后\",{\"1\":{\"159\":1}}],[\"一列\",{\"1\":{\"159\":1}}],[\"一般用阿里云的223\",{\"1\":{\"113\":1}}],[\"学校宿舍校园移动宽带连不上\",{\"1\":{\"113\":1}}],[\"教研室用\",{\"1\":{\"112\":1}}],[\"教程\",{\"1\":{\"27\":2}}],[\"添加一条答案路径时必须由当前路径列表新建一个列表来添加\",{\"1\":{\"458\":1}}],[\"添加\",{\"1\":{\"104\":1}}],[\"using\",{\"1\":{\"977\":1}}],[\"useless\",{\"1\":{\"1046\":1,\"1050\":1}}],[\"useful\",{\"1\":{\"633\":1,\"978\":1}}],[\"used\",{\"1\":{\"148\":6,\"943\":1}}],[\"use\",{\"1\":{\"103\":1,\"105\":1,\"1040\":1,\"1066\":1,\"1068\":1}}],[\"u\",{\"1\":{\"664\":1,\"833\":1,\"905\":1,\"906\":1,\"919\":1}}],[\"uppercase\",{\"1\":{\"870\":1}}],[\"upwards\",{\"1\":{\"829\":1}}],[\"up\",{\"1\":{\"633\":1,\"833\":1,\"835\":1,\"837\":1,\"1064\":1}}],[\"upnp\",{\"1\":{\"115\":1}}],[\"uf\",{\"1\":{\"594\":3}}],[\"unnamed\",{\"1\":{\"942\":1}}],[\"undo\",{\"1\":{\"905\":1,\"906\":1}}],[\"until\",{\"1\":{\"822\":1,\"926\":1,\"1055\":1,\"1056\":1}}],[\"union\",{\"1\":{\"594\":2,\"602\":2,\"616\":2,\"626\":3,\"633\":11}}],[\"unionfind\",{\"1\":{\"594\":4}}],[\"unicode\",{\"1\":{\"39\":1,\"75\":1}}],[\"unlock\",{\"1\":{\"562\":4,\"576\":2}}],[\"unrob\",{\"1\":{\"213\":9,\"221\":2}}],[\"跟\",{\"1\":{\"102\":1}}],[\"执行时会自动重置系统变量\",{\"1\":{\"102\":1}}],[\"修改时记得同时改两行\",{\"1\":{\"100\":1}}],[\"修改时需同时变动两行\",{\"1\":{\"89\":1}}],[\"覆盖了\",{\"1\":{\"99\":1}}],[\"装的\",{\"1\":{\"96\":1}}],[\"启用虚拟目录功能\",{\"1\":{\"94\":1}}],[\"启用的主题色\",{\"1\":{\"25\":1}}],[\"周围添加新的侦听端口\",{\"1\":{\"93\":1}}],[\"端口不可用\",{\"1\":{\"93\":1}}],[\"虚拟主机配置文件\",{\"1\":{\"97\":1}}],[\"虚拟主机会将其覆盖\",{\"1\":{\"90\":1}}],[\"虚拟内网访问时\",{\"1\":{\"93\":1}}],[\"8\",{\"1\":{\"560\":1,\"645\":1,\"671\":1,\"672\":1}}],[\"80\",{\"1\":{\"91\":1,\"93\":1}}],[\"8e44ad\",{\"1\":{\"25\":1}}],[\"0000\",{\"1\":{\"647\":2}}],[\"0与9相邻\",{\"1\":{\"641\":1}}],[\"01\",{\"0\":{\"635\":1}}],[\"09\",{\"1\":{\"608\":1}}],[\"0d\",{\"1\":{\"594\":3}}],[\"0表示空白\",{\"1\":{\"629\":1}}],[\"0表示\",{\"1\":{\"590\":1}}],[\"0\",{\"1\":{\"91\":2,\"103\":1,\"129\":1,\"136\":2,\"142\":1,\"148\":3,\"156\":1,\"165\":4,\"173\":7,\"193\":1,\"203\":1,\"205\":1,\"210\":1,\"213\":4,\"221\":3,\"226\":3,\"244\":5,\"247\":1,\"273\":3,\"279\":2,\"280\":3,\"284\":7,\"294\":2,\"303\":6,\"304\":2,\"315\":4,\"326\":1,\"327\":3,\"328\":8,\"339\":3,\"346\":1,\"355\":2,\"356\":4,\"361\":2,\"362\":4,\"374\":4,\"387\":7,\"393\":4,\"406\":3,\"412\":2,\"435\":6,\"437\":2,\"440\":1,\"488\":5,\"489\":3,\"497\":1,\"517\":2,\"520\":3,\"544\":2,\"562\":8,\"568\":1,\"576\":1,\"585\":1,\"590\":1,\"594\":6,\"602\":9,\"606\":1,\"610\":12,\"616\":4,\"619\":1,\"626\":3,\"633\":24,\"637\":2,\"647\":7,\"653\":14,\"656\":1,\"661\":19,\"676\":6,\"682\":4,\"689\":1,\"703\":12,\"707\":2,\"708\":2,\"711\":4,\"724\":1,\"731\":3,\"742\":2,\"749\":4,\"757\":2,\"824\":1,\"944\":1,\"950\":1,\"974\":2}}],[\"k>\",{\"1\":{\"1030\":1}}],[\"kafka\",{\"1\":{\"795\":1}}],[\"ki​\",{\"1\":{\"706\":2}}],[\"k−1\",{\"1\":{\"701\":3}}],[\"kmp\",{\"0\":{\"433\":1},\"1\":{\"435\":2}}],[\"k2\",{\"1\":{\"315\":4}}],[\"k1\",{\"1\":{\"315\":4}}],[\"keep可由原有保持或前一天买入转移而来\",{\"1\":{\"335\":1}}],[\"keep2\",{\"1\":{\"312\":1,\"313\":1}}],[\"keep1\",{\"1\":{\"310\":1,\"311\":1}}],[\"keep\",{\"1\":{\"301\":1,\"302\":1,\"304\":4,\"321\":1,\"322\":1,\"328\":8,\"335\":1,\"337\":1,\"339\":4}}],[\"keyset\",{\"1\":{\"626\":1}}],[\"key\",{\"1\":{\"59\":1,\"60\":1,\"1023\":1,\"1043\":1}}],[\"keygen\",{\"1\":{\"59\":1,\"60\":1}}],[\"kul\",{\"1\":{\"182\":2,\"183\":1,\"184\":1,\"185\":1}}],[\"k\",{\"1\":{\"84\":1,\"85\":1,\"86\":1,\"171\":2,\"205\":5,\"249\":1,\"251\":2,\"252\":1,\"253\":5,\"254\":1,\"255\":5,\"324\":1,\"328\":8,\"439\":1,\"533\":1,\"626\":1,\"676\":7,\"809\":1,\"1007\":1,\"1025\":1,\"1030\":1,\"1052\":1,\"1066\":1}}],[\"访问教程\",{\"1\":{\"82\":1}}],[\"参考博客\",{\"1\":{\"108\":1,\"109\":1}}],[\"参考教程\",{\"1\":{\"81\":1}}],[\"参数是为了将包指定安装在\",{\"1\":{\"76\":1}}],[\"但应尽可能使紧接着c的元素满足非递减\",{\"1\":{\"721\":1}}],[\"但应该考虑充分利用已计算的数据\",{\"1\":{\"289\":1}}],[\"但不保证图连通\",{\"1\":{\"664\":1}}],[\"但每次只能转一个转盘的相邻数字\",{\"1\":{\"641\":1}}],[\"但是即使两个账户具有相同的名称\",{\"1\":{\"620\":1}}],[\"但是按照回溯时添加的解法\",{\"1\":{\"182\":1}}],[\"但其所有账户都具有相同的名称\",{\"1\":{\"620\":1}}],[\"但有一个特殊情况\",{\"1\":{\"519\":1}}],[\"但有几个点\",{\"1\":{\"170\":1}}],[\"但代码实现时基于已累乘结果\",{\"1\":{\"492\":1}}],[\"但起始索引能在下一层遍历选取时\",{\"1\":{\"467\":1}}],[\"但又同时是其前若干节点的根节点\",{\"1\":{\"439\":1}}],[\"但仅如此的话对主要影响并查集查询速度的集合高度并并无优化\",{\"1\":{\"429\":1}}],[\"但用到它的题一般不简单\",{\"1\":{\"423\":1}}],[\"但用移动的垃圾宽带会连不上\",{\"1\":{\"112\":1}}],[\"但需注意更新最终根节点的高度\",{\"1\":{\"428\":1}}],[\"但需确保序列中各元素的相对位置与原来一致\",{\"1\":{\"398\":1}}],[\"但需要关注的是哪些情况是需要实际移动才行的\",{\"1\":{\"372\":1}}],[\"但大可不必\",{\"1\":{\"345\":1}}],[\"但这并没影响\",{\"1\":{\"303\":1}}],[\"但这涉及到前俩的初始化值\",{\"1\":{\"211\":1}}],[\"但在回溯过程中途径的位置复用性极差\",{\"1\":{\"652\":1}}],[\"但在冷静期\",{\"1\":{\"339\":1}}],[\"但在任何时候最多只能持有一股股票\",{\"1\":{\"298\":1,\"307\":1,\"318\":1}}],[\"但在最后求得组合结果时显然会因为数值相同算作重复\",{\"1\":{\"134\":1}}],[\"但分鸡蛋有没有碎两种情况\",{\"1\":{\"250\":1}}],[\"但实际查询时会先进行带路径压缩操作的搜索\",{\"1\":{\"593\":1}}],[\"但实际上若数组全为负数就会导致此法失效\",{\"1\":{\"243\":1}}],[\"但实测保持软路由并直接在光猫上启用\",{\"1\":{\"114\":1}}],[\"但两种方向的斜线就稍显麻烦\",{\"1\":{\"163\":1}}],[\"但此题有几个针对性的小技巧和几个需要注意的点\",{\"1\":{\"161\":1}}],[\"但此题需要将所有树实际构造出来\",{\"1\":{\"125\":1}}],[\"但还有另一种不需要标记数组的回溯解法\",{\"1\":{\"153\":1}}],[\"但由于存在冷冻期\",{\"1\":{\"333\":1}}],[\"但由于能进行多笔交易且限制了交易上限\",{\"1\":{\"309\":1}}],[\"但由于此题求递增子序列要求元素相对位置不能变\",{\"1\":{\"140\":1}}],[\"但由于字符区间过长\",{\"1\":{\"39\":1}}],[\"但重复数字可以一起使用\",{\"1\":{\"132\":1}}],[\"但即使设成国外\",{\"1\":{\"113\":1}}],[\"但\",{\"1\":{\"79\":1}}],[\"提示\",{\"1\":{\"77\":1}}],[\"若其中的fgc列很大且一直增大则确认\",{\"1\":{\"802\":1}}],[\"若已发生则直接返回\",{\"1\":{\"723\":1}}],[\"若干人站成一排\",{\"1\":{\"714\":1}}],[\"若干数字的集合⾥有多少符合条件的⼦集\",{\"1\":{\"454\":1}}],[\"若干数字按⼀定规则全排列的不同排列方式数量\",{\"1\":{\"452\":1}}],[\"若干数字中按⼀定规则找出若干个数的集合\",{\"1\":{\"451\":1}}],[\"若此时发现无坑位\",{\"1\":{\"702\":1}}],[\"若与各候选变量都不同\",{\"1\":{\"702\":1}}],[\"若当前元素与某个剩余的变量相同\",{\"1\":{\"702\":1}}],[\"若从各位置往边界搜固然可达\",{\"1\":{\"652\":1}}],[\"若从删除的反面\",{\"1\":{\"261\":1}}],[\"若原本该位置就无砖块则填充后连通数量也必无变化\",{\"1\":{\"632\":1}}],[\"若消除的位置本就无砖块则无事发生\",{\"1\":{\"629\":1}}],[\"若存在无法推出的答案则用\",{\"1\":{\"590\":1}}],[\"若可同时被\",{\"1\":{\"558\":1}}],[\"若可被\",{\"1\":{\"556\":1,\"557\":1}}],[\"若可以绕环路行驶一周则返回出发时加油站的编号\",{\"1\":{\"378\":1}}],[\"若只有一个数只出现一次\",{\"1\":{\"517\":1}}],[\"若a≡bmodp\",{\"1\":{\"505\":1,\"506\":1,\"507\":1}}],[\"若逐项除再相乘\",{\"1\":{\"492\":1}}],[\"若相加结果的符号同时与两加数异号则发生溢出\",{\"1\":{\"489\":1}}],[\"若相同则公共子序列加一\",{\"1\":{\"261\":1}}],[\"若相同则必选当前数\",{\"1\":{\"141\":1}}],[\"若两个账户含相同邮箱地址\",{\"1\":{\"620\":1}}],[\"若两值相同则会出现\",{\"1\":{\"489\":1}}],[\"若两集合高度一样则随机确立父子关系\",{\"1\":{\"428\":1}}],[\"若每一\",{\"1\":{\"478\":1}}],[\"若每次都进行行\",{\"1\":{\"162\":1}}],[\"若题目仅要求求出不同组合的个数\",{\"1\":{\"468\":1}}],[\"若元素仅可使用一次\",{\"1\":{\"466\":1}}],[\"若元素可重复使用\",{\"1\":{\"465\":1}}],[\"若是多个互不影响的集合取组合\",{\"1\":{\"462\":1}}],[\"若在同一集合中求组合\",{\"1\":{\"461\":1}}],[\"若为有向无环图\",{\"1\":{\"445\":1}}],[\"若有向图中存在环\",{\"1\":{\"444\":1}}],[\"若上一支箭右侧还有其他未引爆气球的左边界\",{\"1\":{\"405\":1}}],[\"若到某个加油站后为负\",{\"1\":{\"380\":1}}],[\"若无法凑成则返回\",{\"1\":{\"353\":1}}],[\"若亏损则再强制等效于未进行买卖\",{\"1\":{\"327\":1}}],[\"若t\",{\"1\":{\"282\":1,\"283\":1}}],[\"若word1\",{\"1\":{\"267\":1}}],[\"若允许进行t次操作且有k个鸡蛋\",{\"1\":{\"249\":1}}],[\"若一个子数组的和恰为最大\",{\"1\":{\"240\":1}}],[\"若i\",{\"1\":{\"227\":1,\"228\":1}}],[\"若不同则从上一状态\",{\"1\":{\"261\":1}}],[\"若不存在出度为零的节点则可以顺畅地按照字典序优先完成\",{\"1\":{\"180\":1}}],[\"若不选则直接进入下一层递归\",{\"1\":{\"141\":1}}],[\"若选则按回溯规则在下一层递归前后进行处理和反处理\",{\"1\":{\"141\":1}}],[\"若想完全去除同层重复\",{\"1\":{\"140\":1}}],[\"若缺少此参数\",{\"1\":{\"76\":1}}],[\"若待生成的词句为汉字则得用\",{\"1\":{\"39\":1}}],[\"若待生成的词句为纯英文小写\",{\"1\":{\"39\":1}}],[\"才能使用这些模块\",{\"1\":{\"76\":1}}],[\"如把x所在集合向y所在集合联合\",{\"1\":{\"593\":1}}],[\"如\",{\"1\":{\"525\":1,\"670\":1,\"692\":1}}],[\"如无边图的任意节点排列都是拓扑排序\",{\"1\":{\"445\":1}}],[\"如prices\",{\"1\":{\"325\":1}}],[\"如果一支箭擦着所有气球中右边界最靠左的右边界将其引爆\",{\"1\":{\"404\":1}}],[\"如果到了才更新移动次数和移动起始点\",{\"1\":{\"372\":1}}],[\"如果搜到了无下游节点的节点就会进行回溯\",{\"1\":{\"180\":1}}],[\"如果需要像普通回溯那样添加回来\",{\"1\":{\"179\":1}}],[\"如1\",{\"1\":{\"140\":1}}],[\"如环境路径等变量\",{\"1\":{\"102\":1}}],[\"如此构建的并查集的所有节点都直接连接于根节点\",{\"1\":{\"592\":1}}],[\"如此可确保合并后集合高度不会大于原有的两集合\",{\"1\":{\"428\":1}}],[\"如此这支箭就能同样在保证引爆此气球的同时尽可能多地引爆右侧的气球\",{\"1\":{\"405\":1}}],[\"如此也可避免枚举左下三角的边缘条件的不便\",{\"1\":{\"292\":1}}],[\"如此遍历到最后一间\",{\"1\":{\"212\":1}}],[\"如此来保证进入下一层时标记索引左侧的数都是已选择的\",{\"1\":{\"154\":1}}],[\"如此\",{\"1\":{\"76\":1}}],[\"如链接为\",{\"1\":{\"48\":1}}],[\"所有节点分为两个独立集合\",{\"1\":{\"665\":1}}],[\"所有索引对即表示某些索引连通成若干集合\",{\"1\":{\"615\":1}}],[\"所有源单词中的字母通常恰好只用一次\",{\"1\":{\"524\":1}}],[\"所得即为该数\",{\"1\":{\"517\":1}}],[\"所以应将b降至c\",{\"1\":{\"721\":1}}],[\"所以应当存储并维护每行\",{\"1\":{\"162\":1}}],[\"所以得到邮箱对应的索引后还需要经过并查集找到可以作为合并标识的根\",{\"1\":{\"625\":1}}],[\"所以得按照片段长度下限来划分\",{\"1\":{\"392\":1}}],[\"所以用哈希表存各优先队列\",{\"1\":{\"615\":1}}],[\"所以先由并查集将所有索引对的信息翻译成字符串中的若干连通位置的集合\",{\"1\":{\"615\":1}}],[\"所以该边是当前连通路径的最大边\",{\"1\":{\"600\":1}}],[\"所以思考这个方法没有对应的回调\",{\"1\":{\"573\":1}}],[\"所以起始索引可以完全替代标记数组\",{\"1\":{\"467\":1}}],[\"所以重量并查集的节点从第二次查询开始会变得非常快\",{\"1\":{\"429\":1}}],[\"所以在每次迭代查找父节点时都可以顺便进行路径压缩\",{\"1\":{\"429\":1}}],[\"所以在每层回溯函数中待选的字符并不需要从某个起始索引开始\",{\"1\":{\"147\":1}}],[\"所以合并原则是令合并后集合的高度最小\",{\"1\":{\"428\":1}}],[\"所以一直重复此过程即可\",{\"1\":{\"405\":1}}],[\"所以一开始会有签名问题\",{\"1\":{\"96\":1}}],[\"所以自然需要先遍历一遍统计各字母的出现频率\",{\"1\":{\"392\":1}}],[\"所以自然需要考虑分割问题进行套用\",{\"1\":{\"240\":1}}],[\"所以对于有先后制约关系的遍历搜索可以套用拓扑排序模版\",{\"1\":{\"446\":1}}],[\"所以对于\",{\"1\":{\"383\":1}}],[\"所以对于i的拆分的最大乘积为遍历所有j的最大值\",{\"1\":{\"229\":1}}],[\"所以只需稍加试验即可得应按照升序进行抽取\",{\"1\":{\"710\":1}}],[\"所以只需要将原数组分为类似上述简化问题的两组再进行组内异或即可\",{\"1\":{\"518\":1}}],[\"所以只需要在遍历时累加每个加油站的补给量与到下个加油站的消耗量之差\",{\"1\":{\"380\":1}}],[\"所以只需在遍历时额外增加一个不会阶段性重置的统计变量即可\",{\"1\":{\"386\":1}}],[\"所以只能采用光猫桥接搭配路由器拨号上网的方式\",{\"1\":{\"114\":1}}],[\"所以不可简单通过每次更新后判断是否已经可达最后下标来直接结束\",{\"1\":{\"373\":1}}],[\"所以还需要记录上一次最远可达位置\",{\"1\":{\"372\":1}}],[\"所以无法像那题一样在一天内完成无数笔交易\",{\"1\":{\"333\":1}}],[\"所以无法通过排序将重复数字并到一块\",{\"1\":{\"140\":1}}],[\"所以最长相同子串的字符可不在原字符串中连续\",{\"1\":{\"261\":1}}],[\"所以最后应进行此情况的判断\",{\"1\":{\"243\":1}}],[\"所以貌似只需要同时求出不成环的原数组的最大和与最小和\",{\"1\":{\"243\":1}}],[\"所以抢第一间和最后一间就不能都抢\",{\"1\":{\"210\":1}}],[\"所以整个规划中节点添加的顺序恰好为字典序的逆序\",{\"1\":{\"181\":1}}],[\"所以解决问题的关键其实将节点添加入规划的时机\",{\"1\":{\"181\":1}}],[\"所以实际需要考虑的只有该点出现在搜索中间某处的情况\",{\"1\":{\"180\":1}}],[\"所以加下来从整体考虑是否会有这个问题\",{\"1\":{\"179\":1}}],[\"所以我们可以将两种方向的斜线分开编号\",{\"1\":{\"163\":1}}],[\"所以需要标记数组来记录本次排列哪些字符已经用过\",{\"1\":{\"147\":1}}],[\"所以需要加上限制条件禁止其中一种\",{\"1\":{\"141\":1}}],[\"所以递归终止条件为递归到达数据末尾\",{\"1\":{\"141\":1}}],[\"所以引入另一套更为通用的模版思想\",{\"1\":{\"141\":1}}],[\"所以此题再强行套用上述模版已不再是最优方案\",{\"1\":{\"140\":1}}],[\"所以也并不会影响到寻找需要同时用到多个重复数的子集\",{\"1\":{\"135\":1}}],[\"所以具体实现的时候只需要在同层遍历时进行判断\",{\"1\":{\"135\":1}}],[\"所以考虑先排序数组\",{\"1\":{\"134\":1}}],[\"所以\",{\"1\":{\"102\":1}}],[\"所以会阻止此类签名算法验证的登陆行为\",{\"1\":{\"58\":1}}],[\"所选用的字体宏包所识别的特定样式\",{\"1\":{\"79\":1}}],[\"所设置的模块路径中\",{\"1\":{\"76\":1}}],[\"安装会提示已存在一种样式\",{\"1\":{\"79\":1}}],[\"安装时会夹杂\",{\"1\":{\"77\":1}}],[\"安装\",{\"1\":{\"72\":1}}],[\"并查询小于当前遍历值的所有数的数量和\",{\"1\":{\"747\":1}}],[\"并查集位置使用i\",{\"1\":{\"632\":1}}],[\"并查集构建若干集合的缓存\",{\"1\":{\"426\":1}}],[\"并查集\",{\"0\":{\"425\":1,\"511\":1,\"577\":1}}],[\"并且考虑到左右子数组的有序性\",{\"1\":{\"755\":1}}],[\"并且相邻两人评分更高的分给更多糖果\",{\"1\":{\"714\":1}}],[\"并且当前插入者的第二属性恰好就是插入新队列的索引位置\",{\"1\":{\"710\":1}}],[\"并且有\",{\"1\":{\"443\":1}}],[\"并且在每天更新时无需将先更新的值用临时变量暂存\",{\"1\":{\"303\":1}}],[\"并且每次大循环开始前需确保对角线上的值已初始化\",{\"1\":{\"292\":1}}],[\"并且由于每次删除的字符位置可任选\",{\"1\":{\"261\":1}}],[\"并且由于下一层不关注起始索引之前的路径\",{\"1\":{\"135\":1}}],[\"并且也不存在需要像普通回溯那般撤销处理的操作\",{\"1\":{\"181\":1}}],[\"并且求的是路径沿途节点名字典序最小的那条\",{\"1\":{\"178\":1}}],[\"并且这样记录也恰好契合每层搜索基于行的形式\",{\"1\":{\"164\":1}}],[\"并且移动会屏蔽端口\",{\"1\":{\"114\":1}}],[\"并指向本机\",{\"1\":{\"119\":1}}],[\"并将\",{\"1\":{\"115\":1}}],[\"并不可行\",{\"1\":{\"114\":1}}],[\"并\",{\"1\":{\"71\":1}}],[\"$d\",{\"1\":{\"975\":1}}],[\"$home\",{\"1\":{\"75\":1,\"76\":1}}],[\"$\",{\"1\":{\"71\":1,\"74\":1,\"826\":1,\"975\":1}}],[\"$theme\",{\"1\":{\"25\":1}}],[\"和values\",{\"1\":{\"588\":1}}],[\"和整数\",{\"1\":{\"533\":1}}],[\"和keep\",{\"1\":{\"300\":1}}],[\"和s\",{\"1\":{\"289\":1}}],[\"和\",{\"1\":{\"68\":1,\"119\":1,\"126\":1,\"200\":1,\"210\":1,\"226\":1,\"558\":1,\"570\":1,\"572\":1,\"682\":1}}],[\"自己和所有子节点的数量\",{\"1\":{\"428\":1,\"429\":1}}],[\"自底向上返回遍历\",{\"1\":{\"218\":1}}],[\"自带\",{\"1\":{\"68\":1}}],[\"自定义截止数字\",{\"1\":{\"36\":1}}],[\"自定义容器\",{\"0\":{\"15\":1}}],[\"格式化\",{\"1\":{\"67\":1}}],[\"格式化问题\",{\"0\":{\"66\":1}}],[\"写作环境配置问题\",{\"1\":{\"67\":1}}],[\"写作参考\",{\"0\":{\"10\":1}}],[\"这实际上是一个求不断断开某些节点后连通量的问题\",{\"1\":{\"631\":1}}],[\"这题与\",{\"1\":{\"608\":1}}],[\"这样一来每个节点查询过后都能成为根节点的直接子节点\",{\"1\":{\"429\":1}}],[\"这样对于每个格子都可快速判断能否放置\",{\"1\":{\"162\":1}}],[\"这个累加值即为油箱含量\",{\"1\":{\"380\":1}}],[\"这个死胡同节点\",{\"1\":{\"182\":1}}],[\"这种情况则说明与之相对的最小和子数组不跨越原数组首尾\",{\"1\":{\"242\":1}}],[\"这种不用管\",{\"1\":{\"77\":1}}],[\"这就退化为普通数组求最大子数组和\",{\"1\":{\"241\":1}}],[\"这是默认路径\",{\"1\":{\"90\":1}}],[\"这是\",{\"1\":{\"67\":1}}],[\"这篇文章\",{\"1\":{\"58\":1}}],[\"源码跳\",{\"1\":{\"64\":1}}],[\"源码与\",{\"0\":{\"62\":1}}],[\"插件\",{\"1\":{\"67\":1}}],[\"插件且\",{\"1\":{\"63\":1}}],[\"插件配置\",{\"1\":{\"27\":1}}],[\"之所以\",{\"1\":{\"659\":1}}],[\"之间相互跳转\",{\"0\":{\"62\":1}}],[\"之后自动编译并部署\",{\"1\":{\"8\":1}}],[\"建议采用目前性能最好且最安全的eddsa算法\",{\"1\":{\"58\":1}}],[\"默认采用的\",{\"1\":{\"58\":1}}],[\"版本认为\",{\"1\":{\"58\":1}}],[\"文件最后配置允许使用\",{\"1\":{\"95\":1}}],[\"文件根目录\",{\"1\":{\"89\":1}}],[\"文件无法通过\",{\"1\":{\"67\":1}}],[\"文件较慢\",{\"1\":{\"56\":1}}],[\"文件被渲染成页面\",{\"1\":{\"24\":1}}],[\"网络连接问题\",{\"0\":{\"111\":1}}],[\"网络原因下载\",{\"1\":{\"56\":1}}],[\"网站\",{\"1\":{\"49\":1}}],[\"网站框架\",{\"1\":{\"1\":1}}],[\"选择保留两者即可\",{\"1\":{\"79\":1}}],[\"选择\",{\"1\":{\"54\":1,\"473\":1}}],[\"选择来源为从文本\",{\"1\":{\"51\":1}}],[\"耐心等待歌单转换完成\",{\"1\":{\"53\":1}}],[\"中心右端要么是其本身\",{\"1\":{\"730\":1}}],[\"中为邻接的不同节点\",{\"1\":{\"664\":1}}],[\"中按已排好的顺序取出拼接即可\",{\"1\":{\"615\":1}}],[\"中间技巧\",{\"0\":{\"485\":1}}],[\"中间的过程\",{\"1\":{\"181\":1}}],[\"中求组合的回溯模版\",{\"1\":{\"147\":1}}],[\"中的出现次数\",{\"1\":{\"276\":1}}],[\"中的\",{\"1\":{\"116\":1}}],[\"中的文件根目录\",{\"1\":{\"99\":1}}],[\"中的步骤\",{\"1\":{\"46\":1}}],[\"中添加\",{\"1\":{\"71\":1}}],[\"中\",{\"1\":{\"50\":1,\"606\":1,\"775\":1}}],[\"中将文字形式的歌单导入至\",{\"1\":{\"50\":1}}],[\"中将歌单转为文字形式\",{\"1\":{\"49\":1}}],[\"的持续变化情况\",{\"1\":{\"802\":1}}],[\"的可靠性\",{\"1\":{\"794\":1}}],[\"的锁\",{\"1\":{\"777\":1}}],[\"的索引对\",{\"1\":{\"752\":1}}],[\"的值是nums\",{\"1\":{\"745\":1}}],[\"的元素的数量\",{\"1\":{\"745\":1}}],[\"的元素\",{\"1\":{\"701\":1}}],[\"的池底高度\",{\"1\":{\"605\":1}}],[\"的最大值为该路径的差值\",{\"1\":{\"598\":1}}],[\"的最长回文子序列长度\",{\"1\":{\"289\":1}}],[\"的情况\",{\"1\":{\"594\":1}}],[\"的二进制位\",{\"1\":{\"518\":1}}],[\"的二进制中从最低位到高位连续零的长度\",{\"1\":{\"439\":1}}],[\"的错误\",{\"1\":{\"489\":1}}],[\"的幂次方\",{\"1\":{\"488\":1}}],[\"的位数\",{\"1\":{\"488\":1}}],[\"的位置来避免卡死\",{\"1\":{\"440\":1}}],[\"的过程\",{\"1\":{\"473\":1}}],[\"的状态转移信息\",{\"1\":{\"435\":1}}],[\"的数组\",{\"1\":{\"428\":1,\"429\":1}}],[\"的下一个加油站\",{\"1\":{\"385\":1}}],[\"的s前j个字符的子序列中不可能恰出现t的前i个字符\",{\"1\":{\"282\":1}}],[\"的题目\",{\"1\":{\"240\":1}}],[\"的长度\",{\"1\":{\"234\":1,\"541\":1}}],[\"的正整数\",{\"1\":{\"224\":1}}],[\"的不同搜索树数量\",{\"1\":{\"201\":1,\"202\":1}}],[\"的遍历查找肯定很慢\",{\"1\":{\"162\":1}}],[\"的模版\",{\"1\":{\"140\":1}}],[\"的扩展库文件需要手动拷贝到安装路径中去\",{\"1\":{\"107\":1}}],[\"的\",{\"1\":{\"49\":1,\"769\":3,\"774\":1}}],[\"项目\",{\"1\":{\"49\":1}}],[\"凭借\",{\"1\":{\"49\":1}}],[\"为什么线程不安全\",{\"1\":{\"780\":1}}],[\"为人名\",{\"1\":{\"619\":1}}],[\"为方便起见\",{\"1\":{\"519\":1}}],[\"为达此目的\",{\"1\":{\"518\":1}}],[\"为避免索引更新死循环\",{\"1\":{\"440\":1}}],[\"为i处加油站提供的汽油补给量\",{\"1\":{\"377\":1}}],[\"为恰凑成总金额i的硬币数\",{\"1\":{\"355\":1,\"361\":1}}],[\"为确保能够成功转移\",{\"1\":{\"292\":1}}],[\"为左右边界\",{\"1\":{\"289\":1}}],[\"为word1前i个字符与word2前j个字符之间的编辑距离\",{\"1\":{\"267\":1}}],[\"为前一单词的前i个字符与后一单词的前j个字符中的最长公共子序列的长度\",{\"1\":{\"261\":1}}],[\"为允许进行t次操作且有k个鸡蛋的条件下楼高n的最大值\",{\"1\":{\"249\":1}}],[\"为遍历到i时获得的最大金额\",{\"1\":{\"211\":1}}],[\"为根节点的搜索树来说\",{\"1\":{\"203\":1}}],[\"为根节点且长度为\",{\"1\":{\"202\":1}}],[\"为\",{\"1\":{\"48\":1,\"439\":1}}],[\"则伺机选取坑位占据\",{\"1\":{\"702\":1}}],[\"则将其计数加一\",{\"1\":{\"702\":1}}],[\"则将此时正遍历的账户与已存在邮箱所对应的账户进行合并\",{\"1\":{\"624\":1}}],[\"则对于i作为翻转对的左元素的情况来说\",{\"1\":{\"755\":1}}],[\"则对于∀c\",{\"1\":{\"505\":1,\"506\":1}}],[\"则对每种进行计数核查是否符合要求\",{\"1\":{\"701\":1}}],[\"则说明已凑够一组不同元素\",{\"1\":{\"702\":1}}],[\"则说明存在不长于当前路径的另一更优路径\",{\"1\":{\"659\":1}}],[\"则说明前段旅程总消耗量为负\",{\"1\":{\"380\":1}}],[\"则直接返回\",{\"1\":{\"646\":1}}],[\"则变化量减一\",{\"1\":{\"632\":1}}],[\"则认为两账户属于同一个人\",{\"1\":{\"620\":1}}],[\"则该边即为所求\",{\"1\":{\"600\":1}}],[\"则显然有weight\",{\"1\":{\"593\":1}}],[\"则显然可分为子序列中是否含s\",{\"1\":{\"283\":1}}],[\"则任取一位为\",{\"1\":{\"518\":1}}],[\"则只需要对整个数组进行异或操作\",{\"1\":{\"517\":1}}],[\"则只需在所有dp值中找出满足不小于n所对应的最小t值\",{\"1\":{\"249\":1}}],[\"则必有且仅有n\",{\"1\":{\"583\":1}}],[\"则必可保证累乘结果始终为整数\",{\"1\":{\"492\":1}}],[\"则必须得加多一支箭\",{\"1\":{\"405\":1}}],[\"则无需标记数组\",{\"1\":{\"465\":1}}],[\"则无需起始索引\",{\"1\":{\"462\":1}}],[\"则需要标记\",{\"1\":{\"466\":1}}],[\"则需要确保当前遍历到的值与之前所有值都不同\",{\"1\":{\"140\":1}}],[\"则需起始索引控制各层循环的起始位置\",{\"1\":{\"461\":1}}],[\"则其拓扑排序可能不止一种\",{\"1\":{\"445\":1}}],[\"则其不存在拓扑排序\",{\"1\":{\"444\":1}}],[\"则剩余区间为与原始问题相同的子问题\",{\"1\":{\"411\":1}}],[\"则不能绕完一整圈\",{\"1\":{\"386\":1}}],[\"则不可抢其左右子节点\",{\"1\":{\"219\":1}}],[\"则有\",{\"1\":{\"381\":1,\"507\":1}}],[\"则有dp\",{\"1\":{\"211\":1}}],[\"则第i天能获得的最大利润为\",{\"1\":{\"334\":1}}],[\"则后续更新sell\",{\"1\":{\"303\":1}}],[\"则回文问题就变成了求两字符串的最长公共子序列问题\",{\"1\":{\"293\":1}}],[\"则含新增字符s\",{\"1\":{\"282\":1}}],[\"则待确定楼层在此次扔鸡蛋的下方\",{\"1\":{\"251\":1}}],[\"则dp\",{\"1\":{\"227\":1,\"228\":1}}],[\"则子节点抢不抢都行\",{\"1\":{\"220\":1}}],[\"则可将\",{\"1\":{\"478\":1}}],[\"则可以继续递归遍历尝试构建搜索子树\",{\"1\":{\"126\":1,\"200\":1}}],[\"则可利用\",{\"1\":{\"39\":1}}],[\"则左右子树节点序列为\",{\"1\":{\"126\":1,\"200\":1}}],[\"则\",{\"1\":{\"48\":1,\"76\":1,\"267\":1,\"300\":1,\"320\":1}}],[\"ysaptli>\",{\"1\":{\"1019\":1}}],[\"ys\",{\"1\":{\"1013\":1,\"1018\":1}}],[\"yi\",{\"1\":{\"933\":1}}],[\"yh\",{\"1\":{\"930\":1}}],[\"yl\",{\"1\":{\"929\":1}}],[\"yy\",{\"1\":{\"879\":1,\"936\":1}}],[\"yas\",{\"1\":{\"932\":1}}],[\"yaw\",{\"1\":{\"931\":1}}],[\"yanked\",{\"1\":{\"944\":1}}],[\"yanka\",{\"1\":{\"929\":1,\"930\":1}}],[\"yank\",{\"1\":{\"866\":1,\"931\":1,\"932\":1,\"933\":1,\"935\":1,\"944\":1,\"978\":1}}],[\"yaml\",{\"1\":{\"75\":1}}],[\"y根节点为ry\",{\"1\":{\"593\":1}}],[\"y=v\",{\"1\":{\"593\":1}}],[\"y\",{\"1\":{\"48\":1,\"381\":1,\"382\":1,\"383\":1,\"385\":1,\"493\":3,\"497\":7,\"593\":1,\"594\":6,\"602\":2,\"616\":2,\"626\":2,\"633\":8,\"837\":1,\"866\":1,\"879\":1,\"941\":1}}],[\"h>\",{\"1\":{\"1028\":1}}],[\"half\",{\"1\":{\"832\":1,\"833\":1}}],[\"hash\",{\"1\":{\"781\":1}}],[\"hashmap\",{\"1\":{\"780\":1}}],[\"hashmap<integer\",{\"1\":{\"616\":1}}],[\"hashmap<>\",{\"1\":{\"193\":1,\"530\":1,\"594\":1,\"616\":1,\"626\":2}}],[\"hashset<>\",{\"1\":{\"544\":1,\"647\":1}}],[\"has\",{\"1\":{\"165\":3,\"997\":1}}],[\"h\",{\"1\":{\"811\":1,\"917\":1,\"1007\":1,\"1028\":1}}],[\"hp\",{\"1\":{\"799\":1}}],[\"highlights\",{\"1\":{\"1032\":1}}],[\"hi​\",{\"1\":{\"706\":3}}],[\"hit\",{\"1\":{\"633\":5}}],[\"hits\",{\"1\":{\"633\":6}}],[\"hitbricks\",{\"1\":{\"633\":1}}],[\"height\",{\"1\":{\"742\":8}}],[\"heights\",{\"1\":{\"602\":7,\"653\":8}}],[\"hello\",{\"1\":{\"693\":1,\"694\":1,\"863\":2}}],[\"h2\",{\"1\":{\"114\":1}}],[\"h5\",{\"1\":{\"103\":1}}],[\"http\",{\"1\":{\"99\":1,\"103\":2,\"105\":1,\"789\":1}}],[\"httpd\",{\"1\":{\"87\":1,\"94\":1,\"97\":1}}],[\"https\",{\"1\":{\"48\":1,\"82\":1,\"434\":1,\"789\":1}}],[\"html\",{\"1\":{\"48\":1,\"896\":1}}],[\"horizontal\",{\"1\":{\"999\":1}}],[\"house\",{\"1\":{\"213\":4}}],[\"homedir\",{\"1\":{\"75\":1}}],[\"home\",{\"1\":{\"27\":2}}],[\"hope\",{\"1\":{\"2\":1,\"27\":1}}],[\"音乐的歌单转移到\",{\"1\":{\"46\":1}}],[\"qall\",{\"1\":{\"962\":1,\"964\":1}}],[\"qa\",{\"1\":{\"962\":1,\"964\":1}}],[\"quit\",{\"1\":{\"956\":1}}],[\"quoted\",{\"1\":{\"893\":1}}],[\"que\",{\"1\":{\"647\":6,\"661\":6}}],[\"query\",{\"1\":{\"594\":2}}],[\"queries\",{\"1\":{\"594\":5}}],[\"queue<int\",{\"1\":{\"661\":1}}],[\"queue<integer>\",{\"1\":{\"418\":1}}],[\"queue<string>\",{\"1\":{\"647\":1}}],[\"queue\",{\"1\":{\"418\":6}}],[\"queen\",{\"1\":{\"165\":3}}],[\"queens\",{\"1\":{\"165\":5}}],[\"question\",{\"1\":{\"27\":1}}],[\"q\",{\"1\":{\"165\":1,\"956\":1,\"959\":1}}],[\"qos\",{\"1\":{\"115\":1}}],[\"qq\",{\"1\":{\"46\":1,\"48\":1}}],[\"歌单转移\",{\"0\":{\"45\":1}}],[\"熊宝生日快乐\",{\"1\":{\"43\":1}}],[\"野鹤奔向闲云\",{\"1\":{\"43\":1}}],[\"月亮照回湖心\",{\"1\":{\"43\":1}}],[\"w>\",{\"1\":{\"1001\":1,\"1004\":1,\"1007\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1031\":1}}],[\"wqall\",{\"1\":{\"963\":1}}],[\"wqa\",{\"1\":{\"963\":1}}],[\"wq\",{\"1\":{\"960\":1}}],[\"write\",{\"1\":{\"955\":1}}],[\"wrapped\",{\"1\":{\"808\":1,\"810\":1}}],[\"window\",{\"1\":{\"1006\":1}}],[\"will\",{\"1\":{\"935\":1,\"976\":1,\"1020\":1}}],[\"without\",{\"1\":{\"886\":1,\"959\":1,\"964\":1}}],[\"with\",{\"1\":{\"626\":1,\"633\":2,\"953\":2,\"957\":1,\"976\":1,\"977\":1,\"988\":1,\"1019\":1,\"1040\":1,\"1058\":1}}],[\"w\",{\"1\":{\"813\":1,\"814\":1,\"888\":1,\"918\":1,\"955\":1,\"958\":1,\"1044\":1}}],[\"weight\",{\"1\":{\"593\":2,\"594\":10,\"633\":7}}],[\"webserver\",{\"1\":{\"88\":1,\"98\":1}}],[\"when\",{\"1\":{\"935\":1}}],[\"where\",{\"1\":{\"562\":1}}],[\"which\",{\"1\":{\"942\":1,\"943\":1}}],[\"whitespace\",{\"1\":{\"885\":1,\"886\":1}}],[\"while\",{\"1\":{\"193\":1,\"418\":1,\"424\":1,\"488\":1,\"495\":1,\"544\":1,\"562\":4,\"585\":1,\"594\":1,\"602\":1,\"610\":1,\"616\":1,\"626\":1,\"633\":1,\"647\":2,\"661\":2,\"676\":1,\"682\":1,\"689\":1,\"731\":1,\"742\":1,\"757\":1}}],[\"whole\",{\"1\":{\"838\":1,\"873\":1,\"877\":1,\"879\":1,\"973\":1,\"990\":1,\"993\":1}}],[\"world\",{\"1\":{\"693\":1,\"694\":1}}],[\"words\",{\"1\":{\"903\":1,\"1044\":1,\"1045\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1050\":1}}],[\"word\",{\"1\":{\"437\":5,\"813\":1,\"814\":1,\"815\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1,\"848\":1,\"849\":1,\"888\":1,\"918\":1,\"931\":1,\"1060\":1,\"1061\":1,\"1062\":1}}],[\"word2\",{\"1\":{\"262\":3,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"272\":1,\"273\":3}}],[\"word1\",{\"1\":{\"262\":3,\"273\":3}}],[\"workshop\",{\"1\":{\"63\":1,\"67\":1}}],[\"wget\",{\"1\":{\"103\":1}}],[\"wget下载举例\",{\"1\":{\"103\":1}}],[\"wm=1999\",{\"1\":{\"43\":1}}],[\"wm\",{\"1\":{\"43\":4}}],[\"ways\",{\"1\":{\"969\":1}}],[\"wall\",{\"1\":{\"961\":1}}],[\"wa\",{\"1\":{\"961\":1}}],[\"wantstoeat\",{\"1\":{\"568\":1,\"576\":1}}],[\"wait可由原有保持或由冷静期转移而来\",{\"1\":{\"336\":1}}],[\"wait\",{\"1\":{\"335\":1,\"336\":1,\"339\":5}}],[\"watermark\",{\"1\":{\"43\":3}}],[\"warning\",{\"1\":{\"16\":1}}],[\"将给定数组向右轮转k个位置\",{\"1\":{\"760\":1}}],[\"将给定英文句子字符串的单词逆序\",{\"1\":{\"692\":1}}],[\"将原数组去重再排序并由此建立树状数组\",{\"1\":{\"747\":1}}],[\"将各中心向两侧尽可能延伸\",{\"1\":{\"729\":1}}],[\"将属性数组重建为有序的并返回\",{\"1\":{\"706\":1}}],[\"将搜索过的组合缓存标记\",{\"1\":{\"645\":1}}],[\"将所有邮箱按合并标识进行合并\",{\"1\":{\"625\":1}}],[\"将所有相邻元素差值当作节点的边长进行排序\",{\"1\":{\"600\":1}}],[\"将字符串数组中的字母异位词组合在一起\",{\"1\":{\"525\":1}}],[\"将其拆分为两个及以上正整数之和\",{\"1\":{\"224\":1}}],[\"将n个皇后放入n\",{\"1\":{\"159\":1}}],[\"将当前排列复制一份加入到答案中\",{\"1\":{\"155\":1}}],[\"将标记索引指向的数与选中的数互换\",{\"1\":{\"154\":1}}],[\"将重复的数字并在一起在相邻的层进行连续处理\",{\"1\":{\"134\":1}}],[\"将上网方式改为宽带拨号上网并填入宽带帐密\",{\"1\":{\"118\":1}}],[\"将\",{\"1\":{\"94\":1,\"477\":1}}],[\"将对小熊的生日祝福嵌入图片中\",{\"1\":{\"42\":1}}],[\"将数字对应的字符连起来可组成正常语义的词句\",{\"1\":{\"36\":1}}],[\"利用多线程实现进餐规则\",{\"1\":{\"567\":1}}],[\"利用状态机模型归纳后考虑设置三种状态\",{\"1\":{\"334\":1}}],[\"利用隐写技术\",{\"1\":{\"42\":1}}],[\"利用伪随机算法\",{\"1\":{\"36\":1}}],[\"编号\",{\"1\":{\"568\":1}}],[\"编辑距离\",{\"0\":{\"263\":1}}],[\"编译\",{\"0\":{\"106\":1}}],[\"编码映射\",{\"1\":{\"39\":1}}],[\"编写时开本地服务器实时查看修改效果\",{\"1\":{\"6\":1}}],[\"9\",{\"1\":{\"173\":8,\"641\":1,\"647\":1,\"671\":1,\"672\":1,\"945\":2}}],[\"9数独\",{\"1\":{\"168\":1}}],[\"9999\",{\"1\":{\"93\":1}}],[\"96\",{\"1\":{\"39\":1}}],[\"97\",{\"1\":{\"39\":1,\"434\":1}}],[\"可额外执行jstat\",{\"1\":{\"802\":1}}],[\"可参考民间题解\",{\"1\":{\"756\":1}}],[\"可进一步实时遍历判断方向与斜线收尾的方法\",{\"1\":{\"675\":1}}],[\"可从周围可达的上下左右连通块游向该块\",{\"1\":{\"605\":1}}],[\"可能存在节点之间无连通路径的情况\",{\"1\":{\"664\":1}}],[\"可能会为同一个哲学家多次调用该函数\",{\"1\":{\"574\":1}}],[\"可能有几种问题\",{\"1\":{\"112\":1}}],[\"可作为键来收集同种异位词\",{\"1\":{\"529\":1}}],[\"可考虑用动态规划来做\",{\"1\":{\"468\":1}}],[\"可通过函数\",{\"1\":{\"439\":1}}],[\"可通过二维动态规划来解决\",{\"1\":{\"261\":1}}],[\"可不连续\",{\"1\":{\"276\":1}}],[\"可令\",{\"1\":{\"218\":1}}],[\"可以顺便求出索引恰分别在左右子数组中的翻转对数量\",{\"1\":{\"754\":1}}],[\"可以顺便绑定下\",{\"1\":{\"119\":1}}],[\"可以转化为单点更新\",{\"1\":{\"747\":1}}],[\"可以斜着走\",{\"1\":{\"656\":1}}],[\"可以直接并在给定的限制组合集中\",{\"1\":{\"645\":1}}],[\"可以将中心的左右端点并在一个循环中进行枚举\",{\"1\":{\"730\":1}}],[\"可以将accounts\",{\"1\":{\"624\":1}}],[\"可以将给定数据整理成拓扑排序那般的哈希表\",{\"1\":{\"179\":1}}],[\"可以任意多次交换索引对中任意一对索引处的字符\",{\"1\":{\"613\":1}}],[\"可以首先将索引与高度关系反转存储以备查询\",{\"1\":{\"609\":1}}],[\"可以确保两数被分到不同组\",{\"1\":{\"518\":1}}],[\"可以基于原数组构建树状数组\",{\"1\":{\"439\":1}}],[\"可以是原本就持有\",{\"1\":{\"302\":1}}],[\"可以是原本就未持有\",{\"1\":{\"301\":1}}],[\"可以不连续\",{\"1\":{\"234\":1}}],[\"可以打住直接求俩数之积\",{\"1\":{\"226\":1}}],[\"可以发现顺序是死胡同节点向上到有其他下游节点的节点\",{\"1\":{\"181\":1}}],[\"可以发现依次为向下深入到死胡同节点\",{\"1\":{\"181\":1}}],[\"可以在初始因维护上述状态而进行格子遍历时顺便将待填充的格子的位置记下来\",{\"1\":{\"172\":1}}],[\"可以遍历取特定数\",{\"1\":{\"126\":1,\"200\":1}}],[\"可取为\",{\"1\":{\"39\":1}}],[\"可在\",{\"1\":{\"24\":1}}],[\"1次\",{\"1\":{\"730\":1}}],[\"1次操作且有k\",{\"1\":{\"251\":1}}],[\"10\",{\"1\":{\"647\":2,\"968\":2,\"970\":1,\"971\":1}}],[\"107\",{\"1\":{\"103\":1}}],[\"1条边\",{\"1\":{\"583\":1}}],[\"14\",{\"1\":{\"560\":1}}],[\"11\",{\"1\":{\"560\":1}}],[\"15时输出1\",{\"1\":{\"560\":1}}],[\"1个字符的所有子序列都新增一个相同字符\",{\"1\":{\"283\":1}}],[\"1个字符的次数\",{\"1\":{\"282\":1}}],[\"1个字符和t的前i\",{\"1\":{\"283\":1}}],[\"1个字符完成编辑的基础上\",{\"1\":{\"268\":1,\"269\":1}}],[\"1个字符与word2前j个字符完成编辑的基础上\",{\"1\":{\"270\":1}}],[\"1个字符与word2前j\",{\"1\":{\"268\":1}}],[\"1枚鸡蛋\",{\"1\":{\"251\":1}}],[\"1时有dp\",{\"1\":{\"253\":2}}],[\"1时\",{\"1\":{\"226\":1}}],[\"168\",{\"1\":{\"103\":1}}],[\"16a085\",{\"1\":{\"25\":1}}],[\"12\",{\"1\":{\"968\":1}}],[\"12d\",{\"1\":{\"968\":1,\"970\":1}}],[\"127\",{\"1\":{\"91\":1}}],[\"123\",{\"1\":{\"39\":1}}],[\"1\",{\"1\":{\"58\":1,\"91\":1,\"108\":1,\"126\":2,\"129\":3,\"136\":2,\"140\":3,\"142\":4,\"148\":3,\"156\":1,\"165\":5,\"173\":4,\"193\":1,\"200\":2,\"203\":1,\"205\":5,\"210\":2,\"211\":1,\"213\":3,\"221\":5,\"224\":1,\"226\":2,\"231\":2,\"247\":1,\"251\":4,\"252\":1,\"253\":7,\"255\":13,\"262\":11,\"268\":2,\"269\":1,\"270\":1,\"271\":5,\"272\":15,\"273\":15,\"279\":1,\"284\":9,\"290\":1,\"291\":1,\"292\":1,\"294\":8,\"301\":2,\"302\":2,\"303\":2,\"304\":1,\"310\":1,\"311\":2,\"312\":3,\"313\":2,\"314\":1,\"315\":1,\"321\":3,\"322\":2,\"325\":1,\"328\":5,\"335\":2,\"336\":2,\"337\":1,\"339\":1,\"346\":3,\"353\":1,\"355\":1,\"356\":4,\"361\":1,\"362\":4,\"374\":1,\"378\":1,\"387\":2,\"393\":2,\"406\":10,\"412\":3,\"418\":3,\"435\":5,\"488\":9,\"493\":2,\"495\":1,\"518\":1,\"519\":1,\"520\":1,\"544\":3,\"547\":1,\"555\":1,\"562\":1,\"576\":1,\"585\":3,\"590\":1,\"594\":5,\"602\":5,\"610\":7,\"616\":1,\"626\":1,\"633\":23,\"637\":2,\"642\":1,\"647\":2,\"653\":7,\"661\":21,\"671\":1,\"672\":1,\"676\":3,\"682\":5,\"686\":1,\"689\":5,\"707\":2,\"708\":2,\"711\":3,\"724\":8,\"731\":4,\"734\":2,\"742\":1,\"749\":5,\"757\":7,\"945\":1}}],[\"13\",{\"1\":{\"58\":1,\"560\":1}}],[\"1736483147\",{\"1\":{\"48\":1}}],[\">>\",{\"1\":{\"731\":2,\"881\":1}}],[\">>>\",{\"1\":{\"488\":1}}],[\">=\",{\"1\":{\"253\":2,\"255\":1,\"294\":1,\"346\":1,\"610\":2,\"633\":3,\"653\":3,\"661\":2,\"676\":1,\"682\":1,\"731\":1,\"749\":1}}],[\">\",{\"1\":{\"39\":1,\"129\":1,\"136\":1,\"140\":1,\"142\":1,\"148\":1,\"173\":1,\"183\":1,\"186\":1,\"187\":1,\"193\":1,\"226\":1,\"356\":1,\"362\":1,\"406\":2,\"412\":1,\"489\":2,\"592\":1,\"594\":2,\"602\":4,\"616\":1,\"626\":2,\"633\":1,\"647\":1,\"661\":2,\"682\":1,\"689\":1,\"703\":6,\"711\":2,\"720\":1,\"722\":1,\"724\":3,\"742\":1,\"749\":1,\"752\":1,\"757\":2,\"871\":1,\"894\":1,\"946\":1,\"976\":1}}],[\"<cmd\",{\"1\":{\"1062\":1}}],[\"<ctrl\",{\"1\":{\"1001\":1,\"1004\":1,\"1007\":1,\"1028\":2,\"1029\":2,\"1030\":2,\"1031\":2,\"1065\":1}}],[\"<leader><leader>\",{\"1\":{\"1043\":1}}],[\"<leader>\",{\"1\":{\"1026\":1}}],[\"<li>\",{\"1\":{\"1019\":1}}],[\"<space>\",{\"1\":{\"1023\":1}}],[\"<>\",{\"1\":{\"894\":1}}],[\"<enter>\",{\"1\":{\"844\":1,\"847\":2,\"857\":1,\"858\":1}}],[\"<<\",{\"1\":{\"757\":3,\"882\":1}}],[\"<<=\",{\"1\":{\"757\":1}}],[\"<i=x∑y​cost\",{\"1\":{\"382\":1,\"384\":1}}],[\"<=\",{\"1\":{\"129\":1,\"142\":1,\"205\":2,\"213\":1,\"226\":1,\"231\":1,\"255\":3,\"262\":2,\"272\":2,\"273\":4,\"279\":2,\"280\":1,\"346\":1,\"356\":1,\"362\":1,\"488\":1,\"493\":1,\"495\":1,\"562\":4,\"585\":1,\"610\":1,\"633\":1,\"720\":1,\"721\":1,\"757\":4}}],[\"<\",{\"1\":{\"39\":1,\"136\":2,\"148\":2,\"156\":1,\"165\":3,\"173\":3,\"226\":1,\"231\":1,\"280\":1,\"284\":4,\"294\":1,\"304\":1,\"315\":1,\"328\":2,\"339\":1,\"374\":1,\"387\":3,\"393\":2,\"406\":3,\"412\":1,\"418\":1,\"424\":1,\"435\":3,\"437\":2,\"489\":2,\"576\":1,\"594\":3,\"602\":3,\"610\":6,\"616\":3,\"626\":3,\"633\":7,\"647\":1,\"653\":6,\"661\":2,\"676\":4,\"682\":2,\"689\":2,\"724\":1,\"731\":2,\"742\":2,\"749\":1,\"752\":1,\"757\":3,\"872\":1,\"894\":1,\"976\":1}}],[\"zb\",{\"1\":{\"841\":1}}],[\"zt\",{\"1\":{\"840\":1}}],[\"zz\",{\"1\":{\"839\":1}}],[\"zset\",{\"1\":{\"769\":1}}],[\"zshrc\",{\"1\":{\"71\":1}}],[\"zip\",{\"1\":{\"103\":1}}],[\"zerotier\",{\"1\":{\"93\":1,\"112\":1}}],[\"z\",{\"1\":{\"39\":1,\"943\":1,\"1039\":1,\"1040\":1}}],[\"zh\",{\"1\":{\"27\":4}}],[\"zhsidebarconfig\",{\"1\":{\"27\":1}}],[\"码进行映射\",{\"1\":{\"39\":1}}],[\"故树状数组中各值的数量即为当前遍历值右侧的数据\",{\"1\":{\"747\":1}}],[\"故合并为两指针同时相向移动\",{\"1\":{\"741\":1}}],[\"故移动较高的指针必不可能获得更大的储水量\",{\"1\":{\"740\":1}}],[\"故每次移动横向距离减小\",{\"1\":{\"740\":1}}],[\"故每次只需考虑向左上的连通\",{\"1\":{\"632\":1}}],[\"故索引呈现强烈的奇偶规律性\",{\"1\":{\"730\":1}}],[\"故上述第一种情况下无需实际地改变b的值\",{\"1\":{\"723\":1}}],[\"故先拟定\",{\"1\":{\"701\":1}}],[\"故返回时将长度\",{\"1\":{\"682\":1}}],[\"故用\",{\"1\":{\"645\":1}}],[\"故用动态规划来做\",{\"1\":{\"226\":1}}],[\"故还是得通过搜索来判断\",{\"1\":{\"645\":1}}],[\"故需要维护各根节点的节点数量\",{\"1\":{\"632\":1}}],[\"故采用索引来避免直接使用人名\",{\"1\":{\"624\":1}}],[\"故采用并查集实现\",{\"1\":{\"601\":1}}],[\"故查得结果时必所有节点都已直接相连与根节点\",{\"1\":{\"593\":1}}],[\"故有且仅有唯一一条冗余边\",{\"1\":{\"583\":1}}],[\"故有dp\",{\"1\":{\"290\":1}}],[\"故其最低有效为为其本身\",{\"1\":{\"519\":1}}],[\"故某节点的值最终为以其为根的子树所有节点值之和\",{\"1\":{\"439\":1}}],[\"故初始条件应将硬币数设为不能达到的大数\",{\"1\":{\"355\":1,\"361\":1}}],[\"故初始条件dp\",{\"1\":{\"226\":1}}],[\"故可借助整个归并排序过程逐渐求出所有翻转对\",{\"1\":{\"754\":1}}],[\"故可以用双指针由两端逐渐逼近\",{\"1\":{\"688\":1}}],[\"故可看作与顺序相关的完全背包问题\",{\"1\":{\"345\":1}}],[\"故可将数组压缩为单一变量\",{\"1\":{\"303\":1}}],[\"故必须得先缓存至少一个变量的值\",{\"1\":{\"338\":1}}],[\"故cool\",{\"1\":{\"337\":1}}],[\"故wait\",{\"1\":{\"336\":1}}],[\"故实际上可以将每笔交易都割裂开来计算\",{\"1\":{\"333\":1}}],[\"故对于每一笔交易来说都有可能强制将本为负的买卖利润强行拉至\",{\"1\":{\"327\":1}}],[\"故对于上一层来说\",{\"1\":{\"128\":1}}],[\"故答案为sell\",{\"1\":{\"303\":1}}],[\"故利润keep\",{\"1\":{\"303\":1}}],[\"故keep2\",{\"1\":{\"312\":1}}],[\"故keep1\",{\"1\":{\"310\":1}}],[\"故keep\",{\"1\":{\"302\":1,\"321\":1,\"335\":1}}],[\"故sell2\",{\"1\":{\"313\":1}}],[\"故sell1\",{\"1\":{\"311\":1}}],[\"故sell\",{\"1\":{\"301\":1,\"322\":1}}],[\"故只能枚举整个二维数组的右上三角区域\",{\"1\":{\"292\":1}}],[\"故只需求出dp\",{\"1\":{\"254\":1}}],[\"故整体的循环应从下至上\",{\"1\":{\"292\":1}}],[\"故应从边界的各位置开始往高的地势搜同时记录位置向该大洋的可达性\",{\"1\":{\"652\":1}}],[\"故应最多只需要进行min\",{\"1\":{\"324\":1}}],[\"故应对每次交易单独进行\",{\"1\":{\"309\":1}}],[\"故应延用某侧较短边界内含最长回文子序列的较大值\",{\"1\":{\"291\":1}}],[\"故应存储并维护每行\",{\"1\":{\"171\":1}}],[\"故虽然枚举的是两端\",{\"1\":{\"289\":1}}],[\"故综合起来dp\",{\"1\":{\"283\":1}}],[\"故次数应延用s前j\",{\"1\":{\"282\":1}}],[\"故最终有dp\",{\"1\":{\"272\":1}}],[\"故最终得到\",{\"1\":{\"203\":1}}],[\"故总转移方程为dp\",{\"1\":{\"253\":1}}],[\"故允许下方有dp\",{\"1\":{\"251\":1}}],[\"故此种拆分情况下有dp\",{\"1\":{\"229\":1}}],[\"故考虑用动态规划求解\",{\"1\":{\"200\":1}}],[\"故下游节点可用优先队列存储\",{\"1\":{\"179\":1}}],[\"故参考组合的处理方式\",{\"1\":{\"147\":1}}],[\"故以上一个选取的数\",{\"1\":{\"141\":1}}],[\"故做到这点势必会导致增加额外的开销\",{\"1\":{\"140\":1}}],[\"故得用回溯方式\",{\"1\":{\"125\":1}}],[\"故得在网上下载stheiti\",{\"1\":{\"79\":1}}],[\"故按照绝对值从小到大进行搜索\",{\"1\":{\"38\":1}}],[\"故搜寻空间为long\",{\"1\":{\"38\":1}}],[\"再从淘汰位置的下一个开始数\",{\"1\":{\"734\":1}}],[\"再从下一字符开始进行下一片段的划分\",{\"1\":{\"392\":1}}],[\"再到原数组中统计其次数是否达标\",{\"1\":{\"702\":1}}],[\"再依据奇偶按需逆序\",{\"1\":{\"674\":1}}],[\"再进行填充后的四周连通\",{\"1\":{\"632\":1}}],[\"再进行空间压缩可得代码\",{\"1\":{\"314\":1}}],[\"再将剩余的砖块连通成若干集合\",{\"1\":{\"632\":1}}],[\"再将两根节点连接成父子关系\",{\"1\":{\"427\":1}}],[\"再额外多一个m\",{\"1\":{\"632\":1}}],[\"再给定若干表示依次消除的位置\",{\"1\":{\"629\":1}}],[\"再除下一项的分母\",{\"1\":{\"492\":1}}],[\"再回过头来考虑是否有解的问题\",{\"1\":{\"386\":1}}],[\"再基于上一房屋的状态更新不抢的最大收益\",{\"1\":{\"212\":1}}],[\"再取较大者作为最终答案\",{\"1\":{\"210\":1}}],[\"再加上教研室也是移动网\",{\"1\":{\"114\":1}}],[\"再配置虚拟主机配置文件\",{\"1\":{\"94\":1}}],[\"再考虑枚举边界不应重复\",{\"1\":{\"292\":1}}],[\"再考虑截止数字与区间的连续性\",{\"1\":{\"39\":1}}],[\"再考虑到越短的数字看起来越简洁\",{\"1\":{\"38\":1}}],[\"再部署到服务器上\",{\"1\":{\"9\":1}}],[\"~x\",{\"1\":{\"488\":1}}],[\"~\",{\"1\":{\"38\":1,\"39\":2,\"74\":1,\"555\":1,\"568\":1,\"581\":1,\"641\":1,\"734\":1,\"904\":1,\"943\":1,\"945\":1,\"968\":1}}],[\"甚至有可能不存在\",{\"1\":{\"37\":1}}],[\"越大的区间随机到想要的数字的概率越低\",{\"1\":{\"37\":1}}],[\"测试\",{\"0\":{\"29\":1}}],[\"幻灯片页\",{\"0\":{\"28\":1}}],[\"occurrences\",{\"1\":{\"989\":1,\"990\":1}}],[\"occurrence\",{\"1\":{\"988\":1,\"1036\":1,\"1037\":1}}],[\"ocean\",{\"1\":{\"653\":4}}],[\"over\",{\"1\":{\"977\":1,\"1039\":1}}],[\"override\",{\"1\":{\"406\":1,\"562\":8,\"602\":1,\"711\":1}}],[\"or\",{\"1\":{\"870\":2,\"875\":1,\"935\":2,\"945\":1,\"953\":1,\"954\":1,\"1037\":1,\"1063\":1,\"1064\":1,\"1067\":1}}],[\"origin\",{\"1\":{\"633\":2}}],[\"orion\",{\"1\":{\"103\":1}}],[\"order\",{\"1\":{\"633\":1}}],[\"other\",{\"1\":{\"633\":1,\"957\":1,\"1011\":1,\"1040\":1}}],[\"others\",{\"1\":{\"27\":3}}],[\"out\",{\"1\":{\"562\":8}}],[\"outputs\",{\"1\":{\"562\":4}}],[\"output\",{\"1\":{\"527\":1,\"622\":1,\"672\":1,\"694\":1,\"708\":1}}],[\"o\",{\"1\":{\"418\":1,\"440\":1,\"542\":1,\"686\":1,\"913\":1,\"914\":1}}],[\"o2\",{\"1\":{\"406\":3,\"412\":2,\"602\":2,\"711\":4}}],[\"o1\",{\"1\":{\"406\":3,\"412\":2,\"602\":2,\"711\":4}}],[\"old\",{\"1\":{\"374\":3,\"1016\":2}}],[\"offsets\",{\"1\":{\"971\":1}}],[\"offerlast\",{\"1\":{\"418\":1}}],[\"offer\",{\"0\":{\"143\":1},\"1\":{\"418\":1,\"616\":1,\"647\":1,\"661\":2}}],[\"of\",{\"1\":{\"165\":1,\"213\":1,\"576\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"830\":1,\"831\":1,\"838\":1,\"850\":1,\"857\":1,\"858\":1,\"859\":1,\"876\":1,\"878\":1,\"911\":1,\"925\":1,\"926\":1,\"974\":1,\"975\":1,\"977\":1,\"988\":1,\"992\":1,\"995\":1,\"1032\":1,\"1036\":1,\"1040\":1,\"1044\":1,\"1045\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1052\":1,\"1060\":1,\"1064\":1,\"1066\":1}}],[\"only\",{\"1\":{\"1058\":1}}],[\"one\",{\"1\":{\"213\":2,\"633\":1,\"724\":3,\"836\":1,\"837\":1,\"1037\":1}}],[\"on\",{\"1\":{\"77\":1,\"873\":1,\"925\":1,\"927\":1,\"1060\":1,\"1061\":1}}],[\"opposite\",{\"1\":{\"997\":1}}],[\"operate\",{\"1\":{\"927\":1,\"1068\":1}}],[\"operator\",{\"1\":{\"862\":1,\"873\":1,\"875\":1,\"887\":1,\"927\":2,\"1039\":2}}],[\"operators\",{\"0\":{\"861\":1},\"1\":{\"864\":1,\"1040\":1,\"1058\":1}}],[\"opeartor\",{\"1\":{\"862\":1}}],[\"open\",{\"1\":{\"954\":1,\"999\":1,\"1002\":1,\"1005\":1,\"1008\":1}}],[\"openlock\",{\"1\":{\"647\":1}}],[\"opencv\",{\"0\":{\"106\":2}}],[\"openssh\",{\"1\":{\"58\":1}}],[\"options\",{\"1\":{\"966\":1,\"986\":1}}],[\"option+command+j\",{\"1\":{\"64\":1}}],[\"opt=\",{\"1\":{\"70\":1}}],[\"object\",{\"1\":{\"27\":1,\"884\":1,\"885\":1,\"886\":1,\"887\":1}}],[\"l>\",{\"1\":{\"1031\":1}}],[\"l++\",{\"1\":{\"757\":1}}],[\"lcm\",{\"1\":{\"497\":1}}],[\"leader\",{\"1\":{\"1023\":1}}],[\"level\",{\"1\":{\"992\":1}}],[\"led\",{\"1\":{\"988\":2,\"989\":1,\"990\":1}}],[\"letter\",{\"1\":{\"929\":1,\"930\":1}}],[\"left+len\",{\"1\":{\"755\":1}}],[\"left+1\",{\"1\":{\"755\":1}}],[\"leftfork\",{\"1\":{\"576\":3}}],[\"leftnode\",{\"1\":{\"129\":2}}],[\"lefttrees\",{\"1\":{\"129\":2}}],[\"left\",{\"1\":{\"129\":5,\"213\":2,\"221\":5,\"488\":1,\"633\":1,\"682\":5,\"689\":4,\"742\":6,\"755\":2,\"757\":9,\"882\":1}}],[\"length\",{\"1\":{\"136\":1,\"142\":1,\"148\":5,\"156\":2,\"213\":3,\"262\":2,\"273\":2,\"279\":1,\"280\":1,\"284\":11,\"294\":1,\"304\":1,\"315\":1,\"324\":1,\"325\":1,\"328\":4,\"339\":1,\"374\":1,\"387\":1,\"393\":2,\"406\":1,\"435\":5,\"437\":2,\"544\":1,\"585\":1,\"602\":2,\"610\":1,\"616\":5,\"633\":4,\"653\":2,\"661\":1,\"676\":2,\"682\":2,\"689\":1,\"703\":2,\"724\":2,\"731\":2,\"742\":1,\"749\":3,\"757\":4}}],[\"len\",{\"1\":{\"43\":3,\"682\":5,\"755\":2,\"757\":8}}],[\"l\",{\"1\":{\"75\":1,\"76\":1,\"731\":4,\"757\":4,\"812\":1,\"1007\":1,\"1031\":1}}],[\"like\",{\"1\":{\"976\":1}}],[\"list\",{\"1\":{\"530\":3,\"769\":1}}],[\"list<int\",{\"1\":{\"173\":1,\"602\":1,\"711\":1}}],[\"list<integer>\",{\"1\":{\"142\":1,\"156\":1,\"393\":2,\"616\":1,\"703\":2,\"749\":2}}],[\"list<list<string>>\",{\"1\":{\"165\":2,\"193\":1,\"530\":1,\"594\":2,\"626\":3}}],[\"list<list<integer>>\",{\"1\":{\"136\":2,\"142\":2,\"156\":2,\"616\":1,\"653\":2}}],[\"list<string>>\",{\"1\":{\"530\":1}}],[\"list<string>\",{\"1\":{\"148\":1,\"165\":2,\"193\":3,\"530\":1,\"626\":2}}],[\"list<treenode>\",{\"1\":{\"129\":5}}],[\"listen\",{\"1\":{\"93\":2}}],[\"lines\",{\"1\":{\"935\":1,\"936\":1,\"937\":1,\"967\":1,\"968\":1,\"977\":2,\"1026\":1,\"1051\":1,\"1052\":1,\"1064\":1}}],[\"linewise\",{\"1\":{\"922\":1}}],[\"line\",{\"0\":{\"952\":1},\"1\":{\"807\":1,\"808\":1,\"809\":1,\"810\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"836\":1,\"837\":1,\"839\":1,\"840\":1,\"841\":1,\"855\":2,\"857\":3,\"858\":1,\"859\":1,\"873\":1,\"876\":1,\"877\":1,\"878\":1,\"879\":1,\"881\":1,\"882\":1,\"883\":1,\"911\":1,\"912\":1,\"913\":2,\"914\":2,\"919\":1,\"935\":1,\"951\":1,\"972\":1,\"973\":1,\"976\":1,\"988\":1,\"989\":1,\"995\":1}}],[\"linux\",{\"0\":{\"101\":1}}],[\"linkedlist<>\",{\"1\":{\"136\":1,\"418\":2,\"647\":1,\"661\":1,\"711\":1}}],[\"linkedlist<integer>\",{\"1\":{\"136\":1}}],[\"link\",{\"1\":{\"27\":1,\"114\":1}}],[\"library\",{\"1\":{\"88\":1,\"98\":1}}],[\"lib=~\",{\"1\":{\"74\":1}}],[\"lib=$home\",{\"1\":{\"71\":1}}],[\"lib\",{\"1\":{\"70\":1,\"71\":1,\"74\":3}}],[\"lowercase\",{\"1\":{\"870\":1}}],[\"lowbit\",{\"1\":{\"439\":1}}],[\"lock+condition\",{\"1\":{\"779\":1}}],[\"lock\",{\"1\":{\"562\":14,\"576\":2,\"784\":1}}],[\"local\",{\"1\":{\"70\":1,\"74\":2,\"562\":1,\"851\":1}}],[\"log2​n\",{\"1\":{\"440\":1}}],[\"log4perl\",{\"1\":{\"75\":1}}],[\"log\",{\"1\":{\"75\":2}}],[\"longestpalindrome\",{\"1\":{\"682\":1}}],[\"longestpalindromesubseq\",{\"1\":{\"294\":1}}],[\"longestconsecutive\",{\"1\":{\"544\":1}}],[\"long\",{\"1\":{\"38\":1,\"493\":1,\"757\":2}}],[\"later\",{\"1\":{\"633\":1}}],[\"latexindent\",{\"1\":{\"67\":1,\"72\":1}}],[\"latex\",{\"0\":{\"61\":1,\"62\":1},\"1\":{\"63\":1,\"67\":2,\"79\":1}}],[\"labuladong\",{\"1\":{\"434\":1}}],[\"last\",{\"1\":{\"142\":4,\"393\":3,\"823\":1,\"847\":1,\"898\":1,\"905\":1,\"906\":1,\"907\":1,\"915\":1,\"917\":1,\"918\":1,\"919\":1,\"944\":1,\"945\":1,\"979\":1}}],[\"layout\",{\"1\":{\"27\":5}}],[\"lf\",{\"1\":{\"60\":1}}],[\"主机应用中开启\",{\"1\":{\"119\":1}}],[\"主机域名设置\",{\"1\":{\"92\":1}}],[\"主要思想与\",{\"1\":{\"320\":1}}],[\"主要框架与\",{\"1\":{\"309\":1}}],[\"主要问题是实际编译后某些\",{\"1\":{\"107\":1}}],[\"主要配置文件\",{\"1\":{\"87\":1}}],[\"主题配置\",{\"1\":{\"27\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"博客\",{\"1\":{\"27\":1}}],[\"增强\",{\"1\":{\"27\":1}}],[\"增强说明\",{\"1\":{\"3\":1}}],[\"need\",{\"1\":{\"977\":1,\"1043\":1}}],[\"next\",{\"1\":{\"807\":1,\"808\":1,\"812\":1,\"813\":1,\"814\":1,\"823\":1,\"846\":1,\"858\":1,\"926\":1,\"927\":1,\"1009\":1,\"1037\":1}}],[\"newyork\",{\"1\":{\"622\":2}}],[\"newcondition\",{\"1\":{\"562\":1}}],[\"newwait\",{\"1\":{\"339\":2}}],[\"new\",{\"1\":{\"129\":3,\"136\":3,\"142\":3,\"148\":4,\"156\":3,\"165\":7,\"173\":5,\"193\":3,\"205\":1,\"221\":2,\"231\":1,\"255\":1,\"262\":1,\"273\":1,\"284\":1,\"294\":1,\"328\":2,\"346\":1,\"356\":1,\"362\":1,\"393\":2,\"406\":1,\"418\":2,\"424\":1,\"435\":1,\"437\":2,\"495\":1,\"520\":1,\"530\":4,\"544\":1,\"562\":14,\"576\":3,\"585\":1,\"594\":5,\"602\":5,\"610\":2,\"616\":4,\"626\":6,\"633\":4,\"647\":3,\"653\":3,\"661\":4,\"676\":2,\"689\":2,\"703\":1,\"711\":3,\"749\":4,\"757\":1,\"913\":1,\"914\":1,\"935\":1,\"1005\":1,\"1008\":1,\"1016\":2}}],[\"nio\",{\"1\":{\"790\":1}}],[\"n个人围成一圈\",{\"1\":{\"734\":1}}],[\"n1\",{\"1\":{\"703\":2}}],[\"n÷k\",{\"1\":{\"701\":1}}],[\"n编号表示顶部\",{\"1\":{\"632\":1}}],[\"n−1\",{\"1\":{\"491\":1}}],[\"n−m+1\",{\"1\":{\"491\":1}}],[\"n−m\",{\"1\":{\"491\":1}}],[\"n−i\",{\"1\":{\"203\":2}}],[\"nrt\",{\"1\":{\"182\":2,\"186\":1,\"187\":1,\"189\":1,\"190\":1,\"191\":1}}],[\"n的棋盘中\",{\"1\":{\"159\":1}}],[\"numbers\",{\"1\":{\"689\":4,\"970\":1}}],[\"number\",{\"1\":{\"562\":3}}],[\"numdistinct\",{\"1\":{\"284\":1}}],[\"numtrees\",{\"1\":{\"205\":1}}],[\"num\",{\"1\":{\"156\":2,\"244\":4,\"346\":3,\"424\":3,\"488\":6,\"544\":5,\"676\":2,\"703\":8}}],[\"nums\",{\"1\":{\"140\":4,\"142\":9,\"156\":7,\"213\":9,\"244\":2,\"346\":2,\"374\":3,\"424\":2,\"484\":5,\"520\":3,\"533\":2,\"544\":3,\"703\":5,\"724\":11,\"749\":4,\"752\":2,\"757\":9}}],[\"null\",{\"1\":{\"129\":1,\"193\":1,\"221\":1,\"437\":5,\"585\":1,\"594\":2}}],[\"noh\",{\"1\":{\"1032\":1}}],[\"non\",{\"1\":{\"825\":1,\"827\":1,\"858\":1,\"859\":1}}],[\"normalmodekeybindingsnonrescursive\",{\"1\":{\"1022\":1}}],[\"normal\",{\"0\":{\"805\":1,\"908\":1,\"940\":1},\"1\":{\"1063\":1,\"1068\":1}}],[\"no\",{\"1\":{\"633\":1,\"977\":1}}],[\"not\",{\"1\":{\"142\":1,\"437\":1}}],[\"note\",{\"1\":{\"16\":1}}],[\"node\",{\"1\":{\"129\":4,\"221\":5,\"437\":11}}],[\"n2\",{\"1\":{\"48\":1,\"703\":2}}],[\"n\",{\"0\":{\"157\":1},\"1\":{\"43\":1,\"126\":2,\"129\":3,\"165\":16,\"200\":2,\"201\":2,\"202\":2,\"203\":5,\"205\":4,\"210\":2,\"229\":1,\"231\":4,\"247\":2,\"254\":1,\"255\":5,\"262\":5,\"273\":7,\"294\":6,\"303\":1,\"314\":1,\"439\":2,\"455\":1,\"488\":7,\"491\":2,\"493\":1,\"495\":2,\"520\":6,\"542\":1,\"547\":1,\"555\":1,\"562\":8,\"581\":1,\"585\":3,\"602\":9,\"606\":2,\"610\":11,\"633\":13,\"653\":8,\"661\":8,\"676\":7,\"701\":1,\"730\":1,\"734\":1,\"749\":4,\"800\":1,\"838\":2,\"846\":2}}],[\"nat\",{\"1\":{\"526\":1,\"527\":1}}],[\"nature\",{\"1\":{\"27\":1}}],[\"named\",{\"1\":{\"943\":1}}],[\"name\",{\"1\":{\"43\":1,\"59\":1,\"60\":1,\"941\":1,\"1022\":1,\"1035\":1,\"1042\":1}}],[\"navbar\",{\"1\":{\"27\":1}}],[\"布局\",{\"1\":{\"27\":1}}],[\"界面\",{\"1\":{\"27\":1}}],[\"快速上手\",{\"1\":{\"27\":1}}],[\"sneak\",{\"0\":{\"1034\":1},\"1\":{\"1035\":1,\"1039\":1,\"1040\":1}}],[\"saving\",{\"1\":{\"959\":1,\"964\":1}}],[\"save\",{\"1\":{\"955\":1,\"958\":1,\"960\":1,\"961\":1,\"963\":1}}],[\"same\",{\"1\":{\"934\":1,\"1062\":1}}],[\"safari\",{\"1\":{\"27\":1}}],[\"sp\",{\"1\":{\"1000\":1}}],[\"split\",{\"1\":{\"999\":1,\"1002\":1,\"1005\":1,\"1006\":2}}],[\"splits\",{\"0\":{\"998\":1},\"1\":{\"1007\":1,\"1027\":1}}],[\"specific\",{\"1\":{\"947\":1}}],[\"special\",{\"1\":{\"855\":1}}],[\"space\",{\"1\":{\"813\":1,\"814\":1,\"815\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1}}],[\"sds\",{\"1\":{\"769\":1}}],[\"shell\",{\"1\":{\"965\":1}}],[\"shift\",{\"1\":{\"881\":1,\"882\":1}}],[\"shortestpathbinarymatrix\",{\"1\":{\"661\":1}}],[\"sha\",{\"1\":{\"58\":1}}],[\"share\",{\"1\":{\"48\":1}}],[\"shape=wm\",{\"1\":{\"43\":1}}],[\"src\",{\"1\":{\"647\":2}}],[\"smalleststringwithswaps\",{\"1\":{\"616\":1}}],[\"synchronized\",{\"1\":{\"784\":1,\"786\":1}}],[\"system\",{\"1\":{\"562\":8}}],[\"symbol\",{\"1\":{\"27\":1,\"813\":1,\"815\":1,\"817\":1,\"819\":1}}],[\"s2\",{\"1\":{\"315\":4}}],[\"s1\",{\"1\":{\"315\":4}}],[\"squ\",{\"1\":{\"171\":1,\"173\":5}}],[\"switch\",{\"1\":{\"865\":1,\"870\":1,\"901\":1,\"904\":1,\"1027\":1}}],[\"swiminwater\",{\"1\":{\"610\":1}}],[\"swipe\",{\"1\":{\"27\":1}}],[\"swap\",{\"1\":{\"156\":2,\"484\":1,\"937\":1,\"938\":1}}],[\"s\",{\"1\":{\"148\":3,\"279\":1,\"282\":1,\"283\":1,\"284\":8,\"290\":1,\"291\":1,\"294\":4,\"393\":5,\"530\":3,\"616\":7,\"647\":5,\"682\":9,\"731\":5,\"889\":1,\"901\":1,\"927\":1,\"982\":1,\"988\":1,\"989\":1,\"990\":1,\"992\":1,\"994\":1,\"1001\":1,\"1020\":1,\"1036\":1,\"1038\":1,\"1040\":2,\"1057\":1}}],[\"so\",{\"1\":{\"976\":1}}],[\"some\",{\"1\":{\"969\":1}}],[\"soft\",{\"1\":{\"955\":1,\"956\":1,\"957\":1}}],[\"solvesudoku\",{\"1\":{\"173\":1}}],[\"solvenqueens\",{\"1\":{\"165\":1}}],[\"solution1\",{\"1\":{\"538\":1}}],[\"solution\",{\"1\":{\"124\":1,\"129\":1,\"133\":1,\"136\":1,\"139\":1,\"142\":1,\"146\":1,\"148\":1,\"152\":1,\"156\":1,\"160\":1,\"165\":1,\"169\":1,\"173\":1,\"177\":1,\"193\":1,\"199\":1,\"205\":1,\"209\":1,\"213\":1,\"217\":1,\"221\":1,\"225\":1,\"231\":1,\"235\":1,\"239\":1,\"244\":1,\"248\":1,\"255\":1,\"260\":1,\"262\":1,\"266\":1,\"273\":1,\"277\":1,\"284\":1,\"288\":1,\"294\":1,\"299\":1,\"304\":1,\"308\":1,\"315\":1,\"319\":1,\"328\":1,\"332\":1,\"339\":1,\"344\":1,\"346\":1,\"350\":1,\"356\":1,\"362\":1,\"367\":1,\"371\":1,\"374\":1,\"379\":1,\"387\":1,\"391\":1,\"393\":1,\"399\":1,\"403\":1,\"406\":1,\"410\":1,\"412\":1,\"424\":1,\"520\":1,\"528\":1,\"530\":1,\"534\":1,\"543\":1,\"544\":1,\"552\":1,\"561\":1,\"575\":1,\"582\":1,\"585\":1,\"591\":1,\"594\":1,\"599\":1,\"602\":1,\"607\":1,\"610\":1,\"614\":1,\"616\":1,\"623\":1,\"626\":1,\"630\":1,\"633\":1,\"638\":1,\"643\":1,\"647\":1,\"651\":1,\"653\":1,\"657\":1,\"661\":1,\"666\":1,\"673\":1,\"676\":1,\"680\":1,\"682\":1,\"687\":1,\"689\":1,\"695\":1,\"699\":1,\"703\":1,\"709\":1,\"711\":1,\"715\":1,\"719\":1,\"724\":1,\"728\":1,\"731\":1,\"735\":1,\"739\":1,\"742\":1,\"749\":1,\"753\":1,\"757\":1,\"761\":1}}],[\"sort\",{\"1\":{\"136\":1,\"148\":1,\"406\":1,\"412\":1,\"481\":1,\"530\":1,\"602\":1,\"626\":1,\"711\":1}}],[\"source\",{\"1\":{\"71\":1}}],[\"ssh\",{\"1\":{\"59\":1,\"60\":1}}],[\"similar\",{\"1\":{\"1038\":1}}],[\"signalall\",{\"1\":{\"562\":4}}],[\"singlenumber\",{\"1\":{\"520\":1}}],[\"size\",{\"1\":{\"142\":2,\"148\":2,\"173\":1,\"594\":9,\"610\":6,\"626\":4,\"633\":9,\"647\":3,\"661\":3,\"711\":1,\"749\":1}}],[\"sites\",{\"1\":{\"98\":1}}],[\"sitemap\",{\"1\":{\"27\":1}}],[\"sidebar\",{\"1\":{\"27\":1}}],[\"sequence\",{\"1\":{\"1036\":1}}],[\"sentence\",{\"1\":{\"889\":1,\"932\":1}}],[\"separated\",{\"1\":{\"813\":1,\"814\":1,\"815\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1}}],[\"selection\",{\"1\":{\"926\":1,\"934\":1,\"976\":1,\"1020\":1,\"1068\":1}}],[\"select\",{\"1\":{\"788\":1,\"925\":1,\"1020\":1,\"1062\":1,\"1066\":1}}],[\"sell2\",{\"1\":{\"313\":1}}],[\"sell1\",{\"1\":{\"311\":1,\"312\":1}}],[\"sell\",{\"1\":{\"301\":1,\"302\":1,\"304\":5,\"321\":1,\"322\":1,\"328\":7}}],[\"setting\",{\"1\":{\"997\":1,\"1022\":1,\"1035\":1,\"1042\":1}}],[\"set<string>\",{\"1\":{\"647\":1}}],[\"set<integer>\",{\"1\":{\"544\":1,\"749\":1}}],[\"sets\",{\"1\":{\"616\":3,\"633\":1}}],[\"set\",{\"1\":{\"544\":5,\"633\":1,\"647\":6,\"749\":4,\"986\":1}}],[\"seg\",{\"1\":{\"103\":1}}],[\"semaphore\",{\"1\":{\"576\":2}}],[\"sem\",{\"1\":{\"103\":1}}],[\"servername\",{\"1\":{\"91\":1}}],[\"seo\",{\"1\":{\"27\":1}}],[\"searchprefix\",{\"1\":{\"437\":3}}],[\"search\",{\"1\":{\"27\":1,\"435\":1,\"437\":2,\"823\":1,\"842\":1,\"843\":1,\"847\":1,\"848\":1,\"849\":1,\"925\":1,\"953\":1,\"984\":1,\"991\":1,\"1032\":1,\"1057\":1,\"1060\":1}}],[\"surrounding\",{\"1\":{\"1014\":1,\"1016\":1,\"1018\":1}}],[\"surround\",{\"0\":{\"1012\":1},\"1\":{\"1019\":1,\"1040\":1}}],[\"surrounded\",{\"1\":{\"891\":1,\"892\":1,\"894\":1,\"895\":1,\"1020\":1}}],[\"sum\",{\"1\":{\"243\":1,\"244\":4,\"387\":4,\"689\":3,\"749\":3}}],[\"sudo\",{\"1\":{\"75\":1,\"84\":1,\"85\":1,\"86\":1,\"102\":2}}],[\"substitution\",{\"1\":{\"986\":1,\"991\":1}}],[\"substitute\",{\"1\":{\"981\":2,\"982\":1,\"983\":1,\"985\":2,\"994\":1}}],[\"substring\",{\"1\":{\"682\":1}}],[\"sub\",{\"1\":{\"27\":1}}],[\"support\",{\"1\":{\"984\":1,\"1058\":2}}],[\"supereggdrop\",{\"1\":{\"255\":1}}],[\"sup\",{\"1\":{\"27\":1}}],[\"slides\",{\"1\":{\"27\":1}}],[\"steps\",{\"1\":{\"1060\":1,\"1064\":1}}],[\"store\",{\"1\":{\"944\":1,\"945\":1}}],[\"stop\",{\"1\":{\"86\":1}}],[\"stk\",{\"1\":{\"424\":5}}],[\"stands\",{\"1\":{\"1047\":1}}],[\"stanford\",{\"1\":{\"103\":1}}],[\"static\",{\"1\":{\"562\":1}}],[\"startswith\",{\"1\":{\"437\":1}}],[\"starti​\",{\"1\":{\"402\":2,\"409\":1}}],[\"start\",{\"1\":{\"84\":1,\"136\":3,\"140\":2,\"387\":3,\"393\":3,\"562\":4,\"682\":4,\"830\":1,\"844\":1,\"857\":1,\"953\":2,\"1044\":1,\"1045\":1,\"1046\":1}}],[\"started\",{\"1\":{\"27\":2}}],[\"stheiti实际上就是华文黑体\",{\"1\":{\"79\":1}}],[\"stheiti\",{\"0\":{\"78\":1}}],[\"stronger\",{\"1\":{\"875\":1}}],[\"strs\",{\"1\":{\"526\":1,\"530\":2}}],[\"string\",{\"1\":{\"148\":4,\"165\":1,\"193\":1,\"262\":2,\"273\":2,\"284\":2,\"294\":1,\"393\":1,\"435\":3,\"437\":4,\"530\":7,\"562\":1,\"616\":3,\"626\":1,\"647\":8,\"682\":3,\"731\":1}}],[\"stringbuilder\",{\"1\":{\"148\":2}}],[\"str\",{\"1\":{\"43\":2,\"148\":10,\"530\":3}}],[\"structure\",{\"1\":{\"27\":1}}],[\"style\",{\"1\":{\"27\":4}}],[\"v>\",{\"1\":{\"1065\":1}}],[\"vsp\",{\"1\":{\"1003\":1}}],[\"vscodevim\",{\"1\":{\"997\":1,\"1058\":1}}],[\"vscode\",{\"1\":{\"63\":1,\"67\":1}}],[\"vertical\",{\"1\":{\"1002\":1}}],[\"ventura\",{\"1\":{\"58\":1}}],[\"variable\",{\"1\":{\"851\":1,\"852\":1}}],[\"val\",{\"1\":{\"221\":1}}],[\"values\",{\"1\":{\"530\":1,\"588\":1,\"594\":2}}],[\"valueof\",{\"1\":{\"165\":1,\"616\":1,\"647\":2}}],[\"value\",{\"1\":{\"38\":2,\"142\":1,\"244\":2,\"412\":1,\"418\":5,\"488\":2,\"520\":1,\"562\":2,\"594\":2}}],[\"visual\",{\"0\":{\"920\":1},\"1\":{\"921\":1,\"922\":1,\"923\":1,\"925\":1,\"926\":1,\"976\":1,\"1020\":1,\"1065\":1}}],[\"visited\",{\"1\":{\"661\":4}}],[\"vim\",{\"0\":{\"804\":1,\"1012\":1,\"1034\":1,\"1041\":1},\"1\":{\"997\":1,\"1022\":1,\"1035\":1,\"1040\":2,\"1042\":1,\"1058\":1}}],[\"vite\",{\"1\":{\"27\":1}}],[\"v\",{\"1\":{\"593\":1,\"921\":1,\"922\":1,\"923\":1,\"1004\":1}}],[\"volatile\",{\"1\":{\"562\":1}}],[\"void\",{\"1\":{\"136\":1,\"142\":1,\"148\":1,\"156\":1,\"165\":1,\"173\":2,\"193\":1,\"418\":1,\"424\":1,\"437\":1,\"484\":1,\"562\":13,\"576\":1,\"594\":1,\"602\":1,\"616\":1,\"626\":1,\"633\":1,\"653\":1}}],[\"vhosts\",{\"1\":{\"94\":1,\"97\":1}}],[\"vue\",{\"1\":{\"27\":1}}],[\"vuepress\",{\"1\":{\"2\":1,\"9\":1,\"24\":1,\"27\":4}}],[\"everywhere\",{\"1\":{\"1046\":1,\"1050\":1,\"1057\":1}}],[\"every\",{\"1\":{\"991\":1}}],[\"even\",{\"1\":{\"958\":1}}],[\"eval\",{\"1\":{\"71\":1,\"74\":1}}],[\"eg\",{\"1\":{\"863\":1,\"874\":1,\"897\":1,\"946\":1,\"950\":1,\"968\":1,\"987\":1,\"1015\":1,\"1017\":1,\"1019\":1}}],[\"effect\",{\"1\":{\"850\":1}}],[\"epoll\",{\"1\":{\"788\":1}}],[\"equations\",{\"1\":{\"594\":6}}],[\"equals\",{\"1\":{\"418\":1,\"647\":1}}],[\"easymotion\",{\"0\":{\"1041\":1},\"1\":{\"1042\":1,\"1058\":1}}],[\"eatlimit\",{\"1\":{\"576\":3}}],[\"eat\",{\"1\":{\"526\":1,\"527\":1,\"568\":1,\"571\":1,\"576\":2}}],[\"each\",{\"1\":{\"165\":1,\"991\":1}}],[\"eraseoverlapintervals\",{\"1\":{\"412\":1}}],[\"error\",{\"1\":{\"27\":1}}],[\"else\",{\"1\":{\"173\":1,\"262\":1,\"273\":1,\"284\":1,\"294\":1,\"412\":1,\"520\":1,\"562\":4,\"594\":1,\"626\":1,\"689\":2,\"703\":5,\"742\":2,\"757\":2}}],[\"e\",{\"1\":{\"103\":2,\"105\":2,\"562\":8,\"588\":1,\"815\":1,\"816\":1,\"836\":1,\"954\":1,\"1048\":1}}],[\"editing\",{\"1\":{\"966\":1}}],[\"edit\",{\"1\":{\"954\":1}}],[\"edge\",{\"1\":{\"585\":4,\"602\":5}}],[\"edges\",{\"1\":{\"581\":1,\"585\":3,\"602\":5}}],[\"edu\",{\"1\":{\"103\":1}}],[\"ed25519\",{\"1\":{\"59\":1}}],[\"etc\",{\"1\":{\"87\":1,\"94\":1,\"97\":1}}],[\"empty\",{\"1\":{\"173\":5,\"996\":1}}],[\"embedded\",{\"1\":{\"43\":2}}],[\"embed\",{\"1\":{\"43\":3}}],[\"emoji\",{\"1\":{\"27\":4}}],[\"entryset\",{\"1\":{\"626\":1}}],[\"entry\",{\"1\":{\"626\":3}}],[\"entry<integer\",{\"1\":{\"626\":1}}],[\"end在全过程随i单调不减\",{\"1\":{\"755\":1}}],[\"endi​\",{\"1\":{\"402\":2,\"409\":1}}],[\"end\",{\"1\":{\"393\":6,\"412\":3,\"682\":4,\"755\":1,\"757\":7,\"815\":1,\"816\":1,\"819\":1,\"820\":1,\"826\":1,\"827\":1,\"831\":1,\"844\":1,\"856\":1,\"876\":1,\"878\":1,\"912\":1,\"926\":1,\"975\":1,\"1048\":1,\"1049\":1,\"1050\":1}}],[\"env\",{\"1\":{\"27\":1}}],[\"enhance\",{\"1\":{\"27\":1}}],[\"encrypt\",{\"1\":{\"27\":1}}],[\"ex\",{\"1\":{\"953\":1,\"966\":1,\"977\":2,\"978\":1}}],[\"express\",{\"1\":{\"969\":1}}],[\"expression\",{\"1\":{\"845\":1,\"984\":1}}],[\"explicitly\",{\"1\":{\"943\":1}}],[\"expand\",{\"1\":{\"682\":3}}],[\"export\",{\"1\":{\"27\":1}}],[\"execute\",{\"1\":{\"576\":1,\"957\":1}}],[\"exists\",{\"1\":{\"437\":1}}],[\"extremes\",{\"1\":{\"969\":1}}],[\"extra\",{\"1\":{\"94\":1,\"97\":1}}],[\"extract\",{\"1\":{\"43\":5}}],[\"extend\",{\"1\":{\"27\":1,\"926\":1,\"1064\":1}}],[\"external\",{\"1\":{\"27\":1}}],[\"迁移\",{\"1\":{\"27\":1}}],[\"配置\",{\"1\":{\"27\":2,\"82\":1}}],[\"auto\",{\"1\":{\"1062\":1}}],[\"again\",{\"1\":{\"980\":1,\"1006\":1}}],[\"ayas\",{\"1\":{\"946\":1}}],[\"aqs\",{\"1\":{\"768\":1}}],[\"at\",{\"1\":{\"911\":1,\"912\":1,\"915\":1,\"935\":1,\"995\":1}}],[\"atla\",{\"1\":{\"653\":5}}],[\"ate\",{\"1\":{\"526\":1,\"527\":1}}],[\"after\",{\"1\":{\"633\":1,\"821\":1,\"822\":1,\"868\":1,\"903\":1,\"910\":1,\"934\":1,\"951\":1,\"976\":1,\"980\":1,\"1005\":1}}],[\"aslist\",{\"1\":{\"653\":1}}],[\"as\",{\"1\":{\"633\":1,\"934\":1}}],[\"ascii\",{\"1\":{\"39\":1,\"435\":1}}],[\"aio\",{\"1\":{\"790\":1}}],[\"ai\",{\"1\":{\"581\":1,\"588\":1}}],[\"aim\",{\"1\":{\"193\":3,\"1061\":1}}],[\"await\",{\"1\":{\"562\":4}}],[\"above\",{\"1\":{\"914\":1}}],[\"abstractqueuedsyncronizer\",{\"1\":{\"768\":1}}],[\"abs\",{\"1\":{\"533\":1,\"602\":2}}],[\"abmodp\",{\"1\":{\"503\":1}}],[\"abmodp=\",{\"1\":{\"500\":1,\"501\":1}}],[\"a±c\",{\"1\":{\"508\":1}}],[\"a±b\",{\"1\":{\"499\":1}}],[\"a+c\",{\"1\":{\"505\":1}}],[\"a+\",{\"1\":{\"502\":1}}],[\"a+b\",{\"1\":{\"502\":1,\"504\":1}}],[\"amodp\",{\"1\":{\"500\":1,\"501\":1}}],[\"amodp±bmodp\",{\"1\":{\"499\":1}}],[\"amount\",{\"1\":{\"356\":8,\"362\":8}}],[\"any\",{\"1\":{\"576\":1,\"995\":1,\"1068\":1}}],[\"an\",{\"1\":{\"562\":1,\"996\":1,\"1019\":1}}],[\"answer\",{\"1\":{\"633\":1}}],[\"ans\",{\"1\":{\"493\":3}}],[\"and\",{\"0\":{\"928\":1,\"998\":1},\"1\":{\"27\":1,\"213\":1,\"437\":1,\"626\":1,\"633\":1,\"813\":1,\"815\":1,\"817\":1,\"819\":1,\"844\":1,\"865\":1,\"885\":1,\"901\":1,\"913\":1,\"914\":1,\"953\":1,\"960\":1,\"963\":1,\"967\":1,\"968\":1,\"976\":1,\"991\":1,\"1062\":1}}],[\"a2\",{\"1\":{\"489\":1}}],[\"a0\",{\"1\":{\"489\":5}}],[\"a1\",{\"1\":{\"489\":3}}],[\"addall\",{\"1\":{\"626\":1}}],[\"add\",{\"1\":{\"129\":2,\"136\":2,\"142\":2,\"148\":1,\"156\":2,\"165\":2,\"173\":1,\"184\":1,\"188\":1,\"190\":1,\"192\":1,\"193\":2,\"393\":1,\"495\":1,\"530\":1,\"544\":1,\"602\":2,\"626\":3,\"647\":5,\"653\":1,\"676\":1,\"703\":2,\"711\":1,\"749\":2,\"871\":1,\"1018\":1,\"1043\":1,\"1060\":1,\"1062\":1}}],[\"advance\",{\"1\":{\"27\":2}}],[\"advanced\",{\"1\":{\"27\":4}}],[\"alternatively\",{\"1\":{\"1068\":1}}],[\"alternate\",{\"1\":{\"875\":1}}],[\"already\",{\"1\":{\"1040\":1}}],[\"also\",{\"1\":{\"893\":1}}],[\"allow\",{\"1\":{\"977\":1}}],[\"all\",{\"1\":{\"626\":1,\"633\":1,\"933\":1,\"961\":1,\"962\":1,\"963\":1,\"964\":1,\"989\":1,\"990\":1,\"992\":1,\"1011\":1,\"1043\":1}}],[\"alltrees\",{\"1\":{\"129\":5}}],[\"algorithm\",{\"0\":{\"1070\":1}}],[\"algo\",{\"1\":{\"434\":1}}],[\"align\",{\"1\":{\"27\":1}}],[\"area\",{\"1\":{\"976\":1}}],[\"around\",{\"1\":{\"886\":1,\"935\":1,\"1058\":1}}],[\"arround\",{\"1\":{\"633\":1}}],[\"arraylist<string>\",{\"1\":{\"647\":2}}],[\"arraylist<list<string>>\",{\"1\":{\"530\":1}}],[\"arraylist<integer>\",{\"1\":{\"495\":2,\"676\":1}}],[\"arraylist<>\",{\"1\":{\"129\":2,\"136\":2,\"142\":3,\"148\":1,\"156\":3,\"165\":2,\"173\":1,\"193\":1,\"393\":1,\"495\":1,\"530\":1,\"602\":1,\"626\":2,\"647\":1,\"653\":1,\"676\":1,\"703\":1,\"749\":1}}],[\"arraydeque<>\",{\"1\":{\"424\":1}}],[\"arrays\",{\"1\":{\"136\":1,\"148\":1,\"328\":1,\"356\":1,\"362\":1,\"406\":1,\"412\":1,\"481\":1,\"530\":1,\"653\":1,\"711\":1,\"749\":1}}],[\"args\",{\"1\":{\"562\":1}}],[\"article\",{\"1\":{\"27\":1}}],[\"ap\",{\"1\":{\"946\":1}}],[\"apachectl\",{\"1\":{\"84\":1,\"85\":1,\"86\":1}}],[\"apache2\",{\"0\":{\"80\":1},\"1\":{\"87\":1,\"94\":1,\"97\":1}}],[\"apply\",{\"1\":{\"977\":1,\"983\":1,\"1039\":1}}],[\"apple\",{\"1\":{\"46\":1,\"50\":1,\"54\":1}}],[\"append\",{\"1\":{\"148\":1,\"1067\":1}}],[\"apperance\",{\"1\":{\"27\":1}}],[\"a\",{\"1\":{\"39\":1,\"393\":2,\"437\":2,\"489\":8,\"503\":1,\"510\":1,\"588\":5,\"592\":1,\"593\":2,\"613\":1,\"721\":1,\"722\":1,\"749\":4,\"801\":1,\"886\":1,\"910\":1,\"912\":1,\"913\":1,\"914\":1,\"929\":1,\"930\":1,\"931\":1,\"932\":1,\"943\":1,\"950\":1,\"951\":1,\"968\":2,\"995\":1,\"1006\":1,\"1067\":1}}],[\"accs\",{\"1\":{\"626\":5}}],[\"accountsmerge\",{\"1\":{\"626\":1}}],[\"accounts\",{\"1\":{\"622\":1,\"626\":8}}],[\"accept\",{\"1\":{\"562\":3}}],[\"accessibility\",{\"1\":{\"27\":1}}],[\"acquire\",{\"1\":{\"576\":1}}],[\"ac≡bdmodp\",{\"1\":{\"509\":1}}],[\"acmodp+bcmodp\",{\"1\":{\"504\":1}}],[\"actions\",{\"1\":{\"1063\":1}}],[\"action\",{\"1\":{\"8\":1}}],[\"bd\",{\"1\":{\"1047\":1}}],[\"bdw\",{\"1\":{\"1046\":1,\"1050\":1}}],[\"by\",{\"1\":{\"813\":1,\"814\":1,\"815\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1,\"891\":1,\"892\":1,\"894\":1,\"895\":1,\"945\":1,\"1020\":1,\"1039\":1,\"1040\":1}}],[\"b+\",{\"1\":{\"771\":1}}],[\"b+c\",{\"1\":{\"502\":1,\"505\":1}}],[\"b且b\",{\"1\":{\"720\":1}}],[\"between\",{\"1\":{\"1007\":1,\"1027\":1}}],[\"below\",{\"1\":{\"913\":1,\"1043\":1}}],[\"beginning\",{\"1\":{\"911\":1,\"974\":1,\"995\":1,\"1051\":1,\"1052\":1}}],[\"be\",{\"1\":{\"845\":1,\"935\":1,\"943\":1,\"984\":1,\"985\":1,\"1006\":1,\"1020\":1,\"1058\":1}}],[\"behind\",{\"1\":{\"821\":1,\"822\":1}}],[\"before\",{\"1\":{\"633\":1,\"880\":1,\"900\":1,\"909\":1,\"930\":1}}],[\"because\",{\"1\":{\"633\":1,\"1040\":1}}],[\"b的链式关系\",{\"1\":{\"593\":1}}],[\"b的传递关系\",{\"1\":{\"592\":1}}],[\"bidirectional\",{\"1\":{\"1047\":1}}],[\"bio\",{\"1\":{\"790\":1}}],[\"binlog\",{\"1\":{\"775\":1}}],[\"binarysearch\",{\"1\":{\"749\":1}}],[\"bi\",{\"1\":{\"581\":1,\"588\":2}}],[\"bit\",{\"1\":{\"43\":1}}],[\"built\",{\"0\":{\"1012\":1}}],[\"build\",{\"1\":{\"129\":4}}],[\"build在src\",{\"1\":{\"9\":1}}],[\"but\",{\"1\":{\"633\":1,\"1038\":1,\"1058\":1}}],[\"buzz\",{\"1\":{\"560\":2,\"562\":5}}],[\"b±d\",{\"1\":{\"508\":1}}],[\"bcmodp\",{\"1\":{\"503\":1}}],[\"bmodp\",{\"1\":{\"500\":1,\"501\":1}}],[\"b1\",{\"1\":{\"489\":2}}],[\"b0\",{\"1\":{\"489\":6}}],[\"b\",{\"1\":{\"489\":7,\"588\":1,\"592\":1,\"613\":1,\"720\":1,\"817\":1,\"818\":1,\"835\":1,\"891\":1,\"892\":1,\"1045\":1}}],[\"bfs\",{\"1\":{\"446\":1,\"645\":1,\"658\":1,\"659\":1}}],[\"bottom\",{\"1\":{\"841\":1}}],[\"board\",{\"1\":{\"173\":7}}],[\"boolean\",{\"1\":{\"148\":2,\"165\":6,\"173\":7,\"437\":3,\"488\":1,\"489\":1,\"653\":5,\"661\":2,\"724\":2}}],[\"bat\",{\"1\":{\"526\":1,\"527\":1}}],[\"backwords\",{\"1\":{\"1049\":1}}],[\"backwards\",{\"1\":{\"1045\":1,\"1052\":1,\"1054\":1,\"1056\":1}}],[\"backward\",{\"1\":{\"843\":1,\"847\":1,\"849\":1,\"1038\":1}}],[\"back\",{\"1\":{\"418\":1,\"811\":1}}],[\"backtrack\",{\"1\":{\"156\":3,\"165\":3}}],[\"based\",{\"1\":{\"1060\":1}}],[\"base=$home\",{\"1\":{\"70\":1}}],[\"basic\",{\"1\":{\"27\":1}}],[\"break\",{\"1\":{\"136\":1,\"602\":1}}],[\"breadcrumb\",{\"1\":{\"27\":1}}],[\"brew\",{\"1\":{\"73\":1,\"96\":1}}],[\"bwm1\",{\"1\":{\"43\":6}}],[\"block\",{\"1\":{\"830\":1,\"831\":1,\"891\":1,\"892\":1,\"894\":1,\"895\":1,\"923\":1,\"1065\":1}}],[\"blogger\",{\"1\":{\"27\":1}}],[\"blog\",{\"1\":{\"27\":4}}],[\"blank\",{\"1\":{\"825\":1,\"827\":1,\"858\":1,\"859\":1}}],[\"blind\",{\"1\":{\"43\":1}}],[\"gb\",{\"1\":{\"1062\":1}}],[\"gold\",{\"1\":{\"988\":2,\"989\":1,\"990\":1}}],[\"goto\",{\"1\":{\"830\":1,\"831\":1,\"838\":1,\"851\":1,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"915\":1,\"1009\":1,\"1010\":1,\"1036\":1,\"1044\":1,\"1045\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1052\":1}}],[\"gp\",{\"1\":{\"934\":2}}],[\"gn\",{\"1\":{\"924\":2,\"927\":1}}],[\"gi\",{\"1\":{\"915\":1}}],[\"gitee\",{\"1\":{\"434\":1}}],[\"github\",{\"1\":{\"8\":1}}],[\"g~~\",{\"1\":{\"874\":1}}],[\"g~\",{\"1\":{\"870\":1}}],[\"gu\",{\"1\":{\"870\":2}}],[\"guw\",{\"1\":{\"863\":1}}],[\"guide\",{\"1\":{\"27\":4}}],[\"ggyg\",{\"1\":{\"863\":1}}],[\"ggdg\",{\"1\":{\"863\":1}}],[\"gg\",{\"1\":{\"854\":1,\"855\":1}}],[\"gf\",{\"1\":{\"853\":1}}],[\"global\",{\"1\":{\"852\":1,\"989\":1}}],[\"gdefault\",{\"1\":{\"997\":1}}],[\"gd\",{\"1\":{\"851\":1,\"852\":1}}],[\"gk\",{\"1\":{\"810\":1}}],[\"gj\",{\"1\":{\"808\":1}}],[\"grep\",{\"1\":{\"801\":1}}],[\"grid\",{\"1\":{\"610\":5,\"633\":7,\"661\":4}}],[\"groupanagrams\",{\"1\":{\"530\":1}}],[\"group\",{\"1\":{\"27\":1}}],[\"gc\",{\"1\":{\"802\":2}}],[\"gcutil\",{\"1\":{\"802\":1}}],[\"gcd\",{\"1\":{\"497\":3}}],[\"gcstring\",{\"1\":{\"75\":1}}],[\"gas\",{\"1\":{\"387\":3}}],[\"g\",{\"1\":{\"201\":1,\"203\":4,\"827\":1,\"856\":1,\"857\":1,\"989\":2,\"990\":1,\"997\":1}}],[\"ge\",{\"1\":{\"819\":1,\"820\":1,\"1049\":1}}],[\"generatetrees\",{\"1\":{\"129\":1}}],[\"getvalue\",{\"1\":{\"626\":1}}],[\"getkey\",{\"1\":{\"626\":1}}],[\"getname\",{\"1\":{\"562\":4}}],[\"getordefault\",{\"1\":{\"530\":1}}],[\"getserialsquare\",{\"1\":{\"495\":1}}],[\"getboard\",{\"1\":{\"165\":2}}],[\"get\",{\"1\":{\"27\":2,\"148\":1,\"173\":2,\"193\":3,\"213\":2,\"594\":10,\"616\":3,\"626\":8}}],[\"=b表示a\",{\"1\":{\"593\":1}}],[\"=nums\",{\"1\":{\"533\":1}}],[\"=n\",{\"1\":{\"439\":1}}],[\"=i=z∑y​cost\",{\"1\":{\"384\":1}}],[\"=i=1∑n​g\",{\"1\":{\"203\":1}}],[\"=i=1∑n​f\",{\"1\":{\"203\":1}}],[\"=1\",{\"1\":{\"203\":1}}],[\"=g\",{\"1\":{\"203\":2}}],[\"==\",{\"1\":{\"43\":1,\"129\":1,\"136\":2,\"140\":2,\"142\":1,\"148\":2,\"156\":1,\"165\":1,\"173\":2,\"213\":1,\"221\":1,\"244\":1,\"255\":1,\"262\":1,\"268\":1,\"269\":1,\"270\":1,\"272\":1,\"273\":2,\"283\":1,\"284\":2,\"290\":1,\"294\":1,\"325\":1,\"328\":2,\"356\":1,\"362\":1,\"374\":1,\"393\":1,\"435\":1,\"437\":2,\"488\":1,\"497\":1,\"520\":1,\"562\":4,\"585\":1,\"594\":3,\"602\":1,\"610\":1,\"633\":9,\"661\":5,\"676\":1,\"682\":1,\"703\":6,\"711\":1,\"724\":1,\"731\":1,\"755\":1,\"757\":1,\"883\":1}}],[\"=\",{\"1\":{\"27\":1,\"43\":4,\"129\":7,\"136\":3,\"142\":4,\"148\":10,\"156\":3,\"165\":22,\"173\":22,\"176\":1,\"182\":1,\"193\":5,\"205\":5,\"211\":1,\"213\":6,\"221\":5,\"226\":2,\"227\":1,\"228\":1,\"229\":1,\"231\":4,\"244\":9,\"253\":3,\"255\":6,\"262\":7,\"267\":1,\"271\":1,\"272\":2,\"273\":11,\"279\":1,\"280\":1,\"282\":2,\"283\":1,\"284\":7,\"290\":1,\"291\":2,\"294\":7,\"301\":1,\"302\":1,\"303\":2,\"304\":5,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"315\":9,\"321\":1,\"322\":1,\"328\":9,\"335\":1,\"336\":1,\"337\":1,\"339\":8,\"346\":4,\"355\":2,\"356\":4,\"361\":2,\"362\":4,\"374\":6,\"387\":7,\"393\":9,\"406\":4,\"412\":3,\"418\":2,\"424\":1,\"435\":12,\"437\":15,\"484\":3,\"488\":4,\"489\":11,\"493\":4,\"495\":3,\"520\":4,\"526\":1,\"530\":4,\"544\":6,\"560\":1,\"562\":9,\"576\":6,\"581\":1,\"585\":9,\"588\":2,\"589\":2,\"592\":1,\"593\":1,\"594\":25,\"602\":17,\"610\":18,\"613\":1,\"616\":14,\"622\":1,\"626\":14,\"633\":33,\"647\":12,\"653\":14,\"661\":11,\"671\":1,\"676\":9,\"682\":6,\"689\":3,\"703\":9,\"711\":1,\"724\":4,\"731\":4,\"742\":4,\"749\":11,\"757\":15,\"869\":1}}],[\"flag\",{\"1\":{\"997\":1}}],[\"flags\",{\"1\":{\"982\":1,\"986\":1,\"991\":1}}],[\"flowchart\",{\"1\":{\"27\":1}}],[\"full\",{\"1\":{\"802\":1}}],[\"fb\",{\"1\":{\"562\":5}}],[\"f\",{\"1\":{\"202\":1,\"203\":1,\"821\":2,\"834\":1,\"1053\":1,\"1054\":1}}],[\"foobar\",{\"0\":{\"549\":1}}],[\"footnote\",{\"1\":{\"27\":1}}],[\"footer\",{\"1\":{\"27\":1}}],[\"force\",{\"1\":{\"957\":1}}],[\"format\",{\"1\":{\"869\":1,\"883\":1}}],[\"forward\",{\"1\":{\"842\":1,\"847\":1,\"848\":1}}],[\"fork\",{\"1\":{\"576\":6}}],[\"for\",{\"1\":{\"129\":3,\"136\":1,\"148\":2,\"156\":2,\"165\":3,\"173\":3,\"193\":1,\"205\":2,\"213\":1,\"231\":2,\"244\":1,\"255\":3,\"262\":2,\"273\":4,\"284\":3,\"294\":2,\"304\":1,\"315\":1,\"328\":2,\"339\":1,\"346\":2,\"356\":2,\"362\":2,\"374\":1,\"387\":1,\"393\":2,\"406\":1,\"412\":1,\"424\":1,\"435\":3,\"437\":2,\"493\":1,\"520\":2,\"530\":1,\"544\":2,\"562\":1,\"576\":1,\"585\":2,\"594\":3,\"602\":4,\"610\":5,\"616\":4,\"626\":5,\"633\":9,\"647\":3,\"653\":5,\"661\":1,\"676\":2,\"682\":1,\"703\":2,\"711\":1,\"724\":1,\"731\":1,\"749\":5,\"757\":5,\"896\":1,\"990\":1,\"991\":1,\"993\":1,\"996\":1,\"1037\":2,\"1047\":1,\"1065\":1}}],[\"faster\",{\"0\":{\"1033\":1}}],[\"far\",{\"1\":{\"374\":4}}],[\"false\",{\"1\":{\"148\":1,\"165\":3,\"173\":2,\"437\":1,\"488\":1,\"724\":1}}],[\"failed\",{\"1\":{\"77\":1}}],[\"faq\",{\"1\":{\"27\":1}}],[\"first\",{\"1\":{\"824\":1,\"825\":1,\"988\":1,\"1036\":1,\"1043\":1}}],[\"fizzbuzz\",{\"1\":{\"560\":1,\"562\":9}}],[\"fizz\",{\"1\":{\"560\":4,\"562\":5}}],[\"filled\",{\"1\":{\"633\":2}}],[\"filling\",{\"1\":{\"633\":2}}],[\"fill\",{\"1\":{\"328\":1,\"356\":1,\"362\":1,\"633\":2}}],[\"files\",{\"1\":{\"961\":1,\"962\":1,\"963\":1,\"964\":1}}],[\"filename=\",{\"1\":{\"43\":1}}],[\"file\",{\"1\":{\"27\":1,\"75\":2,\"838\":1,\"853\":1,\"854\":1,\"856\":1,\"954\":2,\"955\":1,\"956\":1,\"958\":1,\"959\":1,\"960\":1,\"974\":1,\"975\":1,\"990\":1,\"992\":1,\"993\":1,\"999\":1,\"1000\":1,\"1002\":1,\"1003\":1,\"1005\":1,\"1008\":2}}],[\"finally\",{\"1\":{\"562\":4}}],[\"finished\",{\"1\":{\"173\":3}}],[\"finddiagonalorder\",{\"1\":{\"676\":1}}],[\"find\",{\"1\":{\"585\":3,\"594\":6,\"602\":5,\"610\":5,\"616\":5,\"626\":4,\"633\":6,\"821\":1,\"1053\":1,\"1054\":1}}],[\"findredundantconnection\",{\"1\":{\"585\":1}}],[\"findminarrowshots\",{\"1\":{\"406\":1}}],[\"finditinerary\",{\"1\":{\"193\":1}}],[\"finding\",{\"1\":{\"77\":1}}],[\"findsubsequences\",{\"1\":{\"142\":1}}],[\"feed\",{\"1\":{\"27\":2}}],[\"feature\",{\"1\":{\"27\":3}}],[\"front\",{\"1\":{\"418\":1}}],[\"frontmatter\",{\"1\":{\"27\":3}}],[\"from\",{\"1\":{\"27\":1,\"43\":1,\"176\":1,\"633\":1,\"876\":1,\"878\":1}}],[\"f39c12\",{\"1\":{\"25\":1}}],[\"2再取整\",{\"1\":{\"730\":1}}],[\"2k\",{\"1\":{\"439\":1}}],[\"256\",{\"1\":{\"435\":3}}],[\"28\",{\"1\":{\"434\":1}}],[\"26\",{\"1\":{\"393\":1,\"437\":1}}],[\"2n+1\",{\"1\":{\"204\":1}}],[\"2\",{\"1\":{\"109\":1,\"140\":1,\"165\":3,\"205\":1,\"210\":1,\"211\":1,\"213\":1,\"221\":1,\"231\":1,\"255\":1,\"262\":1,\"290\":1,\"294\":1,\"324\":1,\"328\":1,\"488\":1,\"495\":1,\"520\":1,\"560\":1,\"594\":3,\"602\":5,\"671\":1,\"672\":1,\"676\":1,\"682\":6,\"707\":1,\"708\":1,\"730\":2,\"731\":1,\"752\":1}}],[\"20172\",{\"1\":{\"103\":1}}],[\"2c3e50\",{\"1\":{\"25\":1}}],[\"2980b9\",{\"1\":{\"25\":1}}],[\"27ae60\",{\"1\":{\"25\":1}}],[\"cmd\",{\"1\":{\"1005\":1}}],[\"cmodp=\",{\"1\":{\"504\":1}}],[\"ci\",{\"1\":{\"897\":1}}],[\"ciw\",{\"1\":{\"897\":1}}],[\"cc\",{\"1\":{\"874\":1,\"877\":1}}],[\"custom\",{\"0\":{\"1021\":1}}],[\"cut\",{\"1\":{\"865\":1,\"867\":1,\"899\":1,\"900\":1,\"901\":1,\"945\":2}}],[\"cursors\",{\"0\":{\"1059\":1},\"1\":{\"1060\":1,\"1064\":1}}],[\"cursor\",{\"1\":{\"821\":1,\"822\":1,\"830\":1,\"831\":1,\"839\":1,\"840\":1,\"841\":1,\"868\":1,\"876\":1,\"878\":1,\"880\":1,\"899\":1,\"900\":1,\"901\":1,\"902\":1,\"903\":1,\"909\":1,\"910\":1,\"925\":1,\"930\":1,\"934\":1,\"935\":1,\"951\":1,\"977\":1,\"1036\":1,\"1061\":1,\"1062\":1}}],[\"curlen\",{\"1\":{\"544\":2}}],[\"currob\",{\"1\":{\"213\":2}}],[\"currentthread\",{\"1\":{\"562\":4}}],[\"current\",{\"1\":{\"213\":4,\"913\":1,\"914\":1,\"926\":1,\"972\":1,\"988\":1,\"989\":1}}],[\"cur\",{\"1\":{\"142\":8,\"193\":3,\"387\":3,\"495\":4,\"544\":2,\"562\":14,\"647\":9,\"661\":3}}],[\"crtl\",{\"1\":{\"907\":1}}],[\"crusor\",{\"1\":{\"848\":1,\"849\":1}}],[\"creating\",{\"1\":{\"1005\":1}}],[\"creative\",{\"1\":{\"27\":2}}],[\"create\",{\"1\":{\"27\":1,\"954\":1}}],[\"ctrl\",{\"1\":{\"832\":1,\"833\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"917\":1,\"918\":1,\"919\":1,\"923\":1,\"949\":1,\"950\":3}}],[\"cpu\",{\"0\":{\"797\":1},\"1\":{\"798\":1}}],[\"cpanmetadb\",{\"1\":{\"77\":1}}],[\"cpanm\",{\"1\":{\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"cpan\",{\"1\":{\"68\":1,\"70\":1}}],[\"c2\",{\"1\":{\"703\":5}}],[\"c1\",{\"1\":{\"703\":5}}],[\"close\",{\"1\":{\"956\":1,\"959\":1,\"960\":1,\"962\":1,\"963\":1,\"964\":1,\"1011\":1}}],[\"clear\",{\"1\":{\"676\":1}}],[\"class\",{\"1\":{\"129\":1,\"136\":1,\"142\":1,\"148\":1,\"156\":1,\"165\":1,\"173\":1,\"193\":1,\"205\":1,\"213\":1,\"221\":1,\"231\":1,\"244\":1,\"255\":1,\"262\":1,\"273\":1,\"284\":1,\"294\":1,\"304\":1,\"315\":1,\"328\":1,\"339\":1,\"346\":1,\"356\":1,\"362\":1,\"374\":1,\"387\":1,\"393\":1,\"406\":1,\"412\":1,\"418\":1,\"424\":1,\"435\":1,\"437\":1,\"520\":1,\"530\":1,\"544\":1,\"562\":1,\"576\":1,\"585\":1,\"594\":2,\"602\":1,\"610\":1,\"616\":1,\"626\":1,\"633\":1,\"647\":1,\"653\":1,\"661\":1,\"676\":1,\"682\":1,\"689\":1,\"703\":1,\"711\":1,\"724\":1,\"731\":1,\"742\":1,\"749\":1,\"757\":1}}],[\"ceiling\",{\"1\":{\"633\":5}}],[\"center\",{\"1\":{\"19\":1,\"839\":1}}],[\"cj\",{\"1\":{\"589\":1}}],[\"c≡b\",{\"1\":{\"510\":1}}],[\"c≡dmodp\",{\"1\":{\"507\":1}}],[\"c0​=1\",{\"1\":{\"204\":1}}],[\"c0392b\",{\"1\":{\"25\":1}}],[\"cnm​​=m\",{\"1\":{\"491\":1}}],[\"cnt++\",{\"1\":{\"676\":1}}],[\"cnt\",{\"1\":{\"374\":2,\"406\":2,\"412\":2,\"488\":2,\"676\":1,\"757\":3}}],[\"cn+1​=n+22\",{\"1\":{\"204\":1}}],[\"cn​\",{\"1\":{\"204\":1}}],[\"case\",{\"1\":{\"904\":1,\"991\":1}}],[\"capitalize\",{\"1\":{\"875\":1}}],[\"calcequation\",{\"1\":{\"594\":1}}],[\"call\",{\"1\":{\"576\":1}}],[\"catch\",{\"1\":{\"562\":4}}],[\"category\",{\"1\":{\"27\":1}}],[\"care\",{\"1\":{\"437\":1}}],[\"canal\",{\"1\":{\"775\":1}}],[\"cancompletecircuit\",{\"1\":{\"387\":1}}],[\"can\",{\"1\":{\"213\":2,\"845\":1,\"943\":1,\"951\":1,\"976\":1,\"1006\":1,\"1058\":1}}],[\"candidates\",{\"1\":{\"136\":11}}],[\"c参数以实现断点续传\",{\"1\":{\"104\":1}}],[\"cs\",{\"1\":{\"103\":1,\"1013\":1,\"1016\":1,\"1017\":1}}],[\"csv\",{\"1\":{\"56\":1}}],[\"c\",{\"1\":{\"59\":1,\"103\":1,\"165\":8,\"173\":8,\"435\":4,\"503\":1,\"588\":1,\"610\":5,\"633\":5,\"653\":6,\"661\":8,\"676\":3,\"720\":2,\"721\":1,\"722\":1,\"749\":4,\"865\":1,\"878\":1,\"941\":1,\"991\":1}}],[\"checkpossibility\",{\"1\":{\"724\":1}}],[\"ch\",{\"1\":{\"489\":3,\"901\":1}}],[\"child\",{\"1\":{\"437\":7}}],[\"children\",{\"1\":{\"27\":20}}],[\"characters\",{\"1\":{\"935\":1,\"938\":1}}],[\"charat\",{\"1\":{\"262\":2,\"273\":2,\"284\":2,\"294\":2,\"393\":2,\"435\":4,\"437\":2,\"616\":1,\"682\":2,\"731\":2}}],[\"char\",{\"1\":{\"148\":2,\"165\":2,\"173\":3,\"530\":1,\"616\":2,\"647\":4,\"811\":1,\"812\":1,\"821\":3,\"822\":3,\"823\":1,\"824\":1,\"825\":1,\"827\":1,\"858\":1,\"859\":1,\"899\":1,\"900\":1,\"901\":1,\"902\":1,\"904\":1,\"917\":1,\"921\":1,\"996\":1,\"1014\":2,\"1018\":1,\"1020\":2,\"1036\":3,\"1038\":2,\"1039\":2,\"1053\":2,\"1054\":2,\"1055\":2,\"1056\":2,\"1057\":2}}],[\"changed\",{\"1\":{\"915\":1,\"984\":1,\"997\":1}}],[\"changes\",{\"1\":{\"906\":1}}],[\"changeone\",{\"1\":{\"647\":2}}],[\"changelog\",{\"1\":{\"27\":1}}],[\"change\",{\"1\":{\"27\":1,\"865\":1,\"877\":1,\"878\":1,\"898\":1,\"905\":1,\"907\":1,\"945\":1,\"977\":1,\"989\":1,\"990\":1,\"992\":1,\"1016\":1,\"1023\":1}}],[\"choose\",{\"1\":{\"142\":2}}],[\"countsmaller\",{\"1\":{\"749\":1}}],[\"countsubstrings\",{\"1\":{\"731\":1}}],[\"count\",{\"1\":{\"633\":3,\"647\":2,\"850\":1,\"862\":2,\"906\":2,\"936\":2,\"1013\":1}}],[\"countbit\",{\"1\":{\"488\":1}}],[\"cost\",{\"1\":{\"387\":2}}],[\"coins\",{\"1\":{\"356\":2,\"362\":2}}],[\"coinchange\",{\"1\":{\"356\":1,\"362\":1}}],[\"coin\",{\"1\":{\"355\":1,\"356\":3,\"361\":1,\"362\":3}}],[\"cool必由前一天出售股票转移而来\",{\"1\":{\"337\":1}}],[\"cool\",{\"1\":{\"336\":1,\"339\":4}}],[\"cookbook\",{\"1\":{\"27\":2}}],[\"copying\",{\"0\":{\"928\":1}}],[\"copyright\",{\"1\":{\"27\":1}}],[\"copy\",{\"1\":{\"27\":1,\"633\":10,\"866\":1,\"879\":1,\"978\":1}}],[\"combined\",{\"1\":{\"1058\":1}}],[\"combine\",{\"1\":{\"957\":1}}],[\"combinationsum4\",{\"1\":{\"346\":1}}],[\"combinationsum2\",{\"1\":{\"136\":1}}],[\"compare\",{\"1\":{\"406\":1,\"602\":1,\"711\":1}}],[\"comparator<int\",{\"1\":{\"406\":1,\"602\":1,\"711\":1}}],[\"computeifabsent\",{\"1\":{\"193\":1,\"594\":2,\"616\":1,\"626\":1}}],[\"component\",{\"1\":{\"27\":1}}],[\"components\",{\"1\":{\"27\":1}}],[\"com\",{\"1\":{\"48\":1,\"622\":11}}],[\"commands\",{\"1\":{\"977\":2,\"978\":1,\"1068\":1}}],[\"commandlinetools\",{\"1\":{\"68\":1}}],[\"command+单击\",{\"1\":{\"65\":1}}],[\"command\",{\"0\":{\"952\":1},\"1\":{\"27\":1,\"850\":2,\"945\":1,\"953\":1,\"955\":1,\"956\":1,\"957\":1,\"965\":2,\"966\":2,\"976\":1,\"977\":1,\"979\":1}}],[\"comment\",{\"1\":{\"27\":2}}],[\"common\",{\"1\":{\"27\":1}}],[\"code\",{\"1\":{\"27\":3,\"576\":1,\"869\":1}}],[\"col\",{\"1\":{\"165\":5,\"173\":5,\"610\":3,\"653\":4}}],[\"column\",{\"1\":{\"165\":2}}],[\"collections\",{\"1\":{\"156\":2,\"193\":1,\"602\":1,\"676\":1,\"749\":1}}],[\"collapsable\",{\"1\":{\"27\":11}}],[\"color\",{\"1\":{\"27\":1}}],[\"colors\",{\"1\":{\"25\":1}}],[\"consecutive\",{\"1\":{\"1064\":1}}],[\"consistent\",{\"1\":{\"781\":1}}],[\"consider\",{\"1\":{\"633\":1,\"977\":1}}],[\"const\",{\"1\":{\"27\":1}}],[\"connect\",{\"1\":{\"633\":2}}],[\"convert\",{\"1\":{\"626\":1}}],[\"con\",{\"1\":{\"562\":9}}],[\"condition\",{\"1\":{\"562\":1}}],[\"confirm\",{\"1\":{\"991\":1}}],[\"configure\",{\"1\":{\"986\":1}}],[\"config\",{\"1\":{\"24\":1,\"27\":7}}],[\"conf\",{\"1\":{\"87\":1,\"94\":1,\"97\":1,\"99\":1}}],[\"containskey\",{\"1\":{\"626\":1}}],[\"contains\",{\"1\":{\"544\":2,\"647\":3}}],[\"container\",{\"1\":{\"27\":1}}],[\"continue\",{\"1\":{\"136\":1,\"148\":1,\"165\":1,\"633\":1,\"976\":1}}],[\"contrib\",{\"0\":{\"106\":1},\"1\":{\"107\":1}}],[\"contribution\",{\"1\":{\"27\":1}}],[\"content\",{\"1\":{\"27\":1,\"43\":2,\"947\":1}}],[\"图中为其出生之日的月相\",{\"1\":{\"42\":1}}],[\"图标描述\",{\"1\":{\"22\":1}}],[\"图片隐写\",{\"0\":{\"41\":1}}],[\"图片\",{\"0\":{\"21\":1}}],[\"图表\",{\"0\":{\"13\":1}}],[\"卡片\",{\"0\":{\"20\":1}}],[\"range\",{\"1\":{\"966\":1,\"967\":1,\"969\":1,\"982\":1,\"983\":2}}],[\"rr\",{\"1\":{\"774\":1}}],[\"rc\",{\"1\":{\"774\":1}}],[\"r2\",{\"1\":{\"703\":5}}],[\"r1\",{\"1\":{\"703\":5}}],[\"r++\",{\"1\":{\"676\":1,\"757\":2}}],[\"ry\",{\"1\":{\"585\":3,\"594\":3,\"602\":3,\"616\":3,\"633\":4}}],[\"rx\",{\"1\":{\"585\":3,\"593\":1,\"594\":4,\"602\":3,\"616\":3,\"633\":4}}],[\"root\",{\"1\":{\"221\":2}}],[\"rob\",{\"1\":{\"213\":11,\"221\":3}}],[\"row\",{\"1\":{\"165\":12,\"173\":5,\"610\":3,\"633\":1,\"653\":4}}],[\"r\",{\"1\":{\"173\":8,\"610\":5,\"633\":5,\"653\":6,\"661\":8,\"676\":2,\"731\":3,\"757\":7,\"902\":1,\"903\":1,\"907\":1,\"949\":1,\"950\":3}}],[\"rsa\",{\"1\":{\"58\":1}}],[\"relative\",{\"1\":{\"954\":1,\"1000\":1,\"1003\":1}}],[\"release\",{\"1\":{\"576\":1}}],[\"reg\",{\"1\":{\"947\":1}}],[\"register\",{\"1\":{\"941\":1,\"942\":1,\"944\":1,\"945\":1,\"947\":2,\"949\":1,\"967\":2,\"968\":1}}],[\"registers\",{\"0\":{\"939\":1},\"1\":{\"943\":1}}],[\"regular\",{\"1\":{\"845\":1,\"984\":1}}],[\"rectangle\",{\"1\":{\"1066\":1}}],[\"rect\",{\"1\":{\"923\":1}}],[\"reconstructqueue\",{\"1\":{\"711\":1}}],[\"represent\",{\"1\":{\"972\":1,\"973\":1,\"974\":1,\"975\":1}}],[\"repeat\",{\"1\":{\"823\":1,\"898\":1,\"979\":1,\"980\":1,\"1062\":1}}],[\"replace\",{\"1\":{\"27\":1,\"902\":1,\"903\":1,\"988\":1}}],[\"redo\",{\"1\":{\"907\":1}}],[\"redolog\",{\"1\":{\"775\":1}}],[\"redis\",{\"1\":{\"769\":3,\"770\":1,\"776\":1,\"781\":1,\"782\":1}}],[\"reentrantlock\",{\"1\":{\"562\":2,\"576\":3}}],[\"ref\",{\"1\":{\"434\":1}}],[\"reversepairs\",{\"1\":{\"757\":1}}],[\"reverse\",{\"1\":{\"193\":1,\"633\":1,\"676\":1,\"749\":1}}],[\"remove\",{\"1\":{\"142\":1,\"872\":1,\"1032\":1}}],[\"removelast\",{\"1\":{\"136\":1}}],[\"result\",{\"1\":{\"148\":3,\"165\":3,\"495\":3,\"626\":1}}],[\"res\",{\"1\":{\"136\":3,\"142\":3,\"148\":5,\"156\":3,\"165\":3,\"193\":4,\"205\":7,\"221\":3,\"393\":3,\"437\":3,\"489\":3,\"520\":4,\"594\":4,\"602\":3,\"616\":3,\"626\":3,\"633\":3,\"647\":4,\"653\":3,\"661\":2,\"676\":3,\"703\":4,\"711\":4,\"731\":2,\"742\":4,\"749\":4}}],[\"restart\",{\"1\":{\"85\":1}}],[\"return\",{\"1\":{\"43\":1,\"129\":4,\"136\":2,\"142\":2,\"148\":2,\"156\":1,\"165\":3,\"173\":1,\"185\":1,\"189\":1,\"191\":1,\"193\":1,\"205\":1,\"213\":3,\"221\":3,\"231\":1,\"244\":1,\"255\":3,\"262\":1,\"273\":2,\"284\":3,\"294\":1,\"304\":1,\"315\":1,\"328\":2,\"339\":1,\"346\":1,\"356\":2,\"362\":2,\"374\":1,\"387\":1,\"393\":1,\"406\":4,\"412\":1,\"418\":3,\"435\":2,\"437\":5,\"488\":3,\"489\":1,\"495\":1,\"497\":2,\"520\":1,\"530\":1,\"544\":1,\"585\":3,\"594\":4,\"602\":3,\"610\":3,\"616\":2,\"626\":2,\"633\":2,\"647\":3,\"653\":1,\"661\":3,\"676\":1,\"682\":2,\"689\":2,\"703\":1,\"711\":2,\"724\":3,\"731\":1,\"742\":1,\"749\":1,\"757\":1}}],[\"readonly\",{\"1\":{\"958\":1}}],[\"read\",{\"1\":{\"43\":2}}],[\"right+1\",{\"1\":{\"757\":1}}],[\"rightfork\",{\"1\":{\"576\":3}}],[\"rightnode\",{\"1\":{\"129\":2}}],[\"righttrees\",{\"1\":{\"129\":2}}],[\"right\",{\"1\":{\"19\":1,\"129\":5,\"213\":2,\"221\":5,\"488\":1,\"633\":1,\"682\":4,\"689\":5,\"742\":8,\"755\":2,\"757\":5,\"881\":1}}],[\"runnable\",{\"1\":{\"562\":10,\"576\":6}}],[\"run\",{\"1\":{\"6\":1,\"9\":1,\"562\":13,\"576\":6,\"965\":1}}],[\"嵌套时用\",{\"1\":{\"17\":1}}],[\"正常使用时用\",{\"1\":{\"17\":1}}],[\"two\",{\"1\":{\"1036\":1}}],[\"twosum\",{\"1\":{\"689\":1}}],[\"type\",{\"1\":{\"976\":1,\"1005\":1,\"1020\":1,\"1062\":1,\"1065\":1,\"1067\":1}}],[\"typed\",{\"1\":{\"917\":1,\"918\":1,\"919\":1}}],[\"type=\",{\"1\":{\"116\":1}}],[\"tcp\",{\"1\":{\"794\":1}}],[\"tmp\",{\"1\":{\"757\":9}}],[\"txt\",{\"1\":{\"435\":3}}],[\"together\",{\"1\":{\"1026\":1}}],[\"towards\",{\"1\":{\"823\":1}}],[\"top\",{\"1\":{\"799\":1,\"840\":1,\"854\":1,\"925\":1}}],[\"top查看占用\",{\"1\":{\"798\":1}}],[\"toarray\",{\"1\":{\"711\":1}}],[\"total\",{\"1\":{\"387\":3}}],[\"to\",{\"1\":{\"176\":1,\"193\":6,\"576\":1,\"626\":1,\"633\":4,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"839\":1,\"840\":1,\"841\":1,\"865\":1,\"873\":1,\"875\":1,\"876\":1,\"878\":1,\"954\":1,\"957\":1,\"967\":1,\"969\":1,\"981\":1,\"983\":1,\"984\":1,\"985\":1,\"991\":1,\"1000\":1,\"1003\":1,\"1005\":1,\"1016\":1,\"1019\":1,\"1023\":1,\"1043\":1,\"1062\":2,\"1063\":2,\"1066\":1,\"1067\":2,\"1068\":1}}],[\"tostring\",{\"1\":{\"148\":1}}],[\"tochararray\",{\"1\":{\"148\":1,\"530\":1,\"647\":1}}],[\"things\",{\"1\":{\"945\":1}}],[\"thing\",{\"1\":{\"944\":1}}],[\"this\",{\"1\":{\"142\":1,\"435\":1,\"437\":2,\"562\":1,\"653\":5}}],[\"that\",{\"1\":{\"927\":1,\"944\":1,\"945\":1,\"976\":1,\"984\":1,\"986\":1,\"1036\":1}}],[\"them\",{\"1\":{\"967\":1,\"968\":1}}],[\"theme\",{\"1\":{\"2\":1,\"27\":6}}],[\"then\",{\"1\":{\"934\":1,\"976\":1,\"1020\":1}}],[\"the\",{\"1\":{\"576\":1,\"633\":1,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"915\":1,\"925\":1,\"926\":2,\"927\":1,\"934\":1,\"942\":1,\"943\":1,\"944\":1,\"945\":1,\"968\":1,\"984\":1,\"985\":1,\"988\":2,\"989\":1,\"992\":1,\"995\":1,\"997\":1,\"1039\":2,\"1043\":1,\"1047\":1,\"1068\":1}}],[\"thread\",{\"1\":{\"562\":8}}],[\"throws\",{\"1\":{\"562\":4,\"576\":1}}],[\"tp\",{\"1\":{\"114\":1}}],[\"ttf文件再次安装\",{\"1\":{\"79\":1}}],[\"turn\",{\"1\":{\"1063\":1}}],[\"tunemymusic\",{\"1\":{\"50\":1}}],[\"tutorial\",{\"1\":{\"27\":2}}],[\"t\",{\"1\":{\"43\":1,\"59\":1,\"193\":3,\"249\":1,\"251\":2,\"252\":1,\"253\":6,\"280\":1,\"284\":7,\"484\":2,\"562\":4,\"822\":2,\"896\":1,\"1055\":1,\"1056\":1,\"1058\":1}}],[\"temporarily\",{\"1\":{\"965\":1}}],[\"temp\",{\"1\":{\"676\":5}}],[\"tea\",{\"1\":{\"526\":1,\"527\":1}}],[\"test\",{\"1\":{\"30\":1}}],[\"tex\",{\"1\":{\"27\":1,\"67\":1}}],[\"text\",{\"1\":{\"27\":20,\"884\":1,\"885\":1,\"886\":1,\"887\":1,\"893\":1,\"966\":1,\"976\":1,\"981\":1,\"984\":1,\"985\":1,\"1020\":2,\"1039\":1,\"1066\":1,\"1067\":1}}],[\"titles\",{\"1\":{\"992\":1}}],[\"tickets\",{\"1\":{\"193\":2}}],[\"tiny\",{\"1\":{\"75\":1}}],[\"timeline\",{\"1\":{\"27\":1}}],[\"tip\",{\"1\":{\"16\":1}}],[\"tabonly\",{\"1\":{\"1011\":1}}],[\"tabo\",{\"1\":{\"1011\":1}}],[\"tabprevious\",{\"1\":{\"1010\":1}}],[\"tabp\",{\"1\":{\"1010\":1}}],[\"tabnext\",{\"1\":{\"1009\":1}}],[\"tabnew\",{\"1\":{\"1008\":1}}],[\"tabn\",{\"1\":{\"1009\":1}}],[\"tab\",{\"1\":{\"1008\":1,\"1009\":1,\"1010\":1}}],[\"tabs\",{\"0\":{\"998\":1},\"1\":{\"1011\":1}}],[\"tag\",{\"1\":{\"896\":1,\"1019\":1}}],[\"tags\",{\"1\":{\"27\":1}}],[\"tan\",{\"1\":{\"526\":1,\"527\":1}}],[\"taken\",{\"1\":{\"1040\":1}}],[\"take\",{\"1\":{\"213\":1}}],[\"target\",{\"1\":{\"136\":6,\"346\":4,\"647\":2,\"689\":3}}],[\"taoge\",{\"1\":{\"48\":1}}],[\"tasklist\",{\"1\":{\"27\":1}}],[\"traditional\",{\"1\":{\"1058\":1}}],[\"traversed\",{\"1\":{\"1039\":1}}],[\"trikies\",{\"0\":{\"908\":1,\"916\":1}}],[\"trie\",{\"0\":{\"436\":1},\"1\":{\"437\":9}}],[\"try\",{\"1\":{\"562\":8}}],[\"treeset<>\",{\"1\":{\"626\":1,\"749\":1}}],[\"treeset<string>>\",{\"1\":{\"626\":2}}],[\"treen​=i=n−2k+1∑n​treei​\",{\"1\":{\"439\":1}}],[\"treenode\",{\"1\":{\"129\":4,\"221\":2}}],[\"tree\",{\"1\":{\"439\":1}}],[\"true\",{\"1\":{\"27\":11,\"148\":1,\"165\":3,\"173\":4,\"437\":1,\"653\":1,\"661\":2,\"724\":3}}],[\"troubleshooting\",{\"1\":{\"27\":1}}],[\"ts中配置pagepatterns避免\",{\"1\":{\"24\":1}}],[\"i|a\",{\"1\":{\"884\":1,\"887\":1}}],[\"i2\",{\"1\":{\"594\":5}}],[\"i1\",{\"1\":{\"594\":5}}],[\"i18n\",{\"1\":{\"27\":2}}],[\"it\",{\"1\":{\"633\":1,\"1062\":1}}],[\"its\",{\"1\":{\"576\":1,\"633\":1}}],[\"item\",{\"1\":{\"412\":3}}],[\"i=j\",{\"1\":{\"533\":1}}],[\"is\",{\"1\":{\"562\":1,\"633\":2,\"942\":1,\"1040\":1}}],[\"isoverflow\",{\"1\":{\"489\":1}}],[\"ispoweroftwo\",{\"1\":{\"488\":1}}],[\"isend\",{\"1\":{\"437\":5}}],[\"isempty\",{\"1\":{\"193\":1,\"418\":3,\"424\":1,\"647\":1,\"661\":1}}],[\"io\",{\"1\":{\"434\":1,\"788\":1}}],[\"i=z∑y​gas\",{\"1\":{\"384\":1}}],[\"i=x∑z​gas\",{\"1\":{\"382\":1}}],[\"iv\",{\"0\":{\"316\":1,\"341\":1},\"1\":{\"333\":1}}],[\"i−j\",{\"1\":{\"229\":2,\"533\":1}}],[\"i−1\",{\"1\":{\"126\":1,\"200\":1,\"203\":2}}],[\"i++\",{\"1\":{\"173\":1,\"231\":1,\"262\":1,\"273\":3,\"315\":1,\"339\":1,\"437\":2,\"576\":1}}],[\"i+1\",{\"1\":{\"126\":1,\"200\":1,\"278\":1,\"282\":2,\"283\":2,\"290\":1,\"291\":1}}],[\"iii\",{\"0\":{\"214\":1,\"305\":1,\"513\":1},\"1\":{\"320\":1}}],[\"ii\",{\"0\":{\"121\":1,\"130\":1,\"206\":1,\"296\":1,\"368\":1,\"531\":1,\"683\":1,\"696\":1},\"1\":{\"140\":1,\"147\":1,\"309\":1,\"333\":1,\"447\":1}}],[\"ip\",{\"1\":{\"114\":1,\"119\":2}}],[\"ip$用来指定网络代理\",{\"1\":{\"105\":1}}],[\"i$home\",{\"1\":{\"71\":1}}],[\"i\",{\"1\":{\"48\":1,\"74\":1,\"126\":1,\"129\":5,\"136\":9,\"140\":4,\"148\":14,\"156\":4,\"164\":1,\"165\":7,\"171\":2,\"173\":19,\"176\":1,\"200\":1,\"202\":2,\"203\":3,\"205\":4,\"211\":5,\"213\":3,\"226\":2,\"227\":2,\"228\":2,\"229\":1,\"231\":7,\"255\":10,\"261\":1,\"262\":8,\"267\":2,\"268\":3,\"269\":2,\"270\":3,\"271\":4,\"272\":11,\"273\":17,\"280\":2,\"282\":1,\"283\":2,\"284\":11,\"289\":2,\"290\":2,\"291\":3,\"294\":12,\"298\":1,\"300\":2,\"301\":4,\"302\":4,\"303\":5,\"304\":4,\"307\":1,\"310\":3,\"311\":4,\"312\":5,\"313\":4,\"315\":6,\"318\":1,\"320\":2,\"321\":5,\"322\":5,\"328\":6,\"331\":1,\"335\":4,\"336\":3,\"337\":3,\"339\":4,\"355\":4,\"361\":4,\"374\":5,\"377\":2,\"382\":4,\"384\":6,\"387\":5,\"393\":8,\"402\":1,\"406\":4,\"435\":4,\"437\":6,\"484\":3,\"533\":1,\"576\":3,\"581\":1,\"585\":4,\"588\":3,\"594\":16,\"602\":12,\"605\":2,\"610\":14,\"613\":1,\"616\":13,\"619\":2,\"624\":1,\"626\":10,\"633\":24,\"647\":6,\"653\":13,\"682\":9,\"706\":1,\"724\":8,\"730\":1,\"731\":5,\"745\":3,\"749\":4,\"752\":1,\"755\":2,\"757\":13,\"885\":1,\"909\":1,\"911\":1,\"991\":1,\"1067\":1}}],[\"id++\",{\"1\":{\"594\":2}}],[\"idx++\",{\"1\":{\"749\":1}}],[\"idxmail\",{\"1\":{\"626\":3}}],[\"idx\",{\"1\":{\"173\":9,\"437\":7,\"626\":2,\"749\":8}}],[\"id=1736483147\",{\"1\":{\"48\":1}}],[\"id\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"594\":1,\"602\":5,\"884\":1}}],[\"if\",{\"1\":{\"43\":1,\"129\":2,\"136\":3,\"142\":4,\"148\":2,\"156\":1,\"165\":2,\"173\":3,\"193\":1,\"213\":3,\"221\":1,\"255\":2,\"262\":1,\"273\":2,\"284\":3,\"294\":1,\"328\":1,\"346\":1,\"356\":1,\"362\":1,\"374\":1,\"387\":1,\"393\":1,\"406\":3,\"412\":1,\"418\":2,\"435\":1,\"437\":3,\"488\":1,\"520\":2,\"544\":2,\"562\":4,\"585\":1,\"594\":3,\"602\":4,\"610\":2,\"616\":1,\"626\":1,\"633\":9,\"647\":4,\"653\":2,\"661\":4,\"676\":1,\"682\":1,\"689\":2,\"703\":9,\"724\":4,\"742\":2,\"757\":2,\"925\":1,\"926\":1,\"927\":1,\"958\":1,\"977\":1}}],[\"img=925\",{\"1\":{\"43\":1}}],[\"img\",{\"1\":{\"43\":1}}],[\"import\",{\"1\":{\"27\":1,\"43\":1,\"853\":1}}],[\"inner\",{\"1\":{\"885\":1}}],[\"indentation\",{\"1\":{\"871\":1,\"872\":1,\"992\":1}}],[\"index\",{\"1\":{\"610\":5,\"626\":2}}],[\"in\",{\"0\":{\"940\":1,\"948\":1,\"1012\":1},\"1\":{\"853\":1,\"925\":1,\"926\":1,\"927\":1,\"933\":1,\"951\":1,\"965\":1,\"976\":1,\"988\":1,\"989\":1,\"992\":1,\"999\":1,\"1002\":1,\"1008\":1,\"1020\":1,\"1058\":1,\"1064\":1}}],[\"init\",{\"1\":{\"633\":1}}],[\"input\",{\"1\":{\"526\":1,\"622\":1,\"671\":1,\"693\":1,\"707\":1,\"844\":1,\"976\":1}}],[\"instead\",{\"1\":{\"1040\":1}}],[\"install\",{\"1\":{\"27\":1,\"70\":1,\"73\":1}}],[\"insensitive\",{\"1\":{\"991\":1}}],[\"insert\",{\"0\":{\"916\":1,\"948\":1},\"1\":{\"437\":1,\"865\":1,\"901\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":2,\"914\":2,\"915\":1,\"951\":1,\"1067\":1}}],[\"inside\",{\"1\":{\"968\":1}}],[\"inspect\",{\"1\":{\"947\":1}}],[\"include\",{\"1\":{\"94\":1}}],[\"intconsumer\",{\"1\":{\"562\":2}}],[\"interruptedexception\",{\"1\":{\"562\":8,\"576\":1}}],[\"intervalsi​=\",{\"1\":{\"409\":1}}],[\"intervals\",{\"1\":{\"409\":1,\"412\":3}}],[\"interface\",{\"1\":{\"27\":2}}],[\"integer>\",{\"1\":{\"594\":1,\"626\":1}}],[\"integerbreak\",{\"1\":{\"231\":1}}],[\"integer\",{\"1\":{\"142\":1,\"244\":2,\"412\":1,\"488\":2,\"520\":1,\"562\":1,\"594\":2}}],[\"int\",{\"1\":{\"129\":4,\"136\":6,\"142\":4,\"148\":2,\"156\":5,\"165\":11,\"173\":8,\"205\":6,\"213\":10,\"221\":9,\"231\":6,\"244\":5,\"255\":8,\"262\":6,\"273\":8,\"284\":6,\"294\":6,\"304\":4,\"315\":5,\"328\":9,\"339\":7,\"346\":7,\"356\":7,\"362\":7,\"374\":4,\"387\":6,\"393\":5,\"406\":7,\"412\":5,\"418\":3,\"424\":2,\"435\":8,\"437\":4,\"484\":4,\"488\":5,\"489\":3,\"493\":1,\"495\":2,\"497\":6,\"520\":7,\"544\":7,\"562\":4,\"576\":4,\"585\":12,\"594\":17,\"602\":23,\"610\":20,\"616\":11,\"626\":10,\"633\":33,\"647\":5,\"653\":14,\"661\":12,\"676\":10,\"682\":6,\"689\":7,\"703\":5,\"711\":7,\"724\":2,\"731\":4,\"742\":4,\"749\":11,\"757\":13}}],[\"intro\",{\"1\":{\"27\":6}}],[\"info\",{\"1\":{\"16\":1,\"27\":2}}],[\"icon\",{\"1\":{\"27\":21}}],[\"iconfont\",{\"1\":{\"4\":1}}],[\"multiple\",{\"0\":{\"1059\":1},\"1\":{\"977\":2,\"1060\":1}}],[\"multiply\",{\"1\":{\"850\":1}}],[\"much\",{\"1\":{\"926\":1}}],[\"music\",{\"1\":{\"46\":1,\"50\":1,\"54\":1}}],[\"mvcc\",{\"1\":{\"774\":1}}],[\"m+j规则编号\",{\"1\":{\"632\":1}}],[\"mlocal\",{\"1\":{\"71\":1,\"74\":1}}],[\"mm\",{\"1\":{\"70\":1}}],[\"mysql\",{\"1\":{\"775\":1,\"776\":1,\"777\":1,\"787\":2}}],[\"my\",{\"1\":{\"59\":1,\"60\":1}}],[\"m\",{\"1\":{\"48\":1,\"262\":5,\"273\":7,\"493\":1,\"602\":7,\"633\":6,\"653\":8,\"676\":4}}],[\"moving\",{\"0\":{\"1033\":1},\"1\":{\"1058\":1}}],[\"move\",{\"1\":{\"832\":1,\"833\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"839\":1,\"840\":1,\"841\":1,\"977\":1,\"978\":1,\"1007\":1,\"1061\":1}}],[\"more\",{\"1\":{\"991\":1}}],[\"motion\",{\"1\":{\"862\":2,\"941\":1,\"1013\":1,\"1018\":1,\"1039\":1}}],[\"motions\",{\"0\":{\"806\":1}}],[\"mode\",{\"0\":{\"805\":1,\"908\":1,\"916\":1,\"920\":1,\"940\":1,\"948\":1,\"952\":1},\"1\":{\"865\":1,\"901\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"915\":1,\"921\":1,\"922\":1,\"925\":1,\"926\":1,\"927\":1,\"951\":1,\"976\":1,\"1020\":1,\"1063\":1,\"1065\":1,\"1068\":1}}],[\"mode=\",{\"1\":{\"43\":2}}],[\"modp+c\",{\"1\":{\"502\":1}}],[\"modp\",{\"1\":{\"499\":1,\"500\":1,\"502\":2,\"503\":1,\"504\":2,\"505\":1,\"508\":1}}],[\"modp=\",{\"1\":{\"499\":1,\"502\":1,\"503\":1}}],[\"monotonestack\",{\"1\":{\"424\":1}}],[\"money\",{\"1\":{\"213\":2}}],[\"moon\",{\"1\":{\"43\":1}}],[\"make\",{\"1\":{\"976\":1}}],[\"majorityelement\",{\"1\":{\"703\":1}}],[\"matching\",{\"1\":{\"860\":1,\"1032\":1}}],[\"match\",{\"1\":{\"844\":1,\"846\":1,\"925\":2,\"927\":1}}],[\"mat\",{\"1\":{\"671\":1,\"676\":4}}],[\"math\",{\"1\":{\"213\":3,\"221\":3,\"231\":2,\"244\":5,\"262\":1,\"273\":2,\"294\":1,\"304\":2,\"315\":4,\"328\":5,\"339\":3,\"356\":1,\"362\":1,\"374\":1,\"393\":1,\"544\":1,\"602\":2,\"633\":1,\"682\":1,\"742\":2,\"757\":1}}],[\"mary\",{\"1\":{\"622\":4}}],[\"mark\",{\"1\":{\"27\":1}}],[\"markdown\",{\"1\":{\"3\":1,\"27\":10,\"992\":1}}],[\"mailtoidx\",{\"1\":{\"626\":6}}],[\"mails\",{\"1\":{\"626\":1}}],[\"mail\",{\"1\":{\"622\":11,\"626\":3}}],[\"main\",{\"1\":{\"43\":1,\"562\":1}}],[\"mappings\",{\"0\":{\"1021\":1}}],[\"map<integer\",{\"1\":{\"626\":1}}],[\"map<string\",{\"1\":{\"193\":1,\"530\":1,\"594\":1,\"626\":1}}],[\"map\",{\"1\":{\"530\":4,\"594\":5,\"626\":1}}],[\"mac\",{\"1\":{\"68\":1,\"119\":1}}],[\"macos\",{\"0\":{\"57\":1,\"61\":1},\"1\":{\"58\":1,\"79\":1}}],[\"maxarea\",{\"1\":{\"742\":1}}],[\"maxlen\",{\"1\":{\"544\":4}}],[\"maxqueue\",{\"1\":{\"418\":2}}],[\"maxprofit\",{\"1\":{\"304\":1,\"315\":1,\"328\":1,\"339\":1}}],[\"maxsubarraysumcircular\",{\"1\":{\"244\":1}}],[\"maxsum\",{\"1\":{\"243\":1,\"244\":5}}],[\"max⁡\",{\"1\":{\"229\":1}}],[\"maximum\",{\"1\":{\"213\":3}}],[\"max\",{\"1\":{\"38\":1,\"211\":1,\"213\":3,\"221\":3,\"231\":2,\"244\":4,\"262\":1,\"291\":1,\"294\":1,\"301\":1,\"302\":1,\"304\":2,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"315\":4,\"321\":1,\"322\":1,\"328\":4,\"335\":1,\"336\":1,\"339\":3,\"374\":1,\"393\":1,\"418\":1,\"544\":1,\"633\":1,\"682\":1,\"742\":1}}],[\"mid\",{\"1\":{\"488\":1}}],[\"minus\",{\"1\":{\"633\":1}}],[\"minimumeffortpath\",{\"1\":{\"602\":1}}],[\"mindistance\",{\"1\":{\"262\":1,\"273\":1}}],[\"minsum\",{\"1\":{\"243\":1,\"244\":5}}],[\"min\",{\"1\":{\"38\":1,\"142\":1,\"244\":3,\"271\":1,\"272\":2,\"273\":2,\"328\":1,\"355\":1,\"356\":1,\"361\":1,\"362\":1,\"412\":1,\"488\":2,\"520\":1,\"742\":1,\"757\":1}}],[\"migration\",{\"1\":{\"27\":1}}],[\"meaning\",{\"1\":{\"633\":1}}],[\"means\",{\"1\":{\"213\":1,\"989\":1,\"1024\":1,\"1025\":1,\"1026\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1031\":1}}],[\"merge\",{\"1\":{\"626\":1}}],[\"mermaid\",{\"0\":{\"14\":1},\"1\":{\"27\":1}}],[\"method\",{\"1\":{\"576\":1}}],[\"meta\",{\"1\":{\"27\":1}}],[\"md\",{\"1\":{\"24\":1,\"27\":1}}],[\"说明\",{\"0\":{\"11\":1,\"31\":1,\"32\":1,\"762\":1,\"763\":1}}],[\"服务器即可解决\",{\"1\":{\"113\":1}}],[\"服务器\",{\"0\":{\"80\":1},\"1\":{\"9\":1}}],[\"在右侧维护最大的区间\",{\"1\":{\"755\":1}}],[\"在归并排序中合并两已升序排序的子数组过程中\",{\"1\":{\"755\":1}}],[\"在检测到可能存在的第二次递减时\",{\"1\":{\"723\":1}}],[\"在遍历检查时记录是否已有一次递减发生\",{\"1\":{\"723\":1}}],[\"在遍历数组的每个元素时\",{\"1\":{\"702\":1}}],[\"在遍历过程中若发现某邮箱已经遍历过\",{\"1\":{\"624\":1}}],[\"在保持回文前提下\",{\"1\":{\"681\":1}}],[\"在转至正确组合过程中不可遇到\",{\"1\":{\"642\":1}}],[\"在时间为t时\",{\"1\":{\"605\":1}}],[\"在并查集中用parent\",{\"1\":{\"593\":1}}],[\"在不断联合新变量的过程中就同时进行类似重量并查集的路径压缩\",{\"1\":{\"592\":1}}],[\"在最后一次调用结束之前\",{\"1\":{\"574\":1}}],[\"在吃饭和思考之间一直交替下去\",{\"1\":{\"567\":1}}],[\"在大多情况下\",{\"1\":{\"519\":1}}],[\"在实现树状数组时应与在原数组的基础上向右整体错开一格\",{\"1\":{\"440\":1}}],[\"在没必要用线段树的情景下\",{\"1\":{\"439\":1}}],[\"在给定的文本中寻找\",{\"1\":{\"435\":1}}],[\"在迭代过程中更改起始节点的父节点后无需维护初始父节点和依次经过的父节点的重量\",{\"1\":{\"431\":1}}],[\"在将两节点合并至同一集合时\",{\"1\":{\"427\":1}}],[\"在具体运用时经常需要依照实际情况判断栈内到底是存元素值本身还是存其索引\",{\"1\":{\"423\":1}}],[\"在各片段内遍历字符的同时基于之前的统计将片段末尾往后推\",{\"1\":{\"392\":1}}],[\"在一条环路上有n个加油站\",{\"1\":{\"377\":1}}],[\"在每次更新最远距离之后\",{\"1\":{\"372\":1}}],[\"在每间房仅可偷一次且不偷直接相连的房屋前提下\",{\"1\":{\"216\":1}}],[\"在每间房仅可偷一次且不偷相连的房屋前提下\",{\"1\":{\"208\":1}}],[\"在任何时候最多只能持有一股股票\",{\"1\":{\"331\":1}}],[\"在任意层高扔鸡蛋\",{\"1\":{\"250\":1}}],[\"在开始处理每天的各笔交易前\",{\"1\":{\"327\":1}}],[\"在更新二维\",{\"1\":{\"292\":1}}],[\"在求取过程中直接返回最先满足允许楼高不小于给定值的操作次数即可\",{\"1\":{\"254\":1}}],[\"在回溯时添加的话\",{\"1\":{\"181\":1}}],[\"在回溯全过程中维护动态变化的数组\",{\"1\":{\"154\":1}}],[\"在存在此类点的前提下\",{\"1\":{\"180\":1}}],[\"在本题条件下\",{\"1\":{\"180\":1}}],[\"在必须将每段行程都完成一遍且仅可完成一遍的条件下\",{\"1\":{\"176\":1}}],[\"在选择元素加入全排列时\",{\"1\":{\"154\":1}}],[\"在同层遍历时保证对于多个重复的字符\",{\"1\":{\"147\":1}}],[\"在路由器的\",{\"1\":{\"119\":1}}],[\"在系统设置里换个\",{\"1\":{\"113\":1}}],[\"在安装\",{\"1\":{\"63\":1}}],[\"在此\",{\"1\":{\"49\":1}}],[\"在进行稍长的查找时就会明显过长\",{\"1\":{\"40\":1}}],[\"在网上看到的\",{\"1\":{\"36\":1}}],[\"在\",{\"1\":{\"8\":1,\"50\":1,\"63\":1,\"71\":1,\"93\":1}}],[\"功能\",{\"1\":{\"8\":1,\"27\":1}}],[\"pid\",{\"1\":{\"798\":1}}],[\"pickrightfork\",{\"1\":{\"568\":1,\"570\":1,\"576\":2}}],[\"pickleftfork\",{\"1\":{\"568\":1,\"570\":1,\"576\":2}}],[\"p\",{\"1\":{\"711\":3,\"868\":1,\"880\":1,\"890\":1,\"934\":2,\"936\":1,\"1005\":1}}],[\"position\",{\"1\":{\"633\":1}}],[\"populated\",{\"1\":{\"976\":1}}],[\"pop\",{\"1\":{\"418\":1,\"424\":1}}],[\"pointsi​=\",{\"1\":{\"402\":1}}],[\"points\",{\"1\":{\"402\":1,\"406\":6}}],[\"pollfirst\",{\"1\":{\"418\":1}}],[\"polllast\",{\"1\":{\"418\":1}}],[\"poll\",{\"1\":{\"193\":1,\"418\":1,\"616\":1,\"647\":1,\"661\":1,\"788\":1}}],[\"python\",{\"1\":{\"102\":2}}],[\"philosopher\",{\"1\":{\"568\":1,\"569\":1,\"576\":3}}],[\"php\",{\"1\":{\"95\":1,\"96\":1}}],[\"photo\",{\"1\":{\"27\":1}}],[\"pending\",{\"1\":{\"927\":1}}],[\"peek\",{\"1\":{\"418\":1,\"424\":1}}],[\"peeklast\",{\"1\":{\"418\":1}}],[\"peekfirst\",{\"1\":{\"418\":2}}],[\"perform\",{\"1\":{\"873\":1,\"875\":1,\"1063\":2}}],[\"person\",{\"1\":{\"626\":5}}],[\"permute\",{\"1\":{\"156\":1}}],[\"permutation\",{\"1\":{\"148\":1}}],[\"perl5\",{\"1\":{\"70\":1,\"71\":3,\"74\":3,\"75\":1,\"76\":1}}],[\"perl\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"76\":2}}],[\"people\",{\"1\":{\"27\":1,\"711\":3}}],[\"pdf\",{\"0\":{\"62\":1},\"1\":{\"63\":1,\"64\":1,\"65\":1}}],[\"proxy=$proxy\",{\"1\":{\"105\":1}}],[\"proxy=192\",{\"1\":{\"103\":1}}],[\"proxy=yes\",{\"1\":{\"103\":1,\"105\":1}}],[\"prices\",{\"1\":{\"301\":1,\"302\":1,\"303\":1,\"304\":5,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"315\":8,\"321\":1,\"322\":1,\"324\":1,\"327\":1,\"328\":10,\"335\":1,\"337\":1,\"339\":5}}],[\"priorityqueue<character>>\",{\"1\":{\"616\":1}}],[\"priorityqueue<>\",{\"1\":{\"193\":1,\"616\":1}}],[\"priorityqueue<string>\",{\"1\":{\"193\":2}}],[\"priorityqueue<string>>\",{\"1\":{\"193\":1}}],[\"private\",{\"1\":{\"94\":1,\"129\":1,\"136\":3,\"142\":4,\"148\":4,\"156\":3,\"165\":7,\"173\":6,\"193\":3,\"213\":1,\"221\":1,\"418\":2,\"435\":2,\"437\":3,\"497\":2,\"562\":4,\"576\":2,\"585\":1,\"594\":4,\"602\":3,\"610\":2,\"616\":3,\"626\":3,\"633\":4,\"647\":1,\"653\":7,\"682\":1}}],[\"printf\",{\"1\":{\"800\":1}}],[\"printfizzbuzz\",{\"1\":{\"562\":3}}],[\"printfizz\",{\"1\":{\"562\":3}}],[\"printstacktrace\",{\"1\":{\"562\":4}}],[\"println\",{\"1\":{\"562\":4}}],[\"printnumber\",{\"1\":{\"562\":3}}],[\"printbuzz\",{\"1\":{\"562\":3}}],[\"print\",{\"1\":{\"43\":1,\"562\":4}}],[\"pre\",{\"1\":{\"406\":3,\"976\":1}}],[\"premin\",{\"1\":{\"244\":4}}],[\"premax\",{\"1\":{\"244\":4}}],[\"previous\",{\"1\":{\"213\":2,\"809\":1,\"810\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1,\"823\":1,\"846\":1,\"859\":1,\"1010\":1,\"1037\":1}}],[\"presentation\",{\"1\":{\"27\":1}}],[\"prefix\",{\"1\":{\"27\":20,\"437\":6}}],[\"place\",{\"1\":{\"27\":1,\"915\":1}}],[\"plugin\",{\"0\":{\"1012\":1},\"1\":{\"27\":2}}],[\"plugins\",{\"1\":{\"27\":3}}],[\"pwa\",{\"1\":{\"27\":2}}],[\"putrightfork\",{\"1\":{\"568\":1,\"572\":1,\"576\":2}}],[\"putleftfork\",{\"1\":{\"568\":1,\"572\":1,\"576\":2}}],[\"put\",{\"1\":{\"530\":1,\"626\":1,\"934\":1,\"967\":1,\"968\":1,\"978\":1}}],[\"public\",{\"1\":{\"129\":1,\"136\":1,\"142\":1,\"148\":1,\"156\":1,\"165\":1,\"173\":1,\"193\":1,\"205\":1,\"213\":1,\"221\":1,\"231\":1,\"244\":1,\"255\":1,\"262\":1,\"273\":1,\"284\":1,\"294\":1,\"304\":1,\"315\":1,\"328\":1,\"339\":1,\"346\":1,\"356\":1,\"362\":1,\"374\":1,\"387\":1,\"393\":1,\"406\":2,\"412\":1,\"418\":4,\"424\":1,\"435\":2,\"437\":4,\"520\":1,\"530\":1,\"544\":1,\"562\":14,\"576\":2,\"585\":1,\"594\":4,\"602\":2,\"610\":1,\"616\":1,\"626\":1,\"633\":1,\"647\":1,\"653\":1,\"661\":1,\"676\":1,\"682\":1,\"689\":1,\"703\":1,\"711\":2,\"724\":1,\"731\":1,\"742\":1,\"749\":1,\"757\":1}}],[\"pure\",{\"1\":{\"27\":1}}],[\"push\",{\"1\":{\"8\":1,\"418\":1,\"424\":1}}],[\"pasting\",{\"0\":{\"928\":1},\"1\":{\"935\":1}}],[\"pasted\",{\"1\":{\"934\":1}}],[\"paste\",{\"1\":{\"868\":1,\"880\":1,\"951\":1}}],[\"password\",{\"1\":{\"43\":2,\"116\":2}}],[\"pacificatlantic\",{\"1\":{\"653\":1}}],[\"paci\",{\"1\":{\"653\":5}}],[\"pair\",{\"1\":{\"616\":3}}],[\"pairs\",{\"1\":{\"616\":2}}],[\"paragraph\",{\"1\":{\"828\":1,\"829\":1,\"890\":1,\"1019\":1}}],[\"parent\",{\"1\":{\"585\":8,\"594\":12,\"602\":11,\"610\":11,\"616\":13,\"626\":11,\"633\":11}}],[\"partitionlabels\",{\"1\":{\"393\":1}}],[\"partnet\",{\"1\":{\"103\":1}}],[\"patterns\",{\"1\":{\"1032\":1}}],[\"pattern\",{\"1\":{\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"953\":1,\"982\":1,\"984\":3}}],[\"pat\",{\"1\":{\"435\":14}}],[\"path\",{\"1\":{\"136\":4,\"142\":6,\"148\":6,\"184\":1,\"188\":1,\"190\":1,\"192\":1,\"954\":1,\"1000\":1,\"1003\":1}}],[\"palette\",{\"1\":{\"27\":1}}],[\"page\",{\"1\":{\"27\":4,\"832\":1,\"833\":1,\"834\":1,\"835\":1}}],[\"pages\",{\"1\":{\"8\":1}}],[\"pnpm\",{\"1\":{\"6\":1}}],[\"+2d\",{\"1\":{\"971\":1,\"972\":1}}],[\"+10d\",{\"1\":{\"974\":1}}],[\"+1\",{\"1\":{\"355\":1,\"361\":1}}],[\"+nums\",{\"1\":{\"211\":1}}],[\"+=\",{\"1\":{\"205\":1,\"244\":1,\"387\":2,\"495\":2,\"633\":1,\"749\":3,\"757\":2}}],[\"++end\",{\"1\":{\"757\":1}}],[\"++n2\",{\"1\":{\"703\":1}}],[\"++n1\",{\"1\":{\"703\":1}}],[\"++left\",{\"1\":{\"689\":1,\"742\":2}}],[\"++r\",{\"1\":{\"731\":1}}],[\"++right\",{\"1\":{\"682\":1}}],[\"++res\",{\"1\":{\"661\":1,\"731\":1}}],[\"++y\",{\"1\":{\"493\":1}}],[\"++j\",{\"1\":{\"255\":1,\"284\":1,\"294\":1,\"328\":1,\"435\":1,\"602\":1,\"610\":1,\"626\":1,\"633\":3,\"653\":1}}],[\"++k\",{\"1\":{\"205\":1,\"676\":1}}],[\"++c2\",{\"1\":{\"703\":2}}],[\"++c1\",{\"1\":{\"703\":2}}],[\"++count\",{\"1\":{\"647\":1}}],[\"++cur\",{\"1\":{\"544\":1,\"562\":4}}],[\"++curlen\",{\"1\":{\"544\":1}}],[\"++cnt\",{\"1\":{\"374\":1,\"406\":1,\"412\":1,\"488\":1}}],[\"++c\",{\"1\":{\"165\":1,\"435\":1}}],[\"++i\",{\"1\":{\"129\":1,\"136\":1,\"148\":2,\"156\":1,\"165\":2,\"173\":1,\"205\":1,\"213\":1,\"255\":2,\"284\":2,\"304\":1,\"328\":1,\"374\":1,\"387\":1,\"393\":2,\"406\":1,\"435\":1,\"585\":1,\"594\":3,\"602\":2,\"610\":3,\"616\":3,\"626\":2,\"633\":3,\"647\":1,\"653\":3,\"682\":1,\"724\":1,\"731\":1,\"757\":3}}],[\"+\",{\"0\":{\"61\":1,\"106\":1},\"1\":{\"8\":1,\"67\":1,\"129\":1,\"136\":1,\"142\":2,\"156\":1,\"165\":3,\"173\":3,\"205\":1,\"213\":1,\"221\":3,\"231\":1,\"244\":2,\"253\":2,\"255\":4,\"262\":4,\"271\":1,\"272\":3,\"273\":4,\"283\":1,\"284\":9,\"290\":1,\"294\":4,\"301\":1,\"304\":1,\"311\":1,\"313\":1,\"315\":2,\"322\":1,\"328\":2,\"337\":1,\"339\":1,\"346\":2,\"355\":1,\"356\":3,\"361\":1,\"362\":3,\"374\":1,\"387\":1,\"393\":2,\"435\":2,\"488\":2,\"489\":1,\"544\":1,\"562\":4,\"576\":1,\"585\":1,\"602\":1,\"610\":4,\"633\":10,\"647\":5,\"653\":2,\"661\":3,\"676\":2,\"682\":3,\"689\":3,\"724\":3,\"730\":1,\"731\":1,\"749\":2,\"755\":1,\"757\":3,\"832\":1,\"833\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"858\":1,\"907\":1,\"917\":1,\"918\":1,\"919\":1,\"923\":1,\"1007\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1031\":1}}],[\"用双指针从两端相向逼近并维护最大储水量\",{\"1\":{\"740\":1}}],[\"用weight\",{\"1\":{\"593\":1}}],[\"用最少数量的箭引爆气球\",{\"0\":{\"400\":1}}],[\"用动态规划解决\",{\"1\":{\"267\":1}}],[\"用于给各变量编号\",{\"1\":{\"594\":1}}],[\"用于快速查询某元素是否属于某集合\",{\"1\":{\"426\":1}}],[\"用于剪枝\",{\"1\":{\"173\":1}}],[\"用于在完成全部填充之后快速结束程序\",{\"1\":{\"172\":1}}],[\"用全排列的回溯模版也挺容易解\",{\"1\":{\"153\":1}}],[\"用前先测速\",{\"1\":{\"113\":1}}],[\"用的很可能不是同一个解释器\",{\"1\":{\"102\":1}}],[\"用\",{\"1\":{\"8\":1,\"72\":1,\"446\":1}}],[\"发布\",{\"1\":{\"7\":1}}],[\"d>\",{\"1\":{\"1062\":1}}],[\"ds\",{\"1\":{\"1013\":1,\"1014\":1,\"1015\":1}}],[\"duplicate\",{\"1\":{\"936\":1}}],[\"dh\",{\"1\":{\"900\":1}}],[\"dlp\",{\"1\":{\"938\":1}}],[\"dl\",{\"1\":{\"899\":1}}],[\"ddp\",{\"1\":{\"937\":2}}],[\"dd\",{\"1\":{\"874\":1}}],[\"d0\",{\"1\":{\"863\":1}}],[\"dt\",{\"1\":{\"863\":1}}],[\"df\",{\"1\":{\"863\":1}}],[\"dfs\",{\"1\":{\"136\":3,\"142\":4,\"148\":3,\"173\":3,\"180\":3,\"181\":1,\"182\":1,\"193\":3,\"218\":2,\"221\":4,\"446\":1,\"653\":6,\"659\":1}}],[\"d5j\",{\"1\":{\"863\":1}}],[\"d\",{\"1\":{\"610\":3,\"633\":3,\"653\":3,\"661\":3,\"832\":1,\"863\":1,\"867\":1,\"876\":1,\"941\":1,\"967\":1,\"973\":1,\"976\":1}}],[\"dj\",{\"1\":{\"589\":2}}],[\"dmodp\",{\"1\":{\"510\":1}}],[\"dmz\",{\"1\":{\"114\":2,\"115\":2,\"119\":2}}],[\"dp\",{\"1\":{\"211\":3,\"226\":1,\"227\":1,\"229\":1,\"231\":5,\"253\":2,\"255\":6,\"262\":7,\"271\":3,\"272\":6,\"273\":10,\"279\":1,\"280\":1,\"282\":1,\"283\":2,\"284\":8,\"290\":1,\"291\":2,\"292\":1,\"294\":8,\"309\":1,\"346\":6,\"355\":2,\"356\":8,\"361\":2,\"362\":8,\"435\":8,\"472\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":2}}],[\"d2\",{\"1\":{\"165\":4}}],[\"d1\",{\"1\":{\"165\":4}}],[\"dirs\",{\"1\":{\"610\":2,\"633\":2,\"653\":2,\"661\":2}}],[\"diningphilosophers\",{\"1\":{\"576\":2}}],[\"different\",{\"1\":{\"935\":1}}],[\"diff\",{\"1\":{\"495\":3}}],[\"dijkstra\",{\"0\":{\"486\":1}}],[\"diag2\",{\"1\":{\"165\":5}}],[\"diag\",{\"1\":{\"165\":2}}],[\"diag1\",{\"1\":{\"165\":5}}],[\"div\",{\"1\":{\"156\":6}}],[\"dispatch\",{\"1\":{\"75\":1}}],[\"discover\",{\"1\":{\"27\":1}}],[\"dist目录下生成静态网页文件\",{\"1\":{\"9\":1}}],[\"dynamic\",{\"1\":{\"156\":5}}],[\"dns\",{\"1\":{\"113\":4}}],[\"downwards\",{\"1\":{\"828\":1}}],[\"down\",{\"1\":{\"633\":1,\"832\":1,\"834\":1,\"836\":1,\"1064\":1}}],[\"download\",{\"1\":{\"103\":1}}],[\"double\",{\"1\":{\"594\":8,\"873\":1}}],[\"documents\",{\"1\":{\"88\":1}}],[\"documentroot\",{\"1\":{\"88\":1,\"98\":1}}],[\"docs\",{\"0\":{\"1069\":1},\"1\":{\"6\":1,\"9\":1}}],[\"dab\",{\"1\":{\"897\":2}}],[\"dap\",{\"1\":{\"897\":1}}],[\"da\",{\"1\":{\"897\":5}}],[\"das\",{\"1\":{\"897\":1}}],[\"daw\",{\"1\":{\"897\":1}}],[\"data\",{\"1\":{\"647\":7}}],[\"dataset\",{\"1\":{\"103\":1}}],[\"darkmode\",{\"1\":{\"27\":1}}],[\"danger\",{\"1\":{\"16\":1}}],[\"d35400\",{\"1\":{\"25\":1}}],[\"describe\",{\"1\":{\"984\":1}}],[\"description\",{\"1\":{\"122\":1,\"131\":1,\"138\":1,\"144\":1,\"150\":1,\"158\":1,\"167\":1,\"175\":1,\"197\":1,\"207\":1,\"215\":1,\"223\":1,\"233\":1,\"237\":1,\"246\":1,\"258\":1,\"264\":1,\"275\":1,\"286\":1,\"297\":1,\"306\":1,\"317\":1,\"330\":1,\"342\":1,\"348\":1,\"352\":1,\"358\":1,\"365\":1,\"369\":1,\"376\":1,\"389\":1,\"395\":1,\"401\":1,\"408\":1,\"514\":1,\"523\":1,\"532\":1,\"536\":1,\"540\":1,\"546\":1,\"550\":1,\"554\":1,\"564\":1,\"579\":1,\"587\":1,\"596\":1,\"604\":1,\"612\":1,\"618\":1,\"628\":1,\"636\":1,\"640\":1,\"649\":1,\"655\":1,\"663\":1,\"669\":1,\"678\":1,\"684\":1,\"691\":1,\"697\":1,\"705\":1,\"713\":1,\"717\":1,\"726\":1,\"733\":1,\"737\":1,\"744\":1,\"751\":1,\"759\":1}}],[\"deadends\",{\"1\":{\"647\":2}}],[\"delete\",{\"1\":{\"876\":1,\"917\":1,\"918\":1,\"919\":1,\"945\":1,\"967\":1,\"968\":1,\"1014\":1}}],[\"deletecharat\",{\"1\":{\"148\":1}}],[\"delta\",{\"1\":{\"602\":1,\"633\":2}}],[\"debug\",{\"1\":{\"562\":1}}],[\"deque\",{\"1\":{\"418\":10}}],[\"deque<integer>\",{\"1\":{\"418\":1,\"424\":1}}],[\"default\",{\"1\":{\"942\":1}}],[\"define\",{\"1\":{\"983\":1}}],[\"definesidebarconfig\",{\"1\":{\"27\":2}}],[\"definition\",{\"1\":{\"851\":1,\"852\":1}}],[\"def\",{\"1\":{\"43\":2}}],[\"deploy\",{\"1\":{\"27\":1}}],[\"demo\",{\"1\":{\"27\":3}}],[\"details\",{\"1\":{\"16\":1,\"48\":1}}],[\"dev\",{\"1\":{\"6\":1}}],[\"框架\",{\"1\":{\"3\":1}}]],\"serializationVersion\":2}";